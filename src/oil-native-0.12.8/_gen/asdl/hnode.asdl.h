// _gen/asdl/hnode.asdl.h is generated by asdl_main.py

#ifndef HNODE_ASDL
#define HNODE_ASDL

#include <cstdint>

#include "mycpp/runtime.h"
namespace hnode_asdl {

class field;
class hnode_t;

enum class color_e {
  TypeName = 1,
  StringConst = 2,
  OtherConst = 3,
  UserType = 4,
  External = 5,
};
typedef color_e color_t;

namespace hnode_e {
  const int Record = 1;
  const int Array = 2;
  const int Leaf = 3;
  const int External = 4;
};

class hnode_t {
 protected:
  hnode_t() {}
 public:
  int tag_() const {
    return reinterpret_cast<const Obj*>(this)->type_tag_;
  }
  DISALLOW_COPY_AND_ASSIGN(hnode_t)
};

class hnode__Record : public hnode_t {
 public:
  hnode__Record();
  hnode__Record(Str* node_type, List<field*>* fields, bool abbrev, Str* left,
                Str* right, List<hnode_t*>* unnamed_fields);

  OBJ_HEADER();
  Str* node_type;
  List<field*>* fields;
  bool abbrev;
  Str* left;
  Str* right;
  List<hnode_t*>* unnamed_fields;

  DISALLOW_COPY_AND_ASSIGN(hnode__Record)
};

constexpr uint16_t maskof_hnode__Record() {
  return
    maskbit(offsetof(hnode__Record, node_type))
  | maskbit(offsetof(hnode__Record, fields))
  | maskbit(offsetof(hnode__Record, left))
  | maskbit(offsetof(hnode__Record, right))
  | maskbit(offsetof(hnode__Record, unnamed_fields));
}

inline hnode__Record::hnode__Record()
    : heap_tag_(Tag::FixedSize),
      type_tag_(static_cast<uint16_t>(hnode_e::Record)),
      field_mask_(maskof_hnode__Record()),
      node_type(StrFromC("")),
      fields(NewList<field*>()),
      abbrev(false),
      left(StrFromC("")),
      right(StrFromC("")),
      unnamed_fields(NewList<hnode_t*>()) {
}

inline hnode__Record::hnode__Record(Str* node_type, List<field*>* fields, bool
                                    abbrev, Str* left, Str* right,
                                    List<hnode_t*>* unnamed_fields)
    : heap_tag_(Tag::FixedSize),
      type_tag_(static_cast<uint16_t>(hnode_e::Record)),
      field_mask_(maskof_hnode__Record()),
      node_type(node_type),
      fields(fields),
      abbrev(abbrev),
      left(left),
      right(right),
      unnamed_fields(unnamed_fields) {
}

class hnode__Array : public hnode_t {
 public:
  hnode__Array();
  hnode__Array(List<hnode_t*>* children);

  OBJ_HEADER();
  List<hnode_t*>* children;

  DISALLOW_COPY_AND_ASSIGN(hnode__Array)
};

constexpr uint16_t maskof_hnode__Array() {
  return
    maskbit(offsetof(hnode__Array, children));
}

inline hnode__Array::hnode__Array()
    : heap_tag_(Tag::FixedSize),
      type_tag_(static_cast<uint16_t>(hnode_e::Array)),
      field_mask_(maskof_hnode__Array()),
      children(NewList<hnode_t*>()) {
}

inline hnode__Array::hnode__Array(List<hnode_t*>* children)
    : heap_tag_(Tag::FixedSize),
      type_tag_(static_cast<uint16_t>(hnode_e::Array)),
      field_mask_(maskof_hnode__Array()),
      children(children) {
}

class hnode__Leaf : public hnode_t {
 public:
  hnode__Leaf();
  hnode__Leaf(Str* s, color_t color);

  OBJ_HEADER();
  Str* s;
  color_t color;

  DISALLOW_COPY_AND_ASSIGN(hnode__Leaf)
};

constexpr uint16_t maskof_hnode__Leaf() {
  return
    maskbit(offsetof(hnode__Leaf, s));
}

inline hnode__Leaf::hnode__Leaf()
    : heap_tag_(Tag::FixedSize),
      type_tag_(static_cast<uint16_t>(hnode_e::Leaf)),
      field_mask_(maskof_hnode__Leaf()),
      s(StrFromC("")),
      color(color_e::TypeName) {
}

inline hnode__Leaf::hnode__Leaf(Str* s, color_t color)
    : heap_tag_(Tag::FixedSize),
      type_tag_(static_cast<uint16_t>(hnode_e::Leaf)),
      field_mask_(maskof_hnode__Leaf()),
      s(s),
      color(color) {
}

class hnode__External : public hnode_t {
 public:
  hnode__External();
  hnode__External(void* obj);

  OBJ_HEADER();
  void* obj;

  DISALLOW_COPY_AND_ASSIGN(hnode__External)
};

constexpr uint16_t maskof_hnode__External() {
  return
    maskbit(offsetof(hnode__External, obj));
}

inline hnode__External::hnode__External()
    : heap_tag_(Tag::FixedSize),
      type_tag_(static_cast<uint16_t>(hnode_e::External)),
      field_mask_(maskof_hnode__External()),
      obj(nullptr) {
}

inline hnode__External::hnode__External(void* obj)
    : heap_tag_(Tag::FixedSize),
      type_tag_(static_cast<uint16_t>(hnode_e::External)),
      field_mask_(maskof_hnode__External()),
      obj(obj) {
}

namespace hnode {
  typedef hnode__Record Record;
  typedef hnode__Array Array;
  typedef hnode__Leaf Leaf;
  typedef hnode__External External;
}

class field {
 public:
  field();
  field(Str* name, hnode_t* val);

  OBJ_HEADER();
  Str* name;
  hnode_t* val;

  DISALLOW_COPY_AND_ASSIGN(field)
};

constexpr uint16_t maskof_field() {
  return
    maskbit(offsetof(field, name))
  | maskbit(offsetof(field, val));
}

inline field::field()
    : heap_tag_(Tag::FixedSize),
      type_tag_(200),
      field_mask_(maskof_field()),
      name(StrFromC("")),
      val(nullptr) {
}

inline field::field(Str* name, hnode_t* val)
    : heap_tag_(Tag::FixedSize),
      type_tag_(200),
      field_mask_(maskof_field()),
      name(name),
      val(val) {
}


}  // namespace hnode_asdl

#endif  // HNODE_ASDL
