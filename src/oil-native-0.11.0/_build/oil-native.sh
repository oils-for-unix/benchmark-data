#!/usr/bin/env bash
#
# _build/oil-native.sh - generated by build/native_graph.py
#
# Usage
#   _build/oil-native COMPILER? VARIANT? SKIP_REBUILD?
#
#   COMPILER: 'cxx' for system compiler, or 'clang' [default cxx]
#   VARIANT: 'dbg' or 'opt' [default dbg]
#   SKIP_REBUILD: if non-empty, checks if the output exists before building
#
# Could run with /bin/sh, but use bash for now, bceause dash has bad errors messages!
#!/bin/sh

. build/native-steps.sh

main() {
  ### Compile oil-native into _bin/$compiler-$variant-sh/ (not with ninja)

  local compiler=${1:-cxx}   # default is system compiler
  local variant=${2:-opt}    # default is optimized build
  local skip_rebuild=${3:-}  # if the output exists, skip build'

  local out=_bin/$compiler-$variant-sh/osh_eval
  if test -n "$skip_rebuild" && test -f "$out"; then
    echo
    echo "$0: SKIPPING build because $out exists"
    echo
    return
  fi

  echo
  echo "$0: Building oil-native: $out"
  echo

  mkdir -p "_build/obj/$compiler-$variant-sh" "_bin/$compiler-$variant-sh"

  compile_one "$compiler" "$variant" \
    cpp/core_pyos.cc "_build/obj/$compiler-$variant-sh/core_pyos.o"
  compile_one "$compiler" "$variant" \
    cpp/core_pyutil.cc "_build/obj/$compiler-$variant-sh/core_pyutil.o"
  compile_one "$compiler" "$variant" \
    cpp/frontend_flag_spec.cc "_build/obj/$compiler-$variant-sh/frontend_flag_spec.o"
  compile_one "$compiler" "$variant" \
    cpp/frontend_match.cc "_build/obj/$compiler-$variant-sh/frontend_match.o"
  compile_one "$compiler" "$variant" \
    cpp/frontend_tdop.cc "_build/obj/$compiler-$variant-sh/frontend_tdop.o"
  compile_one "$compiler" "$variant" \
    cpp/osh_arith_parse.cc "_build/obj/$compiler-$variant-sh/osh_arith_parse.o"
  compile_one "$compiler" "$variant" \
    cpp/osh_bool_stat.cc "_build/obj/$compiler-$variant-sh/osh_bool_stat.o"
  compile_one "$compiler" "$variant" \
    cpp/pgen2_parse.cc "_build/obj/$compiler-$variant-sh/pgen2_parse.o"
  compile_one "$compiler" "$variant" \
    cpp/pylib_os_path.cc "_build/obj/$compiler-$variant-sh/pylib_os_path.o"
  compile_one "$compiler" "$variant" \
    cpp/dumb_alloc.cc "_build/obj/$compiler-$variant-sh/dumb_alloc.o"
  compile_one "$compiler" "$variant" \
    cpp/fcntl_.cc "_build/obj/$compiler-$variant-sh/fcntl_.o"
  compile_one "$compiler" "$variant" \
    cpp/posix.cc "_build/obj/$compiler-$variant-sh/posix.o"
  compile_one "$compiler" "$variant" \
    cpp/signal_.cc "_build/obj/$compiler-$variant-sh/signal_.o"
  compile_one "$compiler" "$variant" \
    cpp/libc.cc "_build/obj/$compiler-$variant-sh/libc.o"
  compile_one "$compiler" "$variant" \
    _build/cpp/arg_types.cc "_build/obj/$compiler-$variant-sh/arg_types.o"
  compile_one "$compiler" "$variant" \
    _build/cpp/arith_parse.cc "_build/obj/$compiler-$variant-sh/arith_parse.o"
  compile_one "$compiler" "$variant" \
    _build/cpp/consts.cc "_build/obj/$compiler-$variant-sh/consts.o"
  compile_one "$compiler" "$variant" \
    _build/cpp/osh_eval.cc "_build/obj/$compiler-$variant-sh/osh_eval.o"
  compile_one "$compiler" "$variant" \
    _build/cpp/runtime_asdl.cc "_build/obj/$compiler-$variant-sh/runtime_asdl.o"
  compile_one "$compiler" "$variant" \
    _build/cpp/syntax_asdl.cc "_build/obj/$compiler-$variant-sh/syntax_asdl.o"
  compile_one "$compiler" "$variant" \
    _build/cpp/hnode_asdl.cc "_build/obj/$compiler-$variant-sh/hnode_asdl.o"
  compile_one "$compiler" "$variant" \
    _build/cpp/id_kind_asdl.cc "_build/obj/$compiler-$variant-sh/id_kind_asdl.o"
  compile_one "$compiler" "$variant" \
    mycpp/gc_heap.cc "_build/obj/$compiler-$variant-sh/gc_heap.o"
  compile_one "$compiler" "$variant" \
    mycpp/mylib.cc "_build/obj/$compiler-$variant-sh/mylib.o"

  link "$compiler" "$variant" "$out" \
    "_build/obj/$compiler-$variant-sh/core_pyos.o" \
    "_build/obj/$compiler-$variant-sh/core_pyutil.o" \
    "_build/obj/$compiler-$variant-sh/frontend_flag_spec.o" \
    "_build/obj/$compiler-$variant-sh/frontend_match.o" \
    "_build/obj/$compiler-$variant-sh/frontend_tdop.o" \
    "_build/obj/$compiler-$variant-sh/osh_arith_parse.o" \
    "_build/obj/$compiler-$variant-sh/osh_bool_stat.o" \
    "_build/obj/$compiler-$variant-sh/pgen2_parse.o" \
    "_build/obj/$compiler-$variant-sh/pylib_os_path.o" \
    "_build/obj/$compiler-$variant-sh/dumb_alloc.o" \
    "_build/obj/$compiler-$variant-sh/fcntl_.o" \
    "_build/obj/$compiler-$variant-sh/posix.o" \
    "_build/obj/$compiler-$variant-sh/signal_.o" \
    "_build/obj/$compiler-$variant-sh/libc.o" \
    "_build/obj/$compiler-$variant-sh/arg_types.o" \
    "_build/obj/$compiler-$variant-sh/arith_parse.o" \
    "_build/obj/$compiler-$variant-sh/consts.o" \
    "_build/obj/$compiler-$variant-sh/osh_eval.o" \
    "_build/obj/$compiler-$variant-sh/runtime_asdl.o" \
    "_build/obj/$compiler-$variant-sh/syntax_asdl.o" \
    "_build/obj/$compiler-$variant-sh/hnode_asdl.o" \
    "_build/obj/$compiler-$variant-sh/id_kind_asdl.o" \
    "_build/obj/$compiler-$variant-sh/gc_heap.o" \
    "_build/obj/$compiler-$variant-sh/mylib.o"

  if test "$variant" = opt; then
    strip -o "$out.stripped" "$out"
  fi
}

main "$@"

