#!/usr/bin/env python2
"""
build/native_graph.py - the oil-native build

Runtime options:

  CXXFLAGS     Additional flags to pass to the C++ compiler

Directory structure:

_build/   # input source
  cpp/
    osh_eval.{h,cc}
  obj/
    # The obj folder is a 2-tuple {cxx,clang}-{dbg,opt,asan ...}

    cxx-asan/
      osh_eval.o
      osh_eval.d     # dependency file
      osh_eval.json  # when -ftime-trace is passed
    cxx-dbg/
    cxx-opt/

_bin/   # output binaries
  # The _bin folder is a 3-tuple
  {cxx,clang}-{dbg,opt,asan ...}-{,together}
    osh_eval

  cxx-opt/
    osh_eval
    osh_eval.stripped              # The end user binary
    osh_eval.symbols
  cxx-opt-together/                # Do we still need this?
    osh_eval
    osh_eval.{stripped,symbols}

TODO

- Could fold bloaty reports in here?  See metrics/native-code.sh
  - Takes both dbg and opt.  Depends on the symbolized, optimized file.
  - make bloaty report along with total size in the continuous build?
    - although it depends on R, and we don't have Clang
- Port test/cpp-unit.sh logic here
  - declare dependencies, could use same pattern as mycpp/build_graph.py
"""

from __future__ import print_function

import os
import sys

sys.path.append('vendor')
import ninja_syntax


def log(msg, *args):
  if args:
    msg = msg % args
  print(msg, file=sys.stderr)


DEPS_CC = [
    'cpp/core_pyos.cc',
    'cpp/core_pyutil.cc',
    'cpp/frontend_flag_spec.cc',
    'cpp/frontend_match.cc',
    'cpp/frontend_tdop.cc',
    'cpp/osh_arith_parse.cc',
    'cpp/osh_bool_stat.cc',
    'cpp/pgen2_parse.cc',
    'cpp/pylib_os_path.cc',
    'cpp/dumb_alloc.cc',
    'cpp/fcntl_.cc',
    'cpp/posix.cc',
    'cpp/signal_.cc',
    'cpp/libc.cc',

    # generated
    '_build/cpp/arg_types.cc',
    '_build/cpp/arith_parse.cc',
    '_build/cpp/consts.cc',
    '_build/cpp/osh_eval.cc',

    # ASDL generated
    '_build/cpp/runtime_asdl.cc',
    '_build/cpp/syntax_asdl.cc',
    '_build/cpp/hnode_asdl.cc',
    '_build/cpp/id_kind_asdl.cc',
]

# Note: also appears in mycpp/build_graph.py
GC_RUNTIME = [
    'mycpp/gc_heap.cc',
    'mycpp/mylib2.cc',
    'mycpp/my_runtime.cc',
]

OLD_RUNTIME = [
    'mycpp/gc_heap.cc',  # We need this?
    'mycpp/mylib.cc',
]


# IMPLICIT dependency of most rules.  Implicit means it doesn't show up in $in.
BUILD_NINJA = 'build.ninja'


def NinjaGraph(n):

  n.comment('Build oil-native')
  n.comment('Generated by %s.' % os.path.basename(__file__))
  n.newline()

  n.rule('native_graph',
         # multiple outputs
         command='build/native_graph.py',
         description='native_graph')
  n.newline()

  # 'together'b uild
  n.rule('compile_and_link',
         # multiple outputs
         command='build/native-steps.sh compile_and_link $compiler $variant $out $in',
         description='compile_and_link $compiler $variant $out $in')
  n.newline()

  # Compile one translation unit
  n.rule('compile_one',
         command='build/native-steps.sh compile_one $compiler $variant $in $out $out.d',
         depfile='$out.d',
         description='compile_one $compiler $variant $in $out')
  n.newline()

  # Link objects together
  n.rule('link',
         command='build/native-steps.sh link $compiler $variant $out $in',
         description='link $compiler $variant $out $in')
  n.newline()

  # 1 input and 2 outputs
  n.rule('strip',
         command='build/native-steps.sh strip_ $in $out',
         description='strip $in $out')
  n.newline()

  if 0:
    phony = {
        'osh-eval': [],  # build all osh-eval
        'strip': [],
    }

  binaries = []

  # all rules need an edge to the self
  n.build(BUILD_NINJA, 'native_graph', ['build/native_graph.py'])

  n.newline()

  for compiler in ['cxx', 'clang']:
    for variant in [
        'dbg', 'opt', 'asan', 'alloclog', 'malloc', 'uftrace',
        # leave out tcmalloc since it requires system libs to be installed
        # 'tcmalloc'
        ]:

      ninja_vars = [('compiler', compiler), ('variant', variant)]

      #
      # TOGETHER
      #

      bin_together = '_bin/%s-%s-together/osh_eval' % (compiler, variant)
      binaries.append(bin_together)

      sources = DEPS_CC + OLD_RUNTIME
      n.build(bin_together, 'compile_and_link',
              sources, implicit=[BUILD_NINJA], variables=ninja_vars)
      n.newline()

      #
      # SEPARATE: Compile objects
      #

      objects = []
      for src in sources:
        # e.g. _build/obj/dbg/posix.o
        base_name, _ = os.path.splitext(os.path.basename(src))

        obj = '_build/obj/%s-%s/%s.o' % (compiler, variant, base_name)
        objects.append(obj)

        n.build(obj, 'compile_one', [src], implicit=[BUILD_NINJA],
                variables=ninja_vars)
        n.newline()

      bin_separate = '_bin/%s-%s/osh_eval' % (compiler, variant)
      binaries.append(bin_separate)

      #
      # SEPARATE: Link objects into binary
      #

      n.build(bin_separate, 'link', objects, implicit=[BUILD_NINJA], variables=ninja_vars)
      n.newline()

      # Strip the .opt binary
      if variant == 'opt':
        for b in [bin_together, bin_separate]:
          stripped = b + '.stripped'
          symbols = b + '.symbols'
          n.build([stripped, symbols], 'strip', [b], implicit=[BUILD_NINJA])
          n.newline()

          binaries.append(stripped)

  n.default(['_bin/cxx-dbg/osh_eval'])

  # All groups
  n.build(['all'], 'phony', binaries)


def ShellFunctions(f):
  """
  Generate a shell script that invokes the same function that build.ninja does
  """
  print('. build/native-steps.sh', file=f)
  print('', file=f)

  print('main() {', file=f)
  print('  ### Compile oil-native into _bin/$compiler-$variant-sh/ (not with ninja)', file=f)
  print('', file=f)

  print('  local compiler=${1:-cxx}  # default is system compiler', file=f)
  print('  local variant=${2:-opt}   # default is optimized build', file=f)
  print('', file=f)

  print('  mkdir -p "_build/obj/$compiler-$variant-sh" "_bin/$compiler-$variant-sh"', file=f)
  print('', file=f)

  objects = []
  for src in DEPS_CC + OLD_RUNTIME:
    # e.g. _build/obj/dbg/posix.o
    base_name, _ = os.path.splitext(os.path.basename(src))

    obj_quoted = '"_build/obj/$compiler-$variant-sh/%s.o"' % base_name
    objects.append(obj_quoted)

    print('  compile_one "$compiler" "$variant" \\', file=f)
    print('    %s %s' % (src, obj_quoted), file=f)

  print('', file=f)

  b = '_bin/$compiler-$variant-sh/osh_eval'
  # note: can't have spaces in filenames
  print('  link "$compiler" "$variant" "%s" \\' % b, file=f)
  # put each object on its own line, and indent by 4
  print('    %s' % (' \\\n    '.join(objects)), file=f)
  print('', file=f)

  # Strip opt binary
  # TODO: provide a way for the user to get symbols?

  print('  if test "$variant" = opt; then', file=f)
  print('    strip -o "%s.stripped" "%s"' % (b, b), file=f)
  print('  fi', file=f)

  print('}', file=f)
  print('', file=f)

  # TODO: print better help
  print('main "$@"', file=f)


def main(argv):
  try:
    action = argv[1]
  except IndexError:
    action = 'ninja'

  if action == 'ninja':
    n = ninja_syntax.Writer(open(BUILD_NINJA, 'w'))
    NinjaGraph(n)
    log('%s: Wrote %s', argv[0], BUILD_NINJA)

  elif action == 'shell':
    out = '_build/oil-native.sh'
    with open(out, 'w') as f:
      if 0:
        # Run with /bin/sh to avoid a bash/Oil bootstrapping problem
        print('#!/bin/sh', file=f)
      else:
        # Use bash for now, bceause dash has HORRIBLE errors messages!
        print('#!/usr/bin/env bash', file=f)

      print('', file=f)

      print('# Generated by %s' % argv[0], file=f)
      print('', file=f)

      ShellFunctions(f)
    log('%s: Wrote %s', argv[0], out)

  else:
    raise RuntimeError('Invalid action %r' % action)


if __name__ == '__main__':
  try:
    main(sys.argv)
  except RuntimeError as e:
    print('FATAL: %s' % e, file=sys.stderr)
    sys.exit(1)
