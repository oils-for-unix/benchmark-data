// _gen/core/runtime.asdl.h is generated by asdl_main.py

#ifndef RUNTIME_ASDL
#define RUNTIME_ASDL

#include <cstdint>

#include "mycpp/runtime.h"
#include "_gen/asdl/hnode.asdl.h"
using hnode_asdl::hnode_t;

#include "_gen/frontend/id_kind.asdl.h"
using id_kind_asdl::Id_t;

namespace syntax_asdl { class loc_t; class Token; class expr_t; class word_t; class command_t; class CompoundWord; class DoubleQuoted; class ArgList; class re_t; class redir_loc_t; class proc_sig_t; }

namespace runtime_asdl {

// use struct instead of namespace so 'using' works consistently
#define ASDL_NAMES struct

class IntBox;
class AssignArg;
class cmd_value_t;
class part_value_t;
class value_t;
class a_index_t;
class VTestPlace;
class VarSubState;
class Cell;
class lvalue_t;
class redirect_arg_t;
class RedirValue;
class Proc;
class StatusArray;
class CommandStatus;
class wait_status_t;
class trace_t;
class HayNode;

ASDL_NAMES cmd_value_e {
  enum no_name {
  Argv = 1,
  Assign = 2,
  };
};

const char* cmd_value_str(int tag);

class cmd_value_t {
 protected:
  cmd_value_t() {
  }
 public:
  int tag() const {
    return ObjHeader::FromObject(this)->type_tag;
  }
  hnode_t* PrettyTree();
  DISALLOW_COPY_AND_ASSIGN(cmd_value_t)
};

class cmd_value__Argv : public cmd_value_t {
 public:
  cmd_value__Argv(List<Str*>* argv, List<syntax_asdl::CompoundWord*>* arg_locs,
                  syntax_asdl::ArgList* typed_args)
      : argv(argv),
        arg_locs(arg_locs),
        typed_args(typed_args) {
  }

  static cmd_value__Argv* CreateNull(bool alloc_lists = false) { 
    return Alloc<cmd_value__Argv>(alloc_lists ? Alloc<List<Str*>>() : nullptr,
                                  alloc_lists ?
                                  Alloc<List<syntax_asdl::CompoundWord*>>() :
                                  nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(cmd_value_e::Argv), 3);
  }

  List<Str*>* argv;
  List<syntax_asdl::CompoundWord*>* arg_locs;
  syntax_asdl::ArgList* typed_args;

  DISALLOW_COPY_AND_ASSIGN(cmd_value__Argv)
};

class cmd_value__Assign : public cmd_value_t {
 public:
  cmd_value__Assign(int builtin_id, List<Str*>* argv,
                    List<syntax_asdl::CompoundWord*>* arg_locs,
                    List<AssignArg*>* pairs)
      : argv(argv),
        arg_locs(arg_locs),
        pairs(pairs),
        builtin_id(builtin_id) {
  }

  static cmd_value__Assign* CreateNull(bool alloc_lists = false) { 
    return Alloc<cmd_value__Assign>(-1, alloc_lists ? Alloc<List<Str*>>() :
                                    nullptr, alloc_lists ?
                                    Alloc<List<syntax_asdl::CompoundWord*>>() :
                                    nullptr, alloc_lists ?
                                    Alloc<List<AssignArg*>>() : nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(cmd_value_e::Assign), 3);
  }

  List<Str*>* argv;
  List<syntax_asdl::CompoundWord*>* arg_locs;
  List<AssignArg*>* pairs;
  int builtin_id;

  DISALLOW_COPY_AND_ASSIGN(cmd_value__Assign)
};

ASDL_NAMES cmd_value {
  typedef cmd_value__Argv Argv;
  typedef cmd_value__Assign Assign;
};

ASDL_NAMES part_value_e {
  enum no_name {
  String = 1,
  Array = 2,
  ExtGlob = 3,
  };
};

const char* part_value_str(int tag);

class part_value_t {
 protected:
  part_value_t() {
  }
 public:
  int tag() const {
    return ObjHeader::FromObject(this)->type_tag;
  }
  hnode_t* PrettyTree();
  DISALLOW_COPY_AND_ASSIGN(part_value_t)
};

class part_value__String : public part_value_t {
 public:
  part_value__String(Str* s, bool quoted, bool do_split)
      : s(s),
        quoted(quoted),
        do_split(do_split) {
  }

  static part_value__String* CreateNull(bool alloc_lists = false) { 
    return Alloc<part_value__String>(kEmptyString, false, false);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(part_value_e::String), 1);
  }

  Str* s;
  bool quoted;
  bool do_split;

  DISALLOW_COPY_AND_ASSIGN(part_value__String)
};

class part_value__Array : public part_value_t {
 public:
  part_value__Array(List<Str*>* strs)
      : strs(strs) {
  }

  static part_value__Array* CreateNull(bool alloc_lists = false) { 
    return Alloc<part_value__Array>(alloc_lists ? Alloc<List<Str*>>() :
                                    nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(part_value_e::Array), 1);
  }

  List<Str*>* strs;

  DISALLOW_COPY_AND_ASSIGN(part_value__Array)
};

class part_value__ExtGlob : public part_value_t {
 public:
  part_value__ExtGlob(List<part_value_t*>* part_vals)
      : part_vals(part_vals) {
  }

  static part_value__ExtGlob* CreateNull(bool alloc_lists = false) { 
    return Alloc<part_value__ExtGlob>(alloc_lists ?
                                      Alloc<List<part_value_t*>>() : nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(part_value_e::ExtGlob),
                                1);
  }

  List<part_value_t*>* part_vals;

  DISALLOW_COPY_AND_ASSIGN(part_value__ExtGlob)
};

ASDL_NAMES part_value {
  typedef part_value__String String;
  typedef part_value__Array Array;
  typedef part_value__ExtGlob ExtGlob;
};

enum class coerced_e {
  Int = 1,
  Float = 2,
  Neither = 3,
};
typedef coerced_e coerced_t;

const char* coerced_str(coerced_e tag);

ASDL_NAMES value_e {
  enum no_name {
  Undef = 1,
  Str = 2,
  BashArray = 3,
  BashAssoc = 4,
  Null = 5,
  Bool = 6,
  Int = 7,
  Float = 8,
  List = 9,
  Dict = 10,
  Eggex = 11,
  Expr = 12,
  Template = 13,
  Block = 14,
  Func = 15,
  BoundFunc = 16,
  Proc = 17,
  Slice = 18,
  Range = 19,
  };
};

const char* value_str(int tag);

class value_t {
 protected:
  value_t() {
  }
 public:
  int tag() const {
    return ObjHeader::FromObject(this)->type_tag;
  }
  hnode_t* PrettyTree();
  DISALLOW_COPY_AND_ASSIGN(value_t)
};

class value__Undef : public value_t {
 public:
  value__Undef() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Undef), 0);
  }


  DISALLOW_COPY_AND_ASSIGN(value__Undef)
};

class value__Str : public value_t {
 public:
  value__Str(Str* s)
      : s(s) {
  }

  static value__Str* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Str>(kEmptyString);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Str), 1);
  }

  Str* s;

  DISALLOW_COPY_AND_ASSIGN(value__Str)
};

class value__BashArray : public value_t {
 public:
  value__BashArray(List<Str*>* strs)
      : strs(strs) {
  }

  static value__BashArray* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__BashArray>(alloc_lists ? Alloc<List<Str*>>() : nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::BashArray), 1);
  }

  List<Str*>* strs;

  DISALLOW_COPY_AND_ASSIGN(value__BashArray)
};

class value__BashAssoc : public value_t {
 public:
  value__BashAssoc(Dict<Str*, Str*>* d)
      : d(d) {
  }

  static value__BashAssoc* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__BashAssoc>(nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::BashAssoc), 1);
  }

  Dict<Str*, Str*>* d;

  DISALLOW_COPY_AND_ASSIGN(value__BashAssoc)
};

class value__Null : public value_t {
 public:
  value__Null() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Null), 0);
  }


  DISALLOW_COPY_AND_ASSIGN(value__Null)
};

class value__Bool : public value_t {
 public:
  value__Bool(bool b)
      : b(b) {
  }

  static value__Bool* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Bool>(false);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Bool), 0);
  }

  bool b;

  DISALLOW_COPY_AND_ASSIGN(value__Bool)
};

class value__Int : public value_t {
 public:
  value__Int(int i)
      : i(i) {
  }

  static value__Int* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Int>(-1);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Int), 0);
  }

  int i;

  DISALLOW_COPY_AND_ASSIGN(value__Int)
};

class value__Float : public value_t {
 public:
  value__Float(double f)
      : f(f) {
  }

  static value__Float* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Float>(0.0);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Float), 0);
  }

  double f;

  DISALLOW_COPY_AND_ASSIGN(value__Float)
};

class value__List : public value_t {
 public:
  value__List(List<value_t*>* items)
      : items(items) {
  }

  static value__List* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__List>(alloc_lists ? Alloc<List<value_t*>>() : nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::List), 1);
  }

  List<value_t*>* items;

  DISALLOW_COPY_AND_ASSIGN(value__List)
};

class value__Dict : public value_t {
 public:
  value__Dict(Dict<Str*, value_t*>* d)
      : d(d) {
  }

  static value__Dict* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Dict>(nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Dict), 1);
  }

  Dict<Str*, value_t*>* d;

  DISALLOW_COPY_AND_ASSIGN(value__Dict)
};

class value__Eggex : public value_t {
 public:
  value__Eggex(syntax_asdl::re_t* expr, Str* as_ere)
      : expr(expr),
        as_ere(as_ere) {
  }

  static value__Eggex* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Eggex>(nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Eggex), 2);
  }

  syntax_asdl::re_t* expr;
  Str* as_ere;

  DISALLOW_COPY_AND_ASSIGN(value__Eggex)
};

class value__Expr : public value_t {
 public:
  value__Expr(syntax_asdl::expr_t* e)
      : e(e) {
  }

  static value__Expr* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Expr>(nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Expr), 1);
  }

  syntax_asdl::expr_t* e;

  DISALLOW_COPY_AND_ASSIGN(value__Expr)
};

class value__Template : public value_t {
 public:
  value__Template(syntax_asdl::DoubleQuoted* dq)
      : dq(dq) {
  }

  static value__Template* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Template>(nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Template), 1);
  }

  syntax_asdl::DoubleQuoted* dq;

  DISALLOW_COPY_AND_ASSIGN(value__Template)
};

class value__Block : public value_t {
 public:
  value__Block(syntax_asdl::command_t* body)
      : body(body) {
  }

  static value__Block* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Block>(nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Block), 1);
  }

  syntax_asdl::command_t* body;

  DISALLOW_COPY_AND_ASSIGN(value__Block)
};

class value__Func : public value_t {
 public:
  value__Func(void* callable)
      : callable(callable) {
  }

  static value__Func* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Func>(nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Func), 1);
  }

  void* callable;

  DISALLOW_COPY_AND_ASSIGN(value__Func)
};

class value__BoundFunc : public value_t {
 public:
  value__BoundFunc(value_t* me, void* callable)
      : me(me),
        callable(callable) {
  }

  static value__BoundFunc* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__BoundFunc>(nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::BoundFunc), 2);
  }

  value_t* me;
  void* callable;

  DISALLOW_COPY_AND_ASSIGN(value__BoundFunc)
};

class value__Proc : public value_t {
 public:
  value__Proc(void* p)
      : p(p) {
  }

  static value__Proc* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Proc>(nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Proc), 1);
  }

  void* p;

  DISALLOW_COPY_AND_ASSIGN(value__Proc)
};

class value__Slice : public value_t {
 public:
  value__Slice(IntBox* lower, IntBox* upper)
      : lower(lower),
        upper(upper) {
  }

  static value__Slice* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Slice>(nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Slice), 2);
  }

  IntBox* lower;
  IntBox* upper;

  DISALLOW_COPY_AND_ASSIGN(value__Slice)
};

class value__Range : public value_t {
 public:
  value__Range(int lower, int upper)
      : lower(lower),
        upper(upper) {
  }

  static value__Range* CreateNull(bool alloc_lists = false) { 
    return Alloc<value__Range>(-1, -1);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(value_e::Range), 0);
  }

  int lower;
  int upper;

  DISALLOW_COPY_AND_ASSIGN(value__Range)
};

extern GcGlobal<value__Undef> gvalue__Undef;
extern GcGlobal<value__Null> gvalue__Null;
ASDL_NAMES value {
  static value__Undef* Undef;
  typedef value__Str Str;
  typedef value__BashArray BashArray;
  typedef value__BashAssoc BashAssoc;
  static value__Null* Null;
  typedef value__Bool Bool;
  typedef value__Int Int;
  typedef value__Float Float;
  typedef value__List List;
  typedef value__Dict Dict;
  typedef value__Eggex Eggex;
  typedef value__Expr Expr;
  typedef value__Template Template;
  typedef value__Block Block;
  typedef value__Func Func;
  typedef value__BoundFunc BoundFunc;
  typedef value__Proc Proc;
  typedef value__Slice Slice;
  typedef value__Range Range;
};

ASDL_NAMES a_index_e {
  enum no_name {
  Str = 1,
  Int = 2,
  };
};

const char* a_index_str(int tag);

class a_index_t {
 protected:
  a_index_t() {
  }
 public:
  int tag() const {
    return ObjHeader::FromObject(this)->type_tag;
  }
  hnode_t* PrettyTree();
  DISALLOW_COPY_AND_ASSIGN(a_index_t)
};

class a_index__Str : public a_index_t {
 public:
  a_index__Str(Str* s)
      : s(s) {
  }

  static a_index__Str* CreateNull(bool alloc_lists = false) { 
    return Alloc<a_index__Str>(kEmptyString);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(a_index_e::Str), 1);
  }

  Str* s;

  DISALLOW_COPY_AND_ASSIGN(a_index__Str)
};

class a_index__Int : public a_index_t {
 public:
  a_index__Int(int i)
      : i(i) {
  }

  static a_index__Int* CreateNull(bool alloc_lists = false) { 
    return Alloc<a_index__Int>(-1);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(a_index_e::Int), 0);
  }

  int i;

  DISALLOW_COPY_AND_ASSIGN(a_index__Int)
};

ASDL_NAMES a_index {
  typedef a_index__Str Str;
  typedef a_index__Int Int;
};

enum class scope_e {
  Parent = 1,
  Shopt = 2,
  Dynamic = 3,
  LocalOrGlobal = 4,
  LocalOnly = 5,
  GlobalOnly = 6,
};
typedef scope_e scope_t;

const char* scope_str(scope_e tag);

ASDL_NAMES lvalue_e {
  enum no_name {
  Named = 1,
  Indexed = 2,
  Keyed = 3,
  ObjIndex = 4,
  };
};

const char* lvalue_str(int tag);

class lvalue_t {
 protected:
  lvalue_t() {
  }
 public:
  int tag() const {
    return ObjHeader::FromObject(this)->type_tag;
  }
  hnode_t* PrettyTree();
  DISALLOW_COPY_AND_ASSIGN(lvalue_t)
};

class lvalue__Named : public lvalue_t {
 public:
  lvalue__Named(Str* name, syntax_asdl::loc_t* blame_loc)
      : name(name),
        blame_loc(blame_loc) {
  }

  static lvalue__Named* CreateNull(bool alloc_lists = false) { 
    return Alloc<lvalue__Named>(kEmptyString, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(lvalue_e::Named), 2);
  }

  Str* name;
  syntax_asdl::loc_t* blame_loc;

  DISALLOW_COPY_AND_ASSIGN(lvalue__Named)
};

class lvalue__Indexed : public lvalue_t {
 public:
  lvalue__Indexed(Str* name, int index, syntax_asdl::loc_t* blame_loc)
      : name(name),
        blame_loc(blame_loc),
        index(index) {
  }

  static lvalue__Indexed* CreateNull(bool alloc_lists = false) { 
    return Alloc<lvalue__Indexed>(kEmptyString, -1, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(lvalue_e::Indexed), 2);
  }

  Str* name;
  syntax_asdl::loc_t* blame_loc;
  int index;

  DISALLOW_COPY_AND_ASSIGN(lvalue__Indexed)
};

class lvalue__Keyed : public lvalue_t {
 public:
  lvalue__Keyed(Str* name, Str* key, syntax_asdl::loc_t* blame_loc)
      : name(name),
        key(key),
        blame_loc(blame_loc) {
  }

  static lvalue__Keyed* CreateNull(bool alloc_lists = false) { 
    return Alloc<lvalue__Keyed>(kEmptyString, kEmptyString, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(lvalue_e::Keyed), 3);
  }

  Str* name;
  Str* key;
  syntax_asdl::loc_t* blame_loc;

  DISALLOW_COPY_AND_ASSIGN(lvalue__Keyed)
};

class lvalue__ObjIndex : public lvalue_t {
 public:
  lvalue__ObjIndex(value_t* obj, value_t* index)
      : obj(obj),
        index(index) {
  }

  static lvalue__ObjIndex* CreateNull(bool alloc_lists = false) { 
    return Alloc<lvalue__ObjIndex>(nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(lvalue_e::ObjIndex), 2);
  }

  value_t* obj;
  value_t* index;

  DISALLOW_COPY_AND_ASSIGN(lvalue__ObjIndex)
};

ASDL_NAMES lvalue {
  typedef lvalue__Named Named;
  typedef lvalue__Indexed Indexed;
  typedef lvalue__Keyed Keyed;
  typedef lvalue__ObjIndex ObjIndex;
};

ASDL_NAMES redirect_arg_e {
  enum no_name {
  Path = 1,
  CopyFd = 2,
  MoveFd = 3,
  CloseFd = 4,
  HereDoc = 5,
  };
};

const char* redirect_arg_str(int tag);

class redirect_arg_t {
 protected:
  redirect_arg_t() {
  }
 public:
  int tag() const {
    return ObjHeader::FromObject(this)->type_tag;
  }
  hnode_t* PrettyTree();
  DISALLOW_COPY_AND_ASSIGN(redirect_arg_t)
};

class redirect_arg__Path : public redirect_arg_t {
 public:
  redirect_arg__Path(Str* filename)
      : filename(filename) {
  }

  static redirect_arg__Path* CreateNull(bool alloc_lists = false) { 
    return Alloc<redirect_arg__Path>(kEmptyString);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(redirect_arg_e::Path), 1);
  }

  Str* filename;

  DISALLOW_COPY_AND_ASSIGN(redirect_arg__Path)
};

class redirect_arg__CopyFd : public redirect_arg_t {
 public:
  redirect_arg__CopyFd(int target_fd)
      : target_fd(target_fd) {
  }

  static redirect_arg__CopyFd* CreateNull(bool alloc_lists = false) { 
    return Alloc<redirect_arg__CopyFd>(-1);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(redirect_arg_e::CopyFd),
                                0);
  }

  int target_fd;

  DISALLOW_COPY_AND_ASSIGN(redirect_arg__CopyFd)
};

class redirect_arg__MoveFd : public redirect_arg_t {
 public:
  redirect_arg__MoveFd(int target_fd)
      : target_fd(target_fd) {
  }

  static redirect_arg__MoveFd* CreateNull(bool alloc_lists = false) { 
    return Alloc<redirect_arg__MoveFd>(-1);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(redirect_arg_e::MoveFd),
                                0);
  }

  int target_fd;

  DISALLOW_COPY_AND_ASSIGN(redirect_arg__MoveFd)
};

class redirect_arg__CloseFd : public redirect_arg_t {
 public:
  redirect_arg__CloseFd() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(redirect_arg_e::CloseFd),
                                0);
  }


  DISALLOW_COPY_AND_ASSIGN(redirect_arg__CloseFd)
};

class redirect_arg__HereDoc : public redirect_arg_t {
 public:
  redirect_arg__HereDoc(Str* body)
      : body(body) {
  }

  static redirect_arg__HereDoc* CreateNull(bool alloc_lists = false) { 
    return Alloc<redirect_arg__HereDoc>(kEmptyString);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(redirect_arg_e::HereDoc),
                                1);
  }

  Str* body;

  DISALLOW_COPY_AND_ASSIGN(redirect_arg__HereDoc)
};

extern GcGlobal<redirect_arg__CloseFd> gredirect_arg__CloseFd;
ASDL_NAMES redirect_arg {
  typedef redirect_arg__Path Path;
  typedef redirect_arg__CopyFd CopyFd;
  typedef redirect_arg__MoveFd MoveFd;
  static redirect_arg__CloseFd* CloseFd;
  typedef redirect_arg__HereDoc HereDoc;
};

ASDL_NAMES wait_status_e {
  enum no_name {
  Proc = 1,
  Pipeline = 2,
  Cancelled = 3,
  };
};

const char* wait_status_str(int tag);

class wait_status_t {
 protected:
  wait_status_t() {
  }
 public:
  int tag() const {
    return ObjHeader::FromObject(this)->type_tag;
  }
  hnode_t* PrettyTree();
  DISALLOW_COPY_AND_ASSIGN(wait_status_t)
};

class wait_status__Proc : public wait_status_t {
 public:
  wait_status__Proc(int code)
      : code(code) {
  }

  static wait_status__Proc* CreateNull(bool alloc_lists = false) { 
    return Alloc<wait_status__Proc>(-1);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(wait_status_e::Proc), 0);
  }

  int code;

  DISALLOW_COPY_AND_ASSIGN(wait_status__Proc)
};

class wait_status__Pipeline : public wait_status_t {
 public:
  wait_status__Pipeline(List<int>* codes)
      : codes(codes) {
  }

  static wait_status__Pipeline* CreateNull(bool alloc_lists = false) { 
    return Alloc<wait_status__Pipeline>(alloc_lists ? Alloc<List<int>>() :
                                        nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(wait_status_e::Pipeline),
                                1);
  }

  List<int>* codes;

  DISALLOW_COPY_AND_ASSIGN(wait_status__Pipeline)
};

class wait_status__Cancelled : public wait_status_t {
 public:
  wait_status__Cancelled(int sig_num)
      : sig_num(sig_num) {
  }

  static wait_status__Cancelled* CreateNull(bool alloc_lists = false) { 
    return Alloc<wait_status__Cancelled>(-1);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return
ObjHeader::AsdlClass(static_cast<uint16_t>(wait_status_e::Cancelled), 0);
  }

  int sig_num;

  DISALLOW_COPY_AND_ASSIGN(wait_status__Cancelled)
};

ASDL_NAMES wait_status {
  typedef wait_status__Proc Proc;
  typedef wait_status__Pipeline Pipeline;
  typedef wait_status__Cancelled Cancelled;
};

enum class flow_e {
  Nothing = 1,
  Break = 2,
  Raise = 3,
};
typedef flow_e flow_t;

const char* flow_str(flow_e tag);

enum class span_e {
  Black = 1,
  Delim = 2,
  Backslash = 3,
};
typedef span_e span_t;

const char* span_str(span_e tag);

ASDL_NAMES emit_i {
  enum no_name {
  Part = 1,
  Delim = 2,
  Empty = 3,
  Escape = 4,
  Nothing = 5,
  ARRAY_SIZE = 6,
  };
};

const char* emit_str(int tag);

typedef int emit_t;

ASDL_NAMES state_i {
  enum no_name {
  Invalid = 1,
  Start = 2,
  DE_White1 = 3,
  DE_Gray = 4,
  DE_White2 = 5,
  Black = 6,
  Backslash = 7,
  Done = 8,
  ARRAY_SIZE = 9,
  };
};

const char* state_str(int tag);

typedef int state_t;

ASDL_NAMES char_kind_i {
  enum no_name {
  DE_White = 1,
  DE_Gray = 2,
  Black = 3,
  Backslash = 4,
  Sentinel = 5,
  ARRAY_SIZE = 6,
  };
};

const char* char_kind_str(int tag);

typedef int char_kind_t;

enum class job_state_e {
  Running = 1,
  Done = 2,
  Stopped = 3,
};
typedef job_state_e job_state_t;

const char* job_state_str(job_state_e tag);

enum class flag_type_e {
  Bool = 1,
  Int = 2,
  Float = 3,
  Str = 4,
};
typedef flag_type_e flag_type_t;

const char* flag_type_str(flag_type_e tag);

ASDL_NAMES trace_e {
  enum no_name {
  External = 1,
  CommandSub = 2,
  ForkWait = 3,
  Fork = 4,
  PipelinePart = 5,
  ProcessSub = 6,
  HereDoc = 7,
  };
};

const char* trace_str(int tag);

class trace_t {
 protected:
  trace_t() {
  }
 public:
  int tag() const {
    return ObjHeader::FromObject(this)->type_tag;
  }
  hnode_t* PrettyTree();
  DISALLOW_COPY_AND_ASSIGN(trace_t)
};

class trace__External : public trace_t {
 public:
  trace__External(List<Str*>* argv)
      : argv(argv) {
  }

  static trace__External* CreateNull(bool alloc_lists = false) { 
    return Alloc<trace__External>(alloc_lists ? Alloc<List<Str*>>() : nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(trace_e::External), 1);
  }

  List<Str*>* argv;

  DISALLOW_COPY_AND_ASSIGN(trace__External)
};

class trace__CommandSub : public trace_t {
 public:
  trace__CommandSub() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(trace_e::CommandSub), 0);
  }


  DISALLOW_COPY_AND_ASSIGN(trace__CommandSub)
};

class trace__ForkWait : public trace_t {
 public:
  trace__ForkWait() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(trace_e::ForkWait), 0);
  }


  DISALLOW_COPY_AND_ASSIGN(trace__ForkWait)
};

class trace__Fork : public trace_t {
 public:
  trace__Fork() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(trace_e::Fork), 0);
  }


  DISALLOW_COPY_AND_ASSIGN(trace__Fork)
};

class trace__PipelinePart : public trace_t {
 public:
  trace__PipelinePart() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(trace_e::PipelinePart),
                                0);
  }


  DISALLOW_COPY_AND_ASSIGN(trace__PipelinePart)
};

class trace__ProcessSub : public trace_t {
 public:
  trace__ProcessSub() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(trace_e::ProcessSub), 0);
  }


  DISALLOW_COPY_AND_ASSIGN(trace__ProcessSub)
};

class trace__HereDoc : public trace_t {
 public:
  trace__HereDoc() {}

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(static_cast<uint16_t>(trace_e::HereDoc), 0);
  }


  DISALLOW_COPY_AND_ASSIGN(trace__HereDoc)
};

extern GcGlobal<trace__CommandSub> gtrace__CommandSub;
extern GcGlobal<trace__ForkWait> gtrace__ForkWait;
extern GcGlobal<trace__Fork> gtrace__Fork;
extern GcGlobal<trace__PipelinePart> gtrace__PipelinePart;
extern GcGlobal<trace__ProcessSub> gtrace__ProcessSub;
extern GcGlobal<trace__HereDoc> gtrace__HereDoc;
ASDL_NAMES trace {
  typedef trace__External External;
  static trace__CommandSub* CommandSub;
  static trace__ForkWait* ForkWait;
  static trace__Fork* Fork;
  static trace__PipelinePart* PipelinePart;
  static trace__ProcessSub* ProcessSub;
  static trace__HereDoc* HereDoc;
};

enum class word_style_e {
  Expr = 1,
  Unquoted = 2,
  DQ = 3,
  SQ = 4,
};
typedef word_style_e word_style_t;

const char* word_style_str(word_style_e tag);

enum class comp_action_e {
  Other = 1,
  FileSystem = 2,
  BashFunc = 3,
};
typedef comp_action_e comp_action_t;

const char* comp_action_str(comp_action_e tag);

class IntBox {
 public:
  IntBox(int i)
      : i(i) {
  }

  static IntBox* CreateNull(bool alloc_lists = false) { 
    return Alloc<IntBox>(-1);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(64, 0);
  }

  int i;

  DISALLOW_COPY_AND_ASSIGN(IntBox)
};

class AssignArg {
 public:
  AssignArg(Str* var_name, value_t* rval, bool plus_eq, syntax_asdl::word_t*
            blame_word)
      : var_name(var_name),
        rval(rval),
        blame_word(blame_word),
        plus_eq(plus_eq) {
  }

  static AssignArg* CreateNull(bool alloc_lists = false) { 
    return Alloc<AssignArg>(kEmptyString, nullptr, false, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(65, 3);
  }

  Str* var_name;
  value_t* rval;
  syntax_asdl::word_t* blame_word;
  bool plus_eq;

  DISALLOW_COPY_AND_ASSIGN(AssignArg)
};

class VTestPlace {
 public:
  VTestPlace(Str* name, a_index_t* index)
      : name(name),
        index(index) {
  }

  static VTestPlace* CreateNull(bool alloc_lists = false) { 
    return Alloc<VTestPlace>(nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(66, 2);
  }

  Str* name;
  a_index_t* index;

  DISALLOW_COPY_AND_ASSIGN(VTestPlace)
};

class VarSubState {
 public:
  VarSubState(bool join_array, bool is_type_query)
      : join_array(join_array),
        is_type_query(is_type_query) {
  }

  static VarSubState* CreateNull(bool alloc_lists = false) { 
    return Alloc<VarSubState>(false, false);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(67, 0);
  }

  bool join_array;
  bool is_type_query;

  DISALLOW_COPY_AND_ASSIGN(VarSubState)
};

class Cell {
 public:
  Cell(bool exported, bool readonly, bool nameref, value_t* val)
      : val(val),
        exported(exported),
        readonly(readonly),
        nameref(nameref) {
  }

  static Cell* CreateNull(bool alloc_lists = false) { 
    return Alloc<Cell>(false, false, false, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(68, 1);
  }

  value_t* val;
  bool exported;
  bool readonly;
  bool nameref;

  DISALLOW_COPY_AND_ASSIGN(Cell)
};

class RedirValue {
 public:
  RedirValue(Id_t op_id, syntax_asdl::loc_t* op_loc, syntax_asdl::redir_loc_t*
             loc, redirect_arg_t* arg)
      : op_loc(op_loc),
        loc(loc),
        arg(arg),
        op_id(op_id) {
  }

  static RedirValue* CreateNull(bool alloc_lists = false) { 
    return Alloc<RedirValue>(-1, nullptr, nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(69, 3);
  }

  syntax_asdl::loc_t* op_loc;
  syntax_asdl::redir_loc_t* loc;
  redirect_arg_t* arg;
  Id_t op_id;

  DISALLOW_COPY_AND_ASSIGN(RedirValue)
};

class Proc {
 public:
  Proc(Str* name, syntax_asdl::Token* name_tok, syntax_asdl::proc_sig_t* sig,
       syntax_asdl::command_t* body, List<value_t*>* defaults, bool
       dynamic_scope)
      : name(name),
        name_tok(name_tok),
        sig(sig),
        body(body),
        defaults(defaults),
        dynamic_scope(dynamic_scope) {
  }

  static Proc* CreateNull(bool alloc_lists = false) { 
    return Alloc<Proc>(kEmptyString, nullptr, nullptr, nullptr, alloc_lists ?
                       Alloc<List<value_t*>>() : nullptr, false);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(70, 5);
  }

  Str* name;
  syntax_asdl::Token* name_tok;
  syntax_asdl::proc_sig_t* sig;
  syntax_asdl::command_t* body;
  List<value_t*>* defaults;
  bool dynamic_scope;

  DISALLOW_COPY_AND_ASSIGN(Proc)
};

class StatusArray {
 public:
  StatusArray(List<int>* codes, List<syntax_asdl::loc_t*>* locs)
      : codes(codes),
        locs(locs) {
  }

  static StatusArray* CreateNull(bool alloc_lists = false) { 
    return Alloc<StatusArray>(nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(71, 2);
  }

  List<int>* codes;
  List<syntax_asdl::loc_t*>* locs;

  DISALLOW_COPY_AND_ASSIGN(StatusArray)
};

class CommandStatus {
 public:
  CommandStatus(bool check_errexit, bool show_code, bool pipe_negated,
                List<int>* pipe_status, List<syntax_asdl::loc_t*>* pipe_locs)
      : pipe_status(pipe_status),
        pipe_locs(pipe_locs),
        check_errexit(check_errexit),
        show_code(show_code),
        pipe_negated(pipe_negated) {
  }

  static CommandStatus* CreateNull(bool alloc_lists = false) { 
    return Alloc<CommandStatus>(false, false, false, nullptr, nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(72, 2);
  }

  List<int>* pipe_status;
  List<syntax_asdl::loc_t*>* pipe_locs;
  bool check_errexit;
  bool show_code;
  bool pipe_negated;

  DISALLOW_COPY_AND_ASSIGN(CommandStatus)
};

class HayNode {
 public:
  HayNode(Dict<Str*, HayNode*>* children)
      : children(children) {
  }

  static HayNode* CreateNull(bool alloc_lists = false) { 
    return Alloc<HayNode>(nullptr);
  }

  hnode_t* PrettyTree();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::AsdlClass(73, 1);
  }

  Dict<Str*, HayNode*>* children;

  DISALLOW_COPY_AND_ASSIGN(HayNode)
};


}  // namespace runtime_asdl

#endif  // RUNTIME_ASDL
