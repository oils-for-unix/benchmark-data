// oils_for_unix.cc: translated from Python by mycpp

// #include "_gen/bin/oils_for_unix.mycpp.h"

#include "cpp/preamble.h"
// BEGIN mycpp output

#include "mycpp/runtime.h"

GLOBAL_STR(str0, "(");
GLOBAL_STR(str1, ")");
GLOBAL_STR(str2, "_");
GLOBAL_STR(str3, "T");
GLOBAL_STR(str4, "F");
GLOBAL_STR(str5, "<ControlFlow %s %s>");
GLOBAL_STR(str6, "");
GLOBAL_STR(str7, "");
GLOBAL_STR(str8, "\n<html>\n  <head>\n     <title>oil AST</title>\n     <style>\n      .n { color: brown }\n      .s { font-weight: bold }\n      .o { color: darkgreen }\n     </style>\n  </head>\n  <body>\n    <pre>\n");
GLOBAL_STR(str9, "\n    </pre>\n  </body>\n</html>\n    ");
GLOBAL_STR(str10, "n");
GLOBAL_STR(str11, "s");
GLOBAL_STR(str12, "o");
GLOBAL_STR(str13, "o");
GLOBAL_STR(str14, "o");
GLOBAL_STR(str15, "<span class=\"%s\">");
GLOBAL_STR(str16, "</span>");
GLOBAL_STR(str17, " ");
GLOBAL_STR(str18, "\n");
GLOBAL_STR(str19, " ");
GLOBAL_STR(str20, "]");
GLOBAL_STR(str21, " ");
GLOBAL_STR(str22, " ");
GLOBAL_STR(str23, "\n");
GLOBAL_STR(str24, "\n");
GLOBAL_STR(str25, " ");
GLOBAL_STR(str26, "%s%s: [");
GLOBAL_STR(str27, "\n");
GLOBAL_STR(str28, "\n");
GLOBAL_STR(str29, "%s]");
GLOBAL_STR(str30, "%s%s: ");
GLOBAL_STR(str31, "\n");
GLOBAL_STR(str32, "\n");
GLOBAL_STR(str33, " ");
GLOBAL_STR(str34, "UNTYPED any");
GLOBAL_STR(str35, " ");
GLOBAL_STR(str36, " ");
GLOBAL_STR(str37, " %s:");
GLOBAL_STR(str38, "UNTYPED any");
GLOBAL_STR(str39, "[");
GLOBAL_STR(str40, " ");
GLOBAL_STR(str41, "]");
GLOBAL_STR(str42, "Running Oil in ---caper mode");
GLOBAL_STR(str43, "FANOS error: %s");
GLOBAL_STR(str44, "ERROR %s");
GLOBAL_STR(str45, "msg = %r");
GLOBAL_STR(str46, " ");
GLOBAL_STR(str47, "GETPID");
GLOBAL_STR(str48, "CHDIR");
GLOBAL_STR(str49, "SETENV");
GLOBAL_STR(str50, "MAIN");
GLOBAL_STR(str51, "TODO");
GLOBAL_STR(str52, "oils-for-unix");
GLOBAL_STR(str53, "oil");
GLOBAL_STR(str54, "Missing required applet name.");
GLOBAL_STR(str55, "-h");
GLOBAL_STR(str56, "--help");
GLOBAL_STR(str57, "bundle-usage");
GLOBAL_STR(str58, "-V");
GLOBAL_STR(str59, "--version");
GLOBAL_STR(str60, "---caper");
GLOBAL_STR(str61, "-");
GLOBAL_STR(str62, "ysh");
GLOBAL_STR(str63, "oil");
GLOBAL_STR(str64, "oil");
GLOBAL_STR(str65, "sh");
GLOBAL_STR(str66, "osh");
GLOBAL_STR(str67, "oshc");
GLOBAL_STR(str68, "oshc not translated");
GLOBAL_STR(str69, "oshc usage error: %s");
GLOBAL_STR(str70, "tea");
GLOBAL_STR(str71, "tea not translated");
GLOBAL_STR(str72, "true");
GLOBAL_STR(str73, "false");
GLOBAL_STR(str74, "readlink");
GLOBAL_STR(str75, "readlink not translated");
GLOBAL_STR(str76, "Invalid applet %r");
GLOBAL_STR(str77, "oil: %s");
GLOBAL_STR(str78, "FATAL RuntimeError: %s");
GLOBAL_STR(str79, "");
GLOBAL_STR(str80, "osh I/O error (main): %s");
GLOBAL_STR(str81, " ");
GLOBAL_STR(str82, "");
GLOBAL_STR(str83, "");
GLOBAL_STR(str84, "");
GLOBAL_STR(str85, "\u001b[0;0m");
GLOBAL_STR(str86, "\u001b[1m");
GLOBAL_STR(str87, "\u001b[4m");
GLOBAL_STR(str88, "\u001b[7m");
GLOBAL_STR(str89, "\u001b[31m");
GLOBAL_STR(str90, "\u001b[32m");
GLOBAL_STR(str91, "\u001b[33m");
GLOBAL_STR(str92, "\u001b[34m");
GLOBAL_STR(str93, "");
GLOBAL_STR(str94, "\u0001");
GLOBAL_STR(str95, "\u0002");
GLOBAL_STR(str96, "\n");
GLOBAL_STR(str97, "\n");
GLOBAL_STR(str98, " %s\n");
GLOBAL_STR(str99, " ... and %d more\n");
GLOBAL_STR(str100, "%-");
GLOBAL_STR(str101, "s");
GLOBAL_STR(str102, " ");
GLOBAL_STR(str103, "\n");
GLOBAL_STR(str104, "\n");
GLOBAL_STR(str105, "%");
GLOBAL_STR(str106, "s");
GLOBAL_STR(str107, "... and %d more\n");
GLOBAL_STR(str108, " %-");
GLOBAL_STR(str109, "s ");
GLOBAL_STR(str110, "%s");
GLOBAL_STR(str111, "\n");
GLOBAL_STR(str112, "");
GLOBAL_STR(str113, " %s\n");
GLOBAL_STR(str114, " ... ");
GLOBAL_STR(str115, "%");
GLOBAL_STR(str116, "s");
GLOBAL_STR(str117, "... and %d more\n");
GLOBAL_STR(str118, "\u001b[%dA");
GLOBAL_STR(str119, "\u001b[%dC");
GLOBAL_STR(str120, "DISPLAY POS in _PrintCandidates = %d\n");
GLOBAL_STR(str121, "\n");
GLOBAL_STR(str122, "");
GLOBAL_STR(str123, " ");
GLOBAL_STR(str124, " ");
GLOBAL_STR(str125, " ");
GLOBAL_STR(str126, "\r\n");
GLOBAL_STR(str127, "\u001b[2K");
GLOBAL_STR(str128, "\u001b[1B");
GLOBAL_STR(str129, "\u001b[%dA");
GLOBAL_STR(str130, "tab: complete");
GLOBAL_STR(str131, "set horizontal-scroll-mode on");
GLOBAL_STR(str132, "");
GLOBAL_STR(str133, "invalid (state, ch) pair");
GLOBAL_STR(str134, "");
GLOBAL_STR(str135, "");
GLOBAL_STR(str136, "<completion.Lookup %s>");
GLOBAL_STR(str137, "%-15s %s  %s");
GLOBAL_STR(str138, "---");
GLOBAL_STR(str139, "%s %s %s");
GLOBAL_STR(str140, "__fallback");
GLOBAL_STR(str141, "__first");
GLOBAL_STR(str142, "__first");
GLOBAL_STR(str143, "__fallback");
GLOBAL_STR(str144, "<Api %r %d-%d>");
GLOBAL_STR(str145, "");
GLOBAL_STR(str146, ".");
GLOBAL_STR(str147, "/");
GLOBAL_STR(str148, "<ShellFuncAction %s>");
GLOBAL_STR(str149, "COMPREPLY");
GLOBAL_STR(str150, "COMP_ARGV");
GLOBAL_STR(str151, ":");
GLOBAL_STR(str152, "=");
GLOBAL_STR(str153, "COMP_WORDS");
GLOBAL_STR(str154, "COMP_CWORD");
GLOBAL_STR(str155, "COMP_LINE");
GLOBAL_STR(str156, "COMP_POINT");
GLOBAL_STR(str157, "Running completion function %r with %d arguments");
GLOBAL_STR(str158, "Function %r returned 124, but the completion spec for %r wasn't changed");
GLOBAL_STR(str159, "COMPREPLY");
GLOBAL_STR(str160, "osh: Ran function %r but COMPREPLY was unset");
GLOBAL_STR(str161, "ERROR: COMPREPLY should be an array, got %s");
GLOBAL_STR(str162, "PATH");
GLOBAL_STR(str163, ":");
GLOBAL_STR(str164, "<GlobPredicate %s %r>");
GLOBAL_STR(str165, "(UserSpec");
GLOBAL_STR(str166, " ");
GLOBAL_STR(str167, ")");
GLOBAL_STR(str168, "line: %r");
GLOBAL_STR(str169, "rl_slice from byte %d to %d: %r");
GLOBAL_STR(str170, "/");
GLOBAL_STR(str171, "Completing redirect arg");
GLOBAL_STR(str172, "Error evaluating redirect word: %s");
GLOBAL_STR(str173, "Didn't get a string from redir arg");
GLOBAL_STR(str174, "");
GLOBAL_STR(str175, "");
GLOBAL_STR(str176, "Completing words");
GLOBAL_STR(str177, "partial_argv: [%s]");
GLOBAL_STR(str178, ",");
GLOBAL_STR(str179, "alias_first: %s");
GLOBAL_STR(str180, "** DISPLAY_POS = %d");
GLOBAL_STR(str181, "display_pos %d");
GLOBAL_STR(str182, "");
GLOBAL_STR(str183, "Didn't find anything to complete");
GLOBAL_STR(str184, "Got 124, trying again ...");
GLOBAL_STR(str185, "Completing %r ... (Ctrl-C to cancel)");
GLOBAL_STR(str186, "filenames");
GLOBAL_STR(str187, "filenames");
GLOBAL_STR(str188, "filenames");
GLOBAL_STR(str189, "/");
GLOBAL_STR(str190, "nospace");
GLOBAL_STR(str191, "nospace");
GLOBAL_STR(str192, "nospace");
GLOBAL_STR(str193, "");
GLOBAL_STR(str194, " ");
GLOBAL_STR(str195, "");
GLOBAL_STR(str196, "es");
GLOBAL_STR(str197, "");
GLOBAL_STR(str198, "es");
GLOBAL_STR(str199, "Found %d match%s for %r in %d ms");
GLOBAL_STR(str200, "osh: Ignoring 'exit' in completion plugin");
GLOBAL_STR(str201, "osh: Runtime error while completing: %s");
GLOBAL_STR(str202, "Runtime error while completing: %s");
GLOBAL_STR(str203, "osh: I/O error (completion): %s");
GLOBAL_STR(str204, "Ctrl-C in completion");
GLOBAL_STR(str205, "osh: Unhandled exception while completing: %s");
GLOBAL_STR(str206, "Unhandled exception while completing: %s");
GLOBAL_STR(str207, "proc");
GLOBAL_STR(str208, "source");
GLOBAL_STR(str209, "?");
GLOBAL_STR(str210, "(");
GLOBAL_STR(str211, ")");
GLOBAL_STR(str212, " ");
GLOBAL_STR(str213, "(");
GLOBAL_STR(str214, "[%s]=%s");
GLOBAL_STR(str215, ")");
GLOBAL_STR(str216, " ");
GLOBAL_STR(str217, " ");
GLOBAL_STR(str218, "\n");
GLOBAL_STR(str219, "");
GLOBAL_STR(str220, "");
GLOBAL_STR(str221, "");
GLOBAL_STR(str222, "");
GLOBAL_STR(str223, "SHX_indent");
GLOBAL_STR(str224, "SHX_punct");
GLOBAL_STR(str225, "SHX_pid_str");
GLOBAL_STR(str226, "PS4");
GLOBAL_STR(str227, "");
GLOBAL_STR(str228, "<ERROR: Can't parse PS4: %s>");
GLOBAL_STR(str229, "");
GLOBAL_STR(str230, "  ");
GLOBAL_STR(str231, "+");
GLOBAL_STR(str232, "|");
GLOBAL_STR(str233, "command %d:");
GLOBAL_STR(str234, "forkwait %d\n");
GLOBAL_STR(str235, "command sub %d\n");
GLOBAL_STR(str236, "proc sub %d\n");
GLOBAL_STR(str237, "here doc %d\n");
GLOBAL_STR(str238, "fork %d\n");
GLOBAL_STR(str239, "part %d\n");
GLOBAL_STR(str240, ";");
GLOBAL_STR(str241, "process %d: status %d\n");
GLOBAL_STR(str242, " %d");
GLOBAL_STR(str243, ">");
GLOBAL_STR(str244, "proc");
GLOBAL_STR(str245, "source");
GLOBAL_STR(str246, "wait");
GLOBAL_STR(str247, "\n");
GLOBAL_STR(str248, "<");
GLOBAL_STR(str249, " ");
GLOBAL_STR(str250, "\n");
GLOBAL_STR(str251, "!");
GLOBAL_STR(str252, "\n");
GLOBAL_STR(str253, ".");
GLOBAL_STR(str254, "exec");
GLOBAL_STR(str255, ".");
GLOBAL_STR(str256, "builtin");
GLOBAL_STR(str257, " ");
GLOBAL_STR(str258, "\n");
GLOBAL_STR(str259, " ");
GLOBAL_STR(str260, " ");
GLOBAL_STR(str261, "=");
GLOBAL_STR(str262, "\n");
GLOBAL_STR(str263, "?");
GLOBAL_STR(str264, "%s[%d]");
GLOBAL_STR(str265, "%s[%s]");
GLOBAL_STR(str266, "+=");
GLOBAL_STR(str267, "=");
GLOBAL_STR(str268, "\n");
GLOBAL_STR(str269, "+");
GLOBAL_STR(str270, " ");
GLOBAL_STR(str271, "\n");
GLOBAL_STR(str272, "\n");
GLOBAL_STR(str273, " ...");
GLOBAL_STR(str274, "\n");
GLOBAL_STR(str275, "<%s %r>");
GLOBAL_STR(str276, "Invalid control flow %r in pipeline / subshell / background");
GLOBAL_STR(str277, "%r ");
GLOBAL_STR(str278, "Command evaluated to an empty argv array");
GLOBAL_STR(str279, "Can't run assignment builtin recursively");
GLOBAL_STR(str280, "errexit was disabled for this construct");
GLOBAL_STR(str281, "");
GLOBAL_STR(str282, "Can't run a proc while errexit is disabled. Use 'try' or wrap it in a process with $0 myproc");
GLOBAL_STR(str283, "proc");
GLOBAL_STR(str284, "Unknown command %r while running hay");
GLOBAL_STR(str285, "Unexpected typed args passed to external command %r");
GLOBAL_STR(str286, "%r not found");
GLOBAL_STR(str287, "for -Wreturn-type in C++");
GLOBAL_STR(str288, "pipeline");
GLOBAL_STR(str289, "status wouldn't be checked (strict_errexit)");
GLOBAL_STR(str290, "eval_unsafe_arith is off");
GLOBAL_STR(str291, "Command subs not allowed here because %s");
GLOBAL_STR(str292, "__cat");
GLOBAL_STR(str293, "osh I/O error (read): %s");
GLOBAL_STR(str294, "Command Sub exited with status %d");
GLOBAL_STR(str295, "");
GLOBAL_STR(str296, "\n");
GLOBAL_STR(str297, "Process subs not allowed here because status wouldn't be checked (strict_errexit)");
GLOBAL_STR(str298, "/dev/fd/%d");
GLOBAL_STR(str299, "/dev/fd/%d");
GLOBAL_STR(str300, "[FANOS] %s");
GLOBAL_STR(str301, "ERROR %s");
GLOBAL_STR(str302, "");
GLOBAL_STR(str303, "Connect stdin and stdout to one end of socketpair() and send control messages.  osh writes debug messages (like this one) to stderr.");
GLOBAL_STR(str304, "protocol error: %s");
GLOBAL_STR(str305, "EOF received");
GLOBAL_STR(str306, "received blob %r");
GLOBAL_STR(str307, " ");
GLOBAL_STR(str308, " ");
GLOBAL_STR(str309, "");
GLOBAL_STR(str310, "GETPID");
GLOBAL_STR(str311, "EVAL");
GLOBAL_STR(str312, "Expected 3 file descriptors");
GLOBAL_STR(str313, "received descriptor %d");
GLOBAL_STR(str314, "PARSE");
GLOBAL_STR(str315, "TODO:PARSE");
GLOBAL_STR(str316, "Invalid command %r");
GLOBAL_STR(str317, "Invalid command %r");
GLOBAL_STR(str318, "OK %s");
GLOBAL_STR(str319, "^C");
GLOBAL_STR(str320, "STATUS\t%r");
GLOBAL_STR(str321, "<_FdFrame %s>");
GLOBAL_STR(str322, "r");
GLOBAL_STR(str323, "w");
GLOBAL_STR(str324, "mylib.Writer");
GLOBAL_STR(str325, "%d: %s");
GLOBAL_STR(str326, "%d: %s");
GLOBAL_STR(str327, "%d: %s");
GLOBAL_STR(str328, "Can't open %r: %s");
GLOBAL_STR(str329, "Error closing descriptor %d: %s");
GLOBAL_STR(str330, "dup2(%d, %d) error: %s");
GLOBAL_STR(str331, "<StdinFromPipe %d %d>");
GLOBAL_STR(str332, "<StdoutToPipe %d %d>");
GLOBAL_STR(str333, "Hijacked: %s");
GLOBAL_STR(str334, "/bin/sh");
GLOBAL_STR(str335, "/bin/sh");
GLOBAL_STR(str336, "Can't execute %r: %s");
GLOBAL_STR(str337, "[process] %s");
GLOBAL_STR(str338, " ");
GLOBAL_STR(str339, "[subprog] %s");
GLOBAL_STR(str340, "");
GLOBAL_STR(str341, "osh I/O error (subprogram): %s");
GLOBAL_STR(str342, "[here doc writer]");
GLOBAL_STR(str343, "<Process %s %s>");
GLOBAL_STR(str344, "  ");
GLOBAL_STR(str345, "%%%d");
GLOBAL_STR(str346, "%d\n");
GLOBAL_STR(str347, "%s %d %7s ");
GLOBAL_STR(str348, "\n");
GLOBAL_STR(str349, "Fatal error in posix.fork()");
GLOBAL_STR(str350, "%d\n");
GLOBAL_STR(str351, "%%%d");
GLOBAL_STR(str352, "  ");
GLOBAL_STR(str353, "%s %d %7s ");
GLOBAL_STR(str354, "\n");
GLOBAL_STR(str355, "Pipeline in state %s");
GLOBAL_STR(str356, "\n");
GLOBAL_STR(str357, "[process debug info]\n");
GLOBAL_STR(str358, "\n");
GLOBAL_STR(str359, "[pipeline debug info]\n");
GLOBAL_STR(str360, "osh: PID %d stopped, but osh didn't start it");
GLOBAL_STR(str361, "");
GLOBAL_STR(str362, "");
GLOBAL_STR(str363, "[PID %d] Stopped");
GLOBAL_STR(str364, "");
GLOBAL_STR(str365, " \t\n\"'><=;|&(:");
GLOBAL_STR(str366, "/");
GLOBAL_STR(str367, "PATH");
GLOBAL_STR(str368, ":");
GLOBAL_STR(str369, "Recursive 'hay eval' not allowed");
GLOBAL_STR(str370, "source");
GLOBAL_STR(str371, "children");
GLOBAL_STR(str372, "got invalid option %r");
GLOBAL_STR(str373, "got invalid option %r");
GLOBAL_STR(str374, "invalid option %r (try shopt)");
GLOBAL_STR(str375, "SHELLOPTS");
GLOBAL_STR(str376, ":");
GLOBAL_STR(str377, "Syntax options must be set at the top level (outside any function)");
GLOBAL_STR(str378, "Warning: set -o verbose not implemented");
GLOBAL_STR(str379, "SHELLOPTS");
GLOBAL_STR(str380, "%s:%s");
GLOBAL_STR(str381, "SHELLOPTS");
GLOBAL_STR(str382, ":");
GLOBAL_STR(str383, ":");
GLOBAL_STR(str384, "SHELLOPTS");
GLOBAL_STR(str385, "set %so %s");
GLOBAL_STR(str386, "-");
GLOBAL_STR(str387, "+");
GLOBAL_STR(str388, "got invalid option %r");
GLOBAL_STR(str389, "shopt -%s %s");
GLOBAL_STR(str390, "s");
GLOBAL_STR(str391, "u");
GLOBAL_STR(str392, "<_ArgFrame %s %d at %x>");
GLOBAL_STR(str393, "Can't determine working directory: %s");
GLOBAL_STR(str394, "IFS");
GLOBAL_STR(str395, "UID");
GLOBAL_STR(str396, "EUID");
GLOBAL_STR(str397, "PPID");
GLOBAL_STR(str398, "HOSTNAME");
GLOBAL_STR(str399, "OSTYPE");
GLOBAL_STR(str400, "OPTIND");
GLOBAL_STR(str401, "1");
GLOBAL_STR(str402, "PS4");
GLOBAL_STR(str403, "${SHX_indent}${SHX_punct}${SHX_pid_str} ");
GLOBAL_STR(str404, "COMP_WORDBREAKS");
GLOBAL_STR(str405, "SHELLOPTS");
GLOBAL_STR(str406, "SHELLOPTS");
GLOBAL_STR(str407, "");
GLOBAL_STR(str408, "SHELLOPTS");
GLOBAL_STR(str409, "PWD");
GLOBAL_STR(str410, "PWD");
GLOBAL_STR(str411, "PWD");
GLOBAL_STR(str412, "PATH");
GLOBAL_STR(str413, "PATH");
GLOBAL_STR(str414, "/bin:/usr/bin");
GLOBAL_STR(str415, "OIL_VERSION");
GLOBAL_STR(str416, "PWD");
GLOBAL_STR(str417, "PS1");
GLOBAL_STR(str418, "PS1");
GLOBAL_STR(str419, "\\s-\\v\\$ ");
GLOBAL_STR(str420, "");
GLOBAL_STR(str421, "");
GLOBAL_STR(str422, "<Mem");
GLOBAL_STR(str423, "  -- %d --");
GLOBAL_STR(str424, "  %s %s");
GLOBAL_STR(str425, ">");
GLOBAL_STR(str426, "\n");
GLOBAL_STR(str427, "\n");
GLOBAL_STR(str428, "Warning: span_id undefined in SetCurrentSpanId");
GLOBAL_STR(str429, "setref requires a nameref (:out param)");
GLOBAL_STR(str430, "nameref %r is undefined");
GLOBAL_STR(str431, "nameref %r contains invalid variable name %r");
GLOBAL_STR(str432, "Circular nameref %s");
GLOBAL_STR(str433, " -> ");
GLOBAL_STR(str434, "__");
GLOBAL_STR(str435, "Can't assign to readonly value %r");
GLOBAL_STR(str436, "Only strings can be exported");
GLOBAL_STR(str437, "nameref must be a string");
GLOBAL_STR(str438, "Can't assign to readonly array");
GLOBAL_STR(str439, "Can't assign to items in a string");
GLOBAL_STR(str440, "Value of type %s can't be indexed");
GLOBAL_STR(str441, "Can't assign to readonly associative array");
GLOBAL_STR(str442, "ARGV");
GLOBAL_STR(str443, "_status");
GLOBAL_STR(str444, "_this_dir");
GLOBAL_STR(str445, "PIPESTATUS");
GLOBAL_STR(str446, "_pipeline_status");
GLOBAL_STR(str447, "_process_sub_status");
GLOBAL_STR(str448, "BASH_REMATCH");
GLOBAL_STR(str449, "FUNCNAME");
GLOBAL_STR(str450, "source");
GLOBAL_STR(str451, "BASH_SOURCE");
GLOBAL_STR(str452, "BASH_LINENO");
GLOBAL_STR(str453, "0");
GLOBAL_STR(str454, "LINENO");
GLOBAL_STR(str455, "BASHPID");
GLOBAL_STR(str456, "_");
GLOBAL_STR(str457, "Can't unset readonly variable %r");
GLOBAL_STR(str458, "%r isn't an array");
GLOBAL_STR(str459, "$%s isn't defined");
GLOBAL_STR(str460, "$%s should be a string");
GLOBAL_STR(str461, "$%s should be a string, got %s");
GLOBAL_STR(str462, "$%s doesn't look like an integer, got %r");
GLOBAL_STR(str463, "EOF");
GLOBAL_STR(str464, "/");
GLOBAL_STR(str465, "~");
GLOBAL_STR(str466, "  ");
GLOBAL_STR(str467, "\n  ");
GLOBAL_STR(str468, "\t");
GLOBAL_STR(str469, "\t");
GLOBAL_STR(str470, " ");
GLOBAL_STR(str471, "^");
GLOBAL_STR(str472, "~");
GLOBAL_STR(str473, "\n");
GLOBAL_STR(str474, "[ interactive ]");
GLOBAL_STR(str475, "[ headless ]");
GLOBAL_STR(str476, "[ -c flag ]");
GLOBAL_STR(str477, "[ stdin%s ]");
GLOBAL_STR(str478, "[ %s word at ? ]");
GLOBAL_STR(str479, "[ %s word at line %d of %s ]");
GLOBAL_STR(str480, "?");
GLOBAL_STR(str481, "?");
GLOBAL_STR(str482, "line %d of %s");
GLOBAL_STR(str483, "[ var %s at %s ]");
GLOBAL_STR(str484, "line %d of %s");
GLOBAL_STR(str485, "[ contents of var %r at %s ]");
GLOBAL_STR(str486, "[ expansion of alias %r ]");
GLOBAL_STR(str487, "[ %s in %s ]");
GLOBAL_STR(str488, "-- %s");
GLOBAL_STR(str489, "[??? no location ???] %s%s\n");
GLOBAL_STR(str490, "%s:%d: %s%s\n");
GLOBAL_STR(str491, "");
GLOBAL_STR(str492, "");
GLOBAL_STR(str493, "");
GLOBAL_STR(str494, "errexit PID %d: ");
GLOBAL_STR(str495, "none");
GLOBAL_STR(str496, "AST not printed.");
GLOBAL_STR(str497, "text");
GLOBAL_STR(str498, "abbrev-text");
GLOBAL_STR(str499, "html");
GLOBAL_STR(str500, "abbrev-html");
GLOBAL_STR(str501, "abbrev-");
GLOBAL_STR(str502, "\n");
GLOBAL_STR(str503, "history: %s");
GLOBAL_STR(str504, "\n");
GLOBAL_STR(str505, "\n");
GLOBAL_STR(str506, "-");
GLOBAL_STR(str507, "_");
GLOBAL_STR(str508, "<_Attributes %s>");
GLOBAL_STR(str509, "<args.Reader %r %d>");
GLOBAL_STR(str510, "expected argument to %r");
GLOBAL_STR(str511, "-");
GLOBAL_STR(str512, "expected integer after %s, got %r");
GLOBAL_STR(str513, "-");
GLOBAL_STR(str514, "got invalid integer for %s: %s");
GLOBAL_STR(str515, "-");
GLOBAL_STR(str516, "expected number after %r, got %r");
GLOBAL_STR(str517, "-");
GLOBAL_STR(str518, "got invalid float for %s: %s");
GLOBAL_STR(str519, "-");
GLOBAL_STR(str520, "got invalid argument %r to %r, expected one of: %s");
GLOBAL_STR(str521, "-");
GLOBAL_STR(str522, "|");
GLOBAL_STR(str523, "0");
GLOBAL_STR(str524, "F");
GLOBAL_STR(str525, "false");
GLOBAL_STR(str526, "False");
GLOBAL_STR(str527, "1");
GLOBAL_STR(str528, "T");
GLOBAL_STR(str529, "true");
GLOBAL_STR(str530, "Talse");
GLOBAL_STR(str531, "got invalid argument to boolean flag: %r");
GLOBAL_STR(str532, "-");
GLOBAL_STR(str533, "-");
GLOBAL_STR(str534, "Invalid option %r");
GLOBAL_STR(str535, "Expected argument for action");
GLOBAL_STR(str536, "Invalid action name %r");
GLOBAL_STR(str537, "--");
GLOBAL_STR(str538, "--");
GLOBAL_STR(str539, "=");
GLOBAL_STR(str540, "got invalid flag %r");
GLOBAL_STR(str541, "-");
GLOBAL_STR(str542, "0");
GLOBAL_STR(str543, "Z");
GLOBAL_STR(str544, "-");
GLOBAL_STR(str545, "doesn't accept flag %s");
GLOBAL_STR(str546, "-");
GLOBAL_STR(str547, "+");
GLOBAL_STR(str548, "+");
GLOBAL_STR(str549, "doesn't accept option %s");
GLOBAL_STR(str550, "+");
GLOBAL_STR(str551, "-");
GLOBAL_STR(str552, "--");
GLOBAL_STR(str553, "--");
GLOBAL_STR(str554, "got invalid flag %r");
GLOBAL_STR(str555, "-");
GLOBAL_STR(str556, "+");
GLOBAL_STR(str557, "got invalid flag %r");
GLOBAL_STR(str558, "-");
GLOBAL_STR(str559, "+");
GLOBAL_STR(str560, "<LineLexer at pos %d of line %r>");
GLOBAL_STR(str561, "");
GLOBAL_STR(str562, "");
GLOBAL_STR(str563, "");
GLOBAL_STR(str564, "");
GLOBAL_STR(str565, "<Trail %s %s %s %s>");
GLOBAL_STR(str566, "> ");
GLOBAL_STR(str567, "Here docs aren't allowed in expressions");
GLOBAL_STR(str568, "\n");
GLOBAL_STR(str569, "");
GLOBAL_STR(str570, "\n");
GLOBAL_STR(str571, "\n");
GLOBAL_STR(str572, "^D");
GLOBAL_STR(str573, "got unexpected typed args");
GLOBAL_STR(str574, "Expected an expression");
GLOBAL_STR(str575, "Expected an expression");
GLOBAL_STR(str576, "Too many typed args (expected one expression)");
GLOBAL_STR(str577, "Expected block argument");
GLOBAL_STR(str578, "Too many typed args (expected one block)");
GLOBAL_STR(str579, "Too many typed args (expected one block)");
GLOBAL_STR(str580, "Use === to be exact, or ~== to convert types");
GLOBAL_STR(str581, "");
GLOBAL_STR(str582, " (%s)");
GLOBAL_STR(str583, "Unexpected token in expression mode%s");
GLOBAL_STR(str584, "Unexpected token in array literal");
GLOBAL_STR(str585, "Syntax error in expression (near %s)");
GLOBAL_STR(str586, "alnum");
GLOBAL_STR(str587, "cntrl");
GLOBAL_STR(str588, "lower");
GLOBAL_STR(str589, "space");
GLOBAL_STR(str590, "alpha");
GLOBAL_STR(str591, "digit");
GLOBAL_STR(str592, "print");
GLOBAL_STR(str593, "upper");
GLOBAL_STR(str594, "blank");
GLOBAL_STR(str595, "graph");
GLOBAL_STR(str596, "punct");
GLOBAL_STR(str597, "xdigit");
GLOBAL_STR(str598, "Range start/end shouldn't have more than one character");
GLOBAL_STR(str599, "Write singleton tuples with tup(), not a trailing comma");
GLOBAL_STR(str600, "testlist_comp");
GLOBAL_STR(str601, "obj.field isn't valid, but obj.method() is");
GLOBAL_STR(str602, "In expressions, remove $ and use `%s`, or sometimes \"$%s\"");
GLOBAL_STR(str603, "PNode type %d (%s) wasn't handled");
GLOBAL_STR(str604, "Can't assign to this expression");
GLOBAL_STR(str605, "PNode type %d (%s) wasn't handled");
GLOBAL_STR(str606, "Expr");
GLOBAL_STR(str607, "Block");
GLOBAL_STR(str608, "proc param types should be Expr or Block");
GLOBAL_STR(str609, "dot");
GLOBAL_STR(str610, "Can't negate this symbol");
GLOBAL_STR(str611, "%r isn't a character class");
GLOBAL_STR(str612, "Can't negate this symbol");
GLOBAL_STR(str613, "%r isn't a character class");
GLOBAL_STR(str614, "%start");
GLOBAL_STR(str615, "%end");
GLOBAL_STR(str616, "dot");
GLOBAL_STR(str617, "Unexpected token %r in regex");
GLOBAL_STR(str618, "Backtracking with !! isn't implemented (requires Python/PCRE)");
GLOBAL_STR(str619, "Couldn't open %r: %s");
GLOBAL_STR(str620, "ERE can't express char code %d");
GLOBAL_STR(str621, "Can't use char %d as start of range in ERE syntax");
GLOBAL_STR(str622, "-");
GLOBAL_STR(str623, "Can't use char %d as end of range in ERE syntax");
GLOBAL_STR(str624, "Perl classes can't be negated in ERE");
GLOBAL_STR(str625, "%s");
GLOBAL_STR(str626, "POSIX classes can't be negated in ERE");
GLOBAL_STR(str627, "[:%s:]");
GLOBAL_STR(str628, ".");
GLOBAL_STR(str629, "^");
GLOBAL_STR(str630, "$");
GLOBAL_STR(str631, "|");
GLOBAL_STR(str632, "POSIX EREs don't have groups without capture, so this node needs () around it.");
GLOBAL_STR(str633, "+");
GLOBAL_STR(str634, "*");
GLOBAL_STR(str635, "?");
GLOBAL_STR(str636, "{%s}");
GLOBAL_STR(str637, "");
GLOBAL_STR(str638, "");
GLOBAL_STR(str639, "{%s,%s}");
GLOBAL_STR(str640, "(");
GLOBAL_STR(str641, ")");
GLOBAL_STR(str642, "[^%s]");
GLOBAL_STR(str643, "[%s]");
GLOBAL_STR(str644, "[^[:%s:]]");
GLOBAL_STR(str645, "[[:%s:]]");
GLOBAL_STR(str646, "[");
GLOBAL_STR(str647, "^");
GLOBAL_STR(str648, "]");
GLOBAL_STR(str649, "\\\\");
GLOBAL_STR(str650, "^");
GLOBAL_STR(str651, "-");
GLOBAL_STR(str652, "]");
GLOBAL_STR(str653, "The [ operator doesn't apply to this expression");
GLOBAL_STR(str654, "Expected ]]");
GLOBAL_STR(str655, "Unexpected trailing word %s");
GLOBAL_STR(str656, "Invalid argument to unary operator");
GLOBAL_STR(str657, "Expected ), got %s");
GLOBAL_STR(str658, "Unexpected token in boolean expression (%s)");
GLOBAL_STR(str659, "");
GLOBAL_STR(str660, "Expected %d, got %d");
GLOBAL_STR(str661, "Step can't be 0");
GLOBAL_STR(str662, "Invalid step %d for ascending integer range");
GLOBAL_STR(str663, "Invalid step %d for descending integer range");
GLOBAL_STR(str664, "Invalid step %d for ascending character range");
GLOBAL_STR(str665, "Invalid step %d for descending character range");
GLOBAL_STR(str666, "Mismatched cases in character range");
GLOBAL_STR(str667, "");
GLOBAL_STR(str668, "0");
GLOBAL_STR(str669, "0");
GLOBAL_STR(str670, "g");
GLOBAL_STR(str671, "a");
GLOBAL_STR(str672, "A");
GLOBAL_STR(str673, "n");
GLOBAL_STR(str674, "r");
GLOBAL_STR(str675, "x");
GLOBAL_STR(str676, "%s=%s");
GLOBAL_STR(str677, "-");
GLOBAL_STR(str678, "+");
GLOBAL_STR(str679, "-");
GLOBAL_STR(str680, "+");
GLOBAL_STR(str681, "-");
GLOBAL_STR(str682, "+");
GLOBAL_STR(str683, "n");
GLOBAL_STR(str684, "r");
GLOBAL_STR(str685, "x");
GLOBAL_STR(str686, "a");
GLOBAL_STR(str687, "A");
GLOBAL_STR(str688, "-");
GLOBAL_STR(str689, "declare -");
GLOBAL_STR(str690, "");
GLOBAL_STR(str691, " ");
GLOBAL_STR(str692, "=");
GLOBAL_STR(str693, "=()");
GLOBAL_STR(str694, ";");
GLOBAL_STR(str695, " ");
GLOBAL_STR(str696, "[");
GLOBAL_STR(str697, "]=");
GLOBAL_STR(str698, " ");
GLOBAL_STR(str699, "=(");
GLOBAL_STR(str700, "");
GLOBAL_STR(str701, ")");
GLOBAL_STR(str702, " ");
GLOBAL_STR(str703, "[");
GLOBAL_STR(str704, "]=");
GLOBAL_STR(str705, "=(");
GLOBAL_STR(str706, "");
GLOBAL_STR(str707, ")");
GLOBAL_STR(str708, "");
GLOBAL_STR(str709, "export_");
GLOBAL_STR(str710, "doesn't accept -f because it's dangerous.  (The code can usually be restructured with 'source')");
GLOBAL_STR(str711, "doesn't accept RHS with -n");
GLOBAL_STR(str712, "Got -a but RHS isn't an array");
GLOBAL_STR(str713, "Got -A but RHS isn't an associative array");
GLOBAL_STR(str714, "readonly");
GLOBAL_STR(str715, "new_var");
GLOBAL_STR(str716, "with -f expects function names");
GLOBAL_STR(str717, "declare -f %s");
GLOBAL_STR(str718, "-");
GLOBAL_STR(str719, "-");
GLOBAL_STR(str720, "-");
GLOBAL_STR(str721, "+");
GLOBAL_STR(str722, "+");
GLOBAL_STR(str723, "+");
GLOBAL_STR(str724, "unset");
GLOBAL_STR(str725, "Invalid shift argument %r");
GLOBAL_STR(str726, "got too many arguments");
GLOBAL_STR(str727, "Function %r not found");
GLOBAL_STR(str728, "alias");
GLOBAL_STR(str729, "binding");
GLOBAL_STR(str730, "vi-delete");
GLOBAL_STR(str731, "command");
GLOBAL_STR(str732, "directory");
GLOBAL_STR(str733, "file");
GLOBAL_STR(str734, "function");
GLOBAL_STR(str735, "job");
GLOBAL_STR(str736, "jobs-not-implemented");
GLOBAL_STR(str737, "user");
GLOBAL_STR(str738, "variable");
GLOBAL_STR(str739, "helptopic");
GLOBAL_STR(str740, "setopt");
GLOBAL_STR(str741, "shopt");
GLOBAL_STR(str742, "signal");
GLOBAL_STR(str743, "TODO:signals");
GLOBAL_STR(str744, "stopped");
GLOBAL_STR(str745, "jobs-not-implemented");
GLOBAL_STR(str746, "plusdirs");
GLOBAL_STR(str747, "default");
GLOBAL_STR(str748, "dirnames");
GLOBAL_STR(str749, "No actions defined in completion: %s");
GLOBAL_STR(str750, "!");
GLOBAL_STR(str751, "");
GLOBAL_STR(str752, "");
GLOBAL_STR(str753, "complete");
GLOBAL_STR(str754, "__fallback");
GLOBAL_STR(str755, "__first");
GLOBAL_STR(str756, "compgen");
GLOBAL_STR(str757, "");
GLOBAL_STR(str758, "");
GLOBAL_STR(str759, "compgen");
GLOBAL_STR(str760, "");
GLOBAL_STR(str761, "compopt");
GLOBAL_STR(str762, "compopt: not currently executing a completion function");
GLOBAL_STR(str763, "compadjust");
GLOBAL_STR(str764, "cur");
GLOBAL_STR(str765, "prev");
GLOBAL_STR(str766, "words");
GLOBAL_STR(str767, "cword");
GLOBAL_STR(str768, "Invalid output variable name %r");
GLOBAL_STR(str769, "COMP_ARGV");
GLOBAL_STR(str770, "COMP_ARGV should be an array");
GLOBAL_STR(str771, ":");
GLOBAL_STR(str772, "=");
GLOBAL_STR(str773, "=");
GLOBAL_STR(str774, "");
GLOBAL_STR(str775, "words");
GLOBAL_STR(str776, "words");
GLOBAL_STR(str777, "");
GLOBAL_STR(str778, "--");
GLOBAL_STR(str779, "=");
GLOBAL_STR(str780, "=");
GLOBAL_STR(str781, "true");
GLOBAL_STR(str782, "false");
GLOBAL_STR(str783, "split");
GLOBAL_STR(str784, "cur");
GLOBAL_STR(str785, "cur");
GLOBAL_STR(str786, "prev");
GLOBAL_STR(str787, "prev");
GLOBAL_STR(str788, "cword");
GLOBAL_STR(str789, "cword");
GLOBAL_STR(str790, "warning: bind isn't implemented");
GLOBAL_STR(str791, "is disabled because Oil wasn't compiled with 'readline'");
GLOBAL_STR(str792, "history");
GLOBAL_STR(str793, "couldn't find item %d");
GLOBAL_STR(str794, "got invalid argument %r");
GLOBAL_STR(str795, "got many arguments");
GLOBAL_STR(str796, "%5d  %s\n");
GLOBAL_STR(str797, "eval");
GLOBAL_STR(str798, "requires code string");
GLOBAL_STR(str799, "requires exactly 1 argument");
GLOBAL_STR(str800, " ");
GLOBAL_STR(str801, "eval");
GLOBAL_STR(str802, "eval");
GLOBAL_STR(str803, "source");
GLOBAL_STR(str804, "missing required argument");
GLOBAL_STR(str805, "source %r failed: %s");
GLOBAL_STR(str806, "source");
GLOBAL_STR(str807, "command");
GLOBAL_STR(str808, "Can't run assignment builtin recursively");
GLOBAL_STR(str809, "%r isn't a shell builtin");
GLOBAL_STR(str810, "runproc");
GLOBAL_STR(str811, "requires arguments");
GLOBAL_STR(str812, "runproc: no proc named %r");
GLOBAL_STR(str813, "try_");
GLOBAL_STR(str814, "expects a block or command argv");
GLOBAL_STR(str815, "boolstatus");
GLOBAL_STR(str816, "expected a command to run");
GLOBAL_STR(str817, "boolstatus expected status 0 or 1, got %d");
GLOBAL_STR(str818, "function");
GLOBAL_STR(str819, "alias");
GLOBAL_STR(str820, "builtin");
GLOBAL_STR(str821, "builtin");
GLOBAL_STR(str822, "builtin");
GLOBAL_STR(str823, "keyword");
GLOBAL_STR(str824, "keyword");
GLOBAL_STR(str825, "file");
GLOBAL_STR(str826, "type");
GLOBAL_STR(str827, "type: %r not found");
GLOBAL_STR(str828, "file");
GLOBAL_STR(str829, "file");
GLOBAL_STR(str830, "%s is a %s");
GLOBAL_STR(str831, "function");
GLOBAL_STR(str832, "");
GLOBAL_STR(str833, "");
GLOBAL_STR(str834, "\r\n");
GLOBAL_STR(str835, "\n");
GLOBAL_STR(str836, "'");
GLOBAL_STR(str837, "");
GLOBAL_STR(str838, "");
GLOBAL_STR(str839, "read error: %s");
GLOBAL_STR(str840, "read");
GLOBAL_STR(str841, "_line");
GLOBAL_STR(str842, ":");
GLOBAL_STR(str843, "got extra argument");
GLOBAL_STR(str844, "--qsn can only be used with --line");
GLOBAL_STR(str845, "_all");
GLOBAL_STR(str846, ":");
GLOBAL_STR(str847, "got extra argument");
GLOBAL_STR(str848, "--qsn not implemented yet");
GLOBAL_STR(str849, "read -t isn't implemented (except t=0)");
GLOBAL_STR(str850, "REPLY");
GLOBAL_STR(str851, "REPLY");
GLOBAL_STR(str852, "");
GLOBAL_STR(str853, ":");
GLOBAL_STR(str854, "mapfile");
GLOBAL_STR(str855, "MAPFILE");
GLOBAL_STR(str856, ":");
GLOBAL_STR(str857, "mapfile: read() error: %s");
GLOBAL_STR(str858, "\n");
GLOBAL_STR(str859, "cd");
GLOBAL_STR(str860, "cd");
GLOBAL_STR(str861, "HOME");
GLOBAL_STR(str862, "HOME");
GLOBAL_STR(str863, "-");
GLOBAL_STR(str864, "OLDPWD");
GLOBAL_STR(str865, "PWD");
GLOBAL_STR(str866, "cd %r: %s");
GLOBAL_STR(str867, "PWD");
GLOBAL_STR(str868, "OLDPWD");
GLOBAL_STR(str869, "%2d  %s");
GLOBAL_STR(str870, " ");
GLOBAL_STR(str871, "pushd");
GLOBAL_STR(str872, "pushd: no other directory");
GLOBAL_STR(str873, "got too many arguments");
GLOBAL_STR(str874, "pushd: %r: %s");
GLOBAL_STR(str875, "HOME");
GLOBAL_STR(str876, "PWD");
GLOBAL_STR(str877, "%s: directory stack is empty");
GLOBAL_STR(str878, "%s: %r: %s");
GLOBAL_STR(str879, "PWD");
GLOBAL_STR(str880, "pushd");
GLOBAL_STR(str881, "got extra argument");
GLOBAL_STR(str882, "popd");
GLOBAL_STR(str883, "HOME");
GLOBAL_STR(str884, "dirs");
GLOBAL_STR(str885, "HOME");
GLOBAL_STR(str886, "pwd");
GLOBAL_STR(str887, "_devbuild/help/groups.txt");
GLOBAL_STR(str888, "help");
GLOBAL_STR(str889, "help");
GLOBAL_STR(str890, "_devbuild/help/%s");
GLOBAL_STR(str891, "no help topics match %r");
GLOBAL_STR(str892, "osh I/O error: %s");
GLOBAL_STR(str893, "# +");
GLOBAL_STR(str894, "osh printf doesn't support the %r flag");
GLOBAL_STR(str895, "eEfFgG");
GLOBAL_STR(str896, "osh printf doesn't support floating point");
GLOBAL_STR(str897, "c");
GLOBAL_STR(str898, "osh printf doesn't support single characters (bytes)");
GLOBAL_STR(str899, "Invalid printf format character");
GLOBAL_STR(str900, "Expected a printf format character");
GLOBAL_STR(str901, "%");
GLOBAL_STR(str902, "");
GLOBAL_STR(str903, "printf got invalid width %r");
GLOBAL_STR(str904, "0");
GLOBAL_STR(str905, "");
GLOBAL_STR(str906, "printf got invalid precision %r");
GLOBAL_STR(str907, "");
GLOBAL_STR(str908, "s");
GLOBAL_STR(str909, "q");
GLOBAL_STR(str910, "b");
GLOBAL_STR(str911, "");
GLOBAL_STR(str912, "diouxX");
GLOBAL_STR(str913, "'\"");
GLOBAL_STR(str914, "printf expected an integer, got %r");
GLOBAL_STR(str915, "TZ");
GLOBAL_STR(str916, "TZ");
GLOBAL_STR(str917, "ouxX");
GLOBAL_STR(str918, "Can't format negative number %d with %%%s");
GLOBAL_STR(str919, "o");
GLOBAL_STR(str920, "x");
GLOBAL_STR(str921, "X");
GLOBAL_STR(str922, "0");
GLOBAL_STR(str923, "-");
GLOBAL_STR(str924, "-");
GLOBAL_STR(str925, "");
GLOBAL_STR(str926, "0");
GLOBAL_STR(str927, "-");
GLOBAL_STR(str928, " ");
GLOBAL_STR(str929, " ");
GLOBAL_STR(str930, "printf");
GLOBAL_STR(str931, "requires a format string");
GLOBAL_STR(str932, "printf");
GLOBAL_STR(str933, "");
GLOBAL_STR(str934, "jobs");
GLOBAL_STR(str935, "No job to put in the foreground");
GLOBAL_STR(str936, "Continue PID %d");
GLOBAL_STR(str937, "isn't implemented");
GLOBAL_STR(str938, "fork");
GLOBAL_STR(str939, "got unexpected argument %r");
GLOBAL_STR(str940, "expected a block");
GLOBAL_STR(str941, "forkwait");
GLOBAL_STR(str942, "got unexpected argument %r");
GLOBAL_STR(str943, "expected a block");
GLOBAL_STR(str944, "exec");
GLOBAL_STR(str945, "exec: %r not found");
GLOBAL_STR(str946, "unreachable");
GLOBAL_STR(str947, "wait");
GLOBAL_STR(str948, "wait");
GLOBAL_STR(str949, "%");
GLOBAL_STR(str950, "doesn't support bash-style jobspecs (got %r)");
GLOBAL_STR(str951, "expected PID or jobspec, got %r");
GLOBAL_STR(str952, "%d isn't a child of this shell");
GLOBAL_STR(str953, "0%03o");
GLOBAL_STR(str954, "osh warning: umask with symbolic input isn't implemented");
GLOBAL_STR(str955, "umask: unexpected arguments");
GLOBAL_STR(str956, "alias");
GLOBAL_STR(str957, "alias %s=%r");
GLOBAL_STR(str958, "=");
GLOBAL_STR(str959, "No alias named %r");
GLOBAL_STR(str960, "alias %s=%r");
GLOBAL_STR(str961, "unalias");
GLOBAL_STR(str962, "requires an argument");
GLOBAL_STR(str963, "No alias named %r");
GLOBAL_STR(str964, "%s=%s");
GLOBAL_STR(str965, "set");
GLOBAL_STR(str966, "shopt");
GLOBAL_STR(str967, "got invalid option %r");
GLOBAL_STR(str968, "hash");
GLOBAL_STR(str969, "got extra arguments after -r");
GLOBAL_STR(str970, "hash: %r not found");
GLOBAL_STR(str971, ":");
GLOBAL_STR(str972, "OPTIND");
GLOBAL_STR(str973, "OPTIND");
GLOBAL_STR(str974, "OPTARG");
GLOBAL_STR(str975, "OPTARG");
GLOBAL_STR(str976, "");
GLOBAL_STR(str977, "?");
GLOBAL_STR(str978, "-");
GLOBAL_STR(str979, "-");
GLOBAL_STR(str980, "?");
GLOBAL_STR(str981, "?");
GLOBAL_STR(str982, "getopts: option %r requires an argument.");
GLOBAL_STR(str983, "(getopts argv: %s)");
GLOBAL_STR(str984, " ");
GLOBAL_STR(str985, "?");
GLOBAL_STR(str986, "");
GLOBAL_STR(str987, "requires an argspec");
GLOBAL_STR(str988, "requires the name of a variable to set");
GLOBAL_STR(str989, "got invalid variable name %r");
GLOBAL_STR(str990, "echo");
GLOBAL_STR(str991, "");
GLOBAL_STR(str992, "takes at most one arg when simple_echo is on (hint: add quotes)");
GLOBAL_STR(str993, " ");
GLOBAL_STR(str994, "\n");
GLOBAL_STR(str995, "module");
GLOBAL_STR(str996, "requires a name");
GLOBAL_STR(str997, "(interactive) Reloading module %r");
GLOBAL_STR(str998, "expected 'bin' or 'dialect'");
GLOBAL_STR(str999, "dialect");
GLOBAL_STR(str1000, "expected dialect name");
GLOBAL_STR(str1001, "_DIALECT");
GLOBAL_STR(str1002, "Expected dialect %r, got %r");
GLOBAL_STR(str1003, "Expected dialect %r");
GLOBAL_STR(str1004, "bin");
GLOBAL_STR(str1005, "bin %s");
GLOBAL_STR(str1006, "expected 'bin' or 'dialect'");
GLOBAL_STR(str1007, "shvar");
GLOBAL_STR(str1008, "expected a block");
GLOBAL_STR(str1009, "Expected name=value");
GLOBAL_STR(str1010, "=");
GLOBAL_STR(str1011, "Expected name=value");
GLOBAL_STR(str1012, "PATH");
GLOBAL_STR(str1013, "push-registers");
GLOBAL_STR(str1014, "expected a block");
GLOBAL_STR(str1015, "fopen");
GLOBAL_STR(str1016, "expected a block");
GLOBAL_STR(str1017, "1");
GLOBAL_STR(str1018, "2");
GLOBAL_STR(str1019, "3");
GLOBAL_STR(str1020, "6");
GLOBAL_STR(str1021, "9");
GLOBAL_STR(str1022, "13");
GLOBAL_STR(str1023, "14");
GLOBAL_STR(str1024, "15");
GLOBAL_STR(str1025, "SIG");
GLOBAL_STR(str1026, "EXIT");
GLOBAL_STR(str1027, "ERR");
GLOBAL_STR(str1028, "RETURN");
GLOBAL_STR(str1029, "DEBUG");
GLOBAL_STR(str1030, "trap");
GLOBAL_STR(str1031, "trap");
GLOBAL_STR(str1032, "%s TrapState");
GLOBAL_STR(str1033, "%d TrapState");
GLOBAL_STR(str1034, "   %s");
GLOBAL_STR(str1035, "requires a code string");
GLOBAL_STR(str1036, "requires a signal or hook name");
GLOBAL_STR(str1037, "0");
GLOBAL_STR(str1038, "EXIT");
GLOBAL_STR(str1039, "Invalid signal or hook %r");
GLOBAL_STR(str1040, "-");
GLOBAL_STR(str1041, "Signal or trap");
GLOBAL_STR(str1042, "ERR");
GLOBAL_STR(str1043, "RETURN");
GLOBAL_STR(str1044, "DEBUG");
GLOBAL_STR(str1045, "osh warning: The %r hook isn't implemented");
GLOBAL_STR(str1046, "Signal %r can't be handled");
GLOBAL_STR(str1047, "Signal or trap");
GLOBAL_STR(str1048, "Can't append array to string");
GLOBAL_STR(str1049, "Can't append string to array");
GLOBAL_STR(str1050, "Assignment builtin %r not configured");
GLOBAL_STR(str1051, "%r ");
GLOBAL_STR(str1052, "Command");
GLOBAL_STR(str1053, "Assignment");
GLOBAL_STR(str1054, "Subshell");
GLOBAL_STR(str1055, "Pipeline");
GLOBAL_STR(str1056, "%s failed with status %d");
GLOBAL_STR(str1057, "Redirect filename can't be empty");
GLOBAL_STR(str1058, "Redirect descriptor can't be empty");
GLOBAL_STR(str1059, "-");
GLOBAL_STR(str1060, "-");
GLOBAL_STR(str1061, "Invalid descriptor %r.  Expected D, -, or D- where D is an integer");
GLOBAL_STR(str1062, "\n");
GLOBAL_STR(str1063, "Unknown redirect op");
GLOBAL_STR(str1064, "Unknown redirect type");
GLOBAL_STR(str1065, "for -Wreturn-type in C++");
GLOBAL_STR(str1066, "strict_errexit only allows simple commands in conditionals (got %s). ");
GLOBAL_STR(str1067, "strict_errexit only allows a single command.  Hint: use 'try'.");
GLOBAL_STR(str1068, "strict_errexit only allows simple commands in conditionals (got %s). ");
GLOBAL_STR(str1069, "");
GLOBAL_STR(str1070, "ShAssignment builtins don't accept blocks");
GLOBAL_STR(str1071, "|& isn't supported");
GLOBAL_STR(str1072, "");
GLOBAL_STR(str1073, "%r expected a number, got %r");
GLOBAL_STR(str1074, "Invalid control flow at top level");
GLOBAL_STR(str1075, "warning: ");
GLOBAL_STR(str1076, "List iteration expects at most 2 loop variables");
GLOBAL_STR(str1077, "Function %s was already defined (redefine_proc)");
GLOBAL_STR(str1078, "Proc %s was already defined (redefine_proc)");
GLOBAL_STR(str1079, "trap");
GLOBAL_STR(str1080, "failglob: ");
GLOBAL_STR(str1081, "Loop and control flow can't be in different processes");
GLOBAL_STR(str1082, "fatal: ");
GLOBAL_STR(str1083, "EXIT");
GLOBAL_STR(str1084, "trap EXIT");
GLOBAL_STR(str1085, "__");
GLOBAL_STR(str1086, ":");
GLOBAL_STR(str1087, "Invalid argument %r.  Expected a name starting with :");
GLOBAL_STR(str1088, "No value provided for param %r");
GLOBAL_STR(str1089, "proc %r expected %d arguments, but got %d");
GLOBAL_STR(str1090, "Unexpected %r (in function call)");
GLOBAL_STR(str1091, "Unexpected control flow in block");
GLOBAL_STR(str1092, "Attempted to exit from completion hook.");
GLOBAL_STR(str1093, "Couldn't find terminator for here doc that starts here");
GLOBAL_STR(str1094, "\t");
GLOBAL_STR(str1095, "Invalid here doc delimiter");
GLOBAL_STR(str1096, "");
GLOBAL_STR(str1097, "%s != %s");
GLOBAL_STR(str1098, "array place");
GLOBAL_STR(str1099, "Environment binding shouldn't look like an array assignment");
GLOBAL_STR(str1100, "Expected = in environment binding, got +=");
GLOBAL_STR(str1101, "Environment bindings can't contain array literals");
GLOBAL_STR(str1102, "procs and shell functions can't be nested");
GLOBAL_STR(str1103, "%r was already declared");
GLOBAL_STR(str1104, "%r hasn't been declared");
GLOBAL_STR(str1105, "Can't modify constant %r");
GLOBAL_STR(str1106, "Expected word type %s, got %s");
GLOBAL_STR(str1107, "{");
GLOBAL_STR(str1108, "}");
GLOBAL_STR(str1109, "Invalid token after redirect operator");
GLOBAL_STR(str1110, "Space required before (");
GLOBAL_STR(str1111, "Unexpected left paren (might need a space before it)");
GLOBAL_STR(str1112, "Empty arg list not allowed");
GLOBAL_STR(str1113, " ");
GLOBAL_STR(str1114, " ");
GLOBAL_STR(str1115, "");
GLOBAL_STR(str1116, "Unexpected typed args");
GLOBAL_STR(str1117, "=word isn't allowed.  Hint: either quote it or add a space after =\nto pretty print an expression");
GLOBAL_STR(str1118, "Use const or var/setvar to assign in Oil (parse_sh_assign)");
GLOBAL_STR(str1119, "Unexpected typed args");
GLOBAL_STR(str1120, "Unexpected typed args");
GLOBAL_STR(str1121, "Control flow shouldn't have redirects");
GLOBAL_STR(str1122, "Control flow shouldn't have environment bindings");
GLOBAL_STR(str1123, "Unexpected argument to %r");
GLOBAL_STR(str1124, "Invalid word in for loop");
GLOBAL_STR(str1125, "Invalid word after for expression");
GLOBAL_STR(str1126, "Expected loop variable (a constant word)");
GLOBAL_STR(str1127, ",");
GLOBAL_STR(str1128, "Loop variables look like x, y (fix spaces)");
GLOBAL_STR(str1129, "Invalid loop variable name %r");
GLOBAL_STR(str1130, "Unexpected word after 3 loop variables");
GLOBAL_STR(str1131, "Expected { after iterable expression");
GLOBAL_STR(str1132, "Surround this word with either parens or quotes (parse_bare_word)");
GLOBAL_STR(str1133, "Expected at most 2 loop variables");
GLOBAL_STR(str1134, "Unexpected word after for loop variable");
GLOBAL_STR(str1135, "Bash for loops aren't allowed (parse_dparen)");
GLOBAL_STR(str1136, "Expected left paren (parse_sloppy_case)");
GLOBAL_STR(str1137, "Constant pattern should be quoted (parse_bare_word)");
GLOBAL_STR(str1138, "Expected ;; or esac");
GLOBAL_STR(str1139, "This is a constant string.  You may want a variable like $x (parse_bare_word)");
GLOBAL_STR(str1140, "You may want a space between parens (parse_dparen)");
GLOBAL_STR(str1141, "Unexpected word while parsing compound command");
GLOBAL_STR(str1142, "Invalid function name");
GLOBAL_STR(str1143, "Expected ) in function definition");
GLOBAL_STR(str1144, "Invalid KSH-style function name");
GLOBAL_STR(str1145, "Unexpected word when parsing command");
GLOBAL_STR(str1146, "Enable Oil to use procs (parse_proc)");
GLOBAL_STR(str1147, "Unexpected right brace");
GLOBAL_STR(str1148, "Unexpected = (Hint: use const/var/setvar, or quote it)");
GLOBAL_STR(str1149, "Unexpected EOF while parsing command");
GLOBAL_STR(str1150, "Invalid word while parsing command");
GLOBAL_STR(str1151, "Invalid word while parsing command line");
GLOBAL_STR(str1152, "Invalid word while parsing command list");
GLOBAL_STR(str1153, "Unterminated here doc began here");
GLOBAL_STR(str1154, "\\");
GLOBAL_STR(str1155, "*");
GLOBAL_STR(str1156, "?");
GLOBAL_STR(str1157, "[");
GLOBAL_STR(str1158, "]");
GLOBAL_STR(str1159, "\\*?[]-:!()|");
GLOBAL_STR(str1160, "\\?*+{}^$.()|[]");
GLOBAL_STR(str1161, "\\");
GLOBAL_STR(str1162, "Unexpected escaped character %r");
GLOBAL_STR(str1163, "");
GLOBAL_STR(str1164, "");
GLOBAL_STR(str1165, "Malformed character class; treating as literal");
GLOBAL_STR(str1166, "Got unescaped right bracket");
GLOBAL_STR(str1167, "Got unescaped trailing backslash");
GLOBAL_STR(str1168, ".|^$()+*?[]{}\\");
GLOBAL_STR(str1169, "\\");
GLOBAL_STR(str1170, "\\");
GLOBAL_STR(str1171, "\\[");
GLOBAL_STR(str1172, "\\]");
GLOBAL_STR(str1173, "\\\\");
GLOBAL_STR(str1174, "^");
GLOBAL_STR(str1175, ".");
GLOBAL_STR(str1176, ".*");
GLOBAL_STR(str1177, "[");
GLOBAL_STR(str1178, "^");
GLOBAL_STR(str1179, "\\-");
GLOBAL_STR(str1180, "\\]");
GLOBAL_STR(str1181, "]");
GLOBAL_STR(str1182, "-");
GLOBAL_STR(str1183, "]");
GLOBAL_STR(str1184, "");
GLOBAL_STR(str1185, "Error expanding glob %r: %s");
GLOBAL_STR(str1186, "-");
GLOBAL_STR(str1187, "history length = %d");
GLOBAL_STR(str1188, "!");
GLOBAL_STR(str1189, "Couldn't parse historical command %r: %s");
GLOBAL_STR(str1190, "TRAIL words: %s");
GLOBAL_STR(str1191, "^");
GLOBAL_STR(str1192, "No first word in %r");
GLOBAL_STR(str1193, "$");
GLOBAL_STR(str1194, "No last word in %r");
GLOBAL_STR(str1195, "*");
GLOBAL_STR(str1196, "Couldn't find words in %r");
GLOBAL_STR(str1197, "%s: not found");
GLOBAL_STR(str1198, "");
GLOBAL_STR(str1199, "?");
GLOBAL_STR(str1200, "%r found no results");
GLOBAL_STR(str1201, "");
GLOBAL_STR(str1202, "! %s");
GLOBAL_STR(str1203, "<Error: unbalanced \\[ and \\]> ");
GLOBAL_STR(str1204, "$");
GLOBAL_STR(str1205, "#");
GLOBAL_STR(str1206, "$");
GLOBAL_STR(str1207, "hostname");
GLOBAL_STR(str1208, "user");
GLOBAL_STR(str1209, "\u0001");
GLOBAL_STR(str1210, "\u0002");
GLOBAL_STR(str1211, "$");
GLOBAL_STR(str1212, "$");
GLOBAL_STR(str1213, "u");
GLOBAL_STR(str1214, "user");
GLOBAL_STR(str1215, "h");
GLOBAL_STR(str1216, "hostname");
GLOBAL_STR(str1217, ".");
GLOBAL_STR(str1218, "H");
GLOBAL_STR(str1219, "hostname");
GLOBAL_STR(str1220, "s");
GLOBAL_STR(str1221, "v");
GLOBAL_STR(str1222, "A");
GLOBAL_STR(str1223, "%H:%M");
GLOBAL_STR(str1224, "D");
GLOBAL_STR(str1225, "%X");
GLOBAL_STR(str1226, "w");
GLOBAL_STR(str1227, "PWD");
GLOBAL_STR(str1228, "HOME");
GLOBAL_STR(str1229, "<Error: %s>");
GLOBAL_STR(str1230, "W");
GLOBAL_STR(str1231, "PWD");
GLOBAL_STR(str1232, "<Error: PWD is not a string> ");
GLOBAL_STR(str1233, "<Error: \\%s not implemented in $PS1> ");
GLOBAL_STR(str1234, "$");
GLOBAL_STR(str1235, "\\$");
GLOBAL_STR(str1236, "Invalid token %r");
GLOBAL_STR(str1237, "");
GLOBAL_STR(str1238, "");
GLOBAL_STR(str1239, "<ERROR: Can't parse PS1: %s>");
GLOBAL_STR(str1240, "osh");
GLOBAL_STR(str1241, "PS1");
GLOBAL_STR(str1242, "$ ");
GLOBAL_STR(str1243, "PROMPT_COMMAND");
GLOBAL_STR(str1244, "Undefined variable %r");
GLOBAL_STR(str1245, "Can't use [] on value of type %s");
GLOBAL_STR(str1246, "");
GLOBAL_STR(str1247, "Can't use [] on value of type %s");
GLOBAL_STR(str1248, "");
GLOBAL_STR(str1249, "Invalid variable name %r (parse_sh_arith is off)");
GLOBAL_STR(str1250, "dynamic place");
GLOBAL_STR(str1251, "got invalid place expression");
GLOBAL_STR(str1252, "Invalid var ref expression");
GLOBAL_STR(str1253, "0x");
GLOBAL_STR(str1254, "Invalid hex constant %r");
GLOBAL_STR(str1255, "0");
GLOBAL_STR(str1256, "Invalid octal constant %r");
GLOBAL_STR(str1257, "#");
GLOBAL_STR(str1258, "#");
GLOBAL_STR(str1259, "Invalid base for numeric constant %r");
GLOBAL_STR(str1260, "a");
GLOBAL_STR(str1261, "A");
GLOBAL_STR(str1262, "@");
GLOBAL_STR(str1263, "_");
GLOBAL_STR(str1264, "Invalid digits for numeric constant %r");
GLOBAL_STR(str1265, "Digits %r out of range for base %d");
GLOBAL_STR(str1266, "Parse error in recursive arithmetic");
GLOBAL_STR(str1267, "Invalid integer constant %r");
GLOBAL_STR(str1268, "Invalid integer constant %r");
GLOBAL_STR(str1269, "Invalid integer constant %r");
GLOBAL_STR(str1270, "Undefined value in arithmetic context");
GLOBAL_STR(str1271, "Expected a value convertible to integer, got %s");
GLOBAL_STR(str1272, "0");
GLOBAL_STR(str1273, "Undefined variable %r");
GLOBAL_STR(str1274, "Divide by zero");
GLOBAL_STR(str1275, "Divide by zero");
GLOBAL_STR(str1276, "Expected array or assoc in index expression, got %s");
GLOBAL_STR(str1277, "Divide by zero");
GLOBAL_STR(str1278, "Divide by zero");
GLOBAL_STR(str1279, "Exponent can't be less than zero");
GLOBAL_STR(str1280, "for -Wreturn-type in C++");
GLOBAL_STR(str1281, "Associative array keys must be strings: $x 'x' \"$x\" etc.");
GLOBAL_STR(str1282, "Invalid variable name %r");
GLOBAL_STR(str1283, "Invalid place to modify");
GLOBAL_STR(str1284, "%s isn't implemented");
GLOBAL_STR(str1285, "Invalid regex %r: %s");
GLOBAL_STR(str1286, " \t\n");
GLOBAL_STR(str1287, "IFS");
GLOBAL_STR(str1288, "IFS shouldn't be an array");
GLOBAL_STR(str1289, " \t\n");
GLOBAL_STR(str1290, "IFS");
GLOBAL_STR(str1291, " ");
GLOBAL_STR(str1292, "");
GLOBAL_STR(str1293, "IFS shouldn't be an array");
GLOBAL_STR(str1294, "for -Wreturn-type in C++");
GLOBAL_STR(str1295, "\\");
GLOBAL_STR(str1296, "\\");
GLOBAL_STR(str1297, "Invalid transition from %r with %r");
GLOBAL_STR(str1298, "\u00ef\u00bf\u00bd");
GLOBAL_STR(str1299, "");
GLOBAL_STR(str1300, "Incomplete UTF-8 character");
GLOBAL_STR(str1301, "Invalid UTF-8 continuation byte");
GLOBAL_STR(str1302, "Invalid start of UTF-8 character");
GLOBAL_STR(str1303, "");
GLOBAL_STR(str1304, "%s can't have an argument");
GLOBAL_STR(str1305, "");
GLOBAL_STR(str1306, "%s can't have an argument");
GLOBAL_STR(str1307, "");
GLOBAL_STR(str1308, "%s can't have an argument");
GLOBAL_STR(str1309, "");
GLOBAL_STR(str1310, "%s can't have an argument");
GLOBAL_STR(str1311, "");
GLOBAL_STR(str1312, "<_GlobReplacer regex %r r %r>");
GLOBAL_STR(str1313, "(%s)");
GLOBAL_STR(str1314, "Error matching regex %r: %s");
GLOBAL_STR(str1315, "^");
GLOBAL_STR(str1316, "$");
GLOBAL_STR(str1317, "\r");
GLOBAL_STR(str1318, "<INVALID CR>");
GLOBAL_STR(str1319, "\n");
GLOBAL_STR(str1320, "<INVALID NEWLINE>");
GLOBAL_STR(str1321, " `~!$&*()[]{}\\|;'\"<>?");
GLOBAL_STR(str1322, "Left-hand side of this assignment is invalid");
GLOBAL_STR(str1323, "Token can't be used in prefix position");
GLOBAL_STR(str1324, "Token can't be used in infix position");
GLOBAL_STR(str1325, "Parser expected %s, got %s");
GLOBAL_STR(str1326, "Unexpected end of input");
GLOBAL_STR(str1327, "POSIX shell arithmetic isn't allowed (parse_sh_arith)");
GLOBAL_STR(str1328, "");
GLOBAL_STR(str1329, "");
GLOBAL_STR(str1330, "");
GLOBAL_STR(str1331, "");
GLOBAL_STR(str1332, "");
GLOBAL_STR(str1333, "");
GLOBAL_STR(str1334, "");
GLOBAL_STR(str1335, "");
GLOBAL_STR(str1336, "");
GLOBAL_STR(str1337, "for -Wreturn-type in C++");
GLOBAL_STR(str1338, "Compound shouldn't be empty");
GLOBAL_STR(str1339, "for -Wreturn-type in C++");
GLOBAL_STR(str1340, "/");
GLOBAL_STR(str1341, "/");
GLOBAL_STR(str1342, "");
GLOBAL_STR(str1343, "EOF");
GLOBAL_STR(str1344, "");
GLOBAL_STR(str1345, "");
GLOBAL_STR(str1346, " \t");
GLOBAL_STR(str1347, "\n");
GLOBAL_STR(str1348, "\n");
GLOBAL_STR(str1349, "\n");
GLOBAL_STR(str1350, "\n");
GLOBAL_STR(str1351, "BASH_SOURCE");
GLOBAL_STR(str1352, "FUNCNAME");
GLOBAL_STR(str1353, "BASH_LINENO");
GLOBAL_STR(str1354, "0");
GLOBAL_STR(str1355, "0");
GLOBAL_STR(str1356, "^([a-zA-Z_][a-zA-Z0-9_]*)((=|\\+=)(.*))?$");
GLOBAL_STR(str1357, "Assignment builtin expected NAME=value, got %r");
GLOBAL_STR(str1358, "+");
GLOBAL_STR(str1359, "\\");
GLOBAL_STR(str1360, "\\\\");
GLOBAL_STR(str1361, "");
GLOBAL_STR(str1362, "for -Wreturn-type in C++");
GLOBAL_STR(str1363, "");
GLOBAL_STR(str1364, "The length index of a array slice can't be negative: %d");
GLOBAL_STR(str1365, "Can't slice associative arrays");
GLOBAL_STR(str1366, "i");
GLOBAL_STR(str1367, "e");
GLOBAL_STR(str1368, "f");
GLOBAL_STR(str1369, "n");
GLOBAL_STR(str1370, "u");
GLOBAL_STR(str1371, "x");
GLOBAL_STR(str1372, "C");
GLOBAL_STR(str1373, "");
GLOBAL_STR(str1374, "HOME");
GLOBAL_STR(str1375, "Error expanding tilde (e.g. invalid user)");
GLOBAL_STR(str1376, "Can't assign to special variable");
GLOBAL_STR(str1377, "unset variable %r");
GLOBAL_STR(str1378, "warning: ");
GLOBAL_STR(str1379, "-1");
GLOBAL_STR(str1380, "Indirect expansion of array");
GLOBAL_STR(str1381, "Indirect expansion of assoc array");
GLOBAL_STR(str1382, "extended globs not supported in ${x//GLOB/}");
GLOBAL_STR(str1383, "");
GLOBAL_STR(str1384, "warning: ");
GLOBAL_STR(str1385, "");
GLOBAL_STR(str1386, "\u0001");
GLOBAL_STR(str1387, "");
GLOBAL_STR(str1388, "\u0002");
GLOBAL_STR(str1389, "");
GLOBAL_STR(str1390, "Can't use @P on %s");
GLOBAL_STR(str1391, " ");
GLOBAL_STR(str1392, "Can't use @Q on %s");
GLOBAL_STR(str1393, "a");
GLOBAL_STR(str1394, "A");
GLOBAL_STR(str1395, "r");
GLOBAL_STR(str1396, "x");
GLOBAL_STR(str1397, "n");
GLOBAL_STR(str1398, "");
GLOBAL_STR(str1399, "Var op %r not implemented");
GLOBAL_STR(str1400, "Can't index string with @");
GLOBAL_STR(str1401, "Can't index string with *");
GLOBAL_STR(str1402, "Can't index string %r with integer");
GLOBAL_STR(str1403, "");
GLOBAL_STR(str1404, "");
GLOBAL_STR(str1405, "$");
GLOBAL_STR(str1406, "Undefined variable %r");
GLOBAL_STR(str1407, "Undefined array %r");
GLOBAL_STR(str1408, "Array %r can't be referred to as a scalar (without @ or *)");
GLOBAL_STR(str1409, "Test operation not allowed with ${!array[@]}");
GLOBAL_STR(str1410, "Not implemented");
GLOBAL_STR(str1411, "Illegal array word part (strict_array)");
GLOBAL_STR(str1412, " ");
GLOBAL_STR(str1413, "");
GLOBAL_STR(str1414, "Array %r can't be referred to as a scalar (without @ or *)");
GLOBAL_STR(str1415, "@(");
GLOBAL_STR(str1416, "|");
GLOBAL_STR(str1417, ")");
GLOBAL_STR(str1418, "Extended globs and arrays can't appear in the same word");
GLOBAL_STR(str1419, "*");
GLOBAL_STR(str1420, "Unexpected array literal");
GLOBAL_STR(str1421, "Unexpected associative array literal");
GLOBAL_STR(str1422, "Can't splice %r");
GLOBAL_STR(str1423, "");
GLOBAL_STR(str1424, "");
GLOBAL_STR(str1425, "");
GLOBAL_STR(str1426, "Extended glob %r matched no files");
GLOBAL_STR(str1427, "Extended glob not allowed in this word");
GLOBAL_STR(str1428, "This word should yield a string, but it contains an array");
GLOBAL_STR(str1429, " ");
GLOBAL_STR(str1430, "extended glob not allowed in this word");
GLOBAL_STR(str1431, "");
GLOBAL_STR(str1432, "");
GLOBAL_STR(str1433, "");
GLOBAL_STR(str1434, "<Runtime error: %s>");
GLOBAL_STR(str1435, "<I/O error: %s>");
GLOBAL_STR(str1436, "<Ctrl-C>");
GLOBAL_STR(str1437, "");
GLOBAL_STR(str1438, "");
GLOBAL_STR(str1439, "");
GLOBAL_STR(str1440, "");
GLOBAL_STR(str1441, "Pattern %r matched no files");
GLOBAL_STR(str1442, "");
GLOBAL_STR(str1443, "LHS array not allowed in assignment builtin");
GLOBAL_STR(str1444, "-");
GLOBAL_STR(str1445, "+");
GLOBAL_STR(str1446, "f");
GLOBAL_STR(str1447, "F");
GLOBAL_STR(str1448, "Pattern %r matched no files");
GLOBAL_STR(str1449, "");
GLOBAL_STR(str1450, "__NO_COMMAND_SUB__");
GLOBAL_STR(str1451, "__NO_PROCESS_SUB__");
GLOBAL_STR(str1452, "Expected : or } in slice");
GLOBAL_STR(str1453, "Pattern in ${x/pat/replace} must not be empty");
GLOBAL_STR(str1454, "Expected } after replacement string, got %s");
GLOBAL_STR(str1455, "Expected } or / to close pattern");
GLOBAL_STR(str1456, "Expected ] to close subscript");
GLOBAL_STR(str1457, "Expected } to close ${");
GLOBAL_STR(str1458, "Expected } to close ${");
GLOBAL_STR(str1459, "Expected a constant argument");
GLOBAL_STR(str1460, "Expected } to close ${");
GLOBAL_STR(str1461, "Expected } to close ${");
GLOBAL_STR(str1462, "Unexpected token in ${} (%s)");
GLOBAL_STR(str1463, "VOp2");
GLOBAL_STR(str1464, "Unexpected token in ${} (%s)");
GLOBAL_STR(str1465, "VOp3");
GLOBAL_STR(str1466, "Expected } to close ${");
GLOBAL_STR(str1467, "Expected } after length expression");
GLOBAL_STR(str1468, "TODO: ${.myproc builtin sub}");
GLOBAL_STR(str1469, "Unexpected token in ${}");
GLOBAL_STR(str1470, "\\");
GLOBAL_STR(str1471, "Strings with backslashes should look like r'\\n' or $'\\n'");
GLOBAL_STR(str1472, "Use \\xhh or \\u{...} instead of octal escapes in Oil strings");
GLOBAL_STR(str1473, "Invalid hex escape in Oil string (must be \\xHH)");
GLOBAL_STR(str1474, "Invalid char escape in C-style string literal");
GLOBAL_STR(str1475, "Unexpected EOF in single-quoted string that began here");
GLOBAL_STR(str1476, "\"");
GLOBAL_STR(str1477, "'");
GLOBAL_STR(str1478, "Unexpected EOF reading extended glob that began here");
GLOBAL_STR(str1479, "Invalid char escape in double quoted string");
GLOBAL_STR(str1480, "Literal $ should be quoted like \\$");
GLOBAL_STR(str1481, "Invalid backtick: use $(cmd) or \\` in Oil strings");
GLOBAL_STR(str1482, "Unexpected EOF reading double-quoted string that began here");
GLOBAL_STR(str1483, "Use $(cmd) instead of backticks (parse_backticks)");
GLOBAL_STR(str1484, "Unexpected EOF while looking for closing backtick");
GLOBAL_STR(str1485, "");
GLOBAL_STR(str1486, "backticks");
GLOBAL_STR(str1487, "Invalid proc name %s");
GLOBAL_STR(str1488, "Unexpected token after arithmetic expression (%s != %s)");
GLOBAL_STR(str1489, "Expected second ) to end arith sub");
GLOBAL_STR(str1490, "Expected second ) to end arith statement");
GLOBAL_STR(str1491, "Expected ; here");
GLOBAL_STR(str1492, "Expected ; here");
GLOBAL_STR(str1493, "Expected ) to end for loop expression");
GLOBAL_STR(str1494, "Expected ( after =");
GLOBAL_STR(str1495, "Unexpected token in array literal");
GLOBAL_STR(str1496, "Expected associative array pair");
GLOBAL_STR(str1497, "Invalid char escape (parse_backslash)");
GLOBAL_STR(str1498, "Unexpected token after array literal");
GLOBAL_STR(str1499, "Unexpected token after array splice");
GLOBAL_STR(str1500, "TODO: @{.myproc builtin sub}");
GLOBAL_STR(str1501, "Literal @ starting a word must be quoted (parse_at_all)");
GLOBAL_STR(str1502, "/");
GLOBAL_STR(str1503, "next_byte %r");
GLOBAL_STR(str1504, "Literal $ should be quoted like \\$");
GLOBAL_STR(str1505, "Unexpected token after @()");
GLOBAL_STR(str1506, "Word has unbalanced { }.  Maybe add a space or quote it like \\{");
GLOBAL_STR(str1507, "Unexpected parts after triple quoted string");
GLOBAL_STR(str1508, "Unexpected token while parsing arithmetic: %r");
GLOBAL_STR(str1509, "Invalid blank line in multiline mode");
GLOBAL_STR(str1510, "r");
GLOBAL_STR(str1511, "Unhandled: %s (%s)");
GLOBAL_STR(str1512, "Expected var name");
GLOBAL_STR(str1513, "Expected end of var ref expression");
GLOBAL_STR(str1514, "Invalid lex state %s");
GLOBAL_STR(str1515, "typ");
GLOBAL_STR(str1516, "tok");
GLOBAL_STR(str1517, "children");
GLOBAL_STR(str1518, "-");
GLOBAL_STR(str1519, "with %d children");
GLOBAL_STR(str1520, "");
GLOBAL_STR(str1521, "(PNode %s %s %s)");
GLOBAL_STR(str1522, "&");
GLOBAL_STR(str1523, "&amp;");
GLOBAL_STR(str1524, "<");
GLOBAL_STR(str1525, "&lt;");
GLOBAL_STR(str1526, ">");
GLOBAL_STR(str1527, "&gt;");
GLOBAL_STR(str1528, ".");
GLOBAL_STR(str1529, "/");
GLOBAL_STR(str1530, "/");
GLOBAL_STR(str1531, "/");
GLOBAL_STR(str1532, "%s/%s");
GLOBAL_STR(str1533, "/");
GLOBAL_STR(str1534, "");
GLOBAL_STR(str1535, "/");
GLOBAL_STR(str1536, "/");
GLOBAL_STR(str1537, "/");
GLOBAL_STR(str1538, ".");
GLOBAL_STR(str1539, "");
GLOBAL_STR(str1540, "/");
GLOBAL_STR(str1541, "//");
GLOBAL_STR(str1542, "///");
GLOBAL_STR(str1543, "/");
GLOBAL_STR(str1544, ".");
GLOBAL_STR(str1545, "..");
GLOBAL_STR(str1546, "..");
GLOBAL_STR(str1547, "/");
GLOBAL_STR(str1548, "\\'\r\n\t\u0000");
GLOBAL_STR(str1549, "$'");
GLOBAL_STR(str1550, "'");
GLOBAL_STR(str1551, "'");
GLOBAL_STR(str1552, "");
GLOBAL_STR(str1553, "'");
GLOBAL_STR(str1554, "'");
GLOBAL_STR(str1555, "");
GLOBAL_STR(str1556, "'");
GLOBAL_STR(str1557, "'");
GLOBAL_STR(str1558, "");
GLOBAL_STR(str1559, "\\");
GLOBAL_STR(str1560, "\\\\");
GLOBAL_STR(str1561, "'");
GLOBAL_STR(str1562, "\\'");
GLOBAL_STR(str1563, "\n");
GLOBAL_STR(str1564, "\\n");
GLOBAL_STR(str1565, "\r");
GLOBAL_STR(str1566, "\\r");
GLOBAL_STR(str1567, "\t");
GLOBAL_STR(str1568, "\\t");
GLOBAL_STR(str1569, "\u0000");
GLOBAL_STR(str1570, "\\x00");
GLOBAL_STR(str1571, "\\0");
GLOBAL_STR(str1572, "");
GLOBAL_STR(str1573, "");
GLOBAL_STR(str1574, "");
GLOBAL_STR(str1575, "\\");
GLOBAL_STR(str1576, "\\\\");
GLOBAL_STR(str1577, "'");
GLOBAL_STR(str1578, "\\'");
GLOBAL_STR(str1579, "\n");
GLOBAL_STR(str1580, "\\n");
GLOBAL_STR(str1581, "\r");
GLOBAL_STR(str1582, "\\r");
GLOBAL_STR(str1583, "\t");
GLOBAL_STR(str1584, "\\t");
GLOBAL_STR(str1585, "\u0000");
GLOBAL_STR(str1586, "\\x00");
GLOBAL_STR(str1587, "\\0");
GLOBAL_STR(str1588, " \n\r\t");
GLOBAL_STR(str1589, "Unexpected token in QSN string");
GLOBAL_STR(str1590, "Expected closing single quote in QSN string");
GLOBAL_STR(str1591, "Unexpected data after closing quote");
GLOBAL_STR(str1592, "Unexpected token after QSN string");
GLOBAL_STR(str1593, "Empty file with EOF span on invalid line:");
GLOBAL_STR(str1594, "%s");
GLOBAL_STR(str1595, "%5d %r");
GLOBAL_STR(str1596, "(%d tokens)");
GLOBAL_STR(str1597, "SPID %d = %r");
GLOBAL_STR(str1598, "Invalid here doc delimiter");
GLOBAL_STR(str1599, "<<<");
GLOBAL_STR(str1600, " '''");
GLOBAL_STR(str1601, " \"\"\"");
GLOBAL_STR(str1602, "'''\n");
GLOBAL_STR(str1603, "\"\"\"\n");
GLOBAL_STR(str1604, "setvar ");
GLOBAL_STR(str1605, "set ");
GLOBAL_STR(str1606, "setvar ");
GLOBAL_STR(str1607, " = ");
GLOBAL_STR(str1608, "''");
GLOBAL_STR(str1609, ",");
GLOBAL_STR(str1610, "[");
GLOBAL_STR(str1611, "]");
GLOBAL_STR(str1612, "test");
GLOBAL_STR(str1613, "Got [ without ]");
GLOBAL_STR(str1614, ".");
GLOBAL_STR(str1615, "source");
GLOBAL_STR(str1616, "do {");
GLOBAL_STR(str1617, "shell {");
GLOBAL_STR(str1618, "}");
GLOBAL_STR(str1619, "proc ");
GLOBAL_STR(str1620, "{");
GLOBAL_STR(str1621, "}");
GLOBAL_STR(str1622, "for %s in @ARGV ");
GLOBAL_STR(str1623, "[");
GLOBAL_STR(str1624, "]");
GLOBAL_STR(str1625, "while not");
GLOBAL_STR(str1626, "} ");
GLOBAL_STR(str1627, "{");
GLOBAL_STR(str1628, "} ");
GLOBAL_STR(str1629, " {");
GLOBAL_STR(str1630, "}");
GLOBAL_STR(str1631, "match");
GLOBAL_STR(str1632, "{");
GLOBAL_STR(str1633, "with ");
GLOBAL_STR(str1634, "Expected with dsemi_spid or last_spid in case arm");
GLOBAL_STR(str1635, "}");
GLOBAL_STR(str1636, "''");
GLOBAL_STR(str1637, "'");
GLOBAL_STR(str1638, "'");
GLOBAL_STR(str1639, "\"");
GLOBAL_STR(str1640, "\"");
GLOBAL_STR(str1641, "@ARGV");
GLOBAL_STR(str1642, "\n");
GLOBAL_STR(str1643, "'%s'");
GLOBAL_STR(str1644, "WARNING: %s has no span_id");
GLOBAL_STR(str1645, "$BgPid");
GLOBAL_STR(str1646, "$ifsjoin(ARGV)");
GLOBAL_STR(str1647, "$Argc");
GLOBAL_STR(str1648, "$Pid");
GLOBAL_STR(str1649, "$ifsjoin(ARGV)");
GLOBAL_STR(str1650, "$Flags");
GLOBAL_STR(str1651, "$Status");
GLOBAL_STR(str1652, "$(");
GLOBAL_STR(str1653, ")");
GLOBAL_STR(str1654, "-E");
GLOBAL_STR(str1655, "-A");
GLOBAL_STR(str1656, "command");
GLOBAL_STR(str1657, "-D");
GLOBAL_STR(str1658, "-A");
GLOBAL_STR(str1659, "file");
GLOBAL_STR(str1660, "foo.py");
GLOBAL_STR(str1661, "foo");
GLOBAL_STR(str1662, "bar.py");
GLOBAL_STR(str1663, "m%d");
GLOBAL_STR(str1664, "");
GLOBAL_STR(str1665, "");
GLOBAL_STR(str1666, "slowc");
GLOBAL_STR(str1667, "vi");
GLOBAL_STR(str1668, "emacs");
GLOBAL_STR(str1669, "set editing-mode ");
GLOBAL_STR(str1670, "Warning: Can't set option %r because shell wasn't compiled with GNU readline");
GLOBAL_STR(str1671, "vi");
GLOBAL_STR(str1672, "emacs");
GLOBAL_STR(str1673, "main");
GLOBAL_STR(str1674, "osh usage error: %s");
GLOBAL_STR(str1675, "%s-usage");
GLOBAL_STR(str1676, "main");
GLOBAL_STR(str1677, "oil");
GLOBAL_STR(str1678, "oil:all");
GLOBAL_STR(str1679, "--one-pass-parse requires noexec (-n)");
GLOBAL_STR(str1680, "completion");
GLOBAL_STR(str1681, "history");
GLOBAL_STR(str1682, "");
GLOBAL_STR(str1683, "OSH_DEBUG_DIR");
GLOBAL_STR(str1684, "%d-osh.log");
GLOBAL_STR(str1685, "osh: Couldn't open %r: %s");
GLOBAL_STR(str1686, "Writing logs to %r");
GLOBAL_STR(str1687, "OSH_HIJACK_SHEBANG");
GLOBAL_STR(str1688, "");
GLOBAL_STR(str1689, "OSH_CRASH_DUMP_DIR");
GLOBAL_STR(str1690, "");
GLOBAL_STR(str1691, " -i");
GLOBAL_STR(str1692, "");
GLOBAL_STR(str1693, "osh: Couldn't open %r: %s");
GLOBAL_STR(str1694, ".config/oil/%src");
GLOBAL_STR(str1695, ".config/oil/history_%s");
GLOBAL_STR(str1696, "nice");
GLOBAL_STR(str1697, "osh warning: --rcfile ignored in non-interactive shell");
GLOBAL_STR(str1698, "");
GLOBAL_STR(str1699, "!");
GLOBAL_STR(str1700, "--");
GLOBAL_STR(str1701, "--dir");
GLOBAL_STR(str1702, "--exists");
GLOBAL_STR(str1703, "--file");
GLOBAL_STR(str1704, "--symlink");
GLOBAL_STR(str1705, "Expected unary operator, got %r (2 args)");
GLOBAL_STR(str1706, "-a");
GLOBAL_STR(str1707, "-o");
GLOBAL_STR(str1708, "!");
GLOBAL_STR(str1709, "(");
GLOBAL_STR(str1710, ")");
GLOBAL_STR(str1711, "Expected binary operator, got %r (3 args)");
GLOBAL_STR(str1712, "should be invoked as 'test' (simple_test_builtin)");
GLOBAL_STR(str1713, "]");
GLOBAL_STR(str1714, "missing closing ]");
GLOBAL_STR(str1715, "should only have 3 arguments or fewer (simple_test_builtin)");
GLOBAL_STR(str1716, "!");
GLOBAL_STR(str1717, "(");
GLOBAL_STR(str1718, ")");
GLOBAL_STR(str1719, "(test) ");
GLOBAL_STR(str1720, "(test) ");

namespace runtime {  // forward declare


}  // forward declare namespace runtime

namespace vm {  // forward declare

  class ControlFlow;
  class _Executor;
  class _AssignBuiltin;
  class _Builtin;
  class ctx_Redirect;
  class ctx_ProcessSub;
  class ctx_FlushStdout;

}  // forward declare namespace vm

namespace format {  // forward declare

  class ColorOutput;
  class TextOutput;
  class HtmlOutput;
  class AnsiOutput;
  class _PrettyPrinter;

}  // forward declare namespace format

namespace oils_for_unix {  // forward declare


}  // forward declare namespace oils_for_unix

namespace alloc {  // forward declare

  class ctx_Location;
  class Arena;

}  // forward declare namespace alloc

namespace ansi {  // forward declare


}  // forward declare namespace ansi

namespace comp_ui {  // forward declare

  class PromptState;
  class State;
  class _IDisplay;
  class MinimalDisplay;
  class NiceDisplay;

}  // forward declare namespace comp_ui

namespace completion {  // forward declare

  class _RetryCompletion;
  class OptionState;
  class Lookup;
  class Api;
  class CompletionAction;
  class UsersAction;
  class TestAction;
  class DynamicWordsAction;
  class FileSystemAction;
  class ShellFuncAction;
  class VariablesAction;
  class ExternalCommandAction;
  class _Predicate;
  class DefaultPredicate;
  class GlobPredicate;
  class UserSpec;
  class RootCompleter;
  class ReadlineCallback;

}  // forward declare namespace completion

namespace dev {  // forward declare

  class CrashDumper;
  class ctx_Tracer;
  class Tracer;

}  // forward declare namespace dev

namespace error {  // forward declare

  class Usage;
  class _ErrorWithLocation;
  class Runtime;
  class Parse;
  class FailGlob;
  class RedirectEval;
  class FatalRuntime;
  class Strict;
  class ErrExit;
  class Expr;

}  // forward declare namespace error

namespace executor {  // forward declare

  class _ProcessSubFrame;
  class ShellExecutor;

}  // forward declare namespace executor

namespace main_loop {  // forward declare

  class ctx_Descriptors;
  class Headless;

}  // forward declare namespace main_loop

namespace process {  // forward declare

  class _RedirFrame;
  class _FdFrame;
  class FdState;
  class ChildStateChange;
  class StdinFromPipe;
  class StdoutToPipe;
  class ExternalProgram;
  class Thunk;
  class ExternalThunk;
  class SubProgramThunk;
  class _HereDocWriterThunk;
  class Job;
  class Process;
  class ctx_Pipe;
  class Pipeline;
  class JobState;
  class Waiter;

}  // forward declare namespace process

namespace pyerror {  // forward declare


}  // forward declare namespace pyerror

namespace shell_native {  // forward declare


}  // forward declare namespace shell_native

namespace state {  // forward declare

  class SearchPath;
  class ctx_Source;
  class ctx_Option;
  class ctx_AssignBuiltin;
  class ctx_OilExpr;
  class ctx_ErrExit;
  class ctx_HayNode;
  class ctx_HayEval;
  class Hay;
  class OptHook;
  class MutableOpts;
  class _ArgFrame;
  class DirStack;
  class DebugFrame;
  class ctx_Call;
  class ctx_Temp;
  class ctx_Shvar;
  class ctx_Registers;
  class ctx_ThisDir;
  class Mem;

}  // forward declare namespace state

namespace ui {  // forward declare

  class ctx_Location;
  class ErrorFormatter;

}  // forward declare namespace ui

namespace util {  // forward declare

  class UserExit;
  class HistoryError;
  class _DebugFile;
  class NullDebugFile;
  class DebugFile;

}  // forward declare namespace util

namespace args {  // forward declare

  class _Attributes;
  class Reader;
  class _Action;
  class _ArgAction;
  class SetToInt;
  class SetToFloat;
  class SetToString;
  class SetAttachedBool;
  class SetToTrue;
  class SetOption;
  class SetNamedOption;
  class SetAction;
  class SetNamedAction;

}  // forward declare namespace args

namespace lexer {  // forward declare

  class LineLexer;
  class Lexer;

}  // forward declare namespace lexer

namespace location {  // forward declare


}  // forward declare namespace location

namespace parse_lib {  // forward declare

  class _BaseTrail;
  class ctx_Alias;
  class Trail;
  class ParseContext;

}  // forward declare namespace parse_lib

namespace reader {  // forward declare

  class _Reader;
  class DisallowedLineReader;
  class FileLineReader;
  class VirtualLineReader;
  class InteractiveLineReader;

}  // forward declare namespace reader

namespace typed_args {  // forward declare


}  // forward declare namespace typed_args

namespace expr_parse {  // forward declare

  class ExprParser;

}  // forward declare namespace expr_parse

namespace expr_to_ast {  // forward declare

  class Transformer;

}  // forward declare namespace expr_to_ast

namespace funcs {  // forward declare

  class ParseHay;
  class EvalHay;
  class BlockAsStr;
  class HayFunc;

}  // forward declare namespace funcs

namespace regex_translate {  // forward declare


}  // forward declare namespace regex_translate

namespace arith_parse {  // forward declare


}  // forward declare namespace arith_parse

namespace bool_parse {  // forward declare

  class BoolParser;

}  // forward declare namespace bool_parse

namespace braces {  // forward declare

  class _NotARange;
  class _RangeParser;
  class _StackFrame;

}  // forward declare namespace braces

namespace builtin_assign {  // forward declare

  class Export;
  class Readonly;
  class NewVar;
  class Unset;
  class Shift;

}  // forward declare namespace builtin_assign

namespace builtin_comp {  // forward declare

  class _FixedWordsAction;
  class _DynamicProcDictAction;
  class _DynamicStrDictAction;
  class SpecBuilder;
  class Complete;
  class CompGen;
  class CompOpt;
  class CompAdjust;

}  // forward declare namespace builtin_comp

namespace builtin_lib {  // forward declare

  class Bind;
  class History;

}  // forward declare namespace builtin_lib

namespace builtin_meta {  // forward declare

  class Eval;
  class Source;
  class Command;
  class Builtin;
  class RunProc;
  class Try;
  class BoolStatus;
  class Type;

}  // forward declare namespace builtin_meta

namespace builtin_misc {  // forward declare

  class Times;
  class Read;
  class MapFile;
  class ctx_CdBlock;
  class Cd;
  class Pushd;
  class Popd;
  class Dirs;
  class Pwd;
  class Help;
  class Cat;

}  // forward declare namespace builtin_misc

namespace builtin_printf {  // forward declare

  class _FormatStringParser;
  class Printf;

}  // forward declare namespace builtin_printf

namespace builtin_process {  // forward declare

  class Jobs;
  class Fg;
  class Bg;
  class Fork;
  class ForkWait;

}  // forward declare namespace builtin_process

namespace builtin_process2 {  // forward declare

  class Exec;
  class Wait;
  class Umask;

}  // forward declare namespace builtin_process2

namespace builtin_pure {  // forward declare

  class Boolean;
  class Alias;
  class UnAlias;
  class Set;
  class Shopt;
  class Hash;
  class GetOptsState;
  class GetOpts;
  class Echo;
  class Module;
  class Use;
  class Shvar;
  class PushRegisters;
  class Fopen;

}  // forward declare namespace builtin_pure

namespace builtin_trap {  // forward declare

  class TrapState;
  class Trap;

}  // forward declare namespace builtin_trap

namespace cmd_eval {  // forward declare

  class Deps;
  class ctx_LoopLevel;
  class CommandEvaluator;

}  // forward declare namespace cmd_eval

namespace cmd_parse {  // forward declare

  class VarChecker;
  class ctx_VarChecker;
  class CommandParser;

}  // forward declare namespace cmd_parse

namespace glob_ {  // forward declare

  class _GlobParser;
  class Globber;

}  // forward declare namespace glob_

namespace history {  // forward declare

  class Evaluator;

}  // forward declare namespace history

namespace prompt {  // forward declare

  class _PromptEvaluatorCache;
  class Evaluator;
  class UserPlugin;

}  // forward declare namespace prompt

namespace sh_expr_eval {  // forward declare

  class UnsafeArith;
  class ArithEvaluator;
  class BoolEvaluator;

}  // forward declare namespace sh_expr_eval

namespace split {  // forward declare

  class SplitContext;
  class _BaseSplitter;
  class IfsSplitter;

}  // forward declare namespace split

namespace string_ops {  // forward declare

  class GlobReplacer;

}  // forward declare namespace string_ops

namespace tdop {  // forward declare

  class TdopParser;

}  // forward declare namespace tdop

namespace word_ {  // forward declare

  class ctx_EmitDocToken;
  class ctx_Multiline;

}  // forward declare namespace word_

namespace word_compile {  // forward declare


}  // forward declare namespace word_compile

namespace word_eval {  // forward declare

  class StringWordEvaluator;
  class TildeEvaluator;
  class AbstractWordEvaluator;
  class NormalWordEvaluator;
  class CompletionWordEvaluator;

}  // forward declare namespace word_eval

namespace word_parse {  // forward declare

  class WordEmitter;
  class WordParser;

}  // forward declare namespace word_parse

namespace grammar {  // forward declare

  class Grammar;

}  // forward declare namespace grammar

namespace pnode {  // forward declare

  class PNode;

}  // forward declare namespace pnode

namespace cgi {  // forward declare


}  // forward declare namespace cgi

namespace os_path {  // forward declare


}  // forward declare namespace os_path

namespace qsn {  // forward declare


}  // forward declare namespace qsn

namespace qsn_native {  // forward declare


}  // forward declare namespace qsn_native

namespace osh2oil {  // forward declare

  class Cursor;
  class OilPrinter;

}  // forward declare namespace osh2oil

namespace shell {  // forward declare

  class ShellOptHook;

}  // forward declare namespace shell

namespace builtin_bracket {  // forward declare

  class _StringWordEmitter;
  class _WordEvaluator;
  class Test;

}  // forward declare namespace builtin_bracket

namespace runtime {  // declare

extern int NO_SPID;
hnode_asdl::hnode__Record* NewRecord(Str* node_type);
hnode_asdl::hnode__Leaf* NewLeaf(Str* s, hnode_asdl::color_t e_color);
extern Str* TRUE_STR;
extern Str* FALSE_STR;


}  // declare namespace runtime

namespace vm {  // declare

using id_kind_asdl::Id;
class ControlFlow {
 public:
  ControlFlow(syntax_asdl::Token* token, int arg);
  bool IsReturn();
  bool IsBreak();
  bool IsContinue();
  int StatusCode();
  runtime_asdl::flow_t HandleLoop();

  GC_OBJ(header_);
  syntax_asdl::Token* token;
  int arg;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ControlFlow));
  }

  DISALLOW_COPY_AND_ASSIGN(ControlFlow)
};

void InitUnsafeArith(state::Mem* mem, word_eval::NormalWordEvaluator* word_ev, sh_expr_eval::UnsafeArith* unsafe_arith);
void InitCircularDeps(sh_expr_eval::ArithEvaluator* arith_ev, sh_expr_eval::BoolEvaluator* bool_ev, expr_eval::OilEvaluator* expr_ev, word_eval::NormalWordEvaluator* word_ev, cmd_eval::CommandEvaluator* cmd_ev, vm::_Executor* shell_ex, prompt::Evaluator* prompt_ev, dev::Tracer* tracer);
class _Executor {
 public:
  _Executor();
  virtual void CheckCircularDeps();
  virtual int RunBuiltin(int builtin_id, runtime_asdl::cmd_value__Argv* cmd_val);
  virtual int RunSimpleCommand(runtime_asdl::cmd_value__Argv* cmd_val, runtime_asdl::CommandStatus* cmd_st, bool do_fork, bool call_procs = true);
  virtual int RunBackgroundJob(syntax_asdl::command_t* node);
  virtual void RunPipeline(syntax_asdl::command__Pipeline* node, runtime_asdl::CommandStatus* status_out);
  virtual int RunSubshell(syntax_asdl::command_t* node);
  virtual Str* RunCommandSub(syntax_asdl::command_sub* cs_part);
  virtual Str* RunProcessSub(syntax_asdl::command_sub* cs_part);
  virtual bool PushRedirects(List<runtime_asdl::redirect*>* redirects);
  virtual void PopRedirects();
  virtual void PushProcessSub();
  virtual void PopProcessSub(runtime_asdl::StatusArray* compound_st);

  GC_OBJ(header_);
  cmd_eval::CommandEvaluator* cmd_ev;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_Executor, cmd_ev));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_Executor));
  }

  DISALLOW_COPY_AND_ASSIGN(_Executor)
};

class _AssignBuiltin {
 public:
  _AssignBuiltin();
  virtual int Run(runtime_asdl::cmd_value__Assign* cmd_val);

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(_AssignBuiltin));
  }

  DISALLOW_COPY_AND_ASSIGN(_AssignBuiltin)
};

class _Builtin {
 public:
  _Builtin();
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(_Builtin));
  }

  DISALLOW_COPY_AND_ASSIGN(_Builtin)
};

class ctx_Redirect {
 public:
  ctx_Redirect(vm::_Executor* shell_ex);
  ~ctx_Redirect();

  GC_OBJ(header_);
  vm::_Executor* shell_ex;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Redirect));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Redirect)
};

class ctx_ProcessSub {
 public:
  ctx_ProcessSub(vm::_Executor* shell_ex, runtime_asdl::StatusArray* process_sub_status);
  ~ctx_ProcessSub();

  GC_OBJ(header_);
  vm::_Executor* shell_ex;
  runtime_asdl::StatusArray* process_sub_status;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(ctx_ProcessSub));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_ProcessSub)
};

class ctx_FlushStdout {
 public:
  ctx_FlushStdout();
  ~ctx_FlushStdout();

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(0, sizeof(ctx_FlushStdout));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_FlushStdout)
};



}  // declare namespace vm

namespace format {  // declare

format::ColorOutput* DetectConsoleOutput(mylib::Writer* f);
class ColorOutput {
 public:
  ColorOutput(mylib::Writer* f);
  virtual format::ColorOutput* NewTempBuffer();
  virtual void FileHeader();
  virtual void FileFooter();
  virtual void PushColor(hnode_asdl::color_t e_color);
  virtual void PopColor();
  virtual void write(Str* s);
  void WriteRaw(Tuple2<Str*, int>* raw);
  int NumChars();
  Tuple2<Str*, int> GetRaw();

  GC_OBJ(header_);
  mylib::Writer* f;
  int num_chars;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(ColorOutput, f));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(ColorOutput));
  }

  DISALLOW_COPY_AND_ASSIGN(ColorOutput)
};

class TextOutput : public ColorOutput {
 public:
  TextOutput(mylib::Writer* f);
  virtual format::TextOutput* NewTempBuffer();
  virtual void PushColor(hnode_asdl::color_t e_color);
  virtual void PopColor();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(TextOutput));
  }

  DISALLOW_COPY_AND_ASSIGN(TextOutput)
};

class HtmlOutput : public ColorOutput {
 public:
  HtmlOutput(mylib::Writer* f);
  virtual format::HtmlOutput* NewTempBuffer();
  virtual void FileHeader();
  virtual void FileFooter();
  virtual void PushColor(hnode_asdl::color_t e_color);
  virtual void PopColor();
  virtual void write(Str* s);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(HtmlOutput));
  }

  DISALLOW_COPY_AND_ASSIGN(HtmlOutput)
};

class AnsiOutput : public ColorOutput {
 public:
  AnsiOutput(mylib::Writer* f);
  virtual format::AnsiOutput* NewTempBuffer();
  virtual void PushColor(hnode_asdl::color_t e_color);
  virtual void PopColor();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(AnsiOutput));
  }

  DISALLOW_COPY_AND_ASSIGN(AnsiOutput)
};

extern int INDENT;
class _PrettyPrinter {
 public:
  _PrettyPrinter(int max_col);
  bool _PrintWrappedArray(List<hnode_asdl::hnode_t*>* array, int prefix_len, format::ColorOutput* f, int indent);
  bool _PrintWholeArray(List<hnode_asdl::hnode_t*>* array, int prefix_len, format::ColorOutput* f, int indent);
  void _PrintRecord(hnode_asdl::hnode__Record* node, format::ColorOutput* f, int indent);
  void PrintNode(hnode_asdl::hnode_t* node, format::ColorOutput* f, int indent);

  GC_OBJ(header_);
  int max_col;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(0, sizeof(_PrettyPrinter));
  }

  DISALLOW_COPY_AND_ASSIGN(_PrettyPrinter)
};

bool _TrySingleLineObj(hnode_asdl::hnode__Record* node, format::ColorOutput* f, int max_chars);
bool _TrySingleLine(hnode_asdl::hnode_t* node, format::ColorOutput* f, int max_chars);
void PrintTree(hnode_asdl::hnode_t* node, format::ColorOutput* f);


}  // declare namespace format

namespace oils_for_unix {  // declare

int CaperDispatch();
int AppBundleMain(List<Str*>* argv);
int main(List<Str*>* argv);


}  // declare namespace oils_for_unix

namespace alloc {  // declare

Str* SnipCodeBlock(syntax_asdl::Token* left, syntax_asdl::Token* right, List<syntax_asdl::SourceLine*>* lines);
class ctx_Location {
 public:
  ctx_Location(alloc::Arena* arena, syntax_asdl::source_t* src);
  ~ctx_Location();

  GC_OBJ(header_);
  alloc::Arena* arena;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Location));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Location)
};

class Arena {
 public:
  Arena();
  void PushSource(syntax_asdl::source_t* src);
  void PopSource();
  syntax_asdl::SourceLine* AddLine(Str* line, int line_num);
  void DiscardLines();
  List<syntax_asdl::SourceLine*>* SaveLinesAndDiscard(syntax_asdl::Token* left, syntax_asdl::Token* right);
  Str* SnipCodeString(syntax_asdl::Token* left, syntax_asdl::Token* right);
  int NewTokenId(int id_, int col, int length, syntax_asdl::SourceLine* src_line, Str* val);
  syntax_asdl::Token* NewToken(int id_, int col, int length, syntax_asdl::SourceLine* src_line, Str* val);
  syntax_asdl::Token* GetToken(int span_id);
  int LastSpanId();

  GC_OBJ(header_);
  List<syntax_asdl::SourceLine*>* lines_list;
  List<syntax_asdl::Token*>* tokens;
  List<syntax_asdl::source_t*>* source_instances;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(Arena));
  }

  DISALLOW_COPY_AND_ASSIGN(Arena)
};



}  // declare namespace alloc

namespace ansi {  // declare

extern Str* RESET;
extern Str* BOLD;
extern Str* UNDERLINE;
extern Str* REVERSE;
extern Str* RED;
extern Str* GREEN;
extern Str* YELLOW;
extern Str* BLUE;


}  // declare namespace ansi

namespace comp_ui {  // declare

int _PromptLen(Str* prompt_str);
class PromptState {
 public:
  PromptState();
  void SetLastPrompt(Str* prompt_str);

  GC_OBJ(header_);
  Str* last_prompt_str;
  int last_prompt_len;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(PromptState));
  }

  DISALLOW_COPY_AND_ASSIGN(PromptState)
};

class State {
 public:
  State();

  GC_OBJ(header_);
  Str* line_until_tab;
  Dict<Str*, Str*>* descriptions;
  int display_pos;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(State));
  }

  DISALLOW_COPY_AND_ASSIGN(State)
};

class _IDisplay {
 public:
  _IDisplay(comp_ui::State* comp_state, comp_ui::PromptState* prompt_state, int num_lines_cap, mylib::Writer* f, util::_DebugFile* debug_f);
  void PrintCandidates(Str* unused_subst, List<Str*>* matches, int unused_match_len);
  virtual void _PrintCandidates(Str* unused_subst, List<Str*>* matches, int unused_match_len);
  virtual void Reset();
  virtual void ShowPromptOnRight(Str* rendered);
  virtual void EraseLines();

  GC_OBJ(header_);
  comp_ui::State* comp_state;
  util::_DebugFile* debug_f;
  mylib::Writer* f;
  int num_lines_cap;
  comp_ui::PromptState* prompt_state;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_IDisplay, comp_state))
         | maskbit_v(offsetof(_IDisplay, debug_f))
         | maskbit_v(offsetof(_IDisplay, f))
         | maskbit_v(offsetof(_IDisplay, prompt_state));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_IDisplay));
  }

  DISALLOW_COPY_AND_ASSIGN(_IDisplay)
};

class MinimalDisplay : public _IDisplay {
 public:
  MinimalDisplay(comp_ui::State* comp_state, comp_ui::PromptState* prompt_state, util::_DebugFile* debug_f);
  void _RedrawPrompt();
  virtual void _PrintCandidates(Str* unused_subst, List<Str*>* matches, int unused_match_len);

  void* reader;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(MinimalDisplay, reader));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(MinimalDisplay));
  }

  DISALLOW_COPY_AND_ASSIGN(MinimalDisplay)
};

int _PrintPacked(List<Str*>* matches, int max_match_len, int term_width, int max_lines, mylib::Writer* f);
int _PrintLong(List<Str*>* matches, int max_match_len, int term_width, int max_lines, Dict<Str*, Str*>* descriptions, mylib::Writer* f);
class NiceDisplay : public _IDisplay {
 public:
  NiceDisplay(int term_width, comp_ui::State* comp_state, comp_ui::PromptState* prompt_state, util::_DebugFile* debug_f, py_readline::Readline* readline, pyos::SignalSafe* signal_safe);
  virtual void Reset();
  void _ReturnToPrompt(int num_lines);
  virtual void _PrintCandidates(Str* unused_subst, List<Str*>* matches, int unused_max_match_len);
  virtual void ShowPromptOnRight(Str* rendered);
  virtual void EraseLines();
  int _GetTerminalWidth();

  bool bold_line;
  int c_count;
  Dict<int, int>* dupes;
  int m_count;
  int num_lines_last_displayed;
  py_readline::Readline* readline;
  pyos::SignalSafe* signal_safe;
  int term_width;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(NiceDisplay, dupes))
         | maskbit_v(offsetof(NiceDisplay, readline))
         | maskbit_v(offsetof(NiceDisplay, signal_safe));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(NiceDisplay));
  }

  DISALLOW_COPY_AND_ASSIGN(NiceDisplay)
};

void ExecutePrintCandidates(comp_ui::_IDisplay* display, Str* sub, List<Str*>* matches, int max_len);
void InitReadline(py_readline::Readline* readline, Str* history_filename, completion::RootCompleter* root_comp, comp_ui::_IDisplay* display, util::_DebugFile* debug_f);


}  // declare namespace comp_ui

namespace completion {  // declare

using id_kind_asdl::Id;
using runtime_asdl::scope_e;
class _RetryCompletion {
 public:
  _RetryCompletion();

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(0, sizeof(_RetryCompletion));
  }

  DISALLOW_COPY_AND_ASSIGN(_RetryCompletion)
};

extern int CH_Break;
extern int CH_Other;
extern int ST_Begin;
extern int ST_Break;
extern int ST_Other;
Tuple2<int, bool> _TRANSITIONS(int state, int ch);
void AdjustArg(Str* arg, List<Str*>* break_chars, List<Str*>* argv_out);
extern Dict<Str*, bool>* _DEFAULT_OPTS;
class OptionState {
 public:
  OptionState();

  GC_OBJ(header_);
  Dict<Str*, bool>* dynamic_opts;
  bool currently_completing;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(OptionState));
  }

  DISALLOW_COPY_AND_ASSIGN(OptionState)
};

class Lookup {
 public:
  Lookup();
  Str* __str__();
  void PrintSpecs();
  void ClearCommandsChanged();
  List<Str*>* GetCommandsChanged();
  void RegisterName(Str* name, Dict<Str*, bool>* base_opts, completion::UserSpec* user_spec);
  void RegisterGlob(Str* glob_pat, Dict<Str*, bool>* base_opts, completion::UserSpec* user_spec);
  Tuple2<Dict<Str*, bool>*, completion::UserSpec*> GetSpecForName(Str* argv0);
  Tuple2<Dict<Str*, bool>*, completion::UserSpec*> GetFirstSpec();
  Tuple2<Dict<Str*, bool>*, completion::UserSpec*> GetFallback();

  GC_OBJ(header_);
  Dict<Str*, Tuple2<Dict<Str*, bool>*, completion::UserSpec*>*>* lookup;
  List<Str*>* commands_with_spec_changes;
  List<Tuple3<Str*, Dict<Str*, bool>*, completion::UserSpec*>*>* patterns;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(Lookup));
  }

  DISALLOW_COPY_AND_ASSIGN(Lookup)
};

class Api {
 public:
  Api(Str* line, int begin, int end);
  void Update(Str* first, Str* to_complete, Str* prev, int index, List<Str*>* partial_argv);

  GC_OBJ(header_);
  Str* line;
  Str* first;
  Str* to_complete;
  Str* prev;
  List<Str*>* partial_argv;
  int begin;
  int end;
  int index;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(5, sizeof(Api));
  }

  DISALLOW_COPY_AND_ASSIGN(Api)
};

class CompletionAction {
 public:
  CompletionAction();
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);
  virtual bool IsFileSystemAction();
  virtual bool IsShellFuncAction();

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(CompletionAction));
  }

  DISALLOW_COPY_AND_ASSIGN(CompletionAction)
};

class UsersAction : public CompletionAction {
 public:
  UsersAction();
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(UsersAction));
  }

  DISALLOW_COPY_AND_ASSIGN(UsersAction)
};

class TestAction : public CompletionAction {
 public:
  TestAction(List<Str*>* words, double delay = 0.0);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  double delay;
  List<Str*>* words;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(TestAction, words));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(TestAction));
  }

  DISALLOW_COPY_AND_ASSIGN(TestAction)
};

class DynamicWordsAction : public CompletionAction {
 public:
  DynamicWordsAction(word_eval::AbstractWordEvaluator* word_ev, split::SplitContext* splitter, syntax_asdl::compound_word* arg_word, ui::ErrorFormatter* errfmt);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  syntax_asdl::compound_word* arg_word;
  ui::ErrorFormatter* errfmt;
  split::SplitContext* splitter;
  word_eval::AbstractWordEvaluator* word_ev;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(DynamicWordsAction, arg_word))
         | maskbit_v(offsetof(DynamicWordsAction, errfmt))
         | maskbit_v(offsetof(DynamicWordsAction, splitter))
         | maskbit_v(offsetof(DynamicWordsAction, word_ev));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(DynamicWordsAction));
  }

  DISALLOW_COPY_AND_ASSIGN(DynamicWordsAction)
};

class FileSystemAction : public CompletionAction {
 public:
  FileSystemAction(bool dirs_only, bool exec_only, bool add_slash);
  virtual bool IsFileSystemAction();
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  bool add_slash;
  bool dirs_only;
  bool exec_only;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(FileSystemAction));
  }

  DISALLOW_COPY_AND_ASSIGN(FileSystemAction)
};

class ShellFuncAction : public CompletionAction {
 public:
  ShellFuncAction(cmd_eval::CommandEvaluator* cmd_ev, runtime_asdl::Proc* func, completion::Lookup* comp_lookup);
  virtual bool IsShellFuncAction();
  void debug(Str* msg);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  cmd_eval::CommandEvaluator* cmd_ev;
  completion::Lookup* comp_lookup;
  runtime_asdl::Proc* func;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(ShellFuncAction, cmd_ev))
         | maskbit_v(offsetof(ShellFuncAction, comp_lookup))
         | maskbit_v(offsetof(ShellFuncAction, func));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(ShellFuncAction));
  }

  DISALLOW_COPY_AND_ASSIGN(ShellFuncAction)
};

class VariablesAction : public CompletionAction {
 public:
  VariablesAction(state::Mem* mem);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(VariablesAction, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(VariablesAction));
  }

  DISALLOW_COPY_AND_ASSIGN(VariablesAction)
};

class ExternalCommandAction : public CompletionAction {
 public:
  ExternalCommandAction(state::Mem* mem);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  Dict<Tuple2<Str*, int>*, List<Str*>*>* cache;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(ExternalCommandAction, cache))
         | maskbit_v(offsetof(ExternalCommandAction, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(ExternalCommandAction));
  }

  DISALLOW_COPY_AND_ASSIGN(ExternalCommandAction)
};

class _Predicate {
 public:
  _Predicate();
  virtual bool Evaluate(Str* candidate);

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(_Predicate));
  }

  DISALLOW_COPY_AND_ASSIGN(_Predicate)
};

class DefaultPredicate : public _Predicate {
 public:
  DefaultPredicate();
  virtual bool Evaluate(Str* candidate);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(DefaultPredicate));
  }

  DISALLOW_COPY_AND_ASSIGN(DefaultPredicate)
};

class GlobPredicate : public _Predicate {
 public:
  GlobPredicate(bool include, Str* glob_pat);
  virtual bool Evaluate(Str* candidate);

  Str* glob_pat;
  bool include;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(GlobPredicate, glob_pat));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(GlobPredicate));
  }

  DISALLOW_COPY_AND_ASSIGN(GlobPredicate)
};

class UserSpec {
 public:
  UserSpec(List<completion::CompletionAction*>* actions, List<completion::CompletionAction*>* extra_actions, List<completion::CompletionAction*>* else_actions, completion::_Predicate* predicate, Str* prefix, Str* suffix);
  void Matches(completion::Api* comp, List<Tuple2<Str*, bool>*>* _out_yield_acc);
  Str* __str__();

  GC_OBJ(header_);
  List<completion::CompletionAction*>* actions;
  List<completion::CompletionAction*>* extra_actions;
  List<completion::CompletionAction*>* else_actions;
  completion::_Predicate* predicate;
  Str* prefix;
  Str* suffix;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(6, sizeof(UserSpec));
  }

  DISALLOW_COPY_AND_ASSIGN(UserSpec)
};

bool IsDollar(syntax_asdl::Token* t);
bool IsDummy(syntax_asdl::Token* t);
bool WordEndsWithCompDummy(syntax_asdl::compound_word* w);
int _TokenStart(alloc::Arena* arena, syntax_asdl::Token* tok);
class RootCompleter : public CompletionAction {
 public:
  RootCompleter(word_eval::AbstractWordEvaluator* word_ev, state::Mem* mem, completion::Lookup* comp_lookup, completion::OptionState* compopt_state, comp_ui::State* comp_ui_state, parse_lib::ParseContext* parse_ctx, util::_DebugFile* debug_f);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);
  void _PostProcess(Dict<Str*, bool>* base_opts, Dict<Str*, bool>* dynamic_opts, completion::UserSpec* user_spec, completion::Api* comp, List<Str*>* _out_yield_acc);

  completion::Lookup* comp_lookup;
  comp_ui::State* comp_ui_state;
  completion::OptionState* compopt_state;
  util::_DebugFile* debug_f;
  state::Mem* mem;
  parse_lib::ParseContext* parse_ctx;
  word_eval::AbstractWordEvaluator* word_ev;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(RootCompleter, comp_lookup))
         | maskbit_v(offsetof(RootCompleter, comp_ui_state))
         | maskbit_v(offsetof(RootCompleter, compopt_state))
         | maskbit_v(offsetof(RootCompleter, debug_f))
         | maskbit_v(offsetof(RootCompleter, mem))
         | maskbit_v(offsetof(RootCompleter, parse_ctx))
         | maskbit_v(offsetof(RootCompleter, word_ev));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(RootCompleter));
  }

  DISALLOW_COPY_AND_ASSIGN(RootCompleter)
};

class ReadlineCallback {
 public:
  ReadlineCallback(py_readline::Readline* readline, completion::RootCompleter* root_comp, util::_DebugFile* debug_f);
  Str* _GetNextCompletion(int state);
  Str* __call__(Str* unused_word, int state);

  GC_OBJ(header_);
  py_readline::Readline* readline;
  completion::RootCompleter* root_comp;
  util::_DebugFile* debug_f;
  List<Str*>* comp_matches;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(4, sizeof(ReadlineCallback));
  }

  DISALLOW_COPY_AND_ASSIGN(ReadlineCallback)
};

Str* ExecuteReadlineCallback(completion::ReadlineCallback* cb, Str* word, int state);


}  // declare namespace completion

namespace dev {  // declare

using runtime_asdl::scope_e;
class CrashDumper {
 public:
  CrashDumper(Str* crash_dump_dir);
  void MaybeRecord(cmd_eval::CommandEvaluator* cmd_ev, error::_ErrorWithLocation* err);
  void MaybeDump(int status);

  GC_OBJ(header_);
  Str* crash_dump_dir;
  void* var_stack;
  void* argv_stack;
  void* debug_stack;
  Dict<Str*, void*>* error;
  bool do_collect;
  bool collected;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(5, sizeof(CrashDumper));
  }

  DISALLOW_COPY_AND_ASSIGN(CrashDumper)
};

class ctx_Tracer {
 public:
  ctx_Tracer(dev::Tracer* tracer, Str* label, List<Str*>* argv);
  ~ctx_Tracer();

  GC_OBJ(header_);
  Str* arg;
  Str* label;
  dev::Tracer* tracer;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(ctx_Tracer));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Tracer)
};

void _PrintShValue(runtime_asdl::value_t* val, mylib::BufWriter* buf);
void _PrintArgv(List<Str*>* argv, mylib::BufWriter* buf);
class Tracer {
 public:
  Tracer(parse_lib::ParseContext* parse_ctx, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, state::Mem* mem, util::_DebugFile* f);
  void CheckCircularDeps();
  Str* _EvalPS4(Str* punct);
  void _Inc();
  void _Dec();
  mylib::BufWriter* _ShTraceBegin();
  mylib::BufWriter* _RichTraceBegin(Str* punct);
  void OnProcessStart(int pid, runtime_asdl::trace_t* why);
  void OnProcessEnd(int pid, int status);
  void SetProcess(int pid);
  void PushMessage(Str* label, List<Str*>* argv);
  void PopMessage(Str* label, Str* arg);
  void PrintMessage(Str* message);
  void OnExec(List<Str*>* argv);
  void OnBuiltin(int builtin_id, List<Str*>* argv);
  void OnSimpleCommand(List<Str*>* argv);
  void OnAssignBuiltin(runtime_asdl::cmd_value__Assign* cmd_val);
  void OnShAssignment(runtime_asdl::lvalue_t* lval, syntax_asdl::assign_op_t op, runtime_asdl::value_t* val, int flags, runtime_asdl::scope_t which_scopes);
  void OnControlFlow(Str* keyword, int arg);
  void PrintSourceCode(int left_spid, int right_spid, alloc::Arena* arena);

  GC_OBJ(header_);
  parse_lib::ParseContext* parse_ctx;
  optview::Exec* exec_opts;
  state::MutableOpts* mutable_opts;
  state::Mem* mem;
  util::_DebugFile* f;
  word_eval::NormalWordEvaluator* word_ev;
  List<Str*>* indents;
  Dict<Str*, syntax_asdl::compound_word*>* parse_cache;
  runtime_asdl::value__Str* val_indent;
  runtime_asdl::value__Str* val_punct;
  runtime_asdl::value__Str* val_pid_str;
  runtime_asdl::lvalue__Named* lval_indent;
  runtime_asdl::lvalue__Named* lval_punct;
  runtime_asdl::lvalue__Named* lval_pid_str;
  int ind;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(14, sizeof(Tracer));
  }

  DISALLOW_COPY_AND_ASSIGN(Tracer)
};



}  // declare namespace dev

namespace error {  // declare

extern int NO_SPID;
class Usage {
 public:
  Usage(Str* msg, int span_id = NO_SPID);

  GC_OBJ(header_);
  Str* msg;
  int span_id;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(Usage));
  }

  DISALLOW_COPY_AND_ASSIGN(Usage)
};

class _ErrorWithLocation {
 public:
  _ErrorWithLocation(Str* msg, syntax_asdl::loc_t* location);
  bool HasLocation();
  Str* UserErrorString();

  GC_OBJ(header_);
  syntax_asdl::loc_t* location;
  Str* msg;
  
  static constexpr uint16_t field_mask() {
    return maskbit(offsetof(_ErrorWithLocation, location))
         | maskbit(offsetof(_ErrorWithLocation, msg));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_ErrorWithLocation));
  }

  DISALLOW_COPY_AND_ASSIGN(_ErrorWithLocation)
};

class Runtime {
 public:
  Runtime(Str* msg);
  Str* UserErrorString();

  GC_OBJ(header_);
  Str* msg;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(Runtime));
  }

  DISALLOW_COPY_AND_ASSIGN(Runtime)
};

class Parse : public _ErrorWithLocation {
 public:
  Parse(Str* msg, syntax_asdl::loc_t* location);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Parse));
  }

  DISALLOW_COPY_AND_ASSIGN(Parse)
};

class FailGlob : public _ErrorWithLocation {
 public:
  FailGlob(Str* msg, syntax_asdl::loc_t* location);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(FailGlob));
  }

  DISALLOW_COPY_AND_ASSIGN(FailGlob)
};

class RedirectEval : public _ErrorWithLocation {
 public:
  RedirectEval(Str* msg, syntax_asdl::loc_t* location);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(RedirectEval));
  }

  DISALLOW_COPY_AND_ASSIGN(RedirectEval)
};

class FatalRuntime : public _ErrorWithLocation {
 public:
  FatalRuntime(int exit_status, Str* msg, syntax_asdl::loc_t* location);
  int ExitStatus();

  int exit_status;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(FatalRuntime));
  }

  DISALLOW_COPY_AND_ASSIGN(FatalRuntime)
};

class Strict : public FatalRuntime {
 public:
  Strict(Str* msg, syntax_asdl::loc_t* location);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Strict));
  }

  DISALLOW_COPY_AND_ASSIGN(Strict)
};

class ErrExit : public FatalRuntime {
 public:
  ErrExit(int exit_status, Str* msg, syntax_asdl::loc_t* location, bool show_code = false);

  bool show_code;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(ErrExit));
  }

  DISALLOW_COPY_AND_ASSIGN(ErrExit)
};

class Expr : public FatalRuntime {
 public:
  Expr(Str* msg, syntax_asdl::loc_t* location);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Expr));
  }

  DISALLOW_COPY_AND_ASSIGN(Expr)
};



}  // declare namespace error

namespace executor {  // declare

using id_kind_asdl::Id;
class _ProcessSubFrame {
 public:
  _ProcessSubFrame();

  GC_OBJ(header_);
  List<int>* to_close;
  List<process::Process*>* to_wait;
  List<int>* span_ids;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(_ProcessSubFrame));
  }

  DISALLOW_COPY_AND_ASSIGN(_ProcessSubFrame)
};

class ShellExecutor : public vm::_Executor {
 public:
  ShellExecutor(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, Dict<Str*, runtime_asdl::Proc*>* procs, state::Hay* hay_state, Dict<int, vm::_Builtin*>* builtins, state::SearchPath* search_path, process::ExternalProgram* ext_prog, process::Waiter* waiter, dev::Tracer* tracer, process::JobState* job_state, process::FdState* fd_state, ui::ErrorFormatter* errfmt);
  virtual void CheckCircularDeps();
  process::Process* _MakeProcess(syntax_asdl::command_t* node, bool inherit_errexit = true);
  virtual int RunBuiltin(int builtin_id, runtime_asdl::cmd_value__Argv* cmd_val);
  virtual int RunSimpleCommand(runtime_asdl::cmd_value__Argv* cmd_val, runtime_asdl::CommandStatus* cmd_st, bool do_fork, bool call_procs = true);
  virtual int RunBackgroundJob(syntax_asdl::command_t* node);
  virtual void RunPipeline(syntax_asdl::command__Pipeline* node, runtime_asdl::CommandStatus* status_out);
  virtual int RunSubshell(syntax_asdl::command_t* node);
  virtual Str* RunCommandSub(syntax_asdl::command_sub* cs_part);
  virtual Str* RunProcessSub(syntax_asdl::command_sub* cs_part);
  void MaybeWaitOnProcessSubs(executor::_ProcessSubFrame* frame, runtime_asdl::StatusArray* compound_st);
  virtual bool PushRedirects(List<runtime_asdl::redirect*>* redirects);
  virtual void PopRedirects();
  virtual void PushProcessSub();
  virtual void PopProcessSub(runtime_asdl::StatusArray* compound_st);

  Dict<int, vm::_Builtin*>* builtins;
  ui::ErrorFormatter* errfmt;
  optview::Exec* exec_opts;
  process::ExternalProgram* ext_prog;
  process::FdState* fd_state;
  state::Hay* hay_state;
  process::JobState* job_state;
  state::Mem* mem;
  state::MutableOpts* mutable_opts;
  List<executor::_ProcessSubFrame*>* process_sub_stack;
  Dict<Str*, runtime_asdl::Proc*>* procs;
  state::SearchPath* search_path;
  dev::Tracer* tracer;
  process::Waiter* waiter;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(ShellExecutor, builtins))
         | maskbit_v(offsetof(ShellExecutor, errfmt))
         | maskbit_v(offsetof(ShellExecutor, exec_opts))
         | maskbit_v(offsetof(ShellExecutor, ext_prog))
         | maskbit_v(offsetof(ShellExecutor, fd_state))
         | maskbit_v(offsetof(ShellExecutor, hay_state))
         | maskbit_v(offsetof(ShellExecutor, job_state))
         | maskbit_v(offsetof(ShellExecutor, mem))
         | maskbit_v(offsetof(ShellExecutor, mutable_opts))
         | maskbit_v(offsetof(ShellExecutor, process_sub_stack))
         | maskbit_v(offsetof(ShellExecutor, procs))
         | maskbit_v(offsetof(ShellExecutor, search_path))
         | maskbit_v(offsetof(ShellExecutor, tracer))
         | maskbit_v(offsetof(ShellExecutor, waiter));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(ShellExecutor));
  }

  DISALLOW_COPY_AND_ASSIGN(ShellExecutor)
};



}  // declare namespace executor

namespace main_loop {  // declare

class ctx_Descriptors {
 public:
  ctx_Descriptors(List<int>* fds);
  ~ctx_Descriptors();

  GC_OBJ(header_);
  List<int>* fds;
  int saved0;
  int saved1;
  int saved2;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Descriptors));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Descriptors)
};

void fanos_log(Str* msg);
void ShowDescriptorState(Str* label);
class Headless {
 public:
  Headless(cmd_eval::CommandEvaluator* cmd_ev, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt);
  int Loop();
  Str* EVAL(Str* arg);
  int _Loop();

  GC_OBJ(header_);
  cmd_eval::CommandEvaluator* cmd_ev;
  parse_lib::ParseContext* parse_ctx;
  ui::ErrorFormatter* errfmt;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(Headless));
  }

  DISALLOW_COPY_AND_ASSIGN(Headless)
};

int Interactive(arg_types::main* flag, cmd_eval::CommandEvaluator* cmd_ev, cmd_parse::CommandParser* c_parser, comp_ui::_IDisplay* display, prompt::UserPlugin* prompt_plugin, ui::ErrorFormatter* errfmt);
int Batch(cmd_eval::CommandEvaluator* cmd_ev, cmd_parse::CommandParser* c_parser, ui::ErrorFormatter* errfmt, int cmd_flags = 0);
syntax_asdl::command_t* ParseWholeFile(cmd_parse::CommandParser* c_parser);


}  // declare namespace main_loop

namespace process {  // declare

using id_kind_asdl::Id;
extern int NO_FD;
extern int _SHELL_MIN_FD;
extern int STYLE_DEFAULT;
extern int STYLE_LONG;
extern int STYLE_PID_ONLY;
int SaveFd(int fd);
class _RedirFrame {
 public:
  _RedirFrame(int saved_fd, int orig_fd, bool forget);

  GC_OBJ(header_);
  int saved_fd;
  int orig_fd;
  bool forget;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(0, sizeof(_RedirFrame));
  }

  DISALLOW_COPY_AND_ASSIGN(_RedirFrame)
};

class _FdFrame {
 public:
  _FdFrame();
  void Forget();

  GC_OBJ(header_);
  List<process::_RedirFrame*>* saved;
  List<process::Process*>* need_wait;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(_FdFrame));
  }

  DISALLOW_COPY_AND_ASSIGN(_FdFrame)
};

class FdState {
 public:
  FdState(ui::ErrorFormatter* errfmt, process::JobState* job_state, state::Mem* mem, dev::Tracer* tracer, process::Waiter* waiter);
  mylib::LineReader* Open(Str* path);
  mylib::Writer* OpenForWrite(Str* path);
  mylib::LineReader* _Open(Str* path, Str* c_mode, int fd_mode);
  void _WriteFdToMem(Str* fd_name, int fd);
  int _ReadFdFromMem(Str* fd_name);
  bool _PushSave(int fd);
  int _PushDup(int fd1, syntax_asdl::redir_loc_t* loc);
  bool _PushCloseFd(syntax_asdl::redir_loc_t* loc);
  void _PushClose(int fd);
  void _PushWait(process::Process* proc);
  void _ApplyRedirect(runtime_asdl::redirect* r);
  bool Push(List<runtime_asdl::redirect*>* redirects);
  bool PushStdinFromPipe(int r);
  void Pop();
  void MakePermanent();

  GC_OBJ(header_);
  ui::ErrorFormatter* errfmt;
  process::JobState* job_state;
  process::_FdFrame* cur_frame;
  List<process::_FdFrame*>* stack;
  state::Mem* mem;
  dev::Tracer* tracer;
  process::Waiter* waiter;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(7, sizeof(FdState));
  }

  DISALLOW_COPY_AND_ASSIGN(FdState)
};

class ChildStateChange {
 public:
  ChildStateChange();
  virtual void Apply();

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(ChildStateChange));
  }

  DISALLOW_COPY_AND_ASSIGN(ChildStateChange)
};

class StdinFromPipe : public ChildStateChange {
 public:
  StdinFromPipe(int pipe_read_fd, int w);
  virtual void Apply();

  int r;
  int w;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(StdinFromPipe));
  }

  DISALLOW_COPY_AND_ASSIGN(StdinFromPipe)
};

class StdoutToPipe : public ChildStateChange {
 public:
  StdoutToPipe(int r, int pipe_write_fd);
  virtual void Apply();

  int r;
  int w;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(StdoutToPipe));
  }

  DISALLOW_COPY_AND_ASSIGN(StdoutToPipe)
};

class ExternalProgram {
 public:
  ExternalProgram(Str* hijack_shebang, process::FdState* fd_state, ui::ErrorFormatter* errfmt, util::_DebugFile* debug_f);
  void Exec(Str* argv0_path, runtime_asdl::cmd_value__Argv* cmd_val, Dict<Str*, Str*>* environ);
  void _Exec(Str* argv0_path, List<Str*>* argv, int argv0_spid, Dict<Str*, Str*>* environ, bool should_retry);

  GC_OBJ(header_);
  Str* hijack_shebang;
  process::FdState* fd_state;
  ui::ErrorFormatter* errfmt;
  util::_DebugFile* debug_f;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(4, sizeof(ExternalProgram));
  }

  DISALLOW_COPY_AND_ASSIGN(ExternalProgram)
};

class Thunk {
 public:
  Thunk();
  virtual void Run();
  virtual Str* UserString();

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Thunk));
  }

  DISALLOW_COPY_AND_ASSIGN(Thunk)
};

class ExternalThunk : public Thunk {
 public:
  ExternalThunk(process::ExternalProgram* ext_prog, Str* argv0_path, runtime_asdl::cmd_value__Argv* cmd_val, Dict<Str*, Str*>* environ);
  virtual Str* UserString();
  virtual void Run();

  Str* argv0_path;
  runtime_asdl::cmd_value__Argv* cmd_val;
  Dict<Str*, Str*>* environ;
  process::ExternalProgram* ext_prog;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(ExternalThunk, argv0_path))
         | maskbit_v(offsetof(ExternalThunk, cmd_val))
         | maskbit_v(offsetof(ExternalThunk, environ))
         | maskbit_v(offsetof(ExternalThunk, ext_prog));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(ExternalThunk));
  }

  DISALLOW_COPY_AND_ASSIGN(ExternalThunk)
};

class SubProgramThunk : public Thunk {
 public:
  SubProgramThunk(cmd_eval::CommandEvaluator* cmd_ev, syntax_asdl::command_t* node, bool inherit_errexit = true);
  virtual Str* UserString();
  virtual void Run();

  cmd_eval::CommandEvaluator* cmd_ev;
  bool inherit_errexit;
  syntax_asdl::command_t* node;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(SubProgramThunk, cmd_ev))
         | maskbit_v(offsetof(SubProgramThunk, node));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(SubProgramThunk));
  }

  DISALLOW_COPY_AND_ASSIGN(SubProgramThunk)
};

class _HereDocWriterThunk : public Thunk {
 public:
  _HereDocWriterThunk(int w, Str* body_str);
  virtual Str* UserString();
  virtual void Run();

  Str* body_str;
  int w;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_HereDocWriterThunk, body_str));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_HereDocWriterThunk));
  }

  DISALLOW_COPY_AND_ASSIGN(_HereDocWriterThunk)
};

class Job {
 public:
  Job();
  virtual void DisplayJob(int job_id, mylib::Writer* f, int style);
  runtime_asdl::job_state_t State();
  virtual runtime_asdl::wait_status_t* JobWait(process::Waiter* waiter);

  GC_OBJ(header_);
  runtime_asdl::job_state_t state;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Job));
  }

  DISALLOW_COPY_AND_ASSIGN(Job)
};

class Process : public Job {
 public:
  Process(process::Thunk* thunk, process::JobState* job_state, dev::Tracer* tracer);
  void Init_ParentPipeline(process::Pipeline* pi);
  virtual void DisplayJob(int job_id, mylib::Writer* f, int style);
  void AddStateChange(process::ChildStateChange* s);
  void AddPipeToClose(int r, int w);
  void MaybeClosePipe();
  int Start(runtime_asdl::trace_t* why);
  int Wait(process::Waiter* waiter);
  virtual runtime_asdl::wait_status_t* JobWait(process::Waiter* waiter);
  void WhenStopped();
  void WhenDone(int pid, int status);
  int RunWait(process::Waiter* waiter, runtime_asdl::trace_t* why);

  int close_r;
  int close_w;
  process::JobState* job_state;
  process::Pipeline* parent_pipeline;
  int pid;
  List<process::ChildStateChange*>* state_changes;
  int status;
  process::Thunk* thunk;
  dev::Tracer* tracer;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Process, job_state))
         | maskbit_v(offsetof(Process, parent_pipeline))
         | maskbit_v(offsetof(Process, state_changes))
         | maskbit_v(offsetof(Process, thunk))
         | maskbit_v(offsetof(Process, tracer));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Process));
  }

  DISALLOW_COPY_AND_ASSIGN(Process)
};

class ctx_Pipe {
 public:
  ctx_Pipe(process::FdState* fd_state, int fd);
  ~ctx_Pipe();

  GC_OBJ(header_);
  process::FdState* fd_state;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Pipe));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Pipe)
};

class Pipeline : public Job {
 public:
  Pipeline(bool sigpipe_status_ok);
  virtual void DisplayJob(int job_id, mylib::Writer* f, int style);
  void DebugPrint();
  void Add(process::Process* p);
  void AddLast(Tuple2<cmd_eval::CommandEvaluator*, syntax_asdl::command_t*>* thunk);
  void Start(process::Waiter* waiter);
  int LastPid();
  List<int>* Wait(process::Waiter* waiter);
  virtual runtime_asdl::wait_status_t* JobWait(process::Waiter* waiter);
  List<int>* Run(process::Waiter* waiter, process::FdState* fd_state);
  bool AllDone();
  void WhenDone(int pid, int status);

  Tuple2<int, int>* last_pipe;
  Tuple2<cmd_eval::CommandEvaluator*, syntax_asdl::command_t*>* last_thunk;
  List<int>* pids;
  List<int>* pipe_status;
  List<process::Process*>* procs;
  bool sigpipe_status_ok;
  int status;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Pipeline, last_pipe))
         | maskbit_v(offsetof(Pipeline, last_thunk))
         | maskbit_v(offsetof(Pipeline, pids))
         | maskbit_v(offsetof(Pipeline, pipe_status))
         | maskbit_v(offsetof(Pipeline, procs));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Pipeline));
  }

  DISALLOW_COPY_AND_ASSIGN(Pipeline)
};

Str* _JobStateStr(runtime_asdl::job_state_t i);
class JobState {
 public:
  JobState();
  void WhenStopped(int pid);
  int GetLastStopped();
  int WhenContinued(int pid, process::Waiter* waiter);
  void WhenDone(int pid);
  int AddJob(process::Job* job);
  void AddChildProcess(int pid, process::Process* proc);
  void AddPipeline(process::Pipeline* pi);
  process::Process* JobFromPid(int pid);
  void DisplayJobs(int style);
  void DebugPrint();
  void ListRecent();
  int NumRunning();

  GC_OBJ(header_);
  Dict<int, process::Job*>* jobs;
  Dict<int, process::Process*>* child_procs;
  List<process::Pipeline*>* debug_pipelines;
  int last_stopped_pid;
  int job_id;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(JobState));
  }

  DISALLOW_COPY_AND_ASSIGN(JobState)
};

extern int W1_OK;
extern int W1_ECHILD;
class Waiter {
 public:
  Waiter(process::JobState* job_state, optview::Exec* exec_opts, pyos::SignalSafe* signal_safe, dev::Tracer* tracer);
  int WaitForOne();

  GC_OBJ(header_);
  process::JobState* job_state;
  optview::Exec* exec_opts;
  pyos::SignalSafe* signal_safe;
  dev::Tracer* tracer;
  int last_status;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(4, sizeof(Waiter));
  }

  DISALLOW_COPY_AND_ASSIGN(Waiter)
};



}  // declare namespace process

namespace pyerror {  // declare

extern int NO_SPID;
[[noreturn]] void e_usage(Str* msg, int span_id = NO_SPID);
[[noreturn]] void e_strict(Str* msg, syntax_asdl::loc_t* location);
[[noreturn]] void p_die(Str* msg, syntax_asdl::loc_t* location);
[[noreturn]] void e_die(Str* msg, syntax_asdl::loc_t* location = nullptr);
[[noreturn]] void e_die_status(int status, Str* msg, syntax_asdl::loc_t* location = nullptr);


}  // declare namespace pyerror

namespace shell_native {  // declare

runtime_asdl::cmd_value__Argv* MakeBuiltinArgv(List<Str*>* argv1);
void AddPure(Dict<int, vm::_Builtin*>* b, state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, Dict<Str*, bool>* modules, state::MutableOpts* mutable_opts, Dict<Str*, Str*>* aliases, state::SearchPath* search_path, ui::ErrorFormatter* errfmt);
void AddIO(Dict<int, vm::_Builtin*>* b, state::Mem* mem, state::DirStack* dir_stack, optview::Exec* exec_opts, split::SplitContext* splitter, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt);
void AddProcess(Dict<int, vm::_Builtin*>* b, state::Mem* mem, vm::_Executor* shell_ex, process::ExternalProgram* ext_prog, process::FdState* fd_state, process::JobState* job_state, process::Waiter* waiter, dev::Tracer* tracer, state::SearchPath* search_path, ui::ErrorFormatter* errfmt);
void AddMeta(Dict<int, vm::_Builtin*>* builtins, vm::_Executor* shell_ex, state::MutableOpts* mutable_opts, state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, Dict<Str*, Str*>* aliases, state::SearchPath* search_path, ui::ErrorFormatter* errfmt);
void AddBlock(Dict<int, vm::_Builtin*>* builtins, state::Mem* mem, state::MutableOpts* mutable_opts, state::DirStack* dir_stack, cmd_eval::CommandEvaluator* cmd_ev, vm::_Executor* shell_ex, state::Hay* hay_state, ui::ErrorFormatter* errfmt);
Dict<int, vm::_AssignBuiltin*>* InitAssignmentBuiltins(state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, ui::ErrorFormatter* errfmt);


}  // declare namespace shell_native

namespace state {  // declare

using id_kind_asdl::Id;
using runtime_asdl::scope_e;
extern Str* _READLINE_DELIMS;
extern int LINE_ZERO;
extern int SetReadOnly;
extern int ClearReadOnly;
extern int SetExport;
extern int ClearExport;
extern int SetNameref;
extern int ClearNameref;
class SearchPath {
 public:
  SearchPath(state::Mem* mem);
  Str* Lookup(Str* name, bool exec_required = true);
  Str* CachedLookup(Str* name);
  void MaybeRemoveEntry(Str* name);
  void ClearCache();
  List<Str*>* CachedCommands();

  GC_OBJ(header_);
  state::Mem* mem;
  Dict<Str*, Str*>* cache;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(SearchPath));
  }

  DISALLOW_COPY_AND_ASSIGN(SearchPath)
};

class ctx_Source {
 public:
  ctx_Source(state::Mem* mem, Str* source_name, List<Str*>* argv);
  ~ctx_Source();

  GC_OBJ(header_);
  state::Mem* mem;
  List<Str*>* argv;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(ctx_Source));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Source)
};

class ctx_Option {
 public:
  ctx_Option(state::MutableOpts* mutable_opts, List<int>* opt_nums, bool b);
  ~ctx_Option();

  GC_OBJ(header_);
  state::MutableOpts* mutable_opts;
  List<int>* opt_nums;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(ctx_Option));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Option)
};

class ctx_AssignBuiltin {
 public:
  ctx_AssignBuiltin(state::MutableOpts* mutable_opts);
  ~ctx_AssignBuiltin();

  GC_OBJ(header_);
  state::MutableOpts* mutable_opts;
  bool strict;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_AssignBuiltin));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_AssignBuiltin)
};

class ctx_OilExpr {
 public:
  ctx_OilExpr(state::MutableOpts* mutable_opts);
  ~ctx_OilExpr();

  GC_OBJ(header_);
  state::MutableOpts* mutable_opts;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_OilExpr));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_OilExpr)
};

class ctx_ErrExit {
 public:
  ctx_ErrExit(state::MutableOpts* mutable_opts, bool b, int span_id);
  ~ctx_ErrExit();

  GC_OBJ(header_);
  state::MutableOpts* mutable_opts;
  bool strict;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_ErrExit));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_ErrExit)
};

class ctx_HayNode {
 public:
  ctx_HayNode(state::Hay* hay_state, Str* hay_name);
  ~ctx_HayNode();

  GC_OBJ(header_);
  state::Hay* hay_state;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_HayNode));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_HayNode)
};

class ctx_HayEval {
 public:
  ctx_HayEval(state::Hay* hay_state, state::MutableOpts* mutable_opts, state::Mem* mem);
  ~ctx_HayEval();

  GC_OBJ(header_);
  state::Hay* hay_state;
  state::MutableOpts* mutable_opts;
  state::Mem* mem;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(ctx_HayEval));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_HayEval)
};

class Hay {
 public:
  Hay();
  Dict<Str*, void*>* _MakeOutputNode();
  void PushEval();
  void PopEval();
  bool Resolve(Str* first_word);
  void DefinePath(List<Str*>* path);
  void Reset();
  void Push(Str* hay_name);
  void Pop();

  GC_OBJ(header_);
  runtime_asdl::hay_node* root_defs;
  runtime_asdl::hay_node* cur_defs;
  List<runtime_asdl::hay_node*>* def_stack;
  List<Dict<Str*, void*>*>* result_stack;
  Dict<Str*, void*>* output;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(5, sizeof(Hay));
  }

  DISALLOW_COPY_AND_ASSIGN(Hay)
};

class OptHook {
 public:
  OptHook();
  virtual bool OnChange(List<bool>* opt0_array, Str* opt_name, bool b);

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(OptHook));
  }

  DISALLOW_COPY_AND_ASSIGN(OptHook)
};

List<bool>* InitOpts();
Tuple3<optview::Parse*, optview::Exec*, state::MutableOpts*> MakeOpts(state::Mem* mem, state::OptHook* opt_hook);
void _SetGroup(List<bool>* opt0_array, List<int>* opt_nums, bool b);
optview::Parse* MakeOilOpts();
int _AnyOptionNum(Str* opt_name);
int _SetOptionNum(Str* opt_name);
class MutableOpts {
 public:
  MutableOpts(state::Mem* mem, List<bool>* opt0_array, List<List<bool>*>* opt_stacks, state::OptHook* opt_hook);
  void Init();
  void _InitOptionsFromEnv(Str* shellopts);
  void Push(int opt_num, bool b);
  bool Pop(int opt_num);
  void PushDynamicScope(bool b);
  void PopDynamicScope();
  bool Get(int opt_num);
  void _Set(int opt_num, bool b);
  void set_interactive();
  void set_redefine_proc();
  void set_redefine_module();
  void set_emacs();
  void set_xtrace(bool b);
  void _SetArrayByNum(int opt_num, bool b);
  void SetDeferredErrExit(bool b);
  void DisableErrExit();
  int ErrExitDisabledSpanId();
  void _SetOldOption(Str* opt_name, bool b);
  void SetOldOption(Str* opt_name, bool b);
  void SetAnyOption(Str* opt_name, bool b);
  void ShowOptions(List<Str*>* opt_names);
  void ShowShoptOptions(List<Str*>* opt_names);

  GC_OBJ(header_);
  state::Mem* mem;
  List<bool>* opt0_array;
  List<List<bool>*>* opt_stacks;
  List<int>* errexit_disabled_spid;
  state::OptHook* opt_hook;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(5, sizeof(MutableOpts));
  }

  DISALLOW_COPY_AND_ASSIGN(MutableOpts)
};

class _ArgFrame {
 public:
  _ArgFrame(List<Str*>* argv);
  runtime_asdl::value_t* GetArgNum(int arg_num);
  List<Str*>* GetArgv();
  int GetNumArgs();
  void SetArgv(List<Str*>* argv);

  GC_OBJ(header_);
  List<Str*>* argv;
  int num_shifted;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(_ArgFrame));
  }

  DISALLOW_COPY_AND_ASSIGN(_ArgFrame)
};

class DirStack {
 public:
  DirStack();
  void Reset();
  void Push(Str* entry);
  Str* Pop();
  List<Str*>* Iter();

  GC_OBJ(header_);
  List<Str*>* stack;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(DirStack));
  }

  DISALLOW_COPY_AND_ASSIGN(DirStack)
};

Str* _GetWorkingDir();
class DebugFrame {
 public:
  DebugFrame(Str* bash_source, Str* func_name, Str* source_name, int call_spid, int argv_i, int var_i);

  GC_OBJ(header_);
  Str* bash_source;
  Str* func_name;
  Str* source_name;
  int call_spid;
  int argv_i;
  int var_i;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(DebugFrame));
  }

  DISALLOW_COPY_AND_ASSIGN(DebugFrame)
};

void _InitDefaults(state::Mem* mem);
void _InitVarsFromEnv(state::Mem* mem, Dict<Str*, Str*>* environ);
void InitMem(state::Mem* mem, Dict<Str*, Str*>* environ, Str* version_str);
void InitInteractive(state::Mem* mem);
class ctx_Call {
 public:
  ctx_Call(state::Mem* mem, state::MutableOpts* mutable_opts, runtime_asdl::Proc* proc, List<Str*>* argv);
  ~ctx_Call();

  GC_OBJ(header_);
  state::Mem* mem;
  state::MutableOpts* mutable_opts;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(ctx_Call));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Call)
};

class ctx_Temp {
 public:
  ctx_Temp(state::Mem* mem);
  ~ctx_Temp();

  GC_OBJ(header_);
  state::Mem* mem;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Temp));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Temp)
};

class ctx_Shvar {
 public:
  ctx_Shvar(state::Mem* mem, List<Tuple2<Str*, Str*>*>* pairs);
  ~ctx_Shvar();
  void _Push(List<Tuple2<Str*, Str*>*>* pairs);
  void _Pop();

  GC_OBJ(header_);
  state::Mem* mem;
  List<Tuple2<runtime_asdl::lvalue_t*, runtime_asdl::value_t*>*>* restore;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(ctx_Shvar));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Shvar)
};

class ctx_Registers {
 public:
  ctx_Registers(state::Mem* mem);
  ~ctx_Registers();

  GC_OBJ(header_);
  state::Mem* mem;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Registers));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Registers)
};

class ctx_ThisDir {
 public:
  ctx_ThisDir(state::Mem* mem, Str* filename);
  ~ctx_ThisDir();

  GC_OBJ(header_);
  state::Mem* mem;
  bool do_pop;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_ThisDir));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_ThisDir)
};

class Mem {
 public:
  Mem(Str* dollar0, List<Str*>* argv, alloc::Arena* arena, List<state::DebugFrame*>* debug_stack);
  void SetPwd(Str* pwd);
  bool InGlobalNamespace();
  Tuple3<void*, void*, void*> Dump();
  void SetLastArgument(Str* s);
  void SetCurrentSpanId(int span_id);
  syntax_asdl::loc_t* CurrentLocation();
  int LastStatus();
  int TryStatus();
  List<int>* PipeStatus();
  void SetLastStatus(int x);
  void SetTryStatus(int x);
  void SetPipeStatus(List<int>* x);
  void SetProcessSubStatus(List<int>* x);
  void PushCall(Str* func_name, int def_spid, List<Str*>* argv);
  void PopCall();
  void PushSource(Str* source_name, List<Str*>* argv);
  void PopSource(List<Str*>* argv);
  void PushTemp();
  void PopTemp();
  Dict<Str*, runtime_asdl::cell*>* TopNamespace();
  void _PushDebugStack(Str* bash_source, Str* func_name, Str* source_name);
  void _PopDebugStack();
  int Shift(int n);
  runtime_asdl::value__Str* GetArg0();
  runtime_asdl::value_t* GetArgNum(int arg_num);
  List<Str*>* GetArgv();
  void SetArgv(List<Str*>* argv);
  runtime_asdl::value_t* GetSpecialVar(int op_id);
  Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*> _ResolveNameOnly(Str* name, runtime_asdl::scope_t which_scopes);
  Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> _ResolveNameOrRef(Str* name, runtime_asdl::scope_t which_scopes, bool is_setref, List<Str*>* ref_trail = nullptr);
  bool IsAssocArray(Str* name);
  void SetValue(runtime_asdl::lvalue_t* lval, runtime_asdl::value_t* val, runtime_asdl::scope_t which_scopes, int flags = 0);
  void _BindNewArrayWithEntry(Dict<Str*, runtime_asdl::cell*>* name_map, runtime_asdl::lvalue__Indexed* lval, runtime_asdl::value__Str* val, int flags);
  void InternalSetGlobal(Str* name, runtime_asdl::value_t* new_val);
  runtime_asdl::value_t* GetValue(Str* name, runtime_asdl::scope_t which_scopes = scope_e::Shopt);
  runtime_asdl::cell* GetCell(Str* name, runtime_asdl::scope_t which_scopes = scope_e::Shopt);
  bool Unset(runtime_asdl::lvalue_t* lval, runtime_asdl::scope_t which_scopes);
  runtime_asdl::scope_t ScopesForReading();
  runtime_asdl::scope_t ScopesForWriting();
  bool ClearFlag(Str* name, int flag);
  Dict<Str*, Str*>* GetExported();
  List<Str*>* VarNames();
  List<Str*>* VarNamesStartingWith(Str* prefix);
  Dict<Str*, Str*>* GetAllVars();
  Dict<Str*, runtime_asdl::cell*>* GetAllCells(runtime_asdl::scope_t which_scopes);
  bool IsGlobalScope();
  void ClearMatches();
  void SetMatches(List<Str*>* matches);
  Str* GetMatch(int i);

  GC_OBJ(header_);
  optview::Exec* exec_opts;
  sh_expr_eval::UnsafeArith* unsafe_arith;
  Str* dollar0;
  List<state::_ArgFrame*>* argv_stack;
  List<Dict<Str*, runtime_asdl::cell*>*>* var_stack;
  alloc::Arena* arena;
  List<state::DebugFrame*>* debug_stack;
  Str* pwd;
  Str* last_arg;
  runtime_asdl::value__Str* line_num;
  List<int>* last_status;
  List<int>* try_status;
  List<List<int>*>* pipe_status;
  List<List<int>*>* process_sub_status;
  List<Str*>* this_dir;
  List<List<Str*>*>* regex_matches;
  int current_spid;
  int root_pid;
  int last_bg_pid;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(16, sizeof(Mem));
  }

  DISALLOW_COPY_AND_ASSIGN(Mem)
};

void OshLanguageSetValue(state::Mem* mem, runtime_asdl::lvalue_t* lval, runtime_asdl::value_t* val, int flags = 0);
void BuiltinSetValue(state::Mem* mem, runtime_asdl::lvalue_t* lval, runtime_asdl::value_t* val);
void BuiltinSetString(state::Mem* mem, Str* name, Str* s);
void BuiltinSetArray(state::Mem* mem, Str* name, List<Str*>* a);
void SetGlobalString(state::Mem* mem, Str* name, Str* s);
void SetGlobalArray(state::Mem* mem, Str* name, List<Str*>* a);
void ExportGlobalString(state::Mem* mem, Str* name, Str* s);
Str* GetString(state::Mem* mem, Str* name);
Str* MaybeString(state::Mem* mem, Str* name);
int GetInteger(state::Mem* mem, Str* name);


}  // declare namespace state

namespace ui {  // declare

using id_kind_asdl::Id;
Str* ValType(runtime_asdl::value_t* val);
Str* CommandType(syntax_asdl::command_t* cmd);
Str* PrettyId(int id_);
Str* PrettyToken(syntax_asdl::Token* tok, alloc::Arena* arena);
Str* PrettyDir(Str* dir_name, Str* home_dir);
void _PrintCodeExcerpt(Str* line, int col, int length, mylib::Writer* f);
Str* GetLineSourceString(alloc::Arena* arena, syntax_asdl::SourceLine* line, bool quote_filename = false);
void _PrintWithSpanId(Str* prefix, Str* msg, int span_id, alloc::Arena* arena, bool show_code);
class ctx_Location {
 public:
  ctx_Location(ui::ErrorFormatter* errfmt, int spid);
  ~ctx_Location();

  GC_OBJ(header_);
  ui::ErrorFormatter* errfmt;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Location));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Location)
};

class ErrorFormatter {
 public:
  ErrorFormatter(alloc::Arena* arena);
  void OneLineErrExit();
  int CurrentLocation();
  void PrefixPrint(Str* msg, Str* prefix, syntax_asdl::loc_t* blame_loc);
  void Print_(Str* msg, int span_id = runtime::NO_SPID);
  void PrintMessage(Str* msg, int span_id = runtime::NO_SPID);
  void StderrLine(Str* msg);
  void PrettyPrintError(error::_ErrorWithLocation* err, Str* prefix = str493);
  void PrintErrExit(error::ErrExit* err, int pid);

  GC_OBJ(header_);
  alloc::Arena* arena;
  List<int>* spid_stack;
  int last_spid;
  bool one_line_errexit;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(ErrorFormatter));
  }

  DISALLOW_COPY_AND_ASSIGN(ErrorFormatter)
};

void PrintAst(syntax_asdl::command_t* node, arg_types::main* flag);


}  // declare namespace ui

namespace util {  // declare

class UserExit {
 public:
  UserExit(int status);

  GC_OBJ(header_);
  int status;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(0, sizeof(UserExit));
  }

  DISALLOW_COPY_AND_ASSIGN(UserExit)
};

class HistoryError {
 public:
  HistoryError(Str* msg);
  Str* UserErrorString();

  GC_OBJ(header_);
  Str* msg;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(HistoryError));
  }

  DISALLOW_COPY_AND_ASSIGN(HistoryError)
};

class _DebugFile {
 public:
  _DebugFile();
  virtual void log(Str* msg, void* args);
  virtual void write(Str* s);
  void writeln(Str* s);
  virtual bool isatty();

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(_DebugFile));
  }

  DISALLOW_COPY_AND_ASSIGN(_DebugFile)
};

class NullDebugFile : public _DebugFile {
 public:
  NullDebugFile();

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(NullDebugFile));
  }

  DISALLOW_COPY_AND_ASSIGN(NullDebugFile)
};

class DebugFile : public _DebugFile {
 public:
  DebugFile(mylib::Writer* f);
  virtual void log(Str* msg, void* args);
  virtual void write(Str* s);
  virtual bool isatty();

  mylib::Writer* f;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(DebugFile, f));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(DebugFile));
  }

  DISALLOW_COPY_AND_ASSIGN(DebugFile)
};



}  // declare namespace util

namespace args {  // declare

extern int String;
extern int Int;
extern int Float;
extern int Bool;
class _Attributes {
 public:
  _Attributes(Dict<Str*, runtime_asdl::value_t*>* defaults);
  void SetTrue(Str* name);
  void Set(Str* name, runtime_asdl::value_t* val);

  GC_OBJ(header_);
  Dict<Str*, runtime_asdl::value_t*>* attrs;
  List<Tuple2<Str*, bool>*>* opt_changes;
  List<Tuple2<Str*, bool>*>* shopt_changes;
  List<Str*>* actions;
  bool show_options;
  bool saw_double_dash;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(4, sizeof(_Attributes));
  }

  DISALLOW_COPY_AND_ASSIGN(_Attributes)
};

class Reader {
 public:
  Reader(List<Str*>* argv, List<int>* spids = nullptr);
  void Next();
  Str* Peek();
  Tuple2<Str*, int> Peek2();
  Str* ReadRequired(Str* error_msg);
  Tuple2<Str*, int> ReadRequired2(Str* error_msg);
  List<Str*>* Rest();
  Tuple2<List<Str*>*, List<int>*> Rest2();
  bool AtEnd();
  int _FirstSpanId();
  int SpanId();

  GC_OBJ(header_);
  List<Str*>* argv;
  List<int>* spids;
  int n;
  int i;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(Reader));
  }

  DISALLOW_COPY_AND_ASSIGN(Reader)
};

class _Action {
 public:
  _Action();
  virtual bool OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out);

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(_Action));
  }

  DISALLOW_COPY_AND_ASSIGN(_Action)
};

class _ArgAction : public _Action {
 public:
  _ArgAction(Str* name, bool quit_parsing_flags, List<Str*>* valid = nullptr);
  virtual runtime_asdl::value_t* _Value(Str* arg, int span_id);
  virtual bool OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out);

  Str* name;
  bool quit_parsing_flags;
  List<Str*>* valid;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_ArgAction, name))
         | maskbit_v(offsetof(_ArgAction, valid));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_ArgAction));
  }

  DISALLOW_COPY_AND_ASSIGN(_ArgAction)
};

class SetToInt : public _ArgAction {
 public:
  SetToInt(Str* name);
  virtual runtime_asdl::value_t* _Value(Str* arg, int span_id);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(SetToInt));
  }

  DISALLOW_COPY_AND_ASSIGN(SetToInt)
};

class SetToFloat : public _ArgAction {
 public:
  SetToFloat(Str* name);
  virtual runtime_asdl::value_t* _Value(Str* arg, int span_id);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(SetToFloat));
  }

  DISALLOW_COPY_AND_ASSIGN(SetToFloat)
};

class SetToString : public _ArgAction {
 public:
  SetToString(Str* name, bool quit_parsing_flags, List<Str*>* valid = nullptr);
  virtual runtime_asdl::value_t* _Value(Str* arg, int span_id);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(SetToString));
  }

  DISALLOW_COPY_AND_ASSIGN(SetToString)
};

class SetAttachedBool : public _Action {
 public:
  SetAttachedBool(Str* name);
  virtual bool OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out);

  Str* name;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(SetAttachedBool, name));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(SetAttachedBool));
  }

  DISALLOW_COPY_AND_ASSIGN(SetAttachedBool)
};

class SetToTrue : public _Action {
 public:
  SetToTrue(Str* name);
  virtual bool OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out);

  Str* name;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(SetToTrue, name));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(SetToTrue));
  }

  DISALLOW_COPY_AND_ASSIGN(SetToTrue)
};

class SetOption : public _Action {
 public:
  SetOption(Str* name);
  virtual bool OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out);

  Str* name;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(SetOption, name));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(SetOption));
  }

  DISALLOW_COPY_AND_ASSIGN(SetOption)
};

class SetNamedOption : public _Action {
 public:
  SetNamedOption(bool shopt = false);
  void ArgName(Str* name);
  virtual bool OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out);

  List<Str*>* names;
  bool shopt;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(SetNamedOption, names));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(SetNamedOption));
  }

  DISALLOW_COPY_AND_ASSIGN(SetNamedOption)
};

class SetAction : public _Action {
 public:
  SetAction(Str* name);
  virtual bool OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out);

  Str* name;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(SetAction, name));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(SetAction));
  }

  DISALLOW_COPY_AND_ASSIGN(SetAction)
};

class SetNamedAction : public _Action {
 public:
  SetNamedAction();
  void ArgName(Str* name);
  virtual bool OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out);

  List<Str*>* names;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(SetNamedAction, names));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(SetNamedAction));
  }

  DISALLOW_COPY_AND_ASSIGN(SetNamedAction)
};

args::_Attributes* Parse(flag_spec::_FlagSpec* spec, args::Reader* arg_r);
args::_Attributes* ParseLikeEcho(flag_spec::_FlagSpec* spec, args::Reader* arg_r);
args::_Attributes* ParseMore(flag_spec::_FlagSpecAndMore* spec, args::Reader* arg_r);


}  // declare namespace args

namespace lexer {  // declare

using types_asdl::lex_mode_e;
using id_kind_asdl::Id;
extern syntax_asdl::Token* _EOL_TOK;
bool IsPlusEquals(syntax_asdl::Token* tok);
Str* TokenVal(syntax_asdl::Token* tok);
Str* TokenSliceLeft(syntax_asdl::Token* tok, int left_index);
Str* TokenSliceRight(syntax_asdl::Token* tok, int right_index);
syntax_asdl::Token* DummyToken(int id_, Str* val);
class LineLexer {
 public:
  LineLexer(alloc::Arena* arena);
  void Reset(syntax_asdl::SourceLine* src_line, int line_pos);
  bool MaybeUnreadOne();
  syntax_asdl::Token* GetEofToken(int id_);
  int LookAheadOne(types_asdl::lex_mode_t lex_mode);
  int LookPastSpace(types_asdl::lex_mode_t lex_mode);
  bool LookAheadFuncParens(int unread);
  Str* ByteLookAhead();
  int ByteLookBack();
  syntax_asdl::Token* Read(types_asdl::lex_mode_t lex_mode);

  GC_OBJ(header_);
  alloc::Arena* arena;
  syntax_asdl::SourceLine* src_line;
  bool replace_last_token;
  int line_pos;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(LineLexer));
  }

  DISALLOW_COPY_AND_ASSIGN(LineLexer)
};

class Lexer {
 public:
  Lexer(lexer::LineLexer* line_lexer, reader::_Reader* line_reader);
  void ResetInputObjects();
  bool MaybeUnreadOne();
  int LookAheadOne(types_asdl::lex_mode_t lex_mode);
  int LookPastSpace(types_asdl::lex_mode_t lex_mode);
  bool LookAheadFuncParens(int unread);
  Str* ByteLookAhead();
  int ByteLookBack();
  void EmitCompDummy();
  void PushHint(int old_id, int new_id);
  syntax_asdl::Token* _Read(types_asdl::lex_mode_t lex_mode);
  syntax_asdl::Token* Read(types_asdl::lex_mode_t lex_mode);

  GC_OBJ(header_);
  lexer::LineLexer* line_lexer;
  reader::_Reader* line_reader;
  List<Tuple2<int, int>*>* translation_stack;
  int line_id;
  bool emit_comp_dummy;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(Lexer));
  }

  DISALLOW_COPY_AND_ASSIGN(Lexer)
};



}  // declare namespace lexer

namespace location {  // declare

runtime_asdl::lvalue__Named* LName(Str* name);
int GetSpanId(syntax_asdl::loc_t* loc_);
int SpanForCommand(syntax_asdl::command_t* node);
int SpanForArithExpr(syntax_asdl::arith_expr_t* node);


}  // declare namespace location

namespace parse_lib {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
class _BaseTrail {
 public:
  _BaseTrail();
  virtual void Clear();
  virtual void SetLatestWords(List<syntax_asdl::compound_word*>* words, List<syntax_asdl::redir*>* redirects);
  virtual void AppendToken(syntax_asdl::Token* token);
  void BeginAliasExpansion();
  void EndAliasExpansion();

  GC_OBJ(header_);
  bool _expanding_alias;
  List<syntax_asdl::compound_word*>* alias_words;
  List<syntax_asdl::redir*>* redirects;
  List<syntax_asdl::Token*>* tokens;
  List<syntax_asdl::compound_word*>* words;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_BaseTrail, alias_words))
         | maskbit_v(offsetof(_BaseTrail, redirects))
         | maskbit_v(offsetof(_BaseTrail, tokens))
         | maskbit_v(offsetof(_BaseTrail, words));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_BaseTrail));
  }

  DISALLOW_COPY_AND_ASSIGN(_BaseTrail)
};

class ctx_Alias {
 public:
  ctx_Alias(parse_lib::_BaseTrail* trail);
  ~ctx_Alias();

  GC_OBJ(header_);
  parse_lib::_BaseTrail* trail;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Alias));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Alias)
};

class Trail : public _BaseTrail {
 public:
  Trail();
  virtual void Clear();
  virtual void SetLatestWords(List<syntax_asdl::compound_word*>* words, List<syntax_asdl::redir*>* redirects);
  virtual void AppendToken(syntax_asdl::Token* token);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Trail));
  }

  DISALLOW_COPY_AND_ASSIGN(Trail)
};

class ParseContext {
 public:
  ParseContext(alloc::Arena* arena, optview::Parse* parse_opts, Dict<Str*, Str*>* aliases, grammar::Grammar* oil_grammar, bool one_pass_parse = false);
  void Init_Trail(parse_lib::_BaseTrail* trail);
  lexer::Lexer* MakeLexer(reader::_Reader* line_reader);
  cmd_parse::CommandParser* MakeOshParser(reader::_Reader* line_reader, bool emit_comp_dummy = false);
  cmd_parse::CommandParser* MakeConfigParser(reader::_Reader* line_reader);
  word_parse::WordParser* MakeWordParserForHereDoc(reader::_Reader* line_reader);
  word_parse::WordParser* MakeWordParser(lexer::Lexer* lx, reader::_Reader* line_reader);
  tdop::TdopParser* MakeArithParser(Str* code_str);
  cmd_parse::CommandParser* MakeParserForCommandSub(reader::_Reader* line_reader, lexer::Lexer* lexer, int eof_id);
  word_parse::WordParser* MakeWordParserForPlugin(Str* code_str);
  Tuple2<pnode::PNode*, syntax_asdl::Token*> _ParseOil(lexer::Lexer* lexer, int start_symbol);
  Tuple2<pnode::PNode*, syntax_asdl::Token*> _ParseTea(lexer::Lexer* lexer, int start_symbol);
  Tuple2<syntax_asdl::command__VarDecl*, syntax_asdl::Token*> ParseVarDecl(syntax_asdl::Token* kw_token, lexer::Lexer* lexer);
  Tuple2<syntax_asdl::command__PlaceMutation*, syntax_asdl::Token*> ParsePlaceMutation(syntax_asdl::Token* kw_token, lexer::Lexer* lexer);
  void ParseOilArgList(lexer::Lexer* lx, syntax_asdl::ArgList* out);
  Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> ParseOilExpr(lexer::Lexer* lx, int start_symbol);
  Tuple3<List<syntax_asdl::name_type*>*, syntax_asdl::expr_t*, syntax_asdl::Token*> ParseOilForExpr(lexer::Lexer* lexer, int start_symbol);
  syntax_asdl::Token* ParseProc(lexer::Lexer* lexer, syntax_asdl::command__Proc* out);
  syntax_asdl::Token* ParseFunc(lexer::Lexer* lexer, syntax_asdl::command__Func* out);
  syntax_asdl::Token* ParseDataType(lexer::Lexer* lexer, syntax_asdl::command__Data* out);
  syntax_asdl::Token* ParseEnum(lexer::Lexer* lexer, syntax_asdl::command__Enum* out);
  syntax_asdl::Token* ParseClass(lexer::Lexer* lexer, syntax_asdl::command__Class* out);
  syntax_asdl::Token* ParseImport(lexer::Lexer* lexer, syntax_asdl::command__Import* out);

  GC_OBJ(header_);
  alloc::Arena* arena;
  optview::Parse* parse_opts;
  Dict<Str*, Str*>* aliases;
  grammar::Grammar* oil_grammar;
  expr_to_ast::Transformer* tr;
  parse_lib::_BaseTrail* trail;
  bool one_pass_parse;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(6, sizeof(ParseContext));
  }

  DISALLOW_COPY_AND_ASSIGN(ParseContext)
};



}  // declare namespace parse_lib

namespace reader {  // declare

extern Str* _PS2;
class _Reader {
 public:
  _Reader(alloc::Arena* arena);
  void SetLineOffset(int n);
  virtual Str* _GetLine();
  virtual Tuple2<syntax_asdl::SourceLine*, int> GetLine();
  virtual void Reset();
  virtual bool LastLineHint();

  GC_OBJ(header_);
  alloc::Arena* arena;
  int line_num;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_Reader, arena));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_Reader));
  }

  DISALLOW_COPY_AND_ASSIGN(_Reader)
};

class DisallowedLineReader : public _Reader {
 public:
  DisallowedLineReader(alloc::Arena* arena, syntax_asdl::Token* blame_token);
  virtual Str* _GetLine();

  syntax_asdl::Token* blame_token;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(DisallowedLineReader, blame_token));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(DisallowedLineReader));
  }

  DISALLOW_COPY_AND_ASSIGN(DisallowedLineReader)
};

class FileLineReader : public _Reader {
 public:
  FileLineReader(mylib::LineReader* f, alloc::Arena* arena);
  virtual Str* _GetLine();
  virtual bool LastLineHint();

  mylib::LineReader* f;
  bool last_line_hint;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(FileLineReader, f));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(FileLineReader));
  }

  DISALLOW_COPY_AND_ASSIGN(FileLineReader)
};

reader::FileLineReader* StringLineReader(Str* s, alloc::Arena* arena);
class VirtualLineReader : public _Reader {
 public:
  VirtualLineReader(List<Tuple2<syntax_asdl::SourceLine*, int>*>* lines, alloc::Arena* arena);
  virtual Tuple2<syntax_asdl::SourceLine*, int> GetLine();

  List<Tuple2<syntax_asdl::SourceLine*, int>*>* lines;
  int num_lines;
  int pos;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(VirtualLineReader, lines));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(VirtualLineReader));
  }

  DISALLOW_COPY_AND_ASSIGN(VirtualLineReader)
};

Str* _readline_no_tty(Str* prompt);
class InteractiveLineReader : public _Reader {
 public:
  InteractiveLineReader(alloc::Arena* arena, prompt::Evaluator* prompt_ev, history::Evaluator* hist_ev, py_readline::Readline* line_input, comp_ui::PromptState* prompt_state);
  virtual void Reset();
  virtual Str* _GetLine();

  history::Evaluator* hist_ev;
  py_readline::Readline* line_input;
  Str* prev_line;
  prompt::Evaluator* prompt_ev;
  comp_ui::PromptState* prompt_state;
  Str* prompt_str;
  bool render_ps1;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(InteractiveLineReader, hist_ev))
         | maskbit_v(offsetof(InteractiveLineReader, line_input))
         | maskbit_v(offsetof(InteractiveLineReader, prev_line))
         | maskbit_v(offsetof(InteractiveLineReader, prompt_ev))
         | maskbit_v(offsetof(InteractiveLineReader, prompt_state))
         | maskbit_v(offsetof(InteractiveLineReader, prompt_str));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(InteractiveLineReader));
  }

  DISALLOW_COPY_AND_ASSIGN(InteractiveLineReader)
};



}  // declare namespace reader

namespace typed_args {  // declare

void DoesNotAccept(syntax_asdl::ArgList* arg_list);
syntax_asdl::expr_t* RequiredExpr(syntax_asdl::ArgList* arg_list);
syntax_asdl::command_t* GetOneBlock(syntax_asdl::ArgList* arg_list);
syntax_asdl::BlockArg* GetLiteralBlock(syntax_asdl::ArgList* arg_list);


}  // declare namespace typed_args

namespace expr_parse {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
int _Classify(grammar::Grammar* gr, syntax_asdl::Token* tok, bool tea_keywords);
extern Dict<int, int>* _OTHER_BALANCE;
syntax_asdl::Token* _PushOilTokens(parse_lib::ParseContext* parse_ctx, grammar::Grammar* gr, parse::Parser* p, lexer::Lexer* lex, bool tea_keywords);
class ExprParser {
 public:
  ExprParser(parse_lib::ParseContext* parse_ctx, grammar::Grammar* gr, bool tea_keywords);
  Tuple2<pnode::PNode*, syntax_asdl::Token*> Parse(lexer::Lexer* lexer, int start_symbol);

  GC_OBJ(header_);
  parse_lib::ParseContext* parse_ctx;
  grammar::Grammar* gr;
  parse::Parser* push_parser;
  bool tea_keywords;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(ExprParser));
  }

  DISALLOW_COPY_AND_ASSIGN(ExprParser)
};



}  // declare namespace expr_parse

namespace expr_to_ast {  // declare

using id_kind_asdl::Id;
extern Dict<Str*, Str*>* PERL_CLASSES;
extern List<Str*>* POSIX_CLASSES;
extern Str* RANGE_POINT_TOO_LONG;
extern int NT_OFFSET;
bool ISNONTERMINAL(int x);
class Transformer {
 public:
  Transformer(grammar::Grammar* gr);
  syntax_asdl::expr_t* _AssocBinary(List<pnode::PNode*>* children);
  syntax_asdl::expr_t* _Trailer(syntax_asdl::expr_t* base, pnode::PNode* p_trailer);
  Tuple2<syntax_asdl::expr_t*, syntax_asdl::expr_t*> _DictPair(pnode::PNode* p_node);
  syntax_asdl::expr__Dict* _Dict(pnode::PNode* p_node);
  syntax_asdl::expr_t* _Tuple(List<pnode::PNode*>* children);
  syntax_asdl::expr_t* _TestlistComp(pnode::PNode* p_node, int id0);
  syntax_asdl::expr_t* _Atom(List<pnode::PNode*>* children);
  List<syntax_asdl::name_type*>* _NameTypeList(pnode::PNode* p_node);
  syntax_asdl::comprehension* _CompFor(pnode::PNode* p_node);
  syntax_asdl::expr_t* _CompareChain(List<pnode::PNode*>* children);
  syntax_asdl::expr_t* _Subscript(List<pnode::PNode*>* children);
  syntax_asdl::expr_t* Expr(pnode::PNode* pnode);
  syntax_asdl::expr_t* _ArrayItem(pnode::PNode* p_node);
  List<syntax_asdl::place_expr_t*>* _PlaceList(pnode::PNode* p_node);
  syntax_asdl::command__VarDecl* MakeVarDecl(pnode::PNode* p_node);
  syntax_asdl::command__PlaceMutation* MakePlaceMutation(pnode::PNode* p_node);
  Tuple2<List<syntax_asdl::name_type*>*, syntax_asdl::expr_t*> OilForExpr(pnode::PNode* pnode);
  void _Argument(pnode::PNode* p_node, bool do_named, syntax_asdl::ArgList* arglist);
  void _Arglist(List<pnode::PNode*>* children, syntax_asdl::ArgList* arglist);
  void ToArgList(pnode::PNode* pnode, syntax_asdl::ArgList* arglist);
  syntax_asdl::type_expr_t* _TypeExpr(pnode::PNode* pnode);
  List<syntax_asdl::type_expr_t*>* _TypeExprList(pnode::PNode* pnode);
  Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::expr_t*> _ProcParam(pnode::PNode* pnode);
  syntax_asdl::proc_sig_t* _ProcParams(pnode::PNode* p_node);
  syntax_asdl::param* _FuncParam(pnode::PNode* pnode);
  Tuple2<List<syntax_asdl::param*>*, syntax_asdl::Token*> _FuncParams(pnode::PNode* p_node);
  syntax_asdl::proc_sig_t* Proc(pnode::PNode* pnode);
  syntax_asdl::command_t* func_item(pnode::PNode* node);
  List<syntax_asdl::command_t*>* func_items(pnode::PNode* pnode);
  syntax_asdl::command__CommandList* _Suite(pnode::PNode* pnode);
  void TeaFunc(pnode::PNode* pnode, syntax_asdl::command__Func* out);
  void NamedFunc(pnode::PNode* pnode, syntax_asdl::command__Func* out);
  List<syntax_asdl::param*>* _DataParams(pnode::PNode* p_node);
  void Data(pnode::PNode* pnode, syntax_asdl::command__Data* out);
  syntax_asdl::variant_type_t* _VariantType(pnode::PNode* pnode);
  syntax_asdl::variant* _Variant(pnode::PNode* pnode);
  void Enum(pnode::PNode* pnode, syntax_asdl::command__Enum* out);
  void Class(pnode::PNode* pnode, syntax_asdl::command__Class* out);
  void Import(pnode::PNode* pnode, syntax_asdl::command__Import* out);
  syntax_asdl::Token* _RangeChar(pnode::PNode* p_node);
  syntax_asdl::class_literal_term_t* _NonRangeChars(pnode::PNode* p_node);
  syntax_asdl::class_literal_term_t* _ClassLiteralTerm(pnode::PNode* p_node);
  List<syntax_asdl::class_literal_term_t*>* _ClassLiteral(pnode::PNode* p_node);
  syntax_asdl::re_t* _NameInRegex(syntax_asdl::Token* negated_tok, syntax_asdl::Token* tok);
  syntax_asdl::class_literal_term_t* _NameInClass(syntax_asdl::Token* negated_tok, syntax_asdl::Token* tok);
  syntax_asdl::re_t* _ReAtom(pnode::PNode* p_atom);
  syntax_asdl::re_repeat_t* _RepeatOp(pnode::PNode* p_repeat);
  syntax_asdl::re_t* _Regex(pnode::PNode* p_node);

  GC_OBJ(header_);
  Dict<int, Str*>* number2symbol;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(Transformer));
  }

  DISALLOW_COPY_AND_ASSIGN(Transformer)
};



}  // declare namespace expr_to_ast

namespace funcs {  // declare

class ParseHay {
 public:
  ParseHay(process::FdState* fd_state, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt);
  runtime_asdl::value_t* Call(Str* path);

  GC_OBJ(header_);
  process::FdState* fd_state;
  parse_lib::ParseContext* parse_ctx;
  ui::ErrorFormatter* errfmt;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(ParseHay));
  }

  DISALLOW_COPY_AND_ASSIGN(ParseHay)
};

class EvalHay {
 public:
  EvalHay(state::Hay* hay_state, state::MutableOpts* mutable_opts, state::Mem* mem, cmd_eval::CommandEvaluator* cmd_ev);

  GC_OBJ(header_);
  state::Hay* hay_state;
  state::MutableOpts* mutable_opts;
  state::Mem* mem;
  cmd_eval::CommandEvaluator* cmd_ev;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(4, sizeof(EvalHay));
  }

  DISALLOW_COPY_AND_ASSIGN(EvalHay)
};

class BlockAsStr {
 public:
  BlockAsStr(alloc::Arena* arena);
  runtime_asdl::value_t* Call(runtime_asdl::value_t* block);

  GC_OBJ(header_);
  alloc::Arena* arena;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(BlockAsStr));
  }

  DISALLOW_COPY_AND_ASSIGN(BlockAsStr)
};

class HayFunc {
 public:
  HayFunc(state::Hay* hay_state);

  GC_OBJ(header_);
  state::Hay* hay_state;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(HayFunc));
  }

  DISALLOW_COPY_AND_ASSIGN(HayFunc)
};



}  // declare namespace funcs

namespace regex_translate {  // declare

using id_kind_asdl::Id;
extern Dict<Str*, Str*>* PERL_CLASS;
extern int CH_RBRACKET;
extern int CH_BACKSLASH;
extern int CH_CARET;
extern int CH_HYPHEN;
extern int FLAG_RBRACKET;
extern int FLAG_BACKSLASH;
extern int FLAG_CARET;
extern int FLAG_HYPHEN;
void _CharCodeToEre(syntax_asdl::CharCode* term, List<Str*>* parts, List<int>* special_char_flags);
void _CharClassTermToEre(syntax_asdl::char_class_term_t* term, List<Str*>* parts, List<int>* special_char_flags);
void AsPosixEre(syntax_asdl::re_t* node, List<Str*>* parts);


}  // declare namespace regex_translate

namespace arith_parse {  // declare

using id_kind_asdl::Id;
syntax_asdl::arith_expr_t* NullIncDec(tdop::TdopParser* p, syntax_asdl::word_t* w, int bp);
syntax_asdl::arith_expr_t* NullUnaryPlus(tdop::TdopParser* p, syntax_asdl::word_t* t, int bp);
syntax_asdl::arith_expr_t* NullUnaryMinus(tdop::TdopParser* p, syntax_asdl::word_t* t, int bp);
syntax_asdl::arith_expr_t* LeftIncDec(tdop::TdopParser* p, syntax_asdl::word_t* w, syntax_asdl::arith_expr_t* left, int rbp);
syntax_asdl::arith_expr_t* LeftIndex(tdop::TdopParser* p, syntax_asdl::word_t* w, syntax_asdl::arith_expr_t* left, int unused_bp);
syntax_asdl::arith_expr_t* LeftTernary(tdop::TdopParser* p, syntax_asdl::word_t* t, syntax_asdl::arith_expr_t* left, int bp);


}  // declare namespace arith_parse

namespace bool_parse {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
class BoolParser {
 public:
  BoolParser(word_parse::WordEmitter* w_parser);
  void _NextOne(types_asdl::lex_mode_t lex_mode = lex_mode_e::DBracket);
  void _Next(types_asdl::lex_mode_t lex_mode = lex_mode_e::DBracket);
  syntax_asdl::word_t* _LookAhead();
  syntax_asdl::bool_expr_t* Parse();
  bool _TestAtEnd();
  syntax_asdl::bool_expr_t* ParseForBuiltin();
  syntax_asdl::bool_expr_t* ParseExpr();
  syntax_asdl::bool_expr_t* ParseTerm();
  syntax_asdl::bool_expr_t* ParseNegatedFactor();
  syntax_asdl::bool_expr_t* ParseFactor();

  GC_OBJ(header_);
  word_parse::WordEmitter* w_parser;
  List<syntax_asdl::word_t*>* words;
  syntax_asdl::word_t* cur_word;
  int bool_id;
  id_kind_asdl::Kind_t bool_kind;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(BoolParser));
  }

  DISALLOW_COPY_AND_ASSIGN(BoolParser)
};



}  // declare namespace bool_parse

namespace braces {  // declare

using id_kind_asdl::Id;
extern int NO_STEP;
class _NotARange {
 public:
  _NotARange(Str* s);

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(0, sizeof(_NotARange));
  }

  DISALLOW_COPY_AND_ASSIGN(_NotARange)
};

class _RangeParser {
 public:
  _RangeParser(match::SimpleLexer* lexer, syntax_asdl::Token* blame_tok);
  void _Next();
  Str* _Eat(int token_type);
  int _ParseStep();
  syntax_asdl::word_part__BracedRange* _ParseRange(int range_kind);
  syntax_asdl::word_part__BracedRange* Parse();

  GC_OBJ(header_);
  match::SimpleLexer* lexer;
  syntax_asdl::Token* blame_tok;
  Str* token_val;
  int token_type;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(_RangeParser));
  }

  DISALLOW_COPY_AND_ASSIGN(_RangeParser)
};

syntax_asdl::word_part_t* _RangePartDetect(syntax_asdl::Token* tok);
class _StackFrame {
 public:
  _StackFrame(List<syntax_asdl::word_part_t*>* cur_parts);

  GC_OBJ(header_);
  List<syntax_asdl::word_part_t*>* cur_parts;
  syntax_asdl::word_part__BracedTuple* alt_part;
  bool saw_comma;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(_StackFrame));
  }

  DISALLOW_COPY_AND_ASSIGN(_StackFrame)
};

syntax_asdl::word__BracedTree* _BraceDetect(syntax_asdl::compound_word* w);
List<syntax_asdl::word_t*>* BraceDetectAll(List<syntax_asdl::compound_word*>* words);
int _LeadingZeros(Str* s);
Str* _IntToString(int i, int width);
List<Str*>* _RangeStrings(syntax_asdl::word_part__BracedRange* part);
List<List<syntax_asdl::word_part_t*>*>* _ExpandPart(List<syntax_asdl::word_part_t*>* parts, int first_alt_index, List<List<syntax_asdl::word_part_t*>*>* suffixes);
List<List<syntax_asdl::word_part_t*>*>* _BraceExpand(List<syntax_asdl::word_part_t*>* parts);
List<syntax_asdl::compound_word*>* BraceExpandWords(List<syntax_asdl::word_t*>* words);


}  // declare namespace braces

namespace builtin_assign {  // declare

using runtime_asdl::scope_e;
extern int _OTHER;
extern int _READONLY;
extern int _EXPORT;
int _PrintVariables(state::Mem* mem, runtime_asdl::cmd_value__Assign* cmd_val, args::_Attributes* attrs, bool print_flags, int builtin = _OTHER);
void _ExportReadonly(state::Mem* mem, runtime_asdl::assign_arg* pair, int flags);
class Export : public vm::_AssignBuiltin {
 public:
  Export(state::Mem* mem, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Assign* cmd_val);

  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Export, errfmt))
         | maskbit_v(offsetof(Export, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Export));
  }

  DISALLOW_COPY_AND_ASSIGN(Export)
};

runtime_asdl::value_t* _ReconcileTypes(runtime_asdl::value_t* rval, bool flag_a, bool flag_A, int span_id);
class Readonly : public vm::_AssignBuiltin {
 public:
  Readonly(state::Mem* mem, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Assign* cmd_val);

  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Readonly, errfmt))
         | maskbit_v(offsetof(Readonly, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Readonly));
  }

  DISALLOW_COPY_AND_ASSIGN(Readonly)
};

class NewVar : public vm::_AssignBuiltin {
 public:
  NewVar(state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, ui::ErrorFormatter* errfmt);
  int _PrintFuncs(List<Str*>* names);
  virtual int Run(runtime_asdl::cmd_value__Assign* cmd_val);

  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  Dict<Str*, runtime_asdl::Proc*>* procs;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(NewVar, errfmt))
         | maskbit_v(offsetof(NewVar, mem))
         | maskbit_v(offsetof(NewVar, procs));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(NewVar));
  }

  DISALLOW_COPY_AND_ASSIGN(NewVar)
};

class Unset : public vm::_Builtin {
 public:
  Unset(state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, sh_expr_eval::UnsafeArith* unsafe_arith, ui::ErrorFormatter* errfmt);
  bool _UnsetVar(Str* arg, int spid, bool proc_fallback);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  Dict<Str*, runtime_asdl::Proc*>* procs;
  sh_expr_eval::UnsafeArith* unsafe_arith;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Unset, errfmt))
         | maskbit_v(offsetof(Unset, mem))
         | maskbit_v(offsetof(Unset, procs))
         | maskbit_v(offsetof(Unset, unsafe_arith));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Unset));
  }

  DISALLOW_COPY_AND_ASSIGN(Unset)
};

class Shift : public vm::_Builtin {
 public:
  Shift(state::Mem* mem);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Shift, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Shift));
  }

  DISALLOW_COPY_AND_ASSIGN(Shift)
};



}  // declare namespace builtin_assign

namespace builtin_comp {  // declare

extern List<Str*>* HELP_TOPICS;
class _FixedWordsAction : public completion::CompletionAction {
 public:
  _FixedWordsAction(List<Str*>* d);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  List<Str*>* d;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_FixedWordsAction, d));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_FixedWordsAction));
  }

  DISALLOW_COPY_AND_ASSIGN(_FixedWordsAction)
};

class _DynamicProcDictAction : public completion::CompletionAction {
 public:
  _DynamicProcDictAction(Dict<Str*, runtime_asdl::Proc*>* d);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  Dict<Str*, runtime_asdl::Proc*>* d;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_DynamicProcDictAction, d));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_DynamicProcDictAction));
  }

  DISALLOW_COPY_AND_ASSIGN(_DynamicProcDictAction)
};

class _DynamicStrDictAction : public completion::CompletionAction {
 public:
  _DynamicStrDictAction(Dict<Str*, Str*>* d);
  virtual void Matches(completion::Api* comp, List<Str*>* _out_yield_acc);

  Dict<Str*, Str*>* d;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_DynamicStrDictAction, d));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_DynamicStrDictAction));
  }

  DISALLOW_COPY_AND_ASSIGN(_DynamicStrDictAction)
};

class SpecBuilder {
 public:
  SpecBuilder(cmd_eval::CommandEvaluator* cmd_ev, parse_lib::ParseContext* parse_ctx, word_eval::NormalWordEvaluator* word_ev, split::SplitContext* splitter, completion::Lookup* comp_lookup, ui::ErrorFormatter* errfmt);
  completion::UserSpec* Build(List<Str*>* argv, args::_Attributes* attrs, Dict<Str*, bool>* base_opts);

  GC_OBJ(header_);
  cmd_eval::CommandEvaluator* cmd_ev;
  parse_lib::ParseContext* parse_ctx;
  word_eval::NormalWordEvaluator* word_ev;
  split::SplitContext* splitter;
  completion::Lookup* comp_lookup;
  ui::ErrorFormatter* errfmt;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(6, sizeof(SpecBuilder));
  }

  DISALLOW_COPY_AND_ASSIGN(SpecBuilder)
};

class Complete : public vm::_Builtin {
 public:
  Complete(builtin_comp::SpecBuilder* spec_builder, completion::Lookup* comp_lookup);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  completion::Lookup* comp_lookup;
  builtin_comp::SpecBuilder* spec_builder;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Complete, comp_lookup))
         | maskbit_v(offsetof(Complete, spec_builder));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Complete));
  }

  DISALLOW_COPY_AND_ASSIGN(Complete)
};

class CompGen : public vm::_Builtin {
 public:
  CompGen(builtin_comp::SpecBuilder* spec_builder);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  builtin_comp::SpecBuilder* spec_builder;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(CompGen, spec_builder));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(CompGen));
  }

  DISALLOW_COPY_AND_ASSIGN(CompGen)
};

class CompOpt : public vm::_Builtin {
 public:
  CompOpt(completion::OptionState* comp_state, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  completion::OptionState* comp_state;
  ui::ErrorFormatter* errfmt;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(CompOpt, comp_state))
         | maskbit_v(offsetof(CompOpt, errfmt));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(CompOpt));
  }

  DISALLOW_COPY_AND_ASSIGN(CompOpt)
};

class CompAdjust : public vm::_Builtin {
 public:
  CompAdjust(state::Mem* mem);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(CompAdjust, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(CompAdjust));
  }

  DISALLOW_COPY_AND_ASSIGN(CompAdjust)
};



}  // declare namespace builtin_comp

namespace builtin_lib {  // declare

class Bind : public vm::_Builtin {
 public:
  Bind(py_readline::Readline* readline, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  py_readline::Readline* readline;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Bind, errfmt))
         | maskbit_v(offsetof(Bind, readline));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Bind));
  }

  DISALLOW_COPY_AND_ASSIGN(Bind)
};

class History : public vm::_Builtin {
 public:
  History(py_readline::Readline* readline, mylib::Writer* f);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  mylib::Writer* f;
  py_readline::Readline* readline;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(History, f))
         | maskbit_v(offsetof(History, readline));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(History));
  }

  DISALLOW_COPY_AND_ASSIGN(History)
};



}  // declare namespace builtin_lib

namespace builtin_meta {  // declare

class Eval : public vm::_Builtin {
 public:
  Eval(parse_lib::ParseContext* parse_ctx, optview::Exec* exec_opts, cmd_eval::CommandEvaluator* cmd_ev, dev::Tracer* tracer, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  alloc::Arena* arena;
  cmd_eval::CommandEvaluator* cmd_ev;
  ui::ErrorFormatter* errfmt;
  optview::Exec* exec_opts;
  parse_lib::ParseContext* parse_ctx;
  dev::Tracer* tracer;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Eval, arena))
         | maskbit_v(offsetof(Eval, cmd_ev))
         | maskbit_v(offsetof(Eval, errfmt))
         | maskbit_v(offsetof(Eval, exec_opts))
         | maskbit_v(offsetof(Eval, parse_ctx))
         | maskbit_v(offsetof(Eval, tracer));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Eval));
  }

  DISALLOW_COPY_AND_ASSIGN(Eval)
};

class Source : public vm::_Builtin {
 public:
  Source(parse_lib::ParseContext* parse_ctx, state::SearchPath* search_path, cmd_eval::CommandEvaluator* cmd_ev, process::FdState* fd_state, dev::Tracer* tracer, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  alloc::Arena* arena;
  cmd_eval::CommandEvaluator* cmd_ev;
  ui::ErrorFormatter* errfmt;
  process::FdState* fd_state;
  state::Mem* mem;
  parse_lib::ParseContext* parse_ctx;
  state::SearchPath* search_path;
  dev::Tracer* tracer;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Source, arena))
         | maskbit_v(offsetof(Source, cmd_ev))
         | maskbit_v(offsetof(Source, errfmt))
         | maskbit_v(offsetof(Source, fd_state))
         | maskbit_v(offsetof(Source, mem))
         | maskbit_v(offsetof(Source, parse_ctx))
         | maskbit_v(offsetof(Source, search_path))
         | maskbit_v(offsetof(Source, tracer));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Source));
  }

  DISALLOW_COPY_AND_ASSIGN(Source)
};

class Command : public vm::_Builtin {
 public:
  Command(vm::_Executor* shell_ex, Dict<Str*, runtime_asdl::Proc*>* funcs, Dict<Str*, Str*>* aliases, state::SearchPath* search_path);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  Dict<Str*, Str*>* aliases;
  Dict<Str*, runtime_asdl::Proc*>* funcs;
  state::SearchPath* search_path;
  vm::_Executor* shell_ex;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Command, aliases))
         | maskbit_v(offsetof(Command, funcs))
         | maskbit_v(offsetof(Command, search_path))
         | maskbit_v(offsetof(Command, shell_ex));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Command));
  }

  DISALLOW_COPY_AND_ASSIGN(Command)
};

class Builtin : public vm::_Builtin {
 public:
  Builtin(vm::_Executor* shell_ex, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  vm::_Executor* shell_ex;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Builtin, errfmt))
         | maskbit_v(offsetof(Builtin, shell_ex));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Builtin));
  }

  DISALLOW_COPY_AND_ASSIGN(Builtin)
};

class RunProc : public vm::_Builtin {
 public:
  RunProc(vm::_Executor* shell_ex, Dict<Str*, runtime_asdl::Proc*>* procs, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  Dict<Str*, runtime_asdl::Proc*>* procs;
  vm::_Executor* shell_ex;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(RunProc, errfmt))
         | maskbit_v(offsetof(RunProc, procs))
         | maskbit_v(offsetof(RunProc, shell_ex));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(RunProc));
  }

  DISALLOW_COPY_AND_ASSIGN(RunProc)
};

class Try : public vm::_Builtin {
 public:
  Try(state::MutableOpts* mutable_opts, state::Mem* mem, cmd_eval::CommandEvaluator* cmd_ev, vm::_Executor* shell_ex, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  cmd_eval::CommandEvaluator* cmd_ev;
  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  state::MutableOpts* mutable_opts;
  vm::_Executor* shell_ex;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Try, cmd_ev))
         | maskbit_v(offsetof(Try, errfmt))
         | maskbit_v(offsetof(Try, mem))
         | maskbit_v(offsetof(Try, mutable_opts))
         | maskbit_v(offsetof(Try, shell_ex));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Try));
  }

  DISALLOW_COPY_AND_ASSIGN(Try)
};

class BoolStatus : public vm::_Builtin {
 public:
  BoolStatus(vm::_Executor* shell_ex, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  vm::_Executor* shell_ex;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(BoolStatus, errfmt))
         | maskbit_v(offsetof(BoolStatus, shell_ex));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(BoolStatus));
  }

  DISALLOW_COPY_AND_ASSIGN(BoolStatus)
};

List<Tuple2<Str*, Str*>*>* _ResolveNames(List<Str*>* names, Dict<Str*, runtime_asdl::Proc*>* funcs, Dict<Str*, Str*>* aliases, state::SearchPath* search_path);
class Type : public vm::_Builtin {
 public:
  Type(Dict<Str*, runtime_asdl::Proc*>* funcs, Dict<Str*, Str*>* aliases, state::SearchPath* search_path, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  Dict<Str*, Str*>* aliases;
  ui::ErrorFormatter* errfmt;
  Dict<Str*, runtime_asdl::Proc*>* funcs;
  state::SearchPath* search_path;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Type, aliases))
         | maskbit_v(offsetof(Type, errfmt))
         | maskbit_v(offsetof(Type, funcs))
         | maskbit_v(offsetof(Type, search_path));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Type));
  }

  DISALLOW_COPY_AND_ASSIGN(Type)
};



}  // declare namespace builtin_meta

namespace builtin_misc {  // declare

using runtime_asdl::scope_e;
class Times : public vm::_Builtin {
 public:
  Times();
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Times));
  }

  DISALLOW_COPY_AND_ASSIGN(Times)
};

Tuple2<bool, bool> _AppendParts(Str* s, List<Tuple2<runtime_asdl::span_t, int>*>* spans, int max_results, bool join_next, List<mylib::BufWriter*>* parts);
Str* _ReadN(int num_bytes, cmd_eval::CommandEvaluator* cmd_ev);
Tuple2<Str*, bool> _ReadUntilDelim(int delim_byte, cmd_eval::CommandEvaluator* cmd_ev);
Str* _ReadLineSlowly(cmd_eval::CommandEvaluator* cmd_ev);
Str* _ReadAll();
class Read : public vm::_Builtin {
 public:
  Read(split::SplitContext* splitter, state::Mem* mem, parse_lib::ParseContext* parse_ctx, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt);
  int _Line(arg_types::read* arg, Str* var_name);
  int _All(Str* var_name);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);
  int _Run(runtime_asdl::cmd_value__Argv* cmd_val);
  int _Read(arg_types::read* arg, List<Str*>* names);

  cmd_eval::CommandEvaluator* cmd_ev;
  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  parse_lib::ParseContext* parse_ctx;
  split::SplitContext* splitter;
  mylib::LineReader* stdin;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Read, cmd_ev))
         | maskbit_v(offsetof(Read, errfmt))
         | maskbit_v(offsetof(Read, mem))
         | maskbit_v(offsetof(Read, parse_ctx))
         | maskbit_v(offsetof(Read, splitter))
         | maskbit_v(offsetof(Read, stdin));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Read));
  }

  DISALLOW_COPY_AND_ASSIGN(Read)
};

class MapFile : public vm::_Builtin {
 public:
  MapFile(state::Mem* mem, ui::ErrorFormatter* errfmt, cmd_eval::CommandEvaluator* cmd_ev);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  cmd_eval::CommandEvaluator* cmd_ev;
  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(MapFile, cmd_ev))
         | maskbit_v(offsetof(MapFile, errfmt))
         | maskbit_v(offsetof(MapFile, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(MapFile));
  }

  DISALLOW_COPY_AND_ASSIGN(MapFile)
};

class ctx_CdBlock {
 public:
  ctx_CdBlock(state::DirStack* dir_stack, Str* dest_dir, state::Mem* mem, ui::ErrorFormatter* errfmt, List<bool>* out_errs);
  ~ctx_CdBlock();

  GC_OBJ(header_);
  state::DirStack* dir_stack;
  state::Mem* mem;
  ui::ErrorFormatter* errfmt;
  List<bool>* out_errs;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(4, sizeof(ctx_CdBlock));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_CdBlock)
};

class Cd : public vm::_Builtin {
 public:
  Cd(state::Mem* mem, state::DirStack* dir_stack, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  cmd_eval::CommandEvaluator* cmd_ev;
  state::DirStack* dir_stack;
  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Cd, cmd_ev))
         | maskbit_v(offsetof(Cd, dir_stack))
         | maskbit_v(offsetof(Cd, errfmt))
         | maskbit_v(offsetof(Cd, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Cd));
  }

  DISALLOW_COPY_AND_ASSIGN(Cd)
};

extern int WITH_LINE_NUMBERS;
extern int WITHOUT_LINE_NUMBERS;
extern int SINGLE_LINE;
void _PrintDirStack(state::DirStack* dir_stack, int style, Str* home_dir);
class Pushd : public vm::_Builtin {
 public:
  Pushd(state::Mem* mem, state::DirStack* dir_stack, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  state::DirStack* dir_stack;
  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Pushd, dir_stack))
         | maskbit_v(offsetof(Pushd, errfmt))
         | maskbit_v(offsetof(Pushd, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Pushd));
  }

  DISALLOW_COPY_AND_ASSIGN(Pushd)
};

bool _PopDirStack(Str* label, state::Mem* mem, state::DirStack* dir_stack, ui::ErrorFormatter* errfmt, List<bool>* out_errs);
class Popd : public vm::_Builtin {
 public:
  Popd(state::Mem* mem, state::DirStack* dir_stack, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  state::DirStack* dir_stack;
  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Popd, dir_stack))
         | maskbit_v(offsetof(Popd, errfmt))
         | maskbit_v(offsetof(Popd, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Popd));
  }

  DISALLOW_COPY_AND_ASSIGN(Popd)
};

class Dirs : public vm::_Builtin {
 public:
  Dirs(state::Mem* mem, state::DirStack* dir_stack, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  state::DirStack* dir_stack;
  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Dirs, dir_stack))
         | maskbit_v(offsetof(Dirs, errfmt))
         | maskbit_v(offsetof(Dirs, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Dirs));
  }

  DISALLOW_COPY_AND_ASSIGN(Dirs)
};

class Pwd : public vm::_Builtin {
 public:
  Pwd(state::Mem* mem, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Pwd, errfmt))
         | maskbit_v(offsetof(Pwd, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Pwd));
  }

  DISALLOW_COPY_AND_ASSIGN(Pwd)
};

class Help : public vm::_Builtin {
 public:
  Help(pyutil::_ResourceLoader* loader, ui::ErrorFormatter* errfmt);
  List<Str*>* _Groups();
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  pyutil::_ResourceLoader* loader;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Help, errfmt))
         | maskbit_v(offsetof(Help, loader));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Help));
  }

  DISALLOW_COPY_AND_ASSIGN(Help)
};

class Cat : public vm::_Builtin {
 public:
  Cat();
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Cat));
  }

  DISALLOW_COPY_AND_ASSIGN(Cat)
};



}  // declare namespace builtin_misc

namespace builtin_printf {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
class _FormatStringParser {
 public:
  _FormatStringParser(lexer::Lexer* lexer);
  void _Next(types_asdl::lex_mode_t lex_mode);
  syntax_asdl::printf_part_t* _ParseFormatStr();
  List<syntax_asdl::printf_part_t*>* Parse();

  GC_OBJ(header_);
  lexer::Lexer* lexer;
  syntax_asdl::Token* cur_token;
  int token_type;
  id_kind_asdl::Kind_t token_kind;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(_FormatStringParser));
  }

  DISALLOW_COPY_AND_ASSIGN(_FormatStringParser)
};

class Printf : public vm::_Builtin {
 public:
  Printf(state::Mem* mem, parse_lib::ParseContext* parse_ctx, sh_expr_eval::UnsafeArith* unsafe_arith, ui::ErrorFormatter* errfmt);
  int _Format(List<syntax_asdl::printf_part_t*>* parts, List<Str*>* varargs, List<int>* spids, List<Str*>* out);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  Dict<Str*, List<syntax_asdl::printf_part_t*>*>* parse_cache;
  parse_lib::ParseContext* parse_ctx;
  double shell_start_time;
  sh_expr_eval::UnsafeArith* unsafe_arith;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Printf, errfmt))
         | maskbit_v(offsetof(Printf, mem))
         | maskbit_v(offsetof(Printf, parse_cache))
         | maskbit_v(offsetof(Printf, parse_ctx))
         | maskbit_v(offsetof(Printf, unsafe_arith));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Printf));
  }

  DISALLOW_COPY_AND_ASSIGN(Printf)
};



}  // declare namespace builtin_printf

namespace builtin_process {  // declare

class Jobs : public vm::_Builtin {
 public:
  Jobs(process::JobState* job_state);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  process::JobState* job_state;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Jobs, job_state));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Jobs));
  }

  DISALLOW_COPY_AND_ASSIGN(Jobs)
};

class Fg : public vm::_Builtin {
 public:
  Fg(process::JobState* job_state, process::Waiter* waiter);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  process::JobState* job_state;
  process::Waiter* waiter;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Fg, job_state))
         | maskbit_v(offsetof(Fg, waiter));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Fg));
  }

  DISALLOW_COPY_AND_ASSIGN(Fg)
};

class Bg : public vm::_Builtin {
 public:
  Bg(process::JobState* job_state);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  process::JobState* job_state;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Bg, job_state));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Bg));
  }

  DISALLOW_COPY_AND_ASSIGN(Bg)
};

class Fork : public vm::_Builtin {
 public:
  Fork(vm::_Executor* shell_ex);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  vm::_Executor* shell_ex;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Fork, shell_ex));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Fork));
  }

  DISALLOW_COPY_AND_ASSIGN(Fork)
};

class ForkWait : public vm::_Builtin {
 public:
  ForkWait(vm::_Executor* shell_ex);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  vm::_Executor* shell_ex;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(ForkWait, shell_ex));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(ForkWait));
  }

  DISALLOW_COPY_AND_ASSIGN(ForkWait)
};



}  // declare namespace builtin_process

namespace builtin_process2 {  // declare

class Exec : public vm::_Builtin {
 public:
  Exec(state::Mem* mem, process::ExternalProgram* ext_prog, process::FdState* fd_state, state::SearchPath* search_path, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  process::ExternalProgram* ext_prog;
  process::FdState* fd_state;
  state::Mem* mem;
  state::SearchPath* search_path;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Exec, errfmt))
         | maskbit_v(offsetof(Exec, ext_prog))
         | maskbit_v(offsetof(Exec, fd_state))
         | maskbit_v(offsetof(Exec, mem))
         | maskbit_v(offsetof(Exec, search_path));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Exec));
  }

  DISALLOW_COPY_AND_ASSIGN(Exec)
};

class Wait : public vm::_Builtin {
 public:
  Wait(process::Waiter* waiter, process::JobState* job_state, state::Mem* mem, dev::Tracer* tracer, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);
  int _Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  process::JobState* job_state;
  state::Mem* mem;
  dev::Tracer* tracer;
  process::Waiter* waiter;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Wait, errfmt))
         | maskbit_v(offsetof(Wait, job_state))
         | maskbit_v(offsetof(Wait, mem))
         | maskbit_v(offsetof(Wait, tracer))
         | maskbit_v(offsetof(Wait, waiter));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Wait));
  }

  DISALLOW_COPY_AND_ASSIGN(Wait)
};

class Umask : public vm::_Builtin {
 public:
  Umask();
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Umask));
  }

  DISALLOW_COPY_AND_ASSIGN(Umask)
};



}  // declare namespace builtin_process2

namespace builtin_pure {  // declare

using id_kind_asdl::Id;
using runtime_asdl::scope_e;
class Boolean : public vm::_Builtin {
 public:
  Boolean(int status);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  int status;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(Boolean));
  }

  DISALLOW_COPY_AND_ASSIGN(Boolean)
};

class Alias : public vm::_Builtin {
 public:
  Alias(Dict<Str*, Str*>* aliases, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  Dict<Str*, Str*>* aliases;
  ui::ErrorFormatter* errfmt;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Alias, aliases))
         | maskbit_v(offsetof(Alias, errfmt));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Alias));
  }

  DISALLOW_COPY_AND_ASSIGN(Alias)
};

class UnAlias : public vm::_Builtin {
 public:
  UnAlias(Dict<Str*, Str*>* aliases, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  Dict<Str*, Str*>* aliases;
  ui::ErrorFormatter* errfmt;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(UnAlias, aliases))
         | maskbit_v(offsetof(UnAlias, errfmt));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(UnAlias));
  }

  DISALLOW_COPY_AND_ASSIGN(UnAlias)
};

void SetOptionsFromFlags(state::MutableOpts* exec_opts, List<Tuple2<Str*, bool>*>* opt_changes, List<Tuple2<Str*, bool>*>* shopt_changes);
class Set : public vm::_Builtin {
 public:
  Set(state::MutableOpts* exec_opts, state::Mem* mem);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  state::MutableOpts* exec_opts;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Set, exec_opts))
         | maskbit_v(offsetof(Set, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Set));
  }

  DISALLOW_COPY_AND_ASSIGN(Set)
};

class Shopt : public vm::_Builtin {
 public:
  Shopt(state::MutableOpts* mutable_opts, cmd_eval::CommandEvaluator* cmd_ev);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  cmd_eval::CommandEvaluator* cmd_ev;
  state::MutableOpts* mutable_opts;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Shopt, cmd_ev))
         | maskbit_v(offsetof(Shopt, mutable_opts));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Shopt));
  }

  DISALLOW_COPY_AND_ASSIGN(Shopt)
};

class Hash : public vm::_Builtin {
 public:
  Hash(state::SearchPath* search_path);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  state::SearchPath* search_path;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Hash, search_path));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Hash));
  }

  DISALLOW_COPY_AND_ASSIGN(Hash)
};

Dict<Str*, bool>* _ParseOptSpec(Str* spec_str);
class GetOptsState {
 public:
  GetOptsState(state::Mem* mem, ui::ErrorFormatter* errfmt);
  int _OptInd();
  Str* GetArg(List<Str*>* argv);
  void IncIndex();
  void SetArg(Str* optarg);
  void Fail();

  GC_OBJ(header_);
  state::Mem* mem;
  ui::ErrorFormatter* errfmt;
  int _optind;
  int flag_pos;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(GetOptsState));
  }

  DISALLOW_COPY_AND_ASSIGN(GetOptsState)
};

Tuple2<int, Str*> _GetOpts(Dict<Str*, bool>* spec, List<Str*>* argv, builtin_pure::GetOptsState* my_state, ui::ErrorFormatter* errfmt);
class GetOpts : public vm::_Builtin {
 public:
  GetOpts(state::Mem* mem, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  builtin_pure::GetOptsState* my_state;
  Dict<Str*, Dict<Str*, bool>*>* spec_cache;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(GetOpts, errfmt))
         | maskbit_v(offsetof(GetOpts, mem))
         | maskbit_v(offsetof(GetOpts, my_state))
         | maskbit_v(offsetof(GetOpts, spec_cache));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(GetOpts));
  }

  DISALLOW_COPY_AND_ASSIGN(GetOpts)
};

class Echo : public vm::_Builtin {
 public:
  Echo(optview::Exec* exec_opts);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  optview::Exec* exec_opts;
  mylib::Writer* f;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Echo, exec_opts))
         | maskbit_v(offsetof(Echo, f));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Echo));
  }

  DISALLOW_COPY_AND_ASSIGN(Echo)
};

class Module : public vm::_Builtin {
 public:
  Module(Dict<Str*, bool>* modules, optview::Exec* exec_opts, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  optview::Exec* exec_opts;
  Dict<Str*, bool>* modules;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Module, errfmt))
         | maskbit_v(offsetof(Module, exec_opts))
         | maskbit_v(offsetof(Module, modules));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Module));
  }

  DISALLOW_COPY_AND_ASSIGN(Module)
};

class Use : public vm::_Builtin {
 public:
  Use(state::Mem* mem, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Use, errfmt))
         | maskbit_v(offsetof(Use, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Use));
  }

  DISALLOW_COPY_AND_ASSIGN(Use)
};

class Shvar : public vm::_Builtin {
 public:
  Shvar(state::Mem* mem, state::SearchPath* search_path, cmd_eval::CommandEvaluator* cmd_ev);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  cmd_eval::CommandEvaluator* cmd_ev;
  state::Mem* mem;
  state::SearchPath* search_path;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Shvar, cmd_ev))
         | maskbit_v(offsetof(Shvar, mem))
         | maskbit_v(offsetof(Shvar, search_path));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Shvar));
  }

  DISALLOW_COPY_AND_ASSIGN(Shvar)
};

class PushRegisters : public vm::_Builtin {
 public:
  PushRegisters(state::Mem* mem, cmd_eval::CommandEvaluator* cmd_ev);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  cmd_eval::CommandEvaluator* cmd_ev;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(PushRegisters, cmd_ev))
         | maskbit_v(offsetof(PushRegisters, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(PushRegisters));
  }

  DISALLOW_COPY_AND_ASSIGN(PushRegisters)
};

class Fopen : public vm::_Builtin {
 public:
  Fopen(state::Mem* mem, cmd_eval::CommandEvaluator* cmd_ev);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  cmd_eval::CommandEvaluator* cmd_ev;
  state::Mem* mem;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Fopen, cmd_ev))
         | maskbit_v(offsetof(Fopen, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Fopen));
  }

  DISALLOW_COPY_AND_ASSIGN(Fopen)
};



}  // declare namespace builtin_pure

namespace builtin_trap {  // declare

class TrapState {
 public:
  TrapState(pyos::SignalSafe* signal_safe);
  syntax_asdl::command_t* GetHook(Str* hook_name);
  void AddUserHook(Str* hook_name, syntax_asdl::command_t* handler);
  void RemoveUserHook(Str* hook_name);
  void AddUserTrap(int sig_num, syntax_asdl::command_t* handler);
  void RemoveUserTrap(int sig_num);
  void InitInteractiveShell(comp_ui::_IDisplay* display, int my_pid);
  List<syntax_asdl::command_t*>* GetPendingTraps();

  GC_OBJ(header_);
  pyos::SignalSafe* signal_safe;
  Dict<Str*, syntax_asdl::command_t*>* hooks;
  Dict<int, syntax_asdl::command_t*>* traps;
  comp_ui::_IDisplay* display;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(4, sizeof(TrapState));
  }

  DISALLOW_COPY_AND_ASSIGN(TrapState)
};

int _GetSignalNumber(Str* sig_spec);
extern List<Str*>* _HOOK_NAMES;
class Trap : public vm::_Builtin {
 public:
  Trap(builtin_trap::TrapState* trap_state, parse_lib::ParseContext* parse_ctx, dev::Tracer* tracer, ui::ErrorFormatter* errfmt);
  syntax_asdl::command_t* _ParseTrapCode(Str* code_str);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  alloc::Arena* arena;
  ui::ErrorFormatter* errfmt;
  parse_lib::ParseContext* parse_ctx;
  dev::Tracer* tracer;
  builtin_trap::TrapState* trap_state;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Trap, arena))
         | maskbit_v(offsetof(Trap, errfmt))
         | maskbit_v(offsetof(Trap, parse_ctx))
         | maskbit_v(offsetof(Trap, tracer))
         | maskbit_v(offsetof(Trap, trap_state));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Trap));
  }

  DISALLOW_COPY_AND_ASSIGN(Trap)
};



}  // declare namespace builtin_trap

namespace cmd_eval {  // declare

using id_kind_asdl::Id;
using runtime_asdl::scope_e;
extern int IsMainProgram;
extern int RaiseControlFlow;
extern int Optimize;
extern Dict<Str*, Str*>* OIL_TYPE_NAMES;
class Deps {
 public:
  Deps();

  GC_OBJ(header_);
  state::MutableOpts* mutable_opts;
  dev::CrashDumper* dumper;
  util::_DebugFile* debug_f;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(Deps));
  }

  DISALLOW_COPY_AND_ASSIGN(Deps)
};

int _PackFlags(int keyword_id, int flags = 0);
bool _HasManyStatuses(syntax_asdl::command_t* node);
runtime_asdl::value_t* PlusEquals(runtime_asdl::value_t* old_val, runtime_asdl::value_t* val);
class ctx_LoopLevel {
 public:
  ctx_LoopLevel(cmd_eval::CommandEvaluator* cmd_ev);
  ~ctx_LoopLevel();

  GC_OBJ(header_);
  cmd_eval::CommandEvaluator* cmd_ev;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_LoopLevel));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_LoopLevel)
};

class CommandEvaluator {
 public:
  CommandEvaluator(state::Mem* mem, optview::Exec* exec_opts, ui::ErrorFormatter* errfmt, Dict<Str*, runtime_asdl::Proc*>* procs, Dict<int, vm::_AssignBuiltin*>* assign_builtins, alloc::Arena* arena, cmd_eval::Deps* cmd_deps, builtin_trap::TrapState* trap_state, pyos::SignalSafe* signal_safe);
  void CheckCircularDeps();
  int _RunAssignBuiltin(runtime_asdl::cmd_value__Assign* cmd_val);
  int _SpanIdForShAssignment(syntax_asdl::command__ShAssignment* node);
  void _CheckStatus(int status, runtime_asdl::CommandStatus* cmd_st, syntax_asdl::command_t* node, int blame_spid);
  runtime_asdl::redirect* _EvalRedirect(syntax_asdl::redir* r);
  List<runtime_asdl::redirect*>* _EvalRedirects(syntax_asdl::command_t* node);
  int _RunSimpleCommand(runtime_asdl::cmd_value_t* cmd_val, runtime_asdl::CommandStatus* cmd_st, bool do_fork);
  void _EvalTempEnv(List<syntax_asdl::env_pair*>* more_env, int flags);
  void _StrictErrExit(syntax_asdl::command_t* node);
  void _StrictErrExitList(List<syntax_asdl::command_t*>* node_list);
  bool _EvalCondition(syntax_asdl::condition_t* cond, int spid);
  int _Dispatch(syntax_asdl::command_t* node, runtime_asdl::CommandStatus* cmd_st);
  void RunPendingTraps();
  int _Execute(syntax_asdl::command_t* node);
  int _ExecuteList(List<syntax_asdl::command_t*>* children);
  int LastStatus();
  void _NoForkLast(syntax_asdl::command_t* node);
  syntax_asdl::command_t* _RemoveSubshells(syntax_asdl::command_t* node);
  Tuple2<bool, bool> ExecuteAndCatch(syntax_asdl::command_t* node, int cmd_flags = 0);
  void MaybeRunExitTrap(List<int>* mut_status);
  int RunProc(runtime_asdl::Proc* proc, List<Str*>* argv, int arg0_spid);
  Dict<Str*, runtime_asdl::cell*>* EvalBlock(syntax_asdl::command_t* block);
  int RunFuncForCompletion(runtime_asdl::Proc* proc, List<Str*>* argv);

  GC_OBJ(header_);
  vm::_Executor* shell_ex;
  sh_expr_eval::ArithEvaluator* arith_ev;
  sh_expr_eval::BoolEvaluator* bool_ev;
  expr_eval::OilEvaluator* expr_ev;
  word_eval::AbstractWordEvaluator* word_ev;
  dev::Tracer* tracer;
  state::Mem* mem;
  optview::Exec* exec_opts;
  ui::ErrorFormatter* errfmt;
  Dict<Str*, runtime_asdl::Proc*>* procs;
  Dict<int, vm::_AssignBuiltin*>* assign_builtins;
  alloc::Arena* arena;
  state::MutableOpts* mutable_opts;
  dev::CrashDumper* dumper;
  util::_DebugFile* debug_f;
  builtin_trap::TrapState* trap_state;
  pyos::SignalSafe* signal_safe;
  int loop_level;
  bool check_command_sub_status;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(17, sizeof(CommandEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(CommandEvaluator)
};



}  // declare namespace cmd_eval

namespace cmd_parse {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
extern int TAB_CH;
extern int SPACE_CH;
int _KeywordSpid(syntax_asdl::word_t* w);
syntax_asdl::Token* _KeywordToken(syntax_asdl::word_t* UP_w);
Tuple2<List<Tuple2<syntax_asdl::SourceLine*, int>*>*, Tuple2<syntax_asdl::SourceLine*, int>*> _ReadHereLines(reader::_Reader* line_reader, syntax_asdl::redir* h, Str* delimiter);
List<syntax_asdl::word_part_t*>* _MakeLiteralHereLines(List<Tuple2<syntax_asdl::SourceLine*, int>*>* here_lines, alloc::Arena* arena);
void _ParseHereDocBody(parse_lib::ParseContext* parse_ctx, syntax_asdl::redir* r, reader::_Reader* line_reader, alloc::Arena* arena);
syntax_asdl::assign_pair* _MakeAssignPair(parse_lib::ParseContext* parse_ctx, Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>* preparsed, alloc::Arena* arena);
void _AppendMoreEnv(List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>* preparsed_list, List<syntax_asdl::env_pair*>* more_env);
Tuple2<List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>*, List<syntax_asdl::compound_word*>*> _SplitSimpleCommandPrefix(List<syntax_asdl::compound_word*>* words);
syntax_asdl::command__Simple* _MakeSimpleCommand(List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>* preparsed_list, List<syntax_asdl::compound_word*>* suffix_words, List<syntax_asdl::redir*>* redirects, syntax_asdl::ArgList* typed_args, syntax_asdl::BlockArg* block);
class VarChecker {
 public:
  VarChecker();
  void Push(syntax_asdl::Token* blame_tok);
  void Pop();
  void Check(int keyword_id, syntax_asdl::Token* name_tok);

  GC_OBJ(header_);
  List<syntax_asdl::Token*>* tokens;
  List<Dict<Str*, int>*>* names;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(VarChecker));
  }

  DISALLOW_COPY_AND_ASSIGN(VarChecker)
};

class ctx_VarChecker {
 public:
  ctx_VarChecker(cmd_parse::VarChecker* var_checker, syntax_asdl::Token* blame_tok);
  ~ctx_VarChecker();

  GC_OBJ(header_);
  cmd_parse::VarChecker* var_checker;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_VarChecker));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_VarChecker)
};

extern List<int>* SECONDARY_KEYWORDS;
class CommandParser {
 public:
  CommandParser(parse_lib::ParseContext* parse_ctx, optview::Parse* parse_opts, word_parse::WordParser* w_parser, lexer::Lexer* lexer, reader::_Reader* line_reader, int eof_id = Id::Eof_Real);
  void Init_AliasesInFlight(List<Tuple2<Str*, int>*>* aliases_in_flight);
  void Reset();
  void ResetInputObjects();
  void _Next();
  void _Peek();
  void _Eat(int c_id);
  void _Eat2(int c_id, Str* msg);
  void _NewlineOk();
  bool _AtSecondaryKeyword();
  syntax_asdl::redir* ParseRedirect();
  List<syntax_asdl::redir*>* _ParseRedirectList();
  Tuple4<List<syntax_asdl::redir*>*, List<syntax_asdl::compound_word*>*, syntax_asdl::ArgList*, syntax_asdl::BlockArg*> _ScanSimpleCommand();
  syntax_asdl::command_t* _MaybeExpandAliases(List<syntax_asdl::compound_word*>* words);
  syntax_asdl::command_t* ParseSimpleCommand();
  syntax_asdl::BraceGroup* ParseBraceGroup();
  syntax_asdl::command__DoGroup* ParseDoGroup();
  Tuple2<List<syntax_asdl::compound_word*>*, int> ParseForWords();
  syntax_asdl::command__ForExpr* _ParseForExprLoop();
  syntax_asdl::command__ForEach* _ParseForEachLoop(int for_spid);
  syntax_asdl::command_t* ParseFor();
  syntax_asdl::command__WhileUntil* ParseWhileUntil(syntax_asdl::Token* keyword);
  syntax_asdl::case_arm* ParseCaseItem();
  void ParseCaseList(List<syntax_asdl::case_arm*>* arms);
  syntax_asdl::command__Case* ParseCase();
  void _ParseOilElifElse(syntax_asdl::command__If* if_node);
  syntax_asdl::command__If* _ParseOilIf(int if_spid, syntax_asdl::condition_t* cond);
  void _ParseElifElse(syntax_asdl::command__If* if_node);
  syntax_asdl::command__If* ParseIf();
  syntax_asdl::command_t* ParseTime();
  syntax_asdl::command_t* ParseCompoundCommand();
  syntax_asdl::command__ShFunction* ParseFunctionDef();
  syntax_asdl::command__ShFunction* ParseKshFunctionDef();
  syntax_asdl::command__Proc* ParseOilProc();
  syntax_asdl::command_t* ParseCoproc();
  syntax_asdl::command__Subshell* ParseSubshell();
  syntax_asdl::command__DBracket* ParseDBracket();
  syntax_asdl::command__DParen* ParseDParen();
  syntax_asdl::command_t* ParseCommand();
  syntax_asdl::command_t* ParsePipeline();
  syntax_asdl::command_t* ParseAndOr();
  syntax_asdl::command_t* _ParseAndOr();
  syntax_asdl::command_t* _ParseCommandLine();
  syntax_asdl::command__CommandList* _ParseCommandTerm();
  syntax_asdl::command__CommandList* _ParseCommandList();
  syntax_asdl::command_t* ParseLogicalLine();
  syntax_asdl::parse_result_t* ParseInteractiveLine();
  syntax_asdl::command_t* ParseCommandSub();
  void CheckForPendingHereDocs();

  GC_OBJ(header_);
  parse_lib::ParseContext* parse_ctx;
  Dict<Str*, Str*>* aliases;
  optview::Parse* parse_opts;
  word_parse::WordParser* w_parser;
  lexer::Lexer* lexer;
  reader::_Reader* line_reader;
  alloc::Arena* arena;
  List<Tuple2<Str*, int>*>* aliases_in_flight;
  List<bool>* allow_block_attrs;
  cmd_parse::VarChecker* var_checker;
  syntax_asdl::word_t* cur_word;
  List<syntax_asdl::redir*>* pending_here_docs;
  int eof_id;
  bool allow_block;
  types_asdl::lex_mode_t next_lex_mode;
  id_kind_asdl::Kind_t c_kind;
  int c_id;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(12, sizeof(CommandParser));
  }

  DISALLOW_COPY_AND_ASSIGN(CommandParser)
};



}  // declare namespace cmd_parse

namespace glob_ {  // declare

using id_kind_asdl::Id;
bool LooksLikeGlob(Str* s);
bool LooksLikeStaticGlob(syntax_asdl::compound_word* w);
extern Str* GLOB_META_CHARS;
Str* GlobEscape(Str* s);
extern Str* ERE_META_CHARS;
Str* ExtendedRegexEscape(Str* s);
Str* GlobUnescape(Str* s);
class _GlobParser {
 public:
  _GlobParser(match::SimpleLexer* lexer);
  void _Next();
  List<syntax_asdl::glob_part_t*>* _ParseCharClass();
  Tuple2<List<syntax_asdl::glob_part_t*>*, List<Str*>*> Parse();

  GC_OBJ(header_);
  match::SimpleLexer* lexer;
  Str* token_val;
  List<Str*>* warnings;
  int token_type;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(_GlobParser));
  }

  DISALLOW_COPY_AND_ASSIGN(_GlobParser)
};

extern Str* _REGEX_CHARS_TO_ESCAPE;
Str* _GenerateERE(List<syntax_asdl::glob_part_t*>* parts);
Tuple2<Str*, List<Str*>*> GlobToERE(Str* pat);
class Globber {
 public:
  Globber(optview::Exec* exec_opts);
  int _Glob(Str* arg, List<Str*>* out);
  int Expand(Str* arg, List<Str*>* out);
  int ExpandExtended(Str* glob_pat, Str* fnmatch_pat, List<Str*>* out);
  List<Str*>* OilFuncCall(Str* arg);

  GC_OBJ(header_);
  optview::Exec* exec_opts;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(Globber));
  }

  DISALLOW_COPY_AND_ASSIGN(Globber)
};



}  // declare namespace glob_

namespace history {  // declare

using id_kind_asdl::Id;
class Evaluator {
 public:
  Evaluator(py_readline::Readline* readline, parse_lib::ParseContext* parse_ctx, util::_DebugFile* debug_f);
  Str* Eval(Str* line);

  GC_OBJ(header_);
  py_readline::Readline* readline;
  parse_lib::ParseContext* parse_ctx;
  util::_DebugFile* debug_f;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(Evaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(Evaluator)
};



}  // declare namespace history

namespace prompt {  // declare

using id_kind_asdl::Id;
extern Str* PROMPT_ERROR;
class _PromptEvaluatorCache {
 public:
  _PromptEvaluatorCache();
  int _GetEuid();
  Str* Get(Str* name);

  GC_OBJ(header_);
  Dict<Str*, Str*>* cache;
  int euid;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(_PromptEvaluatorCache));
  }

  DISALLOW_COPY_AND_ASSIGN(_PromptEvaluatorCache)
};

class Evaluator {
 public:
  Evaluator(Str* lang, Str* version_str, parse_lib::ParseContext* parse_ctx, state::Mem* mem);
  void CheckCircularDeps();
  Str* _ReplaceBackslashCodes(List<Tuple2<int, Str*>*>* tokens);
  Str* EvalPrompt(runtime_asdl::value_t* UP_val);
  Str* EvalFirstPrompt();

  GC_OBJ(header_);
  word_eval::AbstractWordEvaluator* word_ev;
  Str* lang;
  Str* version_str;
  parse_lib::ParseContext* parse_ctx;
  state::Mem* mem;
  prompt::_PromptEvaluatorCache* cache;
  Dict<Str*, List<Tuple2<int, Str*>*>*>* tokens_cache;
  Dict<Str*, syntax_asdl::compound_word*>* parse_cache;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(8, sizeof(Evaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(Evaluator)
};

extern Str* PROMPT_COMMAND;
class UserPlugin {
 public:
  UserPlugin(state::Mem* mem, parse_lib::ParseContext* parse_ctx, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt);
  void Run();

  GC_OBJ(header_);
  state::Mem* mem;
  parse_lib::ParseContext* parse_ctx;
  cmd_eval::CommandEvaluator* cmd_ev;
  ui::ErrorFormatter* errfmt;
  alloc::Arena* arena;
  Dict<Str*, syntax_asdl::command_t*>* parse_cache;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(6, sizeof(UserPlugin));
  }

  DISALLOW_COPY_AND_ASSIGN(UserPlugin)
};



}  // declare namespace prompt

namespace sh_expr_eval {  // declare

using id_kind_asdl::Id;
runtime_asdl::value_t* OldValue(runtime_asdl::lvalue_t* lval, state::Mem* mem, optview::Exec* exec_opts);
class UnsafeArith {
 public:
  UnsafeArith(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, parse_lib::ParseContext* parse_ctx, sh_expr_eval::ArithEvaluator* arith_ev, ui::ErrorFormatter* errfmt);
  runtime_asdl::lvalue_t* ParseLValue(Str* s, int span_id);
  syntax_asdl::braced_var_sub* ParseVarRef(Str* ref_str, syntax_asdl::Token* blame_tok);

  GC_OBJ(header_);
  state::Mem* mem;
  optview::Exec* exec_opts;
  state::MutableOpts* mutable_opts;
  parse_lib::ParseContext* parse_ctx;
  sh_expr_eval::ArithEvaluator* arith_ev;
  ui::ErrorFormatter* errfmt;
  alloc::Arena* arena;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(7, sizeof(UnsafeArith));
  }

  DISALLOW_COPY_AND_ASSIGN(UnsafeArith)
};

class ArithEvaluator {
 public:
  ArithEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt);
  void CheckCircularDeps();
  int _StringToInteger(Str* s, int span_id = runtime::NO_SPID);
  int _ValToIntOrError(runtime_asdl::value_t* val, int span_id = runtime::NO_SPID);
  Tuple2<int, runtime_asdl::lvalue_t*> _EvalLhsAndLookupArith(syntax_asdl::arith_expr_t* node);
  void _Store(runtime_asdl::lvalue_t* lval, int new_int);
  int EvalToInt(syntax_asdl::arith_expr_t* node);
  runtime_asdl::value_t* Eval(syntax_asdl::arith_expr_t* node);
  Str* EvalWordToString(syntax_asdl::arith_expr_t* node);
  runtime_asdl::lvalue_t* EvalShellLhs(syntax_asdl::sh_lhs_expr_t* node, runtime_asdl::scope_t which_scopes);
  Tuple2<Str*, int> _VarNameOrWord(syntax_asdl::arith_expr_t* anode);
  runtime_asdl::lvalue_t* EvalArithLhs(syntax_asdl::arith_expr_t* anode, int span_id);

  GC_OBJ(header_);
  ui::ErrorFormatter* errfmt;
  optview::Exec* exec_opts;
  state::Mem* mem;
  state::MutableOpts* mutable_opts;
  parse_lib::ParseContext* parse_ctx;
  word_eval::StringWordEvaluator* word_ev;
  
  static constexpr uint16_t field_mask() {
    return maskbit(offsetof(ArithEvaluator, errfmt))
         | maskbit(offsetof(ArithEvaluator, exec_opts))
         | maskbit(offsetof(ArithEvaluator, mem))
         | maskbit(offsetof(ArithEvaluator, mutable_opts))
         | maskbit(offsetof(ArithEvaluator, parse_ctx))
         | maskbit(offsetof(ArithEvaluator, word_ev));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(ArithEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(ArithEvaluator)
};

class BoolEvaluator : public ArithEvaluator {
 public:
  BoolEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt, bool always_strict = false);
  int _StringToIntegerOrError(Str* s, syntax_asdl::word_t* blame_word = nullptr);
  Str* _EvalCompoundWord(syntax_asdl::word_t* word, int eval_flags = 0);
  bool EvalB(syntax_asdl::bool_expr_t* node);

  bool always_strict;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(BoolEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(BoolEvaluator)
};



}  // declare namespace sh_expr_eval

namespace split {  // declare

using runtime_asdl::scope_e;
extern Str* DEFAULT_IFS;
List<Str*>* _SpansToParts(Str* s, List<Tuple2<runtime_asdl::span_t, int>*>* spans);
class SplitContext {
 public:
  SplitContext(state::Mem* mem);
  split::IfsSplitter* _GetSplitter(Str* ifs = nullptr);
  Str* GetJoinChar();
  Str* Escape(Str* s);
  List<Str*>* SplitForWordEval(Str* s, Str* ifs = nullptr);
  List<Tuple2<runtime_asdl::span_t, int>*>* SplitForRead(Str* line, bool allow_escape);
  List<Str*>* SplitFuncBuiltin(Str* s, Str* ifs = nullptr);

  GC_OBJ(header_);
  state::Mem* mem;
  Dict<Str*, split::IfsSplitter*>* splitters;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(SplitContext));
  }

  DISALLOW_COPY_AND_ASSIGN(SplitContext)
};

class _BaseSplitter {
 public:
  _BaseSplitter(Str* escape_chars);
  Str* Escape(Str* s);

  GC_OBJ(header_);
  Str* escape_chars;
  
  static constexpr uint16_t field_mask() {
    return maskbit(offsetof(_BaseSplitter, escape_chars));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_BaseSplitter));
  }

  DISALLOW_COPY_AND_ASSIGN(_BaseSplitter)
};

class IfsSplitter : public _BaseSplitter {
 public:
  IfsSplitter(Str* ifs_whitespace, Str* ifs_other);
  List<Tuple2<runtime_asdl::span_t, int>*>* Split(Str* s, bool allow_escape);

  Str* ifs_other;
  Str* ifs_whitespace;
  
  static constexpr uint16_t field_mask() {
    return maskbit(offsetof(IfsSplitter, ifs_other))
         | maskbit(offsetof(IfsSplitter, ifs_whitespace));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(IfsSplitter));
  }

  DISALLOW_COPY_AND_ASSIGN(IfsSplitter)
};



}  // declare namespace split

namespace string_ops {  // declare

using id_kind_asdl::Id;
Str* Utf8Encode(int code);
extern Str* INCOMPLETE_CHAR;
extern Str* INVALID_CONT;
extern Str* INVALID_START;
void _CheckContinuationByte(Str* byte);
int _Utf8CharLen(int starting_byte);
int _NextUtf8Char(Str* s, int i);
int PreviousUtf8Char(Str* s, int i);
int CountUtf8Chars(Str* s);
int AdvanceUtf8Chars(Str* s, int num_chars, int byte_offset);
Str* DoUnarySuffixOp(Str* s, syntax_asdl::Token* op_tok, Str* arg, bool is_extglob);
List<Tuple2<int, int>*>* _AllMatchPositions(Str* s, Str* regex);
Str* _PatSubAll(Str* s, Str* regex, Str* replace_str);
class GlobReplacer {
 public:
  GlobReplacer(Str* regex, Str* replace_str, syntax_asdl::Token* slash_tok);
  Str* Replace(Str* s, syntax_asdl::suffix_op__PatSub* op);

  GC_OBJ(header_);
  Str* regex;
  Str* replace_str;
  syntax_asdl::Token* slash_tok;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(GlobReplacer));
  }

  DISALLOW_COPY_AND_ASSIGN(GlobReplacer)
};

Str* ShellQuoteB(Str* s);


}  // declare namespace string_ops

namespace tdop {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
bool IsIndexable(syntax_asdl::arith_expr_t* node);
void CheckLhsExpr(syntax_asdl::arith_expr_t* node, syntax_asdl::word_t* blame_word);
syntax_asdl::arith_expr_t* NullError(tdop::TdopParser* p, syntax_asdl::word_t* t, int bp);
syntax_asdl::arith_expr_t* NullConstant(tdop::TdopParser* p, syntax_asdl::word_t* w, int bp);
syntax_asdl::arith_expr_t* NullParen(tdop::TdopParser* p, syntax_asdl::word_t* t, int bp);
syntax_asdl::arith_expr_t* NullPrefixOp(tdop::TdopParser* p, syntax_asdl::word_t* w, int bp);
syntax_asdl::arith_expr_t* LeftError(tdop::TdopParser* p, syntax_asdl::word_t* t, syntax_asdl::arith_expr_t* left, int rbp);
syntax_asdl::arith_expr_t* LeftBinaryOp(tdop::TdopParser* p, syntax_asdl::word_t* w, syntax_asdl::arith_expr_t* left, int rbp);
syntax_asdl::arith_expr_t* LeftAssign(tdop::TdopParser* p, syntax_asdl::word_t* w, syntax_asdl::arith_expr_t* left, int rbp);
class TdopParser {
 public:
  TdopParser(tdop::ParserSpec* spec, word_parse::WordParser* w_parser, optview::Parse* parse_opts);
  int CurrentId();
  bool AtToken(int token_type);
  void Eat(int token_type);
  bool Next();
  syntax_asdl::arith_expr_t* ParseUntil(int rbp);
  syntax_asdl::arith_expr_t* Parse();

  GC_OBJ(header_);
  tdop::ParserSpec* spec;
  word_parse::WordParser* w_parser;
  optview::Parse* parse_opts;
  syntax_asdl::word_t* cur_word;
  int op_id;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(4, sizeof(TdopParser));
  }

  DISALLOW_COPY_AND_ASSIGN(TdopParser)
};



}  // declare namespace tdop

namespace word_ {  // declare

using id_kind_asdl::Id;
int LiteralId(syntax_asdl::word_part_t* p);
Tuple3<bool, Str*, bool> _EvalWordPart(syntax_asdl::word_part_t* part);
Tuple3<bool, Str*, bool> StaticEval(syntax_asdl::word_t* UP_w);
int LeftMostSpanForPart(syntax_asdl::word_part_t* part);
int _RightMostSpanForPart(syntax_asdl::word_part_t* part);
int LeftMostSpanForWord(syntax_asdl::word_t* w);
int RightMostSpanForWord(syntax_asdl::word_t* w);
syntax_asdl::word_part__TildeSub* _MakeTildeSub(syntax_asdl::Token* tok);
syntax_asdl::compound_word* TildeDetect(syntax_asdl::word_t* UP_w);
void TildeDetectAssign(syntax_asdl::compound_word* w);
List<syntax_asdl::word_t*>* TildeDetectAll(List<syntax_asdl::word_t*>* words);
bool HasArrayPart(syntax_asdl::compound_word* w);
Str* ShFunctionName(syntax_asdl::compound_word* w);
syntax_asdl::Token* LooksLikeArithVar(syntax_asdl::word_t* UP_w);
bool IsVarLike(syntax_asdl::compound_word* w);
Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int> DetectShAssignment(syntax_asdl::compound_word* w);
syntax_asdl::assoc_pair* DetectAssocPair(syntax_asdl::compound_word* w);
Tuple2<id_kind_asdl::Kind_t, syntax_asdl::Token*> KeywordToken(syntax_asdl::compound_word* w);
syntax_asdl::Token* LiteralToken(syntax_asdl::word_t* UP_w);
int ArithId(syntax_asdl::word_t* w);
int BoolId(syntax_asdl::word_t* w);
int CommandId(syntax_asdl::word_t* w);
id_kind_asdl::Kind_t CommandKind(syntax_asdl::word_t* w);
bool IsVarSub(syntax_asdl::word_t* w);
int SpanForLhsExpr(syntax_asdl::sh_lhs_expr_t* node);
syntax_asdl::compound_word* ErrorWord(Str* error_str);
Str* Pretty(syntax_asdl::word_t* w);
class ctx_EmitDocToken {
 public:
  ctx_EmitDocToken(word_parse::WordParser* w_parser);
  ~ctx_EmitDocToken();

  GC_OBJ(header_);
  word_parse::WordParser* w_parser;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_EmitDocToken));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_EmitDocToken)
};

class ctx_Multiline {
 public:
  ctx_Multiline(word_parse::WordParser* w_parser);
  ~ctx_Multiline();

  GC_OBJ(header_);
  word_parse::WordParser* w_parser;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(1, sizeof(ctx_Multiline));
  }

  DISALLOW_COPY_AND_ASSIGN(ctx_Multiline)
};



}  // declare namespace word_

namespace word_compile {  // declare

using id_kind_asdl::Id;
syntax_asdl::CharCode* EvalCharLiteralForRegex(syntax_asdl::Token* tok);
Str* EvalCStringToken(syntax_asdl::Token* tok);
Str* EvalSingleQuoted(syntax_asdl::single_quoted* part);
bool IsLeadingSpace(Str* s);
void RemoveLeadingSpaceDQ(List<syntax_asdl::word_part_t*>* parts);
void RemoveLeadingSpaceSQ(List<syntax_asdl::Token*>* tokens);


}  // declare namespace word_compile

namespace word_eval {  // declare

using id_kind_asdl::Id;
extern int QUOTED;
extern int IS_SUBST;
extern int EXTGLOB_FILES;
extern int EXTGLOB_MATCH;
extern int EXTGLOB_NESTED;
extern int QUOTE_FNMATCH;
extern int QUOTE_ERE;
extern List<Str*>* _STRING_AND_ARRAY;
bool ShouldArrayDecay(Str* var_name, optview::Exec* exec_opts, bool is_plain_var_sub = true);
runtime_asdl::value_t* DecayArray(runtime_asdl::value_t* val);
Str* GetArrayItem(List<Str*>* strs, int index);
extern Str* ASSIGN_ARG_RE;
runtime_asdl::assign_arg* _SplitAssignArg(Str* arg, int word_spid);
Str* _BackslashEscape(Str* s);
runtime_asdl::part_value_t* _ValueToPartValue(runtime_asdl::value_t* val, bool quoted);
List<List<Tuple3<Str*, bool, bool>*>*>* _MakeWordFrames(List<runtime_asdl::part_value_t*>* part_vals);
Str* _DecayPartValuesToString(List<runtime_asdl::part_value_t*>* part_vals, Str* join_char);
runtime_asdl::value_t* _PerformSlice(runtime_asdl::value_t* val, int begin, int length, bool has_length, syntax_asdl::braced_var_sub* part, runtime_asdl::value__Str* arg0_val);
class StringWordEvaluator {
 public:
  StringWordEvaluator();
  virtual runtime_asdl::value__Str* EvalWordToString(syntax_asdl::word_t* w, int eval_flags = 0);

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(StringWordEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(StringWordEvaluator)
};

Str* _GetDollarHyphen(optview::Exec* exec_opts);
class TildeEvaluator {
 public:
  TildeEvaluator(state::Mem* mem, optview::Exec* exec_opts);
  Str* Eval(syntax_asdl::word_part__TildeSub* part);

  GC_OBJ(header_);
  state::Mem* mem;
  optview::Exec* exec_opts;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(TildeEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(TildeEvaluator)
};

class AbstractWordEvaluator : public StringWordEvaluator {
 public:
  AbstractWordEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, split::SplitContext* splitter, ui::ErrorFormatter* errfmt);
  virtual void CheckCircularDeps();
  virtual runtime_asdl::part_value_t* _EvalCommandSub(syntax_asdl::command_sub* cs_part, bool quoted);
  virtual runtime_asdl::part_value_t* _EvalProcessSub(syntax_asdl::command_sub* cs_part);
  runtime_asdl::value_t* _EvalVarNum(int var_num);
  runtime_asdl::value_t* _EvalSpecialVar(int op_id, bool quoted, runtime_asdl::VarSubState* vsub_state);
  bool _ApplyTestOp(runtime_asdl::value_t* val, syntax_asdl::suffix_op__Unary* op, bool quoted, List<runtime_asdl::part_value_t*>* part_vals, runtime_asdl::VTestPlace* vtest_place, syntax_asdl::Token* blame_token);
  runtime_asdl::value_t* _Length(runtime_asdl::value_t* val, syntax_asdl::Token* token);
  runtime_asdl::value_t* _Keys(runtime_asdl::value_t* val, syntax_asdl::Token* token);
  runtime_asdl::value_t* _EvalVarRef(runtime_asdl::value_t* val, syntax_asdl::Token* blame_tok, bool quoted, runtime_asdl::VarSubState* vsub_state, runtime_asdl::VTestPlace* vtest_place);
  runtime_asdl::value_t* _ApplyUnarySuffixOp(runtime_asdl::value_t* val, syntax_asdl::suffix_op__Unary* op);
  runtime_asdl::value_t* _PatSub(runtime_asdl::value_t* val, syntax_asdl::suffix_op__PatSub* op);
  runtime_asdl::value_t* _Slice(runtime_asdl::value_t* val, syntax_asdl::suffix_op__Slice* op, Str* var_name, syntax_asdl::braced_var_sub* part);
  Tuple2<runtime_asdl::value__Str*, bool> _Nullary(runtime_asdl::value_t* val, syntax_asdl::Token* op, Str* var_name);
  runtime_asdl::value_t* _WholeArray(runtime_asdl::value_t* val, syntax_asdl::braced_var_sub* part, bool quoted, runtime_asdl::VarSubState* vsub_state);
  runtime_asdl::value_t* _ArrayIndex(runtime_asdl::value_t* val, syntax_asdl::braced_var_sub* part, runtime_asdl::VTestPlace* vtest_place);
  void _EvalDoubleQuoted(List<syntax_asdl::word_part_t*>* parts, List<runtime_asdl::part_value_t*>* part_vals);
  Str* EvalDoubleQuotedToString(syntax_asdl::double_quoted* dq_part);
  runtime_asdl::value__Str* _DecayArray(runtime_asdl::value__MaybeStrArray* val);
  runtime_asdl::value_t* _EmptyStrOrError(runtime_asdl::value_t* val, syntax_asdl::Token* token);
  runtime_asdl::value_t* _EmptyMaybeStrArrayOrError(syntax_asdl::Token* token);
  runtime_asdl::value_t* _EvalBracketOp(runtime_asdl::value_t* val, syntax_asdl::braced_var_sub* part, bool quoted, runtime_asdl::VarSubState* vsub_state, runtime_asdl::VTestPlace* vtest_place);
  runtime_asdl::value_t* _VarRefValue(syntax_asdl::braced_var_sub* part, bool quoted, runtime_asdl::VarSubState* vsub_state, runtime_asdl::VTestPlace* vtest_place);
  void _EvalBracedVarSub(syntax_asdl::braced_var_sub* part, List<runtime_asdl::part_value_t*>* part_vals, bool quoted);
  Str* _ConcatPartVals(List<runtime_asdl::part_value_t*>* part_vals, int span_id);
  Str* EvalBracedVarSubToString(syntax_asdl::braced_var_sub* part);
  void _EvalSimpleVarSub(syntax_asdl::simple_var_sub* part, List<runtime_asdl::part_value_t*>* part_vals, bool quoted);
  Str* EvalSimpleVarSubToString(syntax_asdl::simple_var_sub* node);
  void _EvalExtGlob(syntax_asdl::word_part__ExtGlob* part, List<runtime_asdl::part_value_t*>* part_vals);
  void _TranslateExtGlob(List<runtime_asdl::part_value_t*>* part_vals, syntax_asdl::compound_word* w, List<Str*>* glob_parts, List<Str*>* fnmatch_parts);
  void _EvalWordPart(syntax_asdl::word_part_t* part, List<runtime_asdl::part_value_t*>* part_vals, int flags);
  void _EvalRhsWordToParts(syntax_asdl::rhs_word_t* w, List<runtime_asdl::part_value_t*>* part_vals, int eval_flags = 0);
  void _EvalWordToParts(syntax_asdl::compound_word* w, List<runtime_asdl::part_value_t*>* part_vals, int eval_flags = 0);
  void _PartValsToString(List<runtime_asdl::part_value_t*>* part_vals, syntax_asdl::compound_word* w, int eval_flags, List<Str*>* strs);
  virtual runtime_asdl::value__Str* EvalWordToString(syntax_asdl::word_t* UP_w, int eval_flags = 0);
  Tuple2<runtime_asdl::value__Str*, bool> EvalWordToPattern(syntax_asdl::rhs_word_t* UP_w);
  runtime_asdl::value__Str* EvalForPlugin(syntax_asdl::compound_word* w);
  runtime_asdl::value_t* EvalRhsWord(syntax_asdl::rhs_word_t* UP_w);
  void _EvalWordFrame(List<Tuple3<Str*, bool, bool>*>* frame, List<Str*>* argv);
  List<Str*>* _EvalWordToArgv(syntax_asdl::compound_word* w);
  runtime_asdl::cmd_value__Assign* _EvalAssignBuiltin(int builtin_id, Str* arg0, List<syntax_asdl::compound_word*>* words);
  runtime_asdl::cmd_value_t* SimpleEvalWordSequence2(List<syntax_asdl::compound_word*>* words, bool allow_assign);
  runtime_asdl::cmd_value_t* EvalWordSequence2(List<syntax_asdl::compound_word*>* words, bool allow_assign = false);
  List<Str*>* EvalWordSequence(List<syntax_asdl::compound_word*>* words);

  sh_expr_eval::ArithEvaluator* arith_ev;
  ui::ErrorFormatter* errfmt;
  optview::Exec* exec_opts;
  expr_eval::OilEvaluator* expr_ev;
  glob_::Globber* globber;
  state::Mem* mem;
  state::MutableOpts* mutable_opts;
  prompt::Evaluator* prompt_ev;
  split::SplitContext* splitter;
  word_eval::TildeEvaluator* tilde_ev;
  sh_expr_eval::UnsafeArith* unsafe_arith;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(AbstractWordEvaluator, arith_ev))
         | maskbit_v(offsetof(AbstractWordEvaluator, errfmt))
         | maskbit_v(offsetof(AbstractWordEvaluator, exec_opts))
         | maskbit_v(offsetof(AbstractWordEvaluator, expr_ev))
         | maskbit_v(offsetof(AbstractWordEvaluator, globber))
         | maskbit_v(offsetof(AbstractWordEvaluator, mem))
         | maskbit_v(offsetof(AbstractWordEvaluator, mutable_opts))
         | maskbit_v(offsetof(AbstractWordEvaluator, prompt_ev))
         | maskbit_v(offsetof(AbstractWordEvaluator, splitter))
         | maskbit_v(offsetof(AbstractWordEvaluator, tilde_ev))
         | maskbit_v(offsetof(AbstractWordEvaluator, unsafe_arith));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(AbstractWordEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(AbstractWordEvaluator)
};

class NormalWordEvaluator : public AbstractWordEvaluator {
 public:
  NormalWordEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, split::SplitContext* splitter, ui::ErrorFormatter* errfmt);
  virtual void CheckCircularDeps();
  virtual runtime_asdl::part_value_t* _EvalCommandSub(syntax_asdl::command_sub* cs_part, bool quoted);
  virtual runtime_asdl::part_value__String* _EvalProcessSub(syntax_asdl::command_sub* cs_part);

  vm::_Executor* shell_ex;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(NormalWordEvaluator, shell_ex));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(NormalWordEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(NormalWordEvaluator)
};

extern Str* _DUMMY;
class CompletionWordEvaluator : public AbstractWordEvaluator {
 public:
  CompletionWordEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, split::SplitContext* splitter, ui::ErrorFormatter* errfmt);
  virtual void CheckCircularDeps();
  virtual runtime_asdl::part_value_t* _EvalCommandSub(syntax_asdl::command_sub* cs_part, bool quoted);
  virtual runtime_asdl::part_value__String* _EvalProcessSub(syntax_asdl::command_sub* cs_part);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(CompletionWordEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(CompletionWordEvaluator)
};



}  // declare namespace word_eval

namespace word_parse {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
extern List<id_kind_asdl::Kind_t>* KINDS_THAT_END_WORDS;
class WordEmitter {
 public:
  WordEmitter();
  virtual syntax_asdl::word_t* ReadWord(types_asdl::lex_mode_t lex_mode);

  GC_OBJ(header_);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(WordEmitter));
  }

  DISALLOW_COPY_AND_ASSIGN(WordEmitter)
};

class WordParser : public WordEmitter {
 public:
  WordParser(parse_lib::ParseContext* parse_ctx, lexer::Lexer* lexer, reader::_Reader* line_reader);
  void Init(types_asdl::lex_mode_t lex_mode);
  void Reset();
  void _Peek();
  void _Next(types_asdl::lex_mode_t lex_mode);
  syntax_asdl::rhs_word_t* _ReadVarOpArg(types_asdl::lex_mode_t arg_lex_mode);
  syntax_asdl::compound_word* _ReadVarOpArg2(types_asdl::lex_mode_t arg_lex_mode, int eof_type, bool empty_ok = false);
  syntax_asdl::suffix_op__Slice* _ReadSliceVarOp();
  syntax_asdl::suffix_op__PatSub* _ReadPatSubVarOp();
  syntax_asdl::bracket_op_t* _ReadSubscript();
  syntax_asdl::braced_var_sub* _ParseVarOf();
  syntax_asdl::braced_var_sub* _ParseVarExpr(types_asdl::lex_mode_t arg_lex_mode, bool allow_query = false);
  Tuple2<syntax_asdl::braced_var_sub*, syntax_asdl::Token*> ReadBracedVarSub(syntax_asdl::Token* left_token);
  syntax_asdl::braced_var_sub* _ReadBracedVarSub(syntax_asdl::Token* left_token, bool d_quoted);
  syntax_asdl::single_quoted* _ReadSingleQuoted(syntax_asdl::Token* left_token, types_asdl::lex_mode_t lex_mode);
  syntax_asdl::Token* ReadSingleQuoted(types_asdl::lex_mode_t lex_mode, syntax_asdl::Token* left_token, List<syntax_asdl::Token*>* tokens, bool is_oil_expr);
  syntax_asdl::word_part_t* _ReadDoubleQuotedLeftParts();
  syntax_asdl::word_part_t* _ReadUnquotedLeftParts(syntax_asdl::BoolOutParam* triple_out);
  syntax_asdl::word_part__ExtGlob* _ReadExtGlob();
  void _ReadLikeDQ(syntax_asdl::Token* left_token, bool is_oil_expr, List<syntax_asdl::word_part_t*>* out_parts);
  syntax_asdl::double_quoted* _ReadDoubleQuoted(syntax_asdl::Token* left_token);
  syntax_asdl::Token* ReadDoubleQuoted(syntax_asdl::Token* left_token, List<syntax_asdl::word_part_t*>* parts);
  syntax_asdl::command_sub* _ReadCommandSub(int left_id, bool d_quoted = false);
  syntax_asdl::word_part__ExprSub* _ReadExprSub(types_asdl::lex_mode_t lex_mode);
  syntax_asdl::command__VarDecl* ParseVarDecl(syntax_asdl::Token* kw_token);
  syntax_asdl::command__PlaceMutation* ParsePlaceMutation(syntax_asdl::Token* kw_token, cmd_parse::VarChecker* var_checker);
  syntax_asdl::expr_t* ParseBareDecl();
  syntax_asdl::expr_t* ParseCommandExpr();
  void ParseProc(syntax_asdl::command__Proc* node);
  void ParseImport(syntax_asdl::command__Import* node);
  syntax_asdl::arith_expr_t* _ReadArithExpr(int end_id);
  syntax_asdl::word_part__ArithSub* _ReadArithSub();
  syntax_asdl::arith_expr_t* ReadDParen();
  void _NextNonSpace();
  syntax_asdl::command__ForExpr* ReadForExpression();
  syntax_asdl::word_part_t* _ReadArrayLiteral();
  void _ParseInlineCallArgs(syntax_asdl::ArgList* arg_list);
  syntax_asdl::ArgList* ParseProcCallArgs();
  bool _MaybeReadWholeWord(bool is_first, types_asdl::lex_mode_t lex_mode, List<syntax_asdl::word_part_t*>* parts);
  syntax_asdl::compound_word* _ReadCompoundWord(types_asdl::lex_mode_t lex_mode);
  syntax_asdl::compound_word* _ReadCompoundWord3(types_asdl::lex_mode_t lex_mode, int eof_type, bool empty_ok);
  Tuple2<syntax_asdl::word_t*, bool> _ReadArithWord();
  Tuple2<syntax_asdl::word_t*, bool> _ReadWord(types_asdl::lex_mode_t lex_mode);
  syntax_asdl::braced_var_sub* ParseVarRef();
  int LookPastSpace();
  bool LookAheadFuncParens();
  virtual syntax_asdl::word_t* ReadWord(types_asdl::lex_mode_t lex_mode);
  void ReadHereDocBody(List<syntax_asdl::word_part_t*>* parts);
  syntax_asdl::compound_word* ReadForPlugin();
  void EmitDocToken(bool b);
  void Multiline(bool b);

  tdop::TdopParser* a_parser;
  alloc::Arena* arena;
  syntax_asdl::word_t* buffered_word;
  syntax_asdl::Token* cur_token;
  bool emit_doc_token;
  lexer::Lexer* lexer;
  reader::_Reader* line_reader;
  bool multiline;
  int newline_state;
  types_asdl::lex_mode_t next_lex_mode;
  parse_lib::ParseContext* parse_ctx;
  optview::Parse* parse_opts;
  bool returned_newline;
  id_kind_asdl::Kind_t token_kind;
  int token_type;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(WordParser, a_parser))
         | maskbit_v(offsetof(WordParser, arena))
         | maskbit_v(offsetof(WordParser, buffered_word))
         | maskbit_v(offsetof(WordParser, cur_token))
         | maskbit_v(offsetof(WordParser, lexer))
         | maskbit_v(offsetof(WordParser, line_reader))
         | maskbit_v(offsetof(WordParser, parse_ctx))
         | maskbit_v(offsetof(WordParser, parse_opts));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(WordParser));
  }

  DISALLOW_COPY_AND_ASSIGN(WordParser)
};



}  // declare namespace word_parse

namespace grammar {  // declare

class Grammar {
 public:
  Grammar();

  GC_OBJ(header_);
  Dict<Str*, int>* symbol2number;
  Dict<int, Str*>* number2symbol;
  List<List<Tuple2<int, int>*>*>* states;
  Dict<int, Tuple2<List<List<Tuple2<int, int>*>*>*, Dict<int, int>*>*>* dfas;
  List<int>* labels;
  Dict<Str*, int>* keywords;
  Dict<int, int>* tokens;
  Dict<Str*, int>* symbol2label;
  int start;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(8, sizeof(Grammar));
  }

  DISALLOW_COPY_AND_ASSIGN(Grammar)
};



}  // declare namespace grammar

namespace pnode {  // declare

class PNode {
 public:
  PNode(int typ, syntax_asdl::Token* tok, List<pnode::PNode*>* children);

  GC_OBJ(header_);
  syntax_asdl::Token* tok;
  List<pnode::PNode*>* children;
  int typ;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(PNode));
  }

  DISALLOW_COPY_AND_ASSIGN(PNode)
};



}  // declare namespace pnode

namespace cgi {  // declare

Str* escape(Str* s);


}  // declare namespace cgi

namespace os_path {  // declare

extern Str* extsep;
extern Str* sep;
Str* join(Str* s1, Str* s2);
Tuple2<Str*, Str*> split(Str* p);
Tuple2<Str*, Str*> _splitext(Str* p, Str* sep, Str* extsep);
Tuple2<Str*, Str*> splitext(Str* p);
Str* basename(Str* p);
Str* dirname(Str* p);
Str* normpath(Str* path);
bool isabs(Str* s);
Str* abspath(Str* path);


}  // declare namespace os_path

namespace qsn {  // declare

extern int BIT8_UTF8;
extern int BIT8_U_ESCAPE;
extern int BIT8_X_ESCAPE;
extern int MUST_QUOTE;
bool _encode(Str* s, int bit8_display, bool shell_compat, List<Str*>* parts);
Str* maybe_shell_encode(Str* s, int flags = 0);
Str* maybe_encode(Str* s, int bit8_display = BIT8_UTF8);
Str* encode(Str* s, int bit8_display = BIT8_UTF8);
void _encode_bytes_x(Str* s, bool shell_compat, List<Str*>* parts);
extern int Ascii;
extern int Begin2;
extern int Begin3;
extern int Begin4;
extern int Cont;
extern int Invalid;
extern int Start;
extern int B2_1;
extern int B3_1;
extern int B4_1;
extern int B3_2;
extern int B4_2;
extern int B4_3;
bool _encode_runes(Str* s, int bit8_display, bool shell_compat, List<Str*>* parts);
Str* maybe_qtt_encode(Str* s, int bit8_display);


}  // declare namespace qsn

namespace qsn_native {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
bool IsWhitespace(Str* s);
List<syntax_asdl::Token*>* Parse(lexer::Lexer* lexer);


}  // declare namespace qsn_native

namespace osh2oil {  // declare

using id_kind_asdl::Id;
class Cursor {
 public:
  Cursor(alloc::Arena* arena, mylib::Writer* f);
  void PrintUntil(int until_span_id);
  void SkipUntil(int next_span_id);

  GC_OBJ(header_);
  alloc::Arena* arena;
  mylib::Writer* f;
  int next_span_id;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(2, sizeof(Cursor));
  }

  DISALLOW_COPY_AND_ASSIGN(Cursor)
};

void PrintArena(alloc::Arena* arena);
void PrintSpans(alloc::Arena* arena);
void PrintAsOil(alloc::Arena* arena, syntax_asdl::command_t* node);
runtime_asdl::word_style_t _GetRhsStyle(syntax_asdl::rhs_word_t* w);
class OilPrinter {
 public:
  OilPrinter(osh2oil::Cursor* cursor, alloc::Arena* arena, mylib::Writer* f);
  void _DebugSpid(int spid);
  void End();
  void DoRedirect(syntax_asdl::redir* node, Dict<Str*, bool>* local_symbols);
  void DoShAssignment(syntax_asdl::command__ShAssignment* node, bool at_top_level, Dict<Str*, bool>* local_symbols);
  void DoCommand(syntax_asdl::command_t* node, Dict<Str*, bool>* local_symbols, bool at_top_level = false);
  void DoRhsWord(syntax_asdl::rhs_word_t* node, Dict<Str*, bool>* local_symbols);
  void DoWordInCommand(syntax_asdl::word_t* node, Dict<Str*, bool>* local_symbols);
  void DoWordPart(syntax_asdl::word_part_t* node, Dict<Str*, bool>* local_symbols, bool quoted = false);

  GC_OBJ(header_);
  osh2oil::Cursor* cursor;
  alloc::Arena* arena;
  mylib::Writer* f;

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassScanned(3, sizeof(OilPrinter));
  }

  DISALLOW_COPY_AND_ASSIGN(OilPrinter)
};



}  // declare namespace osh2oil

namespace shell {  // declare

void _InitDefaultCompletions(cmd_eval::CommandEvaluator* cmd_ev, builtin_comp::Complete* complete_builtin, completion::Lookup* comp_lookup);
void SourceStartupFile(process::FdState* fd_state, Str* rc_path, Str* lang, parse_lib::ParseContext* parse_ctx, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt);
class ShellOptHook : public state::OptHook {
 public:
  ShellOptHook(py_readline::Readline* readline);
  virtual bool OnChange(List<bool>* opt0_array, Str* opt_name, bool b);

  py_readline::Readline* readline;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(ShellOptHook, readline));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(ShellOptHook));
  }

  DISALLOW_COPY_AND_ASSIGN(ShellOptHook)
};

void AddOil(Dict<int, vm::_Builtin*>* b, state::Mem* mem, state::SearchPath* search_path, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt, Dict<Str*, runtime_asdl::Proc*>* procs, alloc::Arena* arena);
int Main(Str* lang, args::Reader* arg_r, Dict<Str*, Str*>* environ, bool login_shell, pyutil::_ResourceLoader* loader, py_readline::Readline* readline);


}  // declare namespace shell

namespace builtin_bracket {  // declare

using id_kind_asdl::Id;
using types_asdl::lex_mode_e;
class _StringWordEmitter : public word_parse::WordEmitter {
 public:
  _StringWordEmitter(runtime_asdl::cmd_value__Argv* cmd_val);
  virtual syntax_asdl::word__String* ReadWord(types_asdl::lex_mode_t unused_lex_mode);
  syntax_asdl::word__String* Read();
  Str* Peek(int offset);
  void Rewind(int offset);

  runtime_asdl::cmd_value__Argv* cmd_val;
  int i;
  int n;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(_StringWordEmitter, cmd_val));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(_StringWordEmitter));
  }

  DISALLOW_COPY_AND_ASSIGN(_StringWordEmitter)
};

class _WordEvaluator : public word_eval::StringWordEvaluator {
 public:
  _WordEvaluator();
  virtual runtime_asdl::value__Str* EvalWordToString(syntax_asdl::word_t* w, int eval_flags = 0);

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(kZeroMask, sizeof(_WordEvaluator));
  }

  DISALLOW_COPY_AND_ASSIGN(_WordEvaluator)
};

syntax_asdl::bool_expr_t* _TwoArgs(builtin_bracket::_StringWordEmitter* w_parser);
syntax_asdl::bool_expr_t* _ThreeArgs(builtin_bracket::_StringWordEmitter* w_parser);
class Test : public vm::_Builtin {
 public:
  Test(bool need_right_bracket, optview::Exec* exec_opts, state::Mem* mem, ui::ErrorFormatter* errfmt);
  virtual int Run(runtime_asdl::cmd_value__Argv* cmd_val);

  ui::ErrorFormatter* errfmt;
  optview::Exec* exec_opts;
  state::Mem* mem;
  bool need_right_bracket;
  
  static constexpr uint16_t field_mask() {
    return maskbit_v(offsetof(Test, errfmt))
         | maskbit_v(offsetof(Test, exec_opts))
         | maskbit_v(offsetof(Test, mem));
  }

  static constexpr ObjHeader obj_header() {
    return ObjHeader::ClassFixed(field_mask(), sizeof(Test));
  }

  DISALLOW_COPY_AND_ASSIGN(Test)
};



}  // declare namespace builtin_bracket

namespace runtime {  // define

using hnode_asdl::hnode__Record;
using hnode_asdl::hnode__Leaf;
using hnode_asdl::color_t;
using hnode_asdl::color_e;
int NO_SPID = -1;

hnode_asdl::hnode__Record* NewRecord(Str* node_type) {
  StackRoots _roots({&node_type});

  return Alloc<hnode__Record>(node_type, Alloc<List<hnode_asdl::field*>>(), false, str0, str1, Alloc<List<hnode_asdl::hnode_t*>>());
}

hnode_asdl::hnode__Leaf* NewLeaf(Str* s, hnode_asdl::color_t e_color) {
  StackRoots _roots({&s});

  if (s == nullptr) {
    return Alloc<hnode__Leaf>(str2, color_e::OtherConst);
  }
  else {
    return Alloc<hnode__Leaf>(s, e_color);
  }
}
Str* TRUE_STR = str3;
Str* FALSE_STR = str4;

}  // define namespace runtime

namespace vm {  // define

using id_kind_asdl::Id;
using runtime_asdl::CommandStatus;
using runtime_asdl::StatusArray;
using runtime_asdl::flow_e;
using runtime_asdl::flow_t;
using syntax_asdl::Token;

ControlFlow::ControlFlow(syntax_asdl::Token* token, int arg) 
    : header_(obj_header()) {
  this->token = token;
  this->arg = arg;
}

bool ControlFlow::IsReturn() {
  return this->token->id == Id::ControlFlow_Return;
}

bool ControlFlow::IsBreak() {
  return this->token->id == Id::ControlFlow_Break;
}

bool ControlFlow::IsContinue() {
  return this->token->id == Id::ControlFlow_Continue;
}

int ControlFlow::StatusCode() {
  return (this->arg & 255);
}

runtime_asdl::flow_t ControlFlow::HandleLoop() {
  if (this->IsBreak()) {
    this->arg -= 1;
    if (this->arg == 0) {
      return flow_e::Break;
    }
  }
  else {
    if (this->IsContinue()) {
      this->arg -= 1;
      if (this->arg == 0) {
        return flow_e::Nothing;
      }
    }
  }
  return flow_e::Raise;
}

void InitUnsafeArith(state::Mem* mem, word_eval::NormalWordEvaluator* word_ev, sh_expr_eval::UnsafeArith* unsafe_arith) {
  StackRoots _roots({&mem, &word_ev, &unsafe_arith});

  mem->unsafe_arith = unsafe_arith;
  word_ev->unsafe_arith = unsafe_arith;
}

void InitCircularDeps(sh_expr_eval::ArithEvaluator* arith_ev, sh_expr_eval::BoolEvaluator* bool_ev, expr_eval::OilEvaluator* expr_ev, word_eval::NormalWordEvaluator* word_ev, cmd_eval::CommandEvaluator* cmd_ev, vm::_Executor* shell_ex, prompt::Evaluator* prompt_ev, dev::Tracer* tracer) {
  StackRoots _roots({&arith_ev, &bool_ev, &expr_ev, &word_ev, &cmd_ev, &shell_ex, &prompt_ev, &tracer});

  arith_ev->word_ev = word_ev;
  bool_ev->word_ev = word_ev;
  if (expr_ev) {
    expr_ev->shell_ex = shell_ex;
    expr_ev->word_ev = word_ev;
  }
  word_ev->arith_ev = arith_ev;
  word_ev->expr_ev = expr_ev;
  word_ev->prompt_ev = prompt_ev;
  word_ev->shell_ex = shell_ex;
  cmd_ev->shell_ex = shell_ex;
  cmd_ev->arith_ev = arith_ev;
  cmd_ev->bool_ev = bool_ev;
  cmd_ev->expr_ev = expr_ev;
  cmd_ev->word_ev = word_ev;
  cmd_ev->tracer = tracer;
  shell_ex->cmd_ev = cmd_ev;
  prompt_ev->word_ev = word_ev;
  tracer->word_ev = word_ev;
  arith_ev->CheckCircularDeps();
  bool_ev->CheckCircularDeps();
  if (expr_ev) {
    expr_ev->CheckCircularDeps();
  }
  word_ev->CheckCircularDeps();
  cmd_ev->CheckCircularDeps();
  shell_ex->CheckCircularDeps();
  prompt_ev->CheckCircularDeps();
  tracer->CheckCircularDeps();
}

_Executor::_Executor() 
    : header_(obj_header()) {
  this->cmd_ev = nullptr;
}

void _Executor::CheckCircularDeps() {
  ;  // pass
}

int _Executor::RunBuiltin(int builtin_id, runtime_asdl::cmd_value__Argv* cmd_val) {
  StackRoots _roots({&cmd_val});

  return 0;
}

int _Executor::RunSimpleCommand(runtime_asdl::cmd_value__Argv* cmd_val, runtime_asdl::CommandStatus* cmd_st, bool do_fork, bool call_procs) {
  StackRoots _roots({&cmd_val, &cmd_st});

  return 0;
}

int _Executor::RunBackgroundJob(syntax_asdl::command_t* node) {
  StackRoots _roots({&node});

  return 0;
}

void _Executor::RunPipeline(syntax_asdl::command__Pipeline* node, runtime_asdl::CommandStatus* status_out) {
  StackRoots _roots({&node, &status_out});

  ;  // pass
}

int _Executor::RunSubshell(syntax_asdl::command_t* node) {
  StackRoots _roots({&node});

  return 0;
}

Str* _Executor::RunCommandSub(syntax_asdl::command_sub* cs_part) {
  StackRoots _roots({&cs_part});

  return str6;
}

Str* _Executor::RunProcessSub(syntax_asdl::command_sub* cs_part) {
  StackRoots _roots({&cs_part});

  return str7;
}

bool _Executor::PushRedirects(List<runtime_asdl::redirect*>* redirects) {
  StackRoots _roots({&redirects});

  return true;
}

void _Executor::PopRedirects() {
  ;  // pass
}

void _Executor::PushProcessSub() {
  ;  // pass
}

void _Executor::PopProcessSub(runtime_asdl::StatusArray* compound_st) {
  StackRoots _roots({&compound_st});

  ;  // pass
}

_AssignBuiltin::_AssignBuiltin() 
    : header_(obj_header()) {
  ;  // pass
}

int _AssignBuiltin::Run(runtime_asdl::cmd_value__Assign* cmd_val) {
  StackRoots _roots({&cmd_val});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

_Builtin::_Builtin() 
    : header_(obj_header()) {
  ;  // pass
}

int _Builtin::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  StackRoots _roots({&cmd_val});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

ctx_Redirect::ctx_Redirect(vm::_Executor* shell_ex) 
    : header_(obj_header()) {
  this->shell_ex = shell_ex;
}

ctx_Redirect::~ctx_Redirect(){
  this->shell_ex->PopRedirects();
}

ctx_ProcessSub::ctx_ProcessSub(vm::_Executor* shell_ex, runtime_asdl::StatusArray* process_sub_status) 
    : header_(obj_header()) {
  shell_ex->PushProcessSub();
  this->shell_ex = shell_ex;
  this->process_sub_status = process_sub_status;
}

ctx_ProcessSub::~ctx_ProcessSub(){
  this->shell_ex->PopProcessSub(this->process_sub_status);
}

ctx_FlushStdout::ctx_FlushStdout() 
    : header_(obj_header()) {
  ;  // pass
}

ctx_FlushStdout::~ctx_FlushStdout(){
  pyos::FlushStdout();
}

}  // define namespace vm

namespace format {  // define

using hnode_asdl::hnode_e;
using hnode_asdl::hnode_t;
using hnode_asdl::hnode__Record;
using hnode_asdl::hnode__Array;
using hnode_asdl::hnode__Leaf;
using hnode_asdl::hnode__External;
using hnode_asdl::color_e;
using hnode_asdl::color_t;

format::ColorOutput* DetectConsoleOutput(mylib::Writer* f) {
  StackRoots _roots({&f});

  if (f->isatty()) {
    return Alloc<AnsiOutput>(f);
  }
  else {
    return Alloc<TextOutput>(f);
  }
}

ColorOutput::ColorOutput(mylib::Writer* f) 
    : header_(obj_header()) {
  this->f = f;
  this->num_chars = 0;
}

format::ColorOutput* ColorOutput::NewTempBuffer() {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

void ColorOutput::FileHeader() {
  ;  // pass
}

void ColorOutput::FileFooter() {
  ;  // pass
}

void ColorOutput::PushColor(hnode_asdl::color_t e_color) {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

void ColorOutput::PopColor() {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

void ColorOutput::write(Str* s) {
  StackRoots _roots({&s});

  this->f->write(s);
  this->num_chars += len(s);
}

void ColorOutput::WriteRaw(Tuple2<Str*, int>* raw) {
  Str* s = nullptr;
  int num_chars;
  StackRoots _roots({&raw, &s});

  Tuple2<Str*, int>* tup0 = raw;
  s = tup0->at0();
  num_chars = tup0->at1();
  this->f->write(s);
  this->num_chars += num_chars;
}

int ColorOutput::NumChars() {
  return this->num_chars;
}

Tuple2<Str*, int> ColorOutput::GetRaw() {
  mylib::BufWriter* f = static_cast<mylib::BufWriter*>(this->f);
  return Tuple2<Str*, int>(f->getvalue(), this->num_chars);
}

TextOutput::TextOutput(mylib::Writer* f) : ColorOutput(f) {
}

format::TextOutput* TextOutput::NewTempBuffer() {
  return Alloc<TextOutput>(Alloc<mylib::BufWriter>());
}

void TextOutput::PushColor(hnode_asdl::color_t e_color) {
  ;  // pass
}

void TextOutput::PopColor() {
  ;  // pass
}

HtmlOutput::HtmlOutput(mylib::Writer* f) : ColorOutput(f) {
}

format::HtmlOutput* HtmlOutput::NewTempBuffer() {
  return Alloc<HtmlOutput>(Alloc<mylib::BufWriter>());
}

void HtmlOutput::FileHeader() {
  this->f->write(str8);
}

void HtmlOutput::FileFooter() {
  this->f->write(str9);
}

void HtmlOutput::PushColor(hnode_asdl::color_t e_color) {
  Str* css_class = nullptr;
  StackRoots _roots({&css_class});

  if (e_color == color_e::TypeName) {
    css_class = str10;
  }
  else {
    if (e_color == color_e::StringConst) {
      css_class = str11;
    }
    else {
      if (e_color == color_e::OtherConst) {
        css_class = str12;
      }
      else {
        if (e_color == color_e::External) {
          css_class = str13;
        }
        else {
          if (e_color == color_e::UserType) {
            css_class = str14;
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
    }
  }
  this->f->write(StrFormat("<span class=\"%s\">", css_class));
}

void HtmlOutput::PopColor() {
  this->f->write(str16);
}

void HtmlOutput::write(Str* s) {
  StackRoots _roots({&s});

  this->f->write(cgi::escape(s));
  this->num_chars += len(s);
}

AnsiOutput::AnsiOutput(mylib::Writer* f) : ColorOutput(f) {
}

format::AnsiOutput* AnsiOutput::NewTempBuffer() {
  return Alloc<AnsiOutput>(Alloc<mylib::BufWriter>());
}

void AnsiOutput::PushColor(hnode_asdl::color_t e_color) {
  if (e_color == color_e::TypeName) {
    this->f->write(ansi::YELLOW);
  }
  else {
    if (e_color == color_e::StringConst) {
      this->f->write(ansi::BOLD);
    }
    else {
      if (e_color == color_e::OtherConst) {
        this->f->write(ansi::GREEN);
      }
      else {
        if (e_color == color_e::External) {
          this->f->write(str_concat(ansi::BOLD, ansi::BLUE));
        }
        else {
          if (e_color == color_e::UserType) {
            this->f->write(ansi::GREEN);
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
    }
  }
}

void AnsiOutput::PopColor() {
  this->f->write(ansi::RESET);
}
int INDENT = 2;

_PrettyPrinter::_PrettyPrinter(int max_col) 
    : header_(obj_header()) {
  this->max_col = max_col;
}

bool _PrettyPrinter::_PrintWrappedArray(List<hnode_asdl::hnode_t*>* array, int prefix_len, format::ColorOutput* f, int indent) {
  bool all_fit;
  int chars_so_far;
  int i;
  format::ColorOutput* single_f = nullptr;
  Str* s = nullptr;
  int num_chars;
  StackRoots _roots({&array, &f, &single_f, &s});

  all_fit = true;
  chars_so_far = prefix_len;
  i = 0;
  for (ListIter<hnode_asdl::hnode_t*> it(array); !it.Done(); it.Next(), ++i) {
    hnode_asdl::hnode_t* val = it.Value();
    StackRoots _for({&val  });
    if (i != 0) {
      f->write(str17);
    }
    single_f = f->NewTempBuffer();
    if (_TrySingleLine(val, single_f, (this->max_col - chars_so_far))) {
      Tuple2<Str*, int> tup1 = single_f->GetRaw();
      s = tup1.at0();
      num_chars = tup1.at1();
      f->WriteRaw((Alloc<Tuple2<Str*, int>>(s, num_chars)));
      chars_so_far += single_f->NumChars();
    }
    else {
      f->write(str18);
      this->PrintNode(val, f, (indent + INDENT));
      chars_so_far = 0;
      all_fit = false;
    }
  }
  return all_fit;
}

bool _PrettyPrinter::_PrintWholeArray(List<hnode_asdl::hnode_t*>* array, int prefix_len, format::ColorOutput* f, int indent) {
  bool all_fit;
  List<Tuple2<Str*, int>*>* pieces = nullptr;
  int chars_so_far;
  format::ColorOutput* single_f = nullptr;
  Str* s = nullptr;
  int num_chars;
  int i;
  StackRoots _roots({&array, &f, &pieces, &single_f, &s});

  all_fit = true;
  pieces = Alloc<List<Tuple2<Str*, int>*>>();
  chars_so_far = prefix_len;
  for (ListIter<hnode_asdl::hnode_t*> it(array); !it.Done(); it.Next()) {
    hnode_asdl::hnode_t* item = it.Value();
    StackRoots _for({&item  });
    single_f = f->NewTempBuffer();
    if (_TrySingleLine(item, single_f, (this->max_col - chars_so_far))) {
      Tuple2<Str*, int> tup2 = single_f->GetRaw();
      s = tup2.at0();
      num_chars = tup2.at1();
      pieces->append((Alloc<Tuple2<Str*, int>>(s, num_chars)));
      chars_so_far += single_f->NumChars();
    }
    else {
      all_fit = false;
      break;
    }
  }
  if (all_fit) {
    i = 0;
    for (ListIter<Tuple2<Str*, int>*> it(pieces); !it.Done(); it.Next(), ++i) {
      Tuple2<Str*, int>* p = it.Value();
      StackRoots _for({&p    });
      if (i != 0) {
        f->write(str19);
      }
      f->WriteRaw(p);
    }
    f->write(str20);
  }
  return all_fit;
}

void _PrettyPrinter::_PrintRecord(hnode_asdl::hnode__Record* node, format::ColorOutput* f, int indent) {
  Str* ind = nullptr;
  Str* prefix = nullptr;
  int prefix_len;
  bool all_fit;
  Str* name = nullptr;
  hnode_asdl::hnode_t* val = nullptr;
  Str* ind1 = nullptr;
  hnode_asdl::hnode_t* UP_val = nullptr;
  int tag;
  Str* name_str = nullptr;
  format::ColorOutput* single_f = nullptr;
  Str* s = nullptr;
  int num_chars;
  StackRoots _roots({&node, &f, &ind, &prefix, &name, &val, &ind1, &UP_val, &name_str, &single_f, &s});

  ind = str_repeat(str21, indent);
  if (node->abbrev) {
    prefix = str_concat(ind, node->left);
    f->write(prefix);
    if (len(node->node_type)) {
      f->PushColor(color_e::TypeName);
      f->write(node->node_type);
      f->PopColor();
      f->write(str22);
    }
    prefix_len = ((len(prefix) + len(node->node_type)) + 1);
    all_fit = this->_PrintWrappedArray(node->unnamed_fields, prefix_len, f, indent);
    if (!all_fit) {
      f->write(str23);
      f->write(ind);
    }
    f->write(node->right);
  }
  else {
    f->write(str_concat(ind, node->left));
    f->PushColor(color_e::TypeName);
    f->write(node->node_type);
    f->PopColor();
    f->write(str24);
    for (ListIter<hnode_asdl::field*> it(node->fields); !it.Done(); it.Next()) {
      hnode_asdl::field* field = it.Value();
      StackRoots _for({&field    });
      name = field->name;
      val = field->val;
      ind1 = str_repeat(str25, (indent + INDENT));
      UP_val = val;
      tag = val->tag_();
      if (tag == hnode_e::Array) {
        hnode__Array* val = static_cast<hnode__Array*>(UP_val);
        name_str = StrFormat("%s%s: [", ind1, name);
        f->write(name_str);
        prefix_len = len(name_str);
        if (!this->_PrintWholeArray(val->children, prefix_len, f, indent)) {
          f->write(str27);
          for (ListIter<hnode_asdl::hnode_t*> it(val->children); !it.Done(); it.Next()) {
            hnode_asdl::hnode_t* child = it.Value();
            StackRoots _for({&child          });
            this->PrintNode(child, f, ((indent + INDENT) + INDENT));
            f->write(str28);
          }
          f->write(StrFormat("%s]", ind1));
        }
      }
      else {
        name_str = StrFormat("%s%s: ", ind1, name);
        f->write(name_str);
        prefix_len = len(name_str);
        single_f = f->NewTempBuffer();
        if (_TrySingleLine(val, single_f, (this->max_col - prefix_len))) {
          Tuple2<Str*, int> tup3 = single_f->GetRaw();
          s = tup3.at0();
          num_chars = tup3.at1();
          f->WriteRaw((Alloc<Tuple2<Str*, int>>(s, num_chars)));
        }
        else {
          f->write(str31);
          this->PrintNode(val, f, ((indent + INDENT) + INDENT));
        }
      }
      f->write(str32);
    }
    f->write(str_concat(ind, node->right));
  }
}

void _PrettyPrinter::PrintNode(hnode_asdl::hnode_t* node, format::ColorOutput* f, int indent) {
  Str* ind = nullptr;
  format::ColorOutput* single_f = nullptr;
  Str* s = nullptr;
  int num_chars;
  hnode_asdl::hnode_t* UP_node = nullptr;
  int tag;
  StackRoots _roots({&node, &f, &ind, &single_f, &s, &UP_node});

  ind = str_repeat(str33, indent);
  single_f = f->NewTempBuffer();
  single_f->write(ind);
  if (_TrySingleLine(node, single_f, (this->max_col - indent))) {
    Tuple2<Str*, int> tup4 = single_f->GetRaw();
    s = tup4.at0();
    num_chars = tup4.at1();
    f->WriteRaw((Alloc<Tuple2<Str*, int>>(s, num_chars)));
    return ;
  }
  UP_node = node;
  tag = node->tag_();
  if (tag == hnode_e::Leaf) {
    hnode__Leaf* node = static_cast<hnode__Leaf*>(UP_node);
    f->PushColor(node->color);
    f->write(qsn::maybe_encode(node->s));
    f->PopColor();
  }
  else {
    if (tag == hnode_e::External) {
      hnode__External* node = static_cast<hnode__External*>(UP_node);
      f->PushColor(color_e::External);
      // if not PYTHON
      {
        f->write(str34);
      }
      // endif MYCPP
      f->PopColor();
    }
    else {
      if (tag == hnode_e::Record) {
        hnode__Record* node = static_cast<hnode__Record*>(UP_node);
        this->_PrintRecord(node, f, indent);
      }
      else {
        assert(0);  // AssertionError
      }
    }
  }
}

bool _TrySingleLineObj(hnode_asdl::hnode__Record* node, format::ColorOutput* f, int max_chars) {
  int i;
  StackRoots _roots({&node, &f});

  f->write(node->left);
  if (node->abbrev) {
    if (len(node->node_type)) {
      f->PushColor(color_e::TypeName);
      f->write(node->node_type);
      f->PopColor();
      f->write(str35);
    }
    i = 0;
    for (ListIter<hnode_asdl::hnode_t*> it(node->unnamed_fields); !it.Done(); it.Next(), ++i) {
      hnode_asdl::hnode_t* val = it.Value();
      StackRoots _for({&val    });
      if (i != 0) {
        f->write(str36);
      }
      if (!_TrySingleLine(val, f, max_chars)) {
        return false;
      }
    }
  }
  else {
    f->PushColor(color_e::TypeName);
    f->write(node->node_type);
    f->PopColor();
    for (ListIter<hnode_asdl::field*> it(node->fields); !it.Done(); it.Next()) {
      hnode_asdl::field* field = it.Value();
      StackRoots _for({&field    });
      f->write(StrFormat(" %s:", field->name));
      if (!_TrySingleLine(field->val, f, max_chars)) {
        return false;
      }
    }
  }
  f->write(node->right);
  return true;
}

bool _TrySingleLine(hnode_asdl::hnode_t* node, format::ColorOutput* f, int max_chars) {
  hnode_asdl::hnode_t* UP_node = nullptr;
  int tag;
  int i;
  int num_chars_so_far;
  StackRoots _roots({&node, &f, &UP_node});

  UP_node = node;
  tag = node->tag_();
  if (tag == hnode_e::Leaf) {
    hnode__Leaf* node = static_cast<hnode__Leaf*>(UP_node);
    f->PushColor(node->color);
    f->write(qsn::maybe_encode(node->s));
    f->PopColor();
  }
  else {
    if (tag == hnode_e::External) {
      hnode__External* node = static_cast<hnode__External*>(UP_node);
      f->PushColor(color_e::External);
      // if not PYTHON
      {
        f->write(str38);
      }
      // endif MYCPP
      f->PopColor();
    }
    else {
      if (tag == hnode_e::Array) {
        hnode__Array* node = static_cast<hnode__Array*>(UP_node);
        f->write(str39);
        i = 0;
        for (ListIter<hnode_asdl::hnode_t*> it(node->children); !it.Done(); it.Next(), ++i) {
          hnode_asdl::hnode_t* item = it.Value();
          StackRoots _for({&item        });
          if (i != 0) {
            f->write(str40);
          }
          if (!_TrySingleLine(item, f, max_chars)) {
            return false;
          }
        }
        f->write(str41);
      }
      else {
        if (tag == hnode_e::Record) {
          hnode__Record* node = static_cast<hnode__Record*>(UP_node);
          return _TrySingleLineObj(node, f, max_chars);
        }
        else {
          assert(0);  // AssertionError
        }
      }
    }
  }
  num_chars_so_far = f->NumChars();
  if (num_chars_so_far > max_chars) {
    return false;
  }
  return true;
}

void PrintTree(hnode_asdl::hnode_t* node, format::ColorOutput* f) {
  format::_PrettyPrinter* pp = nullptr;
  StackRoots _roots({&node, &f, &pp});

  pp = Alloc<_PrettyPrinter>(100);
  pp->PrintNode(node, f, 0);
}

}  // define namespace format

namespace oils_for_unix {  // define

using mylib::print_stderr;

int CaperDispatch() {
  List<int>* fd_out = nullptr;
  Str* msg = nullptr;
  Str* command = nullptr;
  Str* arg = nullptr;
  List<Str*>* argv = nullptr;
  StackRoots _roots({&fd_out, &msg, &command, &arg, &argv});

  mylib::print_stderr(str42);
  fd_out = Alloc<List<int>>();
  while (true) {
    try {
      msg = fanos::recv(0, fd_out);
    }
    catch (ValueError* e) {
      mylib::print_stderr(StrFormat("FANOS error: %s", e));
      fanos::send(1, StrFormat("ERROR %s", e));
      continue;
    }
    mylib::print_stderr(StrFormat("msg = %r", msg));
    Tuple2<Str*, Str*> tup0 = mylib::split_once(msg, str46);
    command = tup0.at0();
    arg = tup0.at1();
    if (str_equals(command, str47)) {
      ;  // pass
    }
    else {
      if (str_equals(command, str48)) {
        ;  // pass
      }
      else {
        if (str_equals(command, str49)) {
          ;  // pass
        }
        else {
          if (str_equals(command, str50)) {
            argv = NewList<Str*>(std::initializer_list<Str*>{str51});
            ;  // pass
          }
        }
      }
    }
  }
  return 0;
}

int AppBundleMain(List<Str*>* argv) {
  pyutil::_ResourceLoader* loader = nullptr;
  Str* b = nullptr;
  Str* main_name = nullptr;
  Str* ext = nullptr;
  args::Reader* arg_r = nullptr;
  bool login_shell;
  Str* bundle = nullptr;
  Str* first_arg = nullptr;
  ui::ErrorFormatter* errfmt = nullptr;
  builtin_misc::Help* help_builtin = nullptr;
  Str* applet = nullptr;
  py_readline::Readline* readline = nullptr;
  Dict<Str*, Str*>* environ = nullptr;
  List<Str*>* main_argv = nullptr;
  StackRoots _roots({&argv, &loader, &b, &main_name, &ext, &arg_r, &bundle, &first_arg, &errfmt, &help_builtin, &applet, &readline, &environ, &main_argv});

  loader = pyutil::GetResourceLoader();
  b = os_path::basename(argv->index_(0));
  Tuple2<Str*, Str*> tup1 = os_path::splitext(b);
  main_name = tup1.at0();
  ext = tup1.at1();
  arg_r = Alloc<args::Reader>(argv, list_repeat(runtime::NO_SPID, len(argv)));
  login_shell = false;
  // if not PYTHON
  {
    bundle = str52;
  }
  // endif MYCPP
  if ((str_equals(main_name, bundle) or (str_equals(main_name, str53) and len(ext)))) {
    arg_r->Next();
    first_arg = arg_r->Peek();
    if (first_arg == nullptr) {
      throw Alloc<error::Usage>(str54);
    }
    if ((str_equals(first_arg, str55) || str_equals(first_arg, str56))) {
      errfmt = nullptr;
      help_builtin = Alloc<builtin_misc::Help>(loader, errfmt);
      help_builtin->Run(shell_native::MakeBuiltinArgv(NewList<Str*>(std::initializer_list<Str*>{str57})));
      return 0;
    }
    if ((str_equals(first_arg, str58) || str_equals(first_arg, str59))) {
      pyutil::ShowAppVersion(loader);
      return 0;
    }
    if (str_equals(first_arg, str60)) {
      return CaperDispatch();
    }
    applet = first_arg;
  }
  else {
    applet = main_name;
    if (applet->startswith(str61)) {
      login_shell = true;
      applet = applet->slice(1);
    }
  }
  readline = py_readline::MaybeGetReadline();
  environ = pyos::Environ();
  if ((str_equals(applet, str62) || str_equals(applet, str63))) {
    return shell::Main(str64, arg_r, environ, login_shell, loader, readline);
  }
  else {
    if (applet->endswith(str65)) {
      return shell::Main(str66, arg_r, environ, login_shell, loader, readline);
    }
    else {
      if (str_equals(applet, str67)) {
        arg_r->Next();
        main_argv = arg_r->Rest();
        try {
          // if not PYTHON
          {
            print_stderr(str68);
            return 2;
          }
          // endif MYCPP
        }
        catch (error::Usage* e) {
          print_stderr(StrFormat("oshc usage error: %s", e->msg));
          return 2;
        }
      }
      else {
        if (str_equals(applet, str70)) {
          arg_r->Next();
          // if not PYTHON
          {
            print_stderr(str71);
            return 2;
          }
          // endif MYCPP
        }
        else {
          if (str_equals(applet, str72)) {
            return 0;
          }
          else {
            if (str_equals(applet, str73)) {
              return 1;
            }
            else {
              if (str_equals(applet, str74)) {
                // if not PYTHON
                {
                  print_stderr(str75);
                  return 2;
                }
                // endif MYCPP
              }
              else {
                throw Alloc<error::Usage>(StrFormat("Invalid applet %r", applet));
              }
            }
          }
        }
      }
    }
  }
}

int main(List<Str*>* argv) {
  StackRoots _roots({&argv});

  try {
    return AppBundleMain(argv);
  }
  catch (error::Usage* e) {
    mylib::print_stderr(StrFormat("oil: %s", e->msg));
    return 2;
  }
  catch (RuntimeError* e) {
    mylib::print_stderr(StrFormat("FATAL RuntimeError: %s", e->message));
    return 1;
  }
  catch (KeyboardInterrupt*) {
    print(str79);
    return 130;
  }
  catch (IOError_OSError* e) {
    print_stderr(StrFormat("osh I/O error (main): %s", posix::strerror(e->errno_)));
    return 2;
  }
}

}  // define namespace oils_for_unix

namespace alloc {  // define

using syntax_asdl::source_t;
using syntax_asdl::Token;
using syntax_asdl::SourceLine;

Str* SnipCodeBlock(syntax_asdl::Token* left, syntax_asdl::Token* right, List<syntax_asdl::SourceLine*>* lines) {
  List<Str*>* pieces = nullptr;
  Str* piece = nullptr;
  bool saving;
  bool found_left;
  bool found_right;
  StackRoots _roots({&left, &right, &lines, &pieces, &piece});

  pieces = Alloc<List<Str*>>();
  pieces->append(str_repeat(str81, (left->col + 1)));
  if (left->line == right->line) {
    for (ListIter<syntax_asdl::SourceLine*> it(lines); !it.Done(); it.Next()) {
      syntax_asdl::SourceLine* li = it.Value();
      StackRoots _for({&li    });
      if (li == left->line) {
        piece = li->content->slice((left->col + left->length), right->col);
        pieces->append(piece);
      }
    }
    return str82->join(pieces);
  }
  saving = false;
  found_left = false;
  found_right = false;
  for (ListIter<syntax_asdl::SourceLine*> it(lines); !it.Done(); it.Next()) {
    syntax_asdl::SourceLine* li = it.Value();
    StackRoots _for({&li  });
    if (li == left->line) {
      found_left = true;
      saving = true;
      piece = li->content->slice((left->col + left->length));
      pieces->append(piece);
      continue;
    }
    if (li == right->line) {
      found_right = true;
      piece = li->content->slice(0, right->col);
      pieces->append(piece);
      saving = false;
      break;
    }
    if (saving) {
      pieces->append(li->content);
    }
  }
  return str83->join(pieces);
}

ctx_Location::ctx_Location(alloc::Arena* arena, syntax_asdl::source_t* src) 
    : header_(obj_header()) {
  arena->PushSource(src);
  this->arena = arena;
}

ctx_Location::~ctx_Location(){
  this->arena->PopSource();
}

Arena::Arena() 
    : header_(obj_header()) {
  this->lines_list = Alloc<List<syntax_asdl::SourceLine*>>();
  this->tokens = Alloc<List<syntax_asdl::Token*>>();
  this->source_instances = Alloc<List<syntax_asdl::source_t*>>();
}

void Arena::PushSource(syntax_asdl::source_t* src) {
  StackRoots _roots({&src});

  this->source_instances->append(src);
}

void Arena::PopSource() {
  this->source_instances->pop();
}

syntax_asdl::SourceLine* Arena::AddLine(Str* line, int line_num) {
  syntax_asdl::SourceLine* src_line = nullptr;
  StackRoots _roots({&line, &src_line});

  src_line = Alloc<SourceLine>(line_num, line, this->source_instances->index_(-1));
  this->lines_list->append(src_line);
  return src_line;
}

void Arena::DiscardLines() {
  this->lines_list->clear();
}

List<syntax_asdl::SourceLine*>* Arena::SaveLinesAndDiscard(syntax_asdl::Token* left, syntax_asdl::Token* right) {
  List<syntax_asdl::SourceLine*>* saved = nullptr;
  bool saving;
  StackRoots _roots({&left, &right, &saved});

  saved = Alloc<List<syntax_asdl::SourceLine*>>();
  saving = false;
  for (ListIter<syntax_asdl::SourceLine*> it(this->lines_list); !it.Done(); it.Next()) {
    syntax_asdl::SourceLine* li = it.Value();
    StackRoots _for({&li  });
    if (li == left->line) {
      saving = true;
    }
    if (saving) {
      saved->append(li);
    }
    if (li == right->line) {
      saving = false;
      break;
    }
  }
  this->DiscardLines();
  return saved;
}

Str* Arena::SnipCodeString(syntax_asdl::Token* left, syntax_asdl::Token* right) {
  Str* piece = nullptr;
  List<Str*>* pieces = nullptr;
  bool saving;
  bool found_left;
  bool found_right;
  StackRoots _roots({&left, &right, &piece, &pieces});

  if (left->line == right->line) {
    for (ListIter<syntax_asdl::SourceLine*> it(this->lines_list); !it.Done(); it.Next()) {
      syntax_asdl::SourceLine* li = it.Value();
      StackRoots _for({&li    });
      if (li == left->line) {
        piece = li->content->slice(left->col, (right->col + right->length));
        return piece;
      }
    }
  }
  pieces = Alloc<List<Str*>>();
  saving = false;
  found_left = false;
  found_right = false;
  for (ListIter<syntax_asdl::SourceLine*> it(this->lines_list); !it.Done(); it.Next()) {
    syntax_asdl::SourceLine* li = it.Value();
    StackRoots _for({&li  });
    if (li == left->line) {
      found_left = true;
      saving = true;
      piece = li->content->slice(left->col);
      pieces->append(piece);
      continue;
    }
    if (li == right->line) {
      found_right = true;
      piece = li->content->slice(0, (right->col + right->length));
      pieces->append(piece);
      saving = false;
      break;
    }
    if (saving) {
      pieces->append(li->content);
    }
  }
  return str84->join(pieces);
}

int Arena::NewTokenId(int id_, int col, int length, syntax_asdl::SourceLine* src_line, Str* val) {
  int span_id;
  syntax_asdl::Token* tok = nullptr;
  StackRoots _roots({&src_line, &val, &tok});

  span_id = len(this->tokens);
  tok = Alloc<Token>(id_, col, length, span_id, src_line, val);
  this->tokens->append(tok);
  return span_id;
}

syntax_asdl::Token* Arena::NewToken(int id_, int col, int length, syntax_asdl::SourceLine* src_line, Str* val) {
  int span_id;
  StackRoots _roots({&src_line, &val});

  span_id = this->NewTokenId(id_, col, length, src_line, val);
  return this->tokens->index_(span_id);
}

syntax_asdl::Token* Arena::GetToken(int span_id) {
  return this->tokens->index_(span_id);
}

int Arena::LastSpanId() {
  return len(this->tokens);
}

}  // define namespace alloc

namespace ansi {  // define

Str* RESET = str85;
Str* BOLD = str86;
Str* UNDERLINE = str87;
Str* REVERSE = str88;
Str* RED = str89;
Str* GREEN = str90;
Str* YELLOW = str91;
Str* BLUE = str92;

}  // define namespace ansi

namespace comp_ui {  // define


int _PromptLen(Str* prompt_str) {
  bool escaped;
  Str* display_str = nullptr;
  Str* last_line = nullptr;
  int width;
  StackRoots _roots({&prompt_str, &display_str, &last_line});

  escaped = false;
  display_str = str93;
  for (StrIter it(prompt_str); !it.Done(); it.Next()) {
    Str* c = it.Value();
    StackRoots _for({&c  });
    if (str_equals(c, str94)) {
      escaped = true;
    }
    else {
      if (str_equals(c, str95)) {
        escaped = false;
      }
      else {
        if (!escaped) {
          display_str = str_concat(display_str, c);
        }
      }
    }
  }
  last_line = display_str->split(str96)->index_(-1);
  try {
    width = libc::wcswidth(last_line);
  }
  catch (UnicodeError*) {
    return len(display_str);
  }
  if (width == -1) {
    return len(display_str);
  }
  return width;
}

PromptState::PromptState() 
    : header_(obj_header()) {
  this->last_prompt_str = nullptr;
  this->last_prompt_len = -1;
}

void PromptState::SetLastPrompt(Str* prompt_str) {
  StackRoots _roots({&prompt_str});

  this->last_prompt_str = prompt_str;
  this->last_prompt_len = _PromptLen(prompt_str);
}

State::State() 
    : header_(obj_header()) {
  this->line_until_tab = nullptr;
  this->display_pos = -1;
  this->descriptions = Alloc<Dict<Str*, Str*>>();
}

_IDisplay::_IDisplay(comp_ui::State* comp_state, comp_ui::PromptState* prompt_state, int num_lines_cap, mylib::Writer* f, util::_DebugFile* debug_f) 
    : header_(obj_header()) {
  this->comp_state = comp_state;
  this->prompt_state = prompt_state;
  this->num_lines_cap = num_lines_cap;
  this->f = f;
  this->debug_f = debug_f;
}

void _IDisplay::PrintCandidates(Str* unused_subst, List<Str*>* matches, int unused_match_len) {
  StackRoots _roots({&unused_subst, &matches});

  try {
    this->_PrintCandidates(unused_subst, matches, unused_match_len);
  }
  catch (Exception*) {
  }
}

void _IDisplay::_PrintCandidates(Str* unused_subst, List<Str*>* matches, int unused_match_len) {
  StackRoots _roots({&unused_subst, &matches});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

void _IDisplay::Reset() {
  ;  // pass
}

void _IDisplay::ShowPromptOnRight(Str* rendered) {
  StackRoots _roots({&rendered});

  ;  // pass
}

void _IDisplay::EraseLines() {
  ;  // pass
}

MinimalDisplay::MinimalDisplay(comp_ui::State* comp_state, comp_ui::PromptState* prompt_state, util::_DebugFile* debug_f) : _IDisplay(comp_state, prompt_state, 10, mylib::Stdout(), debug_f) {
  FIELD_MASK(header_) |= MinimalDisplay::field_mask();
  this->reader = nullptr;
}

void MinimalDisplay::_RedrawPrompt() {
  this->f->write(this->prompt_state->last_prompt_str);
  this->f->write(this->comp_state->line_until_tab);
}

void MinimalDisplay::_PrintCandidates(Str* unused_subst, List<Str*>* matches, int unused_match_len) {
  int display_pos;
  bool too_many;
  int i;
  int num_left;
  StackRoots _roots({&unused_subst, &matches});

  this->f->write(str97);
  display_pos = this->comp_state->display_pos;
  too_many = false;
  i = 0;
  for (ListIter<Str*> it(matches); !it.Done(); it.Next()) {
    Str* m = it.Value();
    StackRoots _for({&m  });
    this->f->write(StrFormat(" %s\n", m->slice(display_pos)));
    if (i == this->num_lines_cap) {
      too_many = true;
      i += 1;
      break;
    }
    i += 1;
  }
  if (too_many) {
    num_left = (len(matches) - i);
    if (num_left) {
      this->f->write(StrFormat(" ... and %d more\n", num_left));
    }
  }
  this->_RedrawPrompt();
}

int _PrintPacked(List<Str*>* matches, int max_match_len, int term_width, int max_lines, mylib::Writer* f) {
  int w;
  int num_per_line;
  Str* fmt = nullptr;
  int num_lines;
  bool too_many;
  int remainder;
  int i;
  Str* fmt2 = nullptr;
  int num_left;
  StackRoots _roots({&matches, &f, &fmt, &fmt2});

  w = (max_match_len + 2);
  num_per_line = max(1, ((term_width - 2) / w));
  fmt = str_concat(str_concat(str100, str(w)), str101);
  num_lines = 0;
  too_many = false;
  remainder = (num_per_line - 1);
  i = 0;
  for (ListIter<Str*> it(matches); !it.Done(); it.Next()) {
    Str* m = it.Value();
    StackRoots _for({&m  });
    if ((i % num_per_line) == 0) {
      f->write(str102);
    }
    f->write(StrFormat(fmt, m));
    if ((i % num_per_line) == remainder) {
      f->write(str103);
      num_lines += 1;
      if (num_lines == max_lines) {
        too_many = true;
        i += 1;
        break;
      }
    }
    i += 1;
  }
  if ((i % num_per_line) != 0) {
    f->write(str104);
    num_lines += 1;
  }
  if (too_many) {
    fmt2 = str_concat(str_concat(str_concat(str_concat(str_concat(ansi::BOLD, ansi::BLUE), str105), str((term_width - 2))), str106), ansi::RESET);
    num_left = (len(matches) - i);
    if (num_left) {
      f->write(StrFormat(StrFormat(fmt2, str107), num_left));
      num_lines += 1;
    }
  }
  return num_lines;
}

int _PrintLong(List<Str*>* matches, int max_match_len, int term_width, int max_lines, Dict<Str*, Str*>* descriptions, mylib::Writer* f) {
  int max_desc;
  Str* fmt = nullptr;
  int num_lines;
  Str* desc = nullptr;
  Str* fmt2 = nullptr;
  int num_left;
  StackRoots _roots({&matches, &descriptions, &f, &fmt, &desc, &fmt2});

  max_desc = max(0, ((term_width - max_match_len) - 3));
  fmt = str_concat(str_concat(str_concat(str_concat(str_concat(str_concat(str108, str(max_match_len)), str109), ansi::YELLOW), str110), ansi::RESET), str111);
  num_lines = 0;
  for (ListIter<Str*> it(matches); !it.Done(); it.Next()) {
    Str* rl_match = it.Value();
    StackRoots _for({&rl_match  });
    desc = descriptions->get(rl_match);
    if (desc == nullptr) {
      desc = str112;
    }
    if (max_desc == 0) {
      f->write(StrFormat(" %s\n", rl_match));
    }
    else {
      if (len(desc) > max_desc) {
        desc = str_concat(desc->slice(0, (max_desc - 5)), str114);
      }
      f->write(StrFormat(fmt, rl_match, desc));
    }
    num_lines += 1;
    if (num_lines == max_lines) {
      fmt2 = str_concat(str_concat(str_concat(str_concat(str_concat(ansi::BOLD, ansi::BLUE), str115), str((term_width - 1))), str116), ansi::RESET);
      num_left = (len(matches) - num_lines);
      if (num_left) {
        f->write(StrFormat(StrFormat(fmt2, str117), num_left));
        num_lines += 1;
      }
      break;
    }
  }
  return num_lines;
}

NiceDisplay::NiceDisplay(int term_width, comp_ui::State* comp_state, comp_ui::PromptState* prompt_state, util::_DebugFile* debug_f, py_readline::Readline* readline, pyos::SignalSafe* signal_safe) : _IDisplay(comp_state, prompt_state, 10, mylib::Stdout(), debug_f) {
  FIELD_MASK(header_) |= NiceDisplay::field_mask();
  this->term_width = term_width;
  this->readline = readline;
  this->signal_safe = signal_safe;
  this->bold_line = false;
  this->num_lines_last_displayed = 0;
  this->c_count = 0;
  this->m_count = 0;
  this->dupes = Alloc<Dict<int, int>>();
}

void NiceDisplay::Reset() {
  this->num_lines_last_displayed = 0;
  this->dupes->clear();
}

void NiceDisplay::_ReturnToPrompt(int num_lines) {
  int orig_len;
  int last_prompt_len;
  int n;
  orig_len = len(this->comp_state->line_until_tab);
  this->f->write(StrFormat("\u001b[%dA", num_lines));
  last_prompt_len = this->prompt_state->last_prompt_len;
  n = (orig_len + last_prompt_len);
  n = (n % this->_GetTerminalWidth());
  this->f->write(StrFormat("\u001b[%dC", n));
  if (this->bold_line) {
    this->f->write(ansi::BOLD);
  }
  this->f->flush();
}

void NiceDisplay::_PrintCandidates(Str* unused_subst, List<Str*>* matches, int unused_max_match_len) {
  int term_width;
  int display_pos;
  int comp_id;
  int max_lines;
  List<Str*>* to_display = nullptr;
  List<int>* lens = nullptr;
  int max_match_len;
  int num_lines;
  StackRoots _roots({&unused_subst, &matches, &to_display, &lens});

  term_width = this->_GetTerminalWidth();
  display_pos = this->comp_state->display_pos;
  this->debug_f->write(StrFormat("DISPLAY POS in _PrintCandidates = %d\n", display_pos));
  this->f->write(str121);
  this->EraseLines();
  comp_id = hash(str122->join(matches));
  if (dict_contains(this->dupes, comp_id)) {
    this->dupes->set(comp_id, (this->dupes->index_(comp_id) + 1));
  }
  else {
    this->dupes->clear();
    this->dupes->set(comp_id, 1);
  }
  max_lines = (this->num_lines_cap * this->dupes->index_(comp_id));
  if (display_pos == 0) {
    to_display = matches;
  }
  else {
    to_display = Alloc<List<Str*>>();
    for (ListIter<Str*> it(matches); !it.Done(); it.Next()) {
      Str* m = it.Value();
      to_display->append(m->slice(display_pos));
    }
  }
  lens = Alloc<List<int>>();
  for (ListIter<Str*> it(to_display); !it.Done(); it.Next()) {
    Str* m = it.Value();
    lens->append(len(m));
  }
  max_match_len = max(lens);
  if ((this->comp_state->descriptions != nullptr and len(this->comp_state->descriptions) > 0)) {
    num_lines = _PrintLong(to_display, max_match_len, term_width, max_lines, this->comp_state->descriptions, this->f);
  }
  else {
    num_lines = _PrintPacked(to_display, max_match_len, term_width, max_lines, this->f);
  }
  this->_ReturnToPrompt((num_lines + 1));
  this->num_lines_last_displayed = num_lines;
  this->c_count += 1;
}

void NiceDisplay::ShowPromptOnRight(Str* rendered) {
  int n;
  Str* spaces = nullptr;
  StackRoots _roots({&rendered, &spaces});

  n = ((this->_GetTerminalWidth() - 2) - len(rendered));
  spaces = str_repeat(str123, n);
  this->f->write(str_concat(str_concat(str_concat(str_concat(str_concat(str_concat(spaces, ansi::REVERSE), str124), rendered), str125), ansi::RESET), str126));
}

void NiceDisplay::EraseLines() {
  int n;
  if (this->bold_line) {
    this->f->write(ansi::RESET);
    this->f->flush();
  }
  n = this->num_lines_last_displayed;
  if (n == 0) {
    return ;
  }
  for (int i = 0; i < n; ++i) {
    this->f->write(str127);
    this->f->write(str128);
  }
  this->f->write(StrFormat("\u001b[%dA", n));
  this->f->flush();
}

int NiceDisplay::_GetTerminalWidth() {
  if (this->signal_safe->PollSigWinch()) {
    try {
      this->term_width = libc::get_terminal_width();
    }
    catch (IOError*) {
      this->term_width = 80;
    }
  }
  return this->term_width;
}

void ExecutePrintCandidates(comp_ui::_IDisplay* display, Str* sub, List<Str*>* matches, int max_len) {
  StackRoots _roots({&display, &sub, &matches});

  display->PrintCandidates(sub, matches, max_len);
}

void InitReadline(py_readline::Readline* readline, Str* history_filename, completion::RootCompleter* root_comp, comp_ui::_IDisplay* display, util::_DebugFile* debug_f) {
  completion::ReadlineCallback* complete_cb = nullptr;
  StackRoots _roots({&readline, &history_filename, &root_comp, &display, &debug_f, &complete_cb});

  try {
    readline->read_history_file(history_filename);
  }
  catch (IOError*) {
    ;  // pass
  }
  readline->parse_and_bind(str130);
  readline->parse_and_bind(str131);
  complete_cb = Alloc<completion::ReadlineCallback>(readline, root_comp, debug_f);
  readline->set_completer(complete_cb);
  readline->set_completer_delims(str132);
  readline->set_completion_display_matches_hook(display);
}

}  // define namespace comp_ui

namespace completion {  // define

using id_kind_asdl::Id;
using syntax_asdl::compound_word;
using syntax_asdl::word_part_e;
using syntax_asdl::word_t;
using syntax_asdl::redir_param_e;
using syntax_asdl::Token;
using runtime_asdl::value_e;
using runtime_asdl::value__MaybeStrArray;
using runtime_asdl::value__Str;
using runtime_asdl::value_str;
using runtime_asdl::scope_e;
using runtime_asdl::Proc;
using types_asdl::redir_arg_type_e;
using alloc::Arena;
using mylib::print_stderr;
using string_ops::ShellQuoteB;

_RetryCompletion::_RetryCompletion() 
    : header_(obj_header()) {
  ;  // pass
}
int CH_Break = 0;
int CH_Other = 1;
int ST_Begin = 0;
int ST_Break = 1;
int ST_Other = 2;

Tuple2<int, bool> _TRANSITIONS(int state, int ch) {
  if ((state == ST_Begin and ch == CH_Break)) {
    return Tuple2<int, bool>(ST_Break, false);
  }
  if ((state == ST_Begin and ch == CH_Other)) {
    return Tuple2<int, bool>(ST_Other, false);
  }
  if ((state == ST_Break and ch == CH_Break)) {
    return Tuple2<int, bool>(ST_Break, false);
  }
  if ((state == ST_Break and ch == CH_Other)) {
    return Tuple2<int, bool>(ST_Other, true);
  }
  if ((state == ST_Other and ch == CH_Break)) {
    return Tuple2<int, bool>(ST_Break, true);
  }
  if ((state == ST_Other and ch == CH_Other)) {
    return Tuple2<int, bool>(ST_Other, false);
  }
  throw Alloc<ValueError>(str133);
}

void AdjustArg(Str* arg, List<Str*>* break_chars, List<Str*>* argv_out) {
  List<int>* end_indices = nullptr;
  int state;
  int i;
  int ch;
  bool emit_span;
  int begin;
  StackRoots _roots({&arg, &break_chars, &argv_out, &end_indices});

  end_indices = Alloc<List<int>>();
  state = ST_Begin;
  i = 0;
  for (StrIter it(arg); !it.Done(); it.Next(), ++i) {
    Str* c = it.Value();
    StackRoots _for({&c  });
    ch = list_contains(break_chars, c) ? CH_Break : CH_Other;
    Tuple2<int, bool> tup0 = _TRANSITIONS(state, ch);
    state = tup0.at0();
    emit_span = tup0.at1();
    if (emit_span) {
      end_indices->append(i);
    }
  }
  end_indices->append(len(arg));
  begin = 0;
  for (ListIter<int> it(end_indices); !it.Done(); it.Next()) {
    int end = it.Value();
    argv_out->append(arg->slice(begin, end));
    begin = end;
  }
}
Dict<Str*, bool> gdict1(std::initializer_list<Str*>{}, std::initializer_list<bool>{});
Dict<Str*, bool>* _DEFAULT_OPTS = &gdict1;

OptionState::OptionState() 
    : header_(obj_header()) {
  this->currently_completing = false;
  this->dynamic_opts = nullptr;
}

Lookup::Lookup() 
    : header_(obj_header()) {
  Tuple2<Dict<Str*, bool>*, completion::UserSpec*>* do_nothing = (Alloc<Tuple2<Dict<Str*, bool>*, completion::UserSpec*>>(_DEFAULT_OPTS, Alloc<UserSpec>(Alloc<List<completion::CompletionAction*>>(), Alloc<List<completion::CompletionAction*>>(), Alloc<List<completion::CompletionAction*>>(), Alloc<DefaultPredicate>(), str134, str135)));
  this->lookup = Alloc<Dict<Str*, Tuple2<Dict<Str*, bool>*, completion::UserSpec*>*>>(std::initializer_list<Str*>{}, std::initializer_list<Tuple2<Dict<Str*, bool>*, completion::UserSpec*>*>{});
  this->commands_with_spec_changes = Alloc<List<Str*>>();
  this->patterns = Alloc<List<Tuple3<Str*, Dict<Str*, bool>*, completion::UserSpec*>*>>();
}

Str* Lookup::__str__() {
  return StrFormat("<completion.Lookup %s>", this->lookup);
}

void Lookup::PrintSpecs() {
  Dict<Str*, bool>* base_opts = nullptr;
  completion::UserSpec* user_spec = nullptr;
  Str* pat = nullptr;
  completion::UserSpec* spec = nullptr;
  StackRoots _roots({&base_opts, &user_spec, &pat, &spec});

  for (ListIter<Str*> it(sorted(this->lookup)); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    Tuple2<Dict<Str*, bool>*, completion::UserSpec*>* tup2 = this->lookup->index_(name);
    base_opts = tup2->at0();
    user_spec = tup2->at1();
    print(StrFormat("%-15s %s  %s", name, base_opts, user_spec));
  }
  print(str138);
  for (ListIter<Tuple3<Str*, Dict<Str*, bool>*, completion::UserSpec*>*> it(this->patterns); !it.Done(); it.Next()) {
    Tuple3<Str*, Dict<Str*, bool>*, completion::UserSpec*>* tup3 = it.Value();
    pat = tup3->at0();
    base_opts = tup3->at1();
    spec = tup3->at2();
    print(StrFormat("%s %s %s", pat, base_opts, spec));
  }
}

void Lookup::ClearCommandsChanged() {
  this->commands_with_spec_changes->clear();
}

List<Str*>* Lookup::GetCommandsChanged() {
  return this->commands_with_spec_changes;
}

void Lookup::RegisterName(Str* name, Dict<Str*, bool>* base_opts, completion::UserSpec* user_spec) {
  StackRoots _roots({&name, &base_opts, &user_spec});

  this->lookup->set(name, (Alloc<Tuple2<Dict<Str*, bool>*, completion::UserSpec*>>(base_opts, user_spec)));
  if ((name != str140 && name != str141)) {
    this->commands_with_spec_changes->append(name);
  }
}

void Lookup::RegisterGlob(Str* glob_pat, Dict<Str*, bool>* base_opts, completion::UserSpec* user_spec) {
  StackRoots _roots({&glob_pat, &base_opts, &user_spec});

  this->patterns->append((Alloc<Tuple3<Str*, Dict<Str*, bool>*, completion::UserSpec*>>(glob_pat, base_opts, user_spec)));
}

Tuple2<Dict<Str*, bool>*, completion::UserSpec*> Lookup::GetSpecForName(Str* argv0) {
  Tuple2<Dict<Str*, bool>*, completion::UserSpec*>* pair = nullptr;
  Dict<Str*, bool>* a = nullptr;
  completion::UserSpec* b = nullptr;
  Str* key = nullptr;
  Str* glob_pat = nullptr;
  Dict<Str*, bool>* base_opts = nullptr;
  completion::UserSpec* user_spec = nullptr;
  StackRoots _roots({&argv0, &pair, &a, &b, &key, &glob_pat, &base_opts, &user_spec});

  pair = this->lookup->get(argv0);
  if (pair) {
    Tuple2<Dict<Str*, bool>*, completion::UserSpec*>* tup4 = pair;
    a = tup4->at0();
    b = tup4->at1();
    return Tuple2<Dict<Str*, bool>*, completion::UserSpec*>(a, b);
  }
  key = os_path::basename(argv0);
  pair = this->lookup->get(key);
  if (pair) {
    Tuple2<Dict<Str*, bool>*, completion::UserSpec*>* tup5 = pair;
    a = tup5->at0();
    b = tup5->at1();
    return Tuple2<Dict<Str*, bool>*, completion::UserSpec*>(a, b);
  }
  for (ListIter<Tuple3<Str*, Dict<Str*, bool>*, completion::UserSpec*>*> it(this->patterns); !it.Done(); it.Next()) {
    Tuple3<Str*, Dict<Str*, bool>*, completion::UserSpec*>* tup6 = it.Value();
    glob_pat = tup6->at0();
    base_opts = tup6->at1();
    user_spec = tup6->at2();
    if (libc::fnmatch(glob_pat, key)) {
      return Tuple2<Dict<Str*, bool>*, completion::UserSpec*>(base_opts, user_spec);
    }
  }
  return Tuple2<Dict<Str*, bool>*, completion::UserSpec*>(nullptr, nullptr);
}

Tuple2<Dict<Str*, bool>*, completion::UserSpec*> Lookup::GetFirstSpec() {
  Dict<Str*, bool>* a = nullptr;
  completion::UserSpec* b = nullptr;
  StackRoots _roots({&a, &b});

  Tuple2<Dict<Str*, bool>*, completion::UserSpec*>* tup7 = this->lookup->index_(str142);
  a = tup7->at0();
  b = tup7->at1();
  return Tuple2<Dict<Str*, bool>*, completion::UserSpec*>(a, b);
}

Tuple2<Dict<Str*, bool>*, completion::UserSpec*> Lookup::GetFallback() {
  Dict<Str*, bool>* a = nullptr;
  completion::UserSpec* b = nullptr;
  StackRoots _roots({&a, &b});

  Tuple2<Dict<Str*, bool>*, completion::UserSpec*>* tup8 = this->lookup->index_(str143);
  a = tup8->at0();
  b = tup8->at1();
  return Tuple2<Dict<Str*, bool>*, completion::UserSpec*>(a, b);
}

Api::Api(Str* line, int begin, int end) 
    : header_(obj_header()) {
  this->line = line;
  this->begin = begin;
  this->end = end;
  this->first = nullptr;
  this->to_complete = nullptr;
  this->prev = nullptr;
  this->index = -1;
  this->partial_argv = Alloc<List<Str*>>();
}

void Api::Update(Str* first, Str* to_complete, Str* prev, int index, List<Str*>* partial_argv) {
  StackRoots _roots({&first, &to_complete, &prev, &partial_argv});

  this->first = first;
  this->to_complete = to_complete;
  this->prev = prev;
  this->index = index;
  this->partial_argv = partial_argv;
  if (this->partial_argv == nullptr) {
    this->partial_argv = Alloc<List<Str*>>();
  }
}

CompletionAction::CompletionAction() 
    : header_(obj_header()) {
  ;  // pass
}

void CompletionAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  StackRoots _roots({&comp});

  ;  // pass
}

bool CompletionAction::IsFileSystemAction() {
  return false;
}

bool CompletionAction::IsShellFuncAction() {
  return false;
}

UsersAction::UsersAction()  {
  ;  // pass
}

void UsersAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  Str* name = nullptr;
  StackRoots _roots({&comp, &name});

  for (ListIter<pyos::PasswdEntry*> it(pyos::GetAllUsers()); !it.Done(); it.Next()) {
    pyos::PasswdEntry* u = it.Value();
    StackRoots _for({&u  });
    name = u->pw_name;
    if (name->startswith(comp->to_complete)) {
            _out_yield_acc->append(name);
;
    }
  }
}

TestAction::TestAction(List<Str*>* words, double delay)  {
  FIELD_MASK(header_) |= TestAction::field_mask();
  this->words = words;
  this->delay = delay;
}

void TestAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  StackRoots _roots({&comp});

  for (ListIter<Str*> it(this->words); !it.Done(); it.Next()) {
    Str* w = it.Value();
    StackRoots _for({&w  });
    if (w->startswith(comp->to_complete)) {
      if (this->delay != 0.0) {
        time_::sleep(this->delay);
      }
            _out_yield_acc->append(w);
;
    }
  }
}

DynamicWordsAction::DynamicWordsAction(word_eval::AbstractWordEvaluator* word_ev, split::SplitContext* splitter, syntax_asdl::compound_word* arg_word, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= DynamicWordsAction::field_mask();
  this->word_ev = word_ev;
  this->splitter = splitter;
  this->arg_word = arg_word;
  this->errfmt = errfmt;
}

void DynamicWordsAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  runtime_asdl::value__Str* val = nullptr;
  List<Str*>* candidates = nullptr;
  StackRoots _roots({&comp, &val, &candidates});

  try {
    val = this->word_ev->EvalWordToString(this->arg_word);
  }
  catch (error::FatalRuntime* e) {
    this->errfmt->PrettyPrintError(e);
    throw ;
  }
  candidates = this->splitter->SplitForWordEval(val->s);
  for (ListIter<Str*> it(candidates); !it.Done(); it.Next()) {
    Str* c = it.Value();
    StackRoots _for({&c  });
    if (c->startswith(comp->to_complete)) {
            _out_yield_acc->append(c);
;
    }
  }
}

FileSystemAction::FileSystemAction(bool dirs_only, bool exec_only, bool add_slash)  {
  this->dirs_only = dirs_only;
  this->exec_only = exec_only;
  this->add_slash = add_slash;
}

bool FileSystemAction::IsFileSystemAction() {
  return true;
}

void FileSystemAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  Str* to_complete = nullptr;
  Str* dirname = nullptr;
  Str* basename = nullptr;
  Str* to_list = nullptr;
  List<Str*>* names = nullptr;
  Str* path = nullptr;
  StackRoots _roots({&comp, &to_complete, &dirname, &basename, &to_list, &names, &path});

  to_complete = comp->to_complete;
  Tuple2<Str*, Str*> tup9 = os_path::split(to_complete);
  dirname = tup9.at0();
  basename = tup9.at1();
  if (str_equals(dirname, str145)) {
    to_list = str146;
  }
  else {
    to_list = dirname;
  }
  try {
    names = posix::listdir(to_list);
  }
  catch (OSError* e) {
    return ;
  }
  for (ListIter<Str*> it(names); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    path = os_path::join(dirname, name);
    if (path->startswith(to_complete)) {
      if (this->dirs_only) {
        if (path_stat::isdir(path)) {
                    _out_yield_acc->append(path);
;
        }
        continue;
      }
      if (this->exec_only) {
        if (!posix::access(path, X_OK)) {
          continue;
        }
      }
      if ((this->add_slash and path_stat::isdir(path))) {
        path = str_concat(path, str147);
                _out_yield_acc->append(path);
;
      }
      else {
                _out_yield_acc->append(path);
;
      }
    }
  }
}

ShellFuncAction::ShellFuncAction(cmd_eval::CommandEvaluator* cmd_ev, runtime_asdl::Proc* func, completion::Lookup* comp_lookup)  {
  FIELD_MASK(header_) |= ShellFuncAction::field_mask();
  this->cmd_ev = cmd_ev;
  this->func = func;
  this->comp_lookup = comp_lookup;
}

bool ShellFuncAction::IsShellFuncAction() {
  return true;
}

void ShellFuncAction::debug(Str* msg) {
  StackRoots _roots({&msg});

  this->cmd_ev->debug_f->writeln(msg);
}

void ShellFuncAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  List<Str*>* comp_words = nullptr;
  int comp_cword;
  List<Str*>* argv = nullptr;
  int status;
  List<Str*>* commands_changed = nullptr;
  Str* cmd = nullptr;
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&comp, &comp_words, &argv, &commands_changed, &cmd, &val});

  state::SetGlobalArray(this->cmd_ev->mem, str149, Alloc<List<Str*>>());
  state::SetGlobalArray(this->cmd_ev->mem, str150, comp->partial_argv);
  comp_words = Alloc<List<Str*>>();
  for (ListIter<Str*> it(comp->partial_argv); !it.Done(); it.Next()) {
    Str* a = it.Value();
    StackRoots _for({&a  });
    AdjustArg(a, NewList<Str*>(std::initializer_list<Str*>{str151, str152}), comp_words);
  }
  if (comp->index == -1) {
    comp_cword = comp->index;
  }
  else {
    comp_cword = (len(comp_words) - 1);
  }
  state::SetGlobalArray(this->cmd_ev->mem, str153, comp_words);
  state::SetGlobalString(this->cmd_ev->mem, str154, str(comp_cword));
  state::SetGlobalString(this->cmd_ev->mem, str155, comp->line);
  state::SetGlobalString(this->cmd_ev->mem, str156, str(comp->end));
  argv = NewList<Str*>(std::initializer_list<Str*>{comp->first, comp->to_complete, comp->prev});
  this->debug(StrFormat("Running completion function %r with %d arguments", this->func->name, len(argv)));
  this->comp_lookup->ClearCommandsChanged();
  status = this->cmd_ev->RunFuncForCompletion(this->func, argv);
  commands_changed = this->comp_lookup->GetCommandsChanged();
  if (status == 124) {
    cmd = os_path::basename(comp->first);
    if (list_contains(commands_changed, cmd)) {
      throw Alloc<_RetryCompletion>();
    }
    else {
      this->debug(StrFormat("Function %r returned 124, but the completion spec for %r wasn't changed", this->func->name, cmd));
      return ;
    }
  }
  val = this->cmd_ev->mem->GetValue(str159, scope_e::GlobalOnly);
  if (val->tag_() == value_e::Undef) {
    print_stderr(StrFormat("osh: Ran function %r but COMPREPLY was unset", this->func->name));
    return ;
  }
  if (val->tag_() != value_e::MaybeStrArray) {
    print_stderr(StrFormat("ERROR: COMPREPLY should be an array, got %s", value_str(val->tag_())));
    return ;
  }
  value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(val);
  for (ListIter<Str*> it(array_val->strs); !it.Done(); it.Next()) {
    Str* s = it.Value();
    StackRoots _for({&s  });
        _out_yield_acc->append(s);
;
  }
}

VariablesAction::VariablesAction(state::Mem* mem)  {
  FIELD_MASK(header_) |= VariablesAction::field_mask();
  this->mem = mem;
}

void VariablesAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  StackRoots _roots({&comp});

  for (ListIter<Str*> it(this->mem->VarNames()); !it.Done(); it.Next()) {
    Str* var_name = it.Value();
    StackRoots _for({&var_name  });
        _out_yield_acc->append(var_name);
;
  }
}

ExternalCommandAction::ExternalCommandAction(state::Mem* mem)  {
  FIELD_MASK(header_) |= ExternalCommandAction::field_mask();
  this->mem = mem;
  this->cache = Alloc<Dict<Tuple2<Str*, int>*, List<Str*>*>>();
}

void ExternalCommandAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  runtime_asdl::value_t* val = nullptr;
  List<Str*>* path_dirs = nullptr;
  List<Str*>* executables = nullptr;
  Tuple2<Str*, int>* key = nullptr;
  List<Str*>* dir_exes = nullptr;
  List<Str*>* entries = nullptr;
  Str* path = nullptr;
  StackRoots _roots({&comp, &val, &path_dirs, &executables, &key, &dir_exes, &entries, &path});

  val = this->mem->GetValue(str162);
  if (val->tag_() != value_e::Str) {
    return ;
  }
  value__Str* val_s = static_cast<value__Str*>(val);
  path_dirs = val_s->s->split(str163);
  executables = Alloc<List<Str*>>();
  for (ListIter<Str*> it(path_dirs); !it.Done(); it.Next()) {
    Str* d = it.Value();
    StackRoots _for({&d  });
    try {
      key = pyos::MakeDirCacheKey(d);
    }
    catch (OSError* e) {
      continue;
    }
    dir_exes = this->cache->get(key);
    if (dir_exes == nullptr) {
      entries = posix::listdir(d);
      dir_exes = Alloc<List<Str*>>();
      for (ListIter<Str*> it(entries); !it.Done(); it.Next()) {
        Str* name = it.Value();
        StackRoots _for({&name      });
        path = os_path::join(d, name);
        if (!posix::access(path, X_OK)) {
          continue;
        }
        dir_exes->append(name);
      }
      this->cache->set(key, dir_exes);
    }
    executables->extend(dir_exes);
  }
  for (ListIter<Str*> it(executables); !it.Done(); it.Next()) {
    Str* word = it.Value();
    StackRoots _for({&word  });
    if (word->startswith(comp->to_complete)) {
            _out_yield_acc->append(word);
;
    }
  }
}

_Predicate::_Predicate() 
    : header_(obj_header()) {
  ;  // pass
}

bool _Predicate::Evaluate(Str* candidate) {
  StackRoots _roots({&candidate});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

DefaultPredicate::DefaultPredicate()  {
  ;  // pass
}

bool DefaultPredicate::Evaluate(Str* candidate) {
  StackRoots _roots({&candidate});

  return true;
}

GlobPredicate::GlobPredicate(bool include, Str* glob_pat)  {
  FIELD_MASK(header_) |= GlobPredicate::field_mask();
  this->include = include;
  this->glob_pat = glob_pat;
}

bool GlobPredicate::Evaluate(Str* candidate) {
  bool matched;
  StackRoots _roots({&candidate});

  matched = libc::fnmatch(this->glob_pat, candidate);
  if (this->include) {
    return !matched;
  }
  else {
    return matched;
  }
}

UserSpec::UserSpec(List<completion::CompletionAction*>* actions, List<completion::CompletionAction*>* extra_actions, List<completion::CompletionAction*>* else_actions, completion::_Predicate* predicate, Str* prefix, Str* suffix) 
    : header_(obj_header()) {
  this->actions = actions;
  this->extra_actions = extra_actions;
  this->else_actions = else_actions;
  this->predicate = predicate;
  this->prefix = prefix;
  this->suffix = suffix;
}

void UserSpec::Matches(completion::Api* comp, List<Tuple2<Str*, bool>*>* _out_yield_acc) {
  int num_matches;
  bool is_fs_action;
  bool show;
  StackRoots _roots({&comp});

  num_matches = 0;
  for (ListIter<completion::CompletionAction*> it(this->actions); !it.Done(); it.Next()) {
    completion::CompletionAction* a = it.Value();
    StackRoots _for({&a  });
    is_fs_action = a->IsFileSystemAction();
    List<Str*> _for_yield_acc10;
    a->Matches(comp, &_for_yield_acc10);
    for (ListIter<Str*> it(&_for_yield_acc10); !it.Done(); it.Next()) {
      Str* match = it.Value();
      StackRoots _for({&match    });
      show = (this->predicate->Evaluate(match) and (match->startswith(comp->to_complete) or a->IsShellFuncAction()));
      if (show) {
                _out_yield_acc->append((Alloc<Tuple2<Str*, bool>>(str_concat(str_concat(this->prefix, match), this->suffix), is_fs_action)));
;
        num_matches += 1;
      }
    }
  }
  for (ListIter<completion::CompletionAction*> it(this->extra_actions); !it.Done(); it.Next()) {
    completion::CompletionAction* a = it.Value();
    StackRoots _for({&a  });
    List<Str*> _for_yield_acc11;
    a->Matches(comp, &_for_yield_acc11);
    for (ListIter<Str*> it(&_for_yield_acc11); !it.Done(); it.Next()) {
      Str* match = it.Value();
      StackRoots _for({&match    });
            _out_yield_acc->append((Alloc<Tuple2<Str*, bool>>(match, true)));
;
    }
  }
  if (num_matches == 0) {
    for (ListIter<completion::CompletionAction*> it(this->else_actions); !it.Done(); it.Next()) {
      completion::CompletionAction* a = it.Value();
      StackRoots _for({&a    });
      List<Str*> _for_yield_acc12;
      a->Matches(comp, &_for_yield_acc12);
      for (ListIter<Str*> it(&_for_yield_acc12); !it.Done(); it.Next()) {
        Str* match = it.Value();
        StackRoots _for({&match      });
                _out_yield_acc->append((Alloc<Tuple2<Str*, bool>>(match, true)));
;
      }
    }
  }
}

Str* UserSpec::__str__() {
  List<Str*>* parts = nullptr;
  StackRoots _roots({&parts});

  parts = NewList<Str*>(std::initializer_list<Str*>{str165});
  return str_concat(str166->join(parts), str167);
}

bool IsDollar(syntax_asdl::Token* t) {
  StackRoots _roots({&t});

  return t->id == Id::Lit_Dollar;
}

bool IsDummy(syntax_asdl::Token* t) {
  StackRoots _roots({&t});

  return t->id == Id::Lit_CompDummy;
}

bool WordEndsWithCompDummy(syntax_asdl::compound_word* w) {
  syntax_asdl::word_part_t* last_part = nullptr;
  syntax_asdl::word_part_t* UP_part = nullptr;
  StackRoots _roots({&w, &last_part, &UP_part});

  last_part = w->parts->index_(-1);
  UP_part = last_part;
  if (last_part->tag_() == word_part_e::Literal) {
    Token* last_part = static_cast<Token*>(UP_part);
    return last_part->id == Id::Lit_CompDummy;
  }
  else {
    return false;
  }
}

int _TokenStart(alloc::Arena* arena, syntax_asdl::Token* tok) {
  syntax_asdl::Token* span = nullptr;
  StackRoots _roots({&arena, &tok, &span});

  span = arena->GetToken(tok->span_id);
  return span->col;
}

RootCompleter::RootCompleter(word_eval::AbstractWordEvaluator* word_ev, state::Mem* mem, completion::Lookup* comp_lookup, completion::OptionState* compopt_state, comp_ui::State* comp_ui_state, parse_lib::ParseContext* parse_ctx, util::_DebugFile* debug_f)  {
  FIELD_MASK(header_) |= RootCompleter::field_mask();
  this->word_ev = word_ev;
  this->mem = mem;
  this->comp_lookup = comp_lookup;
  this->compopt_state = compopt_state;
  this->comp_ui_state = comp_ui_state;
  this->parse_ctx = parse_ctx;
  this->debug_f = debug_f;
}

void RootCompleter::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  alloc::Arena* arena = nullptr;
  Str* line_until_tab = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  util::_DebugFile* debug_f = nullptr;
  parse_lib::_BaseTrail* trail = nullptr;
  List<syntax_asdl::Token*>* tokens = nullptr;
  int last;
  syntax_asdl::Token* t1 = nullptr;
  syntax_asdl::Token* t2 = nullptr;
  Str* to_complete = nullptr;
  int n;
  List<syntax_asdl::word_part_t*>* parts = nullptr;
  Str* name = nullptr;
  Str* s = nullptr;
  syntax_asdl::redir* r = nullptr;
  syntax_asdl::redir_param_t* arg_word = nullptr;
  syntax_asdl::redir_param_t* UP_word = nullptr;
  runtime_asdl::value__Str* val = nullptr;
  int span_id;
  syntax_asdl::Token* span = nullptr;
  completion::FileSystemAction* action = nullptr;
  Dict<Str*, bool>* base_opts = nullptr;
  completion::UserSpec* user_spec = nullptr;
  List<Str*>* partial_argv = nullptr;
  int num_partial;
  Str* first = nullptr;
  List<syntax_asdl::word_t*>* trail_words = nullptr;
  List<syntax_asdl::word_t*>* words2 = nullptr;
  Str* alias_first = nullptr;
  syntax_asdl::word_t* w = nullptr;
  int index;
  Str* prev = nullptr;
  Dict<Str*, bool>* dynamic_opts = nullptr;
  bool done;
  StackRoots _roots({&comp, &arena, &line_until_tab, &line_reader, &c_parser, &debug_f, &trail, &tokens, &t1, &t2, &to_complete, &parts, &name, &s, &r, &arg_word, &UP_word, &val, &span, &action, &base_opts, &user_spec, &partial_argv, &first, &trail_words, &words2, &alias_first, &w, &prev, &dynamic_opts});

  arena = this->parse_ctx->arena;
  line_until_tab = comp->line->slice(0, comp->end);
  this->comp_ui_state->line_until_tab = line_until_tab;
  this->parse_ctx->trail->Clear();
  line_reader = reader::StringLineReader(line_until_tab, this->parse_ctx->arena);
  c_parser = this->parse_ctx->MakeOshParser(line_reader, true);
  try {
    c_parser->ParseLogicalLine();
  }
  catch (error::Parse* e) {
    ;  // pass
  }
  debug_f = this->debug_f;
  trail = this->parse_ctx->trail;
  tokens = trail->tokens;
  last = -1;
  if (tokens->index_(-1)->id == Id::Eof_Real) {
    last -= 1;
  }
  try {
    t1 = tokens->index_(last);
  }
  catch (IndexError*) {
    t1 = nullptr;
  }
  try {
    t2 = tokens->index_((last - 1));
  }
  catch (IndexError*) {
    t2 = nullptr;
  }
  debug_f->writeln(StrFormat("line: %r", comp->line));
  debug_f->writeln(StrFormat("rl_slice from byte %d to %d: %r", comp->begin, comp->end, comp->line->slice(comp->begin, comp->end)));
  if (t1) {
    ;  // pass
  }
  if (t2) {
    ;  // pass
  }
  if (t2) {
    if ((IsDollar(t2) and IsDummy(t1))) {
      this->comp_ui_state->display_pos = (_TokenStart(arena, t2) + 1);
      for (ListIter<Str*> it(this->mem->VarNames()); !it.Done(); it.Next()) {
        Str* name = it.Value();
        StackRoots _for({&name      });
                _out_yield_acc->append(str_concat(line_until_tab, name));
;
      }
      return ;
    }
    if ((t2->id == Id::Left_DollarBrace and IsDummy(t1))) {
      this->comp_ui_state->display_pos = (_TokenStart(arena, t2) + 2);
      for (ListIter<Str*> it(this->mem->VarNames()); !it.Done(); it.Next()) {
        Str* name = it.Value();
        StackRoots _for({&name      });
                _out_yield_acc->append(str_concat(line_until_tab, name));
;
      }
      return ;
    }
    if ((t2->id == Id::VSub_DollarName and IsDummy(t1))) {
      this->comp_ui_state->display_pos = (_TokenStart(arena, t2) + 1);
      to_complete = t2->tval->slice(1);
      n = len(to_complete);
      for (ListIter<Str*> it(this->mem->VarNames()); !it.Done(); it.Next()) {
        Str* name = it.Value();
        StackRoots _for({&name      });
        if (name->startswith(to_complete)) {
                    _out_yield_acc->append(str_concat(line_until_tab, name->slice(n)));
;
        }
      }
      return ;
    }
    if ((t2->id == Id::VSub_Name and IsDummy(t1))) {
      this->comp_ui_state->display_pos = _TokenStart(arena, t2);
      to_complete = t2->tval;
      n = len(to_complete);
      for (ListIter<Str*> it(this->mem->VarNames()); !it.Done(); it.Next()) {
        Str* name = it.Value();
        StackRoots _for({&name      });
        if (name->startswith(to_complete)) {
                    _out_yield_acc->append(str_concat(line_until_tab, name->slice(n)));
;
        }
      }
      return ;
    }
    if ((t2->id == Id::Lit_ArithVarLike and IsDummy(t1))) {
      this->comp_ui_state->display_pos = _TokenStart(arena, t2);
      to_complete = t2->tval;
      n = len(to_complete);
      for (ListIter<Str*> it(this->mem->VarNames()); !it.Done(); it.Next()) {
        Str* name = it.Value();
        StackRoots _for({&name      });
        if (name->startswith(to_complete)) {
                    _out_yield_acc->append(str_concat(line_until_tab, name->slice(n)));
;
        }
      }
      return ;
    }
  }
  if (len(trail->words) > 0) {
    parts = trail->words->index_(-1)->parts;
    if ((len(parts) == 2 and (parts->index_(0)->tag_() == word_part_e::Literal and (parts->index_(1)->tag_() == word_part_e::Literal and (static_cast<Token*>(parts->index_(0))->id == Id::Lit_TildeLike and static_cast<Token*>(parts->index_(1))->id == Id::Lit_CompDummy))))) {
      Token* t2 = static_cast<Token*>(parts->index_(0));
      this->comp_ui_state->display_pos = (_TokenStart(arena, t2) + 1);
      to_complete = t2->tval->slice(1);
      n = len(to_complete);
      for (ListIter<pyos::PasswdEntry*> it(pyos::GetAllUsers()); !it.Done(); it.Next()) {
        pyos::PasswdEntry* u = it.Value();
        StackRoots _for({&u      });
        name = u->pw_name;
        if (name->startswith(to_complete)) {
          s = str_concat(str_concat(line_until_tab, ShellQuoteB(name->slice(n))), str170);
                    _out_yield_acc->append(s);
;
        }
      }
      return ;
    }
  }
  if (len(trail->redirects) > 0) {
    r = trail->redirects->index_(-1);
    if ((r->arg->tag_() == redir_param_e::Word and consts::RedirArgType(r->op->id) == redir_arg_type_e::Path)) {
      arg_word = r->arg;
      UP_word = arg_word;
      compound_word* arg_word = static_cast<compound_word*>(UP_word);
      if (WordEndsWithCompDummy(arg_word)) {
        debug_f->writeln(str171);
        try {
          val = this->word_ev->EvalWordToString(arg_word);
        }
        catch (error::FatalRuntime* e) {
          debug_f->writeln(StrFormat("Error evaluating redirect word: %s", e));
          return ;
        }
        if (val->tag_() != value_e::Str) {
          debug_f->writeln(str173);
          return ;
        }
        span_id = word_::LeftMostSpanForWord(arg_word);
        span = arena->GetToken(span_id);
        this->comp_ui_state->display_pos = span->col;
        comp->Update(str174, val->s, str175, 0, Alloc<List<Str*>>());
        n = len(val->s);
        action = Alloc<FileSystemAction>(false, false, true);
        List<Str*> _for_yield_acc13;
        action->Matches(comp, &_for_yield_acc13);
        for (ListIter<Str*> it(&_for_yield_acc13); !it.Done(); it.Next()) {
          Str* name = it.Value();
          StackRoots _for({&name        });
                    _out_yield_acc->append(str_concat(line_until_tab, ShellQuoteB(name->slice(n))));
;
        }
        return ;
      }
    }
  }
  base_opts = nullptr;
  user_spec = nullptr;
  partial_argv = Alloc<List<Str*>>();
  num_partial = -1;
  first = nullptr;
  if (len(trail->words) > 0) {
    if (WordEndsWithCompDummy(trail->words->index_(-1))) {
      debug_f->writeln(str176);
      trail_words = Alloc<List<syntax_asdl::word_t*>>();
      for (ListIter<syntax_asdl::compound_word*> it(trail->words); !it.Done(); it.Next()) {
        syntax_asdl::compound_word* w = it.Value();
        trail_words->append(static_cast<word_t*>(w));
      }
      words2 = word_::TildeDetectAll(trail_words);
      for (ListIter<syntax_asdl::word_t*> it(words2); !it.Done(); it.Next()) {
        syntax_asdl::word_t* w = it.Value();
        StackRoots _for({&w      });
        try {
          val = this->word_ev->EvalWordToString(w);
        }
        catch (error::FatalRuntime*) {
          continue;
        }
        if (val->tag_() == value_e::Str) {
          partial_argv->append(val->s);
        }
        else {
          ;  // pass
        }
      }
      debug_f->writeln(StrFormat("partial_argv: [%s]", str178->join(partial_argv)));
      num_partial = len(partial_argv);
      first = partial_argv->index_(0);
      alias_first = nullptr;
      if (len(trail->alias_words) > 0) {
        w = trail->alias_words->index_(0);
        try {
          val = this->word_ev->EvalWordToString(w);
        }
        catch (error::FatalRuntime*) {
          ;  // pass
        }
        alias_first = val->s;
        debug_f->writeln(StrFormat("alias_first: %s", alias_first));
      }
      if (num_partial == 0) {
        assert(0);  // AssertionError
      }
      else {
        if (num_partial == 1) {
          Tuple2<Dict<Str*, bool>*, completion::UserSpec*> tup14 = this->comp_lookup->GetFirstSpec();
          base_opts = tup14.at0();
          user_spec = tup14.at1();
          span_id = word_::LeftMostSpanForWord(trail->words->index_(0));
          span = arena->GetToken(span_id);
          this->comp_ui_state->display_pos = span->col;
          this->debug_f->writeln(StrFormat("** DISPLAY_POS = %d", this->comp_ui_state->display_pos));
        }
        else {
          Tuple2<Dict<Str*, bool>*, completion::UserSpec*> tup15 = this->comp_lookup->GetSpecForName(first);
          base_opts = tup15.at0();
          user_spec = tup15.at1();
          if ((!user_spec and alias_first)) {
            Tuple2<Dict<Str*, bool>*, completion::UserSpec*> tup16 = this->comp_lookup->GetSpecForName(alias_first);
            base_opts = tup16.at0();
            user_spec = tup16.at1();
            if (user_spec) {
              first = alias_first;
            }
          }
          if (!user_spec) {
            Tuple2<Dict<Str*, bool>*, completion::UserSpec*> tup17 = this->comp_lookup->GetFallback();
            base_opts = tup17.at0();
            user_spec = tup17.at1();
          }
          span_id = word_::LeftMostSpanForWord(trail->words->index_(-1));
          span = arena->GetToken(span_id);
          this->comp_ui_state->display_pos = span->col;
          this->debug_f->writeln(StrFormat("display_pos %d", this->comp_ui_state->display_pos));
        }
      }
      index = (len(partial_argv) - 1);
      prev = index == 0 ? str182 : partial_argv->index_((index - 1));
      comp->Update(first, partial_argv->index_(-1), prev, index, partial_argv);
    }
  }
  if (!user_spec) {
    debug_f->writeln(str183);
    return ;
  }
  dynamic_opts = Alloc<Dict<Str*, bool>>();
  this->compopt_state->dynamic_opts = dynamic_opts;
  this->compopt_state->currently_completing = true;
  try {
    done = false;
    while (!done) {
      done = true;
      try {
        List<Str*> _for_yield_acc18;
        this->_PostProcess(base_opts, dynamic_opts, user_spec, comp, &_for_yield_acc18);
        for (ListIter<Str*> it(&_for_yield_acc18); !it.Done(); it.Next()) {
          Str* candidate = it.Value();
          StackRoots _for({&candidate        });
                    _out_yield_acc->append(candidate);
;
        }
      }
      catch (_RetryCompletion* e) {
        debug_f->writeln(str184);
        done = false;
        if (num_partial == 0) {
          assert(0);  // AssertionError
        }
        else {
          if (num_partial == 1) {
            Tuple2<Dict<Str*, bool>*, completion::UserSpec*> tup19 = this->comp_lookup->GetFirstSpec();
            base_opts = tup19.at0();
            user_spec = tup19.at1();
          }
          else {
            Tuple2<Dict<Str*, bool>*, completion::UserSpec*> tup20 = this->comp_lookup->GetSpecForName(first);
            base_opts = tup20.at0();
            user_spec = tup20.at1();
            if (!user_spec) {
              Tuple2<Dict<Str*, bool>*, completion::UserSpec*> tup21 = this->comp_lookup->GetFallback();
              base_opts = tup21.at0();
              user_spec = tup21.at1();
            }
          }
        }
      }
    }
  }
  catch (std::exception const&) { }
}

void RootCompleter::_PostProcess(Dict<Str*, bool>* base_opts, Dict<Str*, bool>* dynamic_opts, completion::UserSpec* user_spec, completion::Api* comp, List<Str*>* _out_yield_acc) {
  double start_time;
  int i;
  Str* candidate = nullptr;
  bool is_fs_action;
  Str* line_until_tab = nullptr;
  Str* line_until_word = nullptr;
  bool opt_filenames;
  Str* s = nullptr;
  bool opt_nospace;
  Str* sp = nullptr;
  double elapsed_ms;
  Str* plural = nullptr;
  StackRoots _roots({&base_opts, &dynamic_opts, &user_spec, &comp, &candidate, &line_until_tab, &line_until_word, &s, &sp, &plural});

  this->debug_f->writeln(StrFormat("Completing %r ... (Ctrl-C to cancel)", comp->line));
  start_time = time_::time();
  i = 0;
  List<Tuple2<Str*, bool>*> _for_yield_acc22;
  user_spec->Matches(comp, &_for_yield_acc22);
  for (ListIter<Tuple2<Str*, bool>*> it(&_for_yield_acc22); !it.Done(); it.Next()) {
    Tuple2<Str*, bool>* tup23 = it.Value();
    candidate = tup23->at0();
    is_fs_action = tup23->at1();
    line_until_tab = this->comp_ui_state->line_until_tab;
    line_until_word = line_until_tab->slice(0, this->comp_ui_state->display_pos);
    opt_filenames = base_opts->get(str186, false);
    if (dict_contains(dynamic_opts, str187)) {
      opt_filenames = dynamic_opts->index_(str188);
    }
    if ((is_fs_action or opt_filenames)) {
      if (path_stat::isdir(candidate)) {
        s = str_concat(str_concat(line_until_word, ShellQuoteB(candidate)), str189);
                _out_yield_acc->append(s);
;
        continue;
      }
    }
    opt_nospace = base_opts->get(str190, false);
    if (dict_contains(dynamic_opts, str191)) {
      opt_nospace = dynamic_opts->index_(str192);
    }
    sp = opt_nospace ? str193 : str194;
        _out_yield_acc->append(str_concat(str_concat(line_until_word, ShellQuoteB(candidate)), sp));
;
    i += 1;
    elapsed_ms = ((time_::time() - start_time) * 1000.0);
    plural = i == 1 ? str195 : str196;
  }
  elapsed_ms = ((time_::time() - start_time) * 1000.0);
  plural = i == 1 ? str197 : str198;
  this->debug_f->writeln(StrFormat("Found %d match%s for %r in %d ms", i, plural, comp->line, elapsed_ms));
}

ReadlineCallback::ReadlineCallback(py_readline::Readline* readline, completion::RootCompleter* root_comp, util::_DebugFile* debug_f) 
    : header_(obj_header()) {
  this->readline = readline;
  this->root_comp = root_comp;
  this->debug_f = debug_f;
  // if not PYTHON
  {
    this->comp_matches = nullptr;
  }
  // endif MYCPP
}

Str* ReadlineCallback::_GetNextCompletion(int state) {
  Str* buf = nullptr;
  int begin;
  int end;
  completion::Api* comp = nullptr;
  Str* next_completion = nullptr;
  StackRoots _roots({&buf, &comp, &next_completion});

  if (state == 0) {
    buf = this->readline->get_line_buffer();
    begin = this->readline->get_begidx();
    end = this->readline->get_endidx();
    comp = Alloc<Api>(buf, begin, end);
    // if not PYTHON
    {
      List<Str*> _iter_buf_it;
      this->root_comp->Matches(comp, &_iter_buf_it);
      ListIter<Str*> it(&_iter_buf_it);
      this->comp_matches = list(it);
      this->comp_matches->reverse();
    }
    // endif MYCPP
  }
  // if not PYTHON
  {
    try {
      next_completion = this->comp_matches->pop();
    }
    catch (IndexError*) {
      next_completion = nullptr;
    }
  }
  // endif MYCPP
  return next_completion;
}

Str* ReadlineCallback::__call__(Str* unused_word, int state) {
  StackRoots _roots({&unused_word});

  try {
    return this->_GetNextCompletion(state);
  }
  catch (util::UserExit* e) {
    print_stderr(str200);
  }
  catch (error::FatalRuntime* e) {
    print_stderr(StrFormat("osh: Runtime error while completing: %s", e->UserErrorString()));
    this->debug_f->writeln(StrFormat("Runtime error while completing: %s", e->UserErrorString()));
  }
  catch (IOError_OSError* e) {
    print_stderr(StrFormat("osh: I/O error (completion): %s", posix::strerror(e->errno_)));
  }
  catch (KeyboardInterrupt*) {
    print_stderr(str204);
  }
  catch (Exception* e) {
    print_stderr(StrFormat("osh: Unhandled exception while completing: %s", e));
    this->debug_f->writeln(StrFormat("Unhandled exception while completing: %s", e));
  }
  catch (SystemExit* e) {
    posix::_exit(e->code);
  }
  return nullptr;
}

Str* ExecuteReadlineCallback(completion::ReadlineCallback* cb, Str* word, int state) {
  StackRoots _roots({&cb, &word});

  return cb->__call__(word, state);
}

}  // define namespace completion

namespace dev {  // define

using option_asdl::option_i;
using option_asdl::builtin_i;
using option_asdl::builtin_t;
using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value__Str;
using runtime_asdl::value__MaybeStrArray;
using runtime_asdl::value__AssocArray;
using runtime_asdl::lvalue_e;
using runtime_asdl::lvalue__Named;
using runtime_asdl::lvalue__Indexed;
using runtime_asdl::lvalue__Keyed;
using runtime_asdl::cmd_value__Assign;
using runtime_asdl::scope_e;
using runtime_asdl::trace_e;
using runtime_asdl::trace_t;
using runtime_asdl::trace__External;
using syntax_asdl::assign_op_e;

CrashDumper::CrashDumper(Str* crash_dump_dir) 
    : header_(obj_header()) {
  this->crash_dump_dir = crash_dump_dir;
  this->do_collect = to_bool(crash_dump_dir);
  this->collected = false;
  this->var_stack = nullptr;
  this->argv_stack = nullptr;
  this->debug_stack = nullptr;
  this->error = nullptr;
}

void CrashDumper::MaybeRecord(cmd_eval::CommandEvaluator* cmd_ev, error::_ErrorWithLocation* err) {
  StackRoots _roots({&cmd_ev, &err});

  if (!this->do_collect) {
    return ;
  }
}

void CrashDumper::MaybeDump(int status) {
  if (!this->collected) {
    return ;
  }
}

ctx_Tracer::ctx_Tracer(dev::Tracer* tracer, Str* label, List<Str*>* argv) 
    : header_(obj_header()) {
  this->arg = nullptr;
  if (str_equals(label, str207)) {
    this->arg = argv->index_(0);
  }
  else {
    if (str_equals(label, str208)) {
      this->arg = argv->index_(1);
    }
  }
  tracer->PushMessage(label, argv);
  this->label = label;
  this->tracer = tracer;
}

ctx_Tracer::~ctx_Tracer(){
  this->tracer->PopMessage(this->label, this->arg);
}

void _PrintShValue(runtime_asdl::value_t* val, mylib::BufWriter* buf) {
  Str* result = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  List<Str*>* parts = nullptr;
  StackRoots _roots({&val, &buf, &result, &UP_val, &parts});

  result = str209;
  UP_val = val;
  switch (val->tag_()) {
    case value_e::Str: {
      value__Str* val = static_cast<value__Str*>(UP_val);
      result = qsn::maybe_shell_encode(val->s);
    }
      break;
    case value_e::MaybeStrArray: {
      value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
      parts = NewList<Str*>(std::initializer_list<Str*>{str210});
      for (ListIter<Str*> it(val->strs); !it.Done(); it.Next()) {
        Str* s = it.Value();
        StackRoots _for({&s      });
        parts->append(qsn::maybe_shell_encode(s));
      }
      parts->append(str211);
      result = str212->join(parts);
    }
      break;
    case value_e::AssocArray: {
      value__AssocArray* val = static_cast<value__AssocArray*>(UP_val);
      parts = NewList<Str*>(std::initializer_list<Str*>{str213});
      for (DictIter<Str*, Str*> it(val->d); !it.Done(); it.Next()) {
        Str* k = it.Key();
        Str* v = it.Value();
        parts->append(StrFormat("[%s]=%s", qsn::maybe_shell_encode(k), qsn::maybe_shell_encode(v)));
      }
      parts->append(str215);
      result = str216->join(parts);
    }
      break;
  }
  buf->write(result);
}

void _PrintArgv(List<Str*>* argv, mylib::BufWriter* buf) {
  StackRoots _roots({&argv, &buf});

  for (ListIter<Str*> it(argv); !it.Done(); it.Next()) {
    Str* arg = it.Value();
    StackRoots _for({&arg  });
    buf->write(str217);
    buf->write(qsn::maybe_encode(arg));
  }
  buf->write(str218);
}

Tracer::Tracer(parse_lib::ParseContext* parse_ctx, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, state::Mem* mem, util::_DebugFile* f) 
    : header_(obj_header()) {
  this->parse_ctx = parse_ctx;
  this->exec_opts = exec_opts;
  this->mutable_opts = mutable_opts;
  this->mem = mem;
  this->f = f;
  this->word_ev = nullptr;
  this->ind = 0;
  this->indents = NewList<Str*>(std::initializer_list<Str*>{str219});
  this->parse_cache = Alloc<Dict<Str*, syntax_asdl::compound_word*>>();
  this->val_indent = Alloc<value::Str>(str220);
  this->val_punct = Alloc<value::Str>(str221);
  this->val_pid_str = Alloc<value::Str>(str222);
  this->lval_indent = location::LName(str223);
  this->lval_punct = location::LName(str224);
  this->lval_pid_str = location::LName(str225);
}

void Tracer::CheckCircularDeps() {
}

Str* Tracer::_EvalPS4(Str* punct) {
  runtime_asdl::value_t* val = nullptr;
  Str* ps4 = nullptr;
  syntax_asdl::compound_word* ps4_word = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  runtime_asdl::value__Str* prefix = nullptr;
  StackRoots _roots({&punct, &val, &ps4, &ps4_word, &w_parser, &prefix});

  val = this->mem->GetValue(str226);
  if (val->tag_() == value_e::Str) {
    ps4 = static_cast<value__Str*>(val)->s;
  }
  else {
    ps4 = str227;
  }
  ps4_word = this->parse_cache->get(ps4);
  if (ps4_word == nullptr) {
    w_parser = this->parse_ctx->MakeWordParserForPlugin(ps4);
    try {
      ps4_word = w_parser->ReadForPlugin();
    }
    catch (error::Parse* e) {
      ps4_word = word_::ErrorWord(StrFormat("<ERROR: Can't parse PS4: %s>", e->UserErrorString()));
    }
    this->parse_cache->set(ps4, ps4_word);
  }
  if (this->exec_opts->xtrace_rich()) {
    this->val_indent->s = this->indents->index_(this->ind);
  }
  else {
    this->val_indent->s = str229;
  }
  this->val_punct->s = punct;
  {  // with
    state::ctx_Option ctx{this->mutable_opts, NewList<int>(std::initializer_list<int>{option_i::xtrace}), false};

    {  // with
      state::ctx_Temp ctx{this->mem};

      this->mem->SetValue(this->lval_indent, this->val_indent, scope_e::LocalOnly);
      this->mem->SetValue(this->lval_punct, this->val_punct, scope_e::LocalOnly);
      this->mem->SetValue(this->lval_pid_str, this->val_pid_str, scope_e::LocalOnly);
      prefix = this->word_ev->EvalForPlugin(ps4_word);
    }
  }
  return prefix->s;
}

void Tracer::_Inc() {
  this->ind += 1;
  if (this->ind >= len(this->indents)) {
    this->indents->append(str_repeat(str230, this->ind));
  }
}

void Tracer::_Dec() {
  this->ind -= 1;
}

mylib::BufWriter* Tracer::_ShTraceBegin() {
  Str* prefix = nullptr;
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&prefix, &buf});

  if ((!this->exec_opts->xtrace() or !this->exec_opts->xtrace_details())) {
    return nullptr;
  }
  prefix = this->_EvalPS4(str231);
  buf = Alloc<mylib::BufWriter>();
  buf->write(prefix);
  return buf;
}

mylib::BufWriter* Tracer::_RichTraceBegin(Str* punct) {
  Str* prefix = nullptr;
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&punct, &prefix, &buf});

  if ((!this->exec_opts->xtrace() or !this->exec_opts->xtrace_rich())) {
    return nullptr;
  }
  prefix = this->_EvalPS4(punct);
  buf = Alloc<mylib::BufWriter>();
  buf->write(prefix);
  return buf;
}

void Tracer::OnProcessStart(int pid, runtime_asdl::trace_t* why) {
  mylib::BufWriter* buf = nullptr;
  runtime_asdl::trace_t* UP_why = nullptr;
  StackRoots _roots({&why, &buf, &UP_why});

  buf = this->_RichTraceBegin(str232);
  if (!buf) {
    return ;
  }
  UP_why = why;
  switch (why->tag_()) {
    case trace_e::External: {
      trace__External* why = static_cast<trace__External*>(UP_why);
      buf->write(StrFormat("command %d:", pid));
      _PrintArgv(why->argv, buf);
    }
      break;
    case trace_e::ForkWait: {
      buf->write(StrFormat("forkwait %d\n", pid));
    }
      break;
    case trace_e::CommandSub: {
      buf->write(StrFormat("command sub %d\n", pid));
    }
      break;
    case trace_e::ProcessSub: {
      buf->write(StrFormat("proc sub %d\n", pid));
    }
      break;
    case trace_e::HereDoc: {
      buf->write(StrFormat("here doc %d\n", pid));
    }
      break;
    case trace_e::Fork: {
      buf->write(StrFormat("fork %d\n", pid));
    }
      break;
    case trace_e::PipelinePart: {
      buf->write(StrFormat("part %d\n", pid));
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  this->f->write(buf->getvalue());
}

void Tracer::OnProcessEnd(int pid, int status) {
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&buf});

  buf = this->_RichTraceBegin(str240);
  if (!buf) {
    return ;
  }
  buf->write(StrFormat("process %d: status %d\n", pid, status));
  this->f->write(buf->getvalue());
}

void Tracer::SetProcess(int pid) {
  this->val_pid_str->s = StrFormat(" %d", pid);
  this->_Inc();
}

void Tracer::PushMessage(Str* label, List<Str*>* argv) {
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&label, &argv, &buf});

  buf = this->_RichTraceBegin(str243);
  if (buf) {
    buf->write(label);
    if (str_equals(label, str244)) {
      _PrintArgv(argv, buf);
    }
    else {
      if (str_equals(label, str245)) {
        _PrintArgv(argv->slice(1), buf);
      }
      else {
        if (str_equals(label, str246)) {
          _PrintArgv(argv->slice(1), buf);
        }
        else {
          buf->write(str247);
        }
      }
    }
    this->f->write(buf->getvalue());
  }
  this->_Inc();
}

void Tracer::PopMessage(Str* label, Str* arg) {
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&label, &arg, &buf});

  this->_Dec();
  buf = this->_RichTraceBegin(str248);
  if (buf) {
    buf->write(label);
    if (arg != nullptr) {
      buf->write(str249);
      buf->write(qsn::maybe_encode(arg));
    }
    buf->write(str250);
    this->f->write(buf->getvalue());
  }
}

void Tracer::PrintMessage(Str* message) {
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&message, &buf});

  buf = this->_RichTraceBegin(str251);
  if (!buf) {
    return ;
  }
  buf->write(message);
  buf->write(str252);
  this->f->write(buf->getvalue());
}

void Tracer::OnExec(List<Str*>* argv) {
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&argv, &buf});

  buf = this->_RichTraceBegin(str253);
  if (!buf) {
    return ;
  }
  buf->write(str254);
  _PrintArgv(argv, buf);
  this->f->write(buf->getvalue());
}

void Tracer::OnBuiltin(int builtin_id, List<Str*>* argv) {
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&argv, &buf});

  if ((builtin_id == builtin_i::eval || builtin_id == builtin_i::source || builtin_id == builtin_i::wait)) {
    return ;
  }
  buf = this->_RichTraceBegin(str255);
  if (!buf) {
    return ;
  }
  buf->write(str256);
  _PrintArgv(argv, buf);
  this->f->write(buf->getvalue());
}

void Tracer::OnSimpleCommand(List<Str*>* argv) {
  mylib::BufWriter* buf = nullptr;
  int i;
  StackRoots _roots({&argv, &buf});

  buf = this->_ShTraceBegin();
  if (!buf) {
    return ;
  }
  if (this->exec_opts->xtrace_rich()) {
    return ;
  }
  i = 0;
  for (ListIter<Str*> it(argv); !it.Done(); it.Next(), ++i) {
    Str* arg = it.Value();
    StackRoots _for({&arg  });
    if (i != 0) {
      buf->write(str257);
    }
    buf->write(qsn::maybe_shell_encode(arg));
  }
  buf->write(str258);
  this->f->write(buf->getvalue());
}

void Tracer::OnAssignBuiltin(runtime_asdl::cmd_value__Assign* cmd_val) {
  mylib::BufWriter* buf = nullptr;
  int i;
  StackRoots _roots({&cmd_val, &buf});

  buf = this->_ShTraceBegin();
  if (!buf) {
    return ;
  }
  i = 0;
  for (ListIter<Str*> it(cmd_val->argv); !it.Done(); it.Next(), ++i) {
    Str* arg = it.Value();
    StackRoots _for({&arg  });
    if (i != 0) {
      buf->write(str259);
    }
    buf->write(arg);
  }
  for (ListIter<runtime_asdl::assign_arg*> it(cmd_val->pairs); !it.Done(); it.Next()) {
    runtime_asdl::assign_arg* pair = it.Value();
    StackRoots _for({&pair  });
    buf->write(str260);
    buf->write(pair->var_name);
    buf->write(str261);
    if (pair->rval) {
      _PrintShValue(pair->rval, buf);
    }
  }
  buf->write(str262);
  this->f->write(buf->getvalue());
}

void Tracer::OnShAssignment(runtime_asdl::lvalue_t* lval, syntax_asdl::assign_op_t op, runtime_asdl::value_t* val, int flags, runtime_asdl::scope_t which_scopes) {
  mylib::BufWriter* buf = nullptr;
  Str* left = nullptr;
  runtime_asdl::lvalue_t* UP_lval = nullptr;
  StackRoots _roots({&lval, &val, &buf, &left, &UP_lval});

  buf = this->_ShTraceBegin();
  if (!buf) {
    return ;
  }
  left = str263;
  UP_lval = lval;
  switch (lval->tag_()) {
    case lvalue_e::Named: {
      lvalue__Named* lval = static_cast<lvalue__Named*>(UP_lval);
      left = lval->name;
    }
      break;
    case lvalue_e::Indexed: {
      lvalue__Indexed* lval = static_cast<lvalue__Indexed*>(UP_lval);
      left = StrFormat("%s[%d]", lval->name, lval->index);
    }
      break;
    case lvalue_e::Keyed: {
      lvalue__Keyed* lval = static_cast<lvalue__Keyed*>(UP_lval);
      left = StrFormat("%s[%s]", lval->name, qsn::maybe_shell_encode(lval->key));
    }
      break;
  }
  buf->write(left);
  buf->write(op == assign_op_e::PlusEqual ? str266 : str267);
  _PrintShValue(val, buf);
  buf->write(str268);
  this->f->write(buf->getvalue());
}

void Tracer::OnControlFlow(Str* keyword, int arg) {
  Str* prefix = nullptr;
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&keyword, &prefix, &buf});

  if (!this->exec_opts->xtrace()) {
    return ;
  }
  prefix = this->_EvalPS4(str269);
  buf = Alloc<mylib::BufWriter>();
  buf->write(prefix);
  buf->write(keyword);
  buf->write(str270);
  buf->write(str(arg));
  buf->write(str271);
  this->f->write(buf->getvalue());
}

void Tracer::PrintSourceCode(int left_spid, int right_spid, alloc::Arena* arena) {
  mylib::BufWriter* buf = nullptr;
  syntax_asdl::Token* left_span = nullptr;
  syntax_asdl::Token* right_span = nullptr;
  Str* line = nullptr;
  int start;
  int end;
  StackRoots _roots({&arena, &buf, &left_span, &right_span, &line});

  buf = this->_ShTraceBegin();
  if (!buf) {
    return ;
  }
  left_span = arena->GetToken(left_spid);
  right_span = arena->GetToken(right_spid);
  line = left_span->line->content;
  start = left_span->col;
  if (left_span->line == right_span->line) {
    end = right_span->col;
    buf->write(line->slice(start, end));
  }
  else {
    end = line->endswith(str272) ? -1 : len(line);
    buf->write(line->slice(start, end));
    buf->write(str273);
  }
  buf->write(str274);
  this->f->write(buf->getvalue());
}

}  // define namespace dev

namespace error {  // define

int NO_SPID = -1;

Usage::Usage(Str* msg, int span_id) 
    : header_(obj_header()) {
  this->msg = msg;
  this->span_id = span_id;
}

_ErrorWithLocation::_ErrorWithLocation(Str* msg, syntax_asdl::loc_t* location) 
    : header_(obj_header()) {
  this->msg = msg;
  this->location = location;
}

bool _ErrorWithLocation::HasLocation() {
  using syntax_asdl::loc_e;
  if (this->location) {
    return this->location->tag_() != loc_e::Missing;
  }
  else {
    return false;
  }
}

Str* _ErrorWithLocation::UserErrorString() {
  return this->msg;
}

Runtime::Runtime(Str* msg) 
    : header_(obj_header()) {
  this->msg = msg;
}

Str* Runtime::UserErrorString() {
  return this->msg;
}

Parse::Parse(Str* msg, syntax_asdl::loc_t* location) : _ErrorWithLocation(msg, location) {
}

FailGlob::FailGlob(Str* msg, syntax_asdl::loc_t* location) : _ErrorWithLocation(msg, location) {
}

RedirectEval::RedirectEval(Str* msg, syntax_asdl::loc_t* location) : _ErrorWithLocation(msg, location) {
}

FatalRuntime::FatalRuntime(int exit_status, Str* msg, syntax_asdl::loc_t* location) : _ErrorWithLocation(msg, location) {
  this->exit_status = exit_status;
}

int FatalRuntime::ExitStatus() {
  return this->exit_status;
}

Strict::Strict(Str* msg, syntax_asdl::loc_t* location) : FatalRuntime(1, msg, location) {
}

ErrExit::ErrExit(int exit_status, Str* msg, syntax_asdl::loc_t* location, bool show_code) : FatalRuntime(exit_status, msg, location) {
  this->show_code = show_code;
}

Expr::Expr(Str* msg, syntax_asdl::loc_t* location) : FatalRuntime(3, msg, location) {
}

}  // define namespace error

namespace executor {  // define

using id_kind_asdl::Id;
using option_asdl::builtin_i;
using runtime_asdl::redirect;
using runtime_asdl::trace;
using syntax_asdl::command_e;
using syntax_asdl::command__Simple;
using syntax_asdl::command__Pipeline;
using syntax_asdl::command__ControlFlow;
using syntax_asdl::command_sub;
using syntax_asdl::compound_word;
using syntax_asdl::loc;
using pyerror::e_die;
using pyerror::e_die_status;

_ProcessSubFrame::_ProcessSubFrame() 
    : header_(obj_header()) {
  this->to_close = Alloc<List<int>>();
  this->to_wait = Alloc<List<process::Process*>>();
  this->span_ids = Alloc<List<int>>();
}

ShellExecutor::ShellExecutor(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, Dict<Str*, runtime_asdl::Proc*>* procs, state::Hay* hay_state, Dict<int, vm::_Builtin*>* builtins, state::SearchPath* search_path, process::ExternalProgram* ext_prog, process::Waiter* waiter, dev::Tracer* tracer, process::JobState* job_state, process::FdState* fd_state, ui::ErrorFormatter* errfmt) : vm::_Executor() {
  FIELD_MASK(header_) |= ShellExecutor::field_mask();
  this->mem = mem;
  this->exec_opts = exec_opts;
  this->mutable_opts = mutable_opts;
  this->procs = procs;
  this->hay_state = hay_state;
  this->builtins = builtins;
  this->search_path = search_path;
  this->ext_prog = ext_prog;
  this->waiter = waiter;
  this->tracer = tracer;
  this->job_state = job_state;
  this->fd_state = fd_state;
  this->errfmt = errfmt;
  this->process_sub_stack = Alloc<List<executor::_ProcessSubFrame*>>();
}

void ShellExecutor::CheckCircularDeps() {
}

process::Process* ShellExecutor::_MakeProcess(syntax_asdl::command_t* node, bool inherit_errexit) {
  syntax_asdl::command_t* UP_node = nullptr;
  process::SubProgramThunk* thunk = nullptr;
  process::Process* p = nullptr;
  StackRoots _roots({&node, &UP_node, &thunk, &p});

  UP_node = node;
  if (node->tag_() == command_e::ControlFlow) {
    command__ControlFlow* node = static_cast<command__ControlFlow*>(UP_node);
    if (node->token->id != Id::ControlFlow_Exit) {
      e_die(StrFormat("Invalid control flow %r in pipeline / subshell / background", lexer::TokenVal(node->token)), node->token);
    }
  }
  thunk = Alloc<process::SubProgramThunk>(this->cmd_ev, node, inherit_errexit);
  p = Alloc<process::Process>(thunk, this->job_state, this->tracer);
  return p;
}

int ShellExecutor::RunBuiltin(int builtin_id, runtime_asdl::cmd_value__Argv* cmd_val) {
  vm::_Builtin* builtin_func = nullptr;
  int status;
  Str* arg0 = nullptr;
  StackRoots _roots({&cmd_val, &builtin_func, &arg0});

  this->tracer->OnBuiltin(builtin_id, cmd_val->argv);
  builtin_func = this->builtins->index_(builtin_id);
  {  // with
    vm::ctx_FlushStdout ctx{};

    {  // with
      ui::ctx_Location ctx{this->errfmt, cmd_val->arg_spids->index_(0)};

      try {
        status = builtin_func->Run(cmd_val);
      }
      catch (error::Usage* e) {
        arg0 = cmd_val->argv->index_(0);
        if (e->span_id == runtime::NO_SPID) {
          e->span_id = this->errfmt->CurrentLocation();
        }
        this->errfmt->PrefixPrint(e->msg, StrFormat("%r ", arg0), Alloc<loc::Span>(e->span_id));
        status = 2;
      }
    }
  }
  return status;
}

int ShellExecutor::RunSimpleCommand(runtime_asdl::cmd_value__Argv* cmd_val, runtime_asdl::CommandStatus* cmd_st, bool do_fork, bool call_procs) {
  List<Str*>* argv = nullptr;
  int arg0_spid;
  Str* arg0 = nullptr;
  int builtin_id;
  int status;
  runtime_asdl::Proc* proc_node = nullptr;
  int disabled_spid;
  Dict<Str*, Str*>* environ = nullptr;
  Str* argv0_path = nullptr;
  process::ExternalThunk* thunk = nullptr;
  process::Process* p = nullptr;
  StackRoots _roots({&cmd_val, &cmd_st, &argv, &arg0, &proc_node, &environ, &argv0_path, &thunk, &p});

  argv = cmd_val->argv;
  arg0_spid = len(cmd_val->arg_spids) ? cmd_val->arg_spids->index_(0) : runtime::NO_SPID;
  if (len(argv) == 0) {
    if (this->exec_opts->strict_argv()) {
      e_die(str278, Alloc<loc::Span>(arg0_spid));
    }
    else {
      return 0;
    }
  }
  arg0 = argv->index_(0);
  builtin_id = consts::LookupAssignBuiltin(arg0);
  if (builtin_id != consts::NO_INDEX) {
    this->errfmt->Print_(str279, arg0_spid);
    return 1;
  }
  builtin_id = consts::LookupSpecialBuiltin(arg0);
  if (builtin_id != consts::NO_INDEX) {
    cmd_st->show_code = true;
    status = this->RunBuiltin(builtin_id, cmd_val);
    return status;
  }
  if (call_procs) {
    proc_node = this->procs->get(arg0);
    if (proc_node != nullptr) {
      if (this->exec_opts->strict_errexit()) {
        disabled_spid = this->mutable_opts->ErrExitDisabledSpanId();
        if (disabled_spid != runtime::NO_SPID) {
          this->errfmt->Print_(str280, disabled_spid);
          this->errfmt->StderrLine(str281);
          e_die(str282, Alloc<loc::Span>(arg0_spid));
        }
      }
      {  // with
        dev::ctx_Tracer ctx{this->tracer, str283, argv};

        status = this->cmd_ev->RunProc(proc_node, argv->slice(1), arg0_spid);
      }
      return status;
    }
  }
  if (this->hay_state->Resolve(arg0)) {
    return this->RunBuiltin(builtin_i::haynode, cmd_val);
  }
  builtin_id = consts::LookupNormalBuiltin(arg0);
  if (this->exec_opts->_running_hay()) {
    if ((builtin_id == builtin_i::haynode || builtin_id == builtin_i::use || builtin_id == builtin_i::echo || builtin_id == builtin_i::write)) {
      cmd_st->show_code = true;
      return this->RunBuiltin(builtin_id, cmd_val);
    }
    this->errfmt->Print_(StrFormat("Unknown command %r while running hay", arg0), arg0_spid);
    return 127;
  }
  if (builtin_id != consts::NO_INDEX) {
    cmd_st->show_code = true;
    return this->RunBuiltin(builtin_id, cmd_val);
  }
  environ = this->mem->GetExported();
  if (cmd_val->typed_args) {
    e_die(StrFormat("Unexpected typed args passed to external command %r", arg0), cmd_val->typed_args->left);
  }
  argv0_path = this->search_path->CachedLookup(arg0);
  if (argv0_path == nullptr) {
    this->errfmt->Print_(StrFormat("%r not found", arg0), arg0_spid);
    return 127;
  }
  if (do_fork) {
    thunk = Alloc<process::ExternalThunk>(this->ext_prog, argv0_path, cmd_val, environ);
    p = Alloc<process::Process>(thunk, this->job_state, this->tracer);
    status = p->RunWait(this->waiter, Alloc<trace::External>(cmd_val->argv));
    cmd_st->show_code = true;
    return status;
  }
  this->tracer->OnExec(cmd_val->argv);
  this->ext_prog->Exec(argv0_path, cmd_val, environ);
  assert(0);  // AssertionError
}

int ShellExecutor::RunBackgroundJob(syntax_asdl::command_t* node) {
  syntax_asdl::command_t* UP_node = nullptr;
  process::Pipeline* pi = nullptr;
  process::Process* p = nullptr;
  int last_pid;
  int pid;
  StackRoots _roots({&node, &UP_node, &pi, &p});

  UP_node = node;
  if (UP_node->tag_() == command_e::Pipeline) {
    command__Pipeline* node = static_cast<command__Pipeline*>(UP_node);
    pi = Alloc<process::Pipeline>(this->exec_opts->sigpipe_status_ok());
    for (ListIter<syntax_asdl::command_t*> it(node->children); !it.Done(); it.Next()) {
      syntax_asdl::command_t* child = it.Value();
      StackRoots _for({&child    });
      p = this->_MakeProcess(child);
      p->Init_ParentPipeline(pi);
      pi->Add(p);
    }
    pi->Start(this->waiter);
    last_pid = pi->LastPid();
    this->mem->last_bg_pid = last_pid;
    this->job_state->AddJob(pi);
  }
  else {
    p = this->_MakeProcess(node);
    pid = p->Start(Alloc<trace::Fork>());
    this->mem->last_bg_pid = pid;
    this->job_state->AddJob(p);
  }
  return 0;
}

void ShellExecutor::RunPipeline(syntax_asdl::command__Pipeline* node, runtime_asdl::CommandStatus* status_out) {
  process::Pipeline* pi = nullptr;
  int n;
  syntax_asdl::command_t* child = nullptr;
  process::Process* p = nullptr;
  syntax_asdl::command_t* last_child = nullptr;
  StackRoots _roots({&node, &status_out, &pi, &child, &p, &last_child});

  pi = Alloc<process::Pipeline>(this->exec_opts->sigpipe_status_ok());
  this->job_state->AddPipeline(pi);
  n = len(node->children);
  for (int i = 0; i < (n - 1); ++i) {
    child = node->children->index_(i);
    status_out->pipe_spids->append(location::SpanForCommand(child));
    p = this->_MakeProcess(child);
    p->Init_ParentPipeline(pi);
    pi->Add(p);
  }
  last_child = node->children->index_((n - 1));
  pi->AddLast((Alloc<Tuple2<cmd_eval::CommandEvaluator*, syntax_asdl::command_t*>>(this->cmd_ev, last_child)));
  status_out->pipe_spids->append(location::SpanForCommand(last_child));
  {  // with
    dev::ctx_Tracer ctx{this->tracer, str288, nullptr};

    status_out->pipe_status = pi->Run(this->waiter, this->fd_state);
  }
}

int ShellExecutor::RunSubshell(syntax_asdl::command_t* node) {
  process::Process* p = nullptr;
  StackRoots _roots({&node, &p});

  p = this->_MakeProcess(node);
  return p->RunWait(this->waiter, Alloc<trace::ForkWait>());
}

Str* ShellExecutor::RunCommandSub(syntax_asdl::command_sub* cs_part) {
  Str* why = nullptr;
  syntax_asdl::command_t* node = nullptr;
  syntax_asdl::Token* tok = nullptr;
  syntax_asdl::compound_word* cat_word = nullptr;
  process::Process* p = nullptr;
  int r;
  int w;
  List<Str*>* chunks = nullptr;
  int n;
  int err_num;
  int status;
  Str* msg = nullptr;
  StackRoots _roots({&cs_part, &why, &node, &tok, &cat_word, &p, &chunks, &msg});

  if (!this->exec_opts->_allow_command_sub()) {
    if (!this->exec_opts->_allow_process_sub()) {
      why = str289;
    }
    else {
      why = str290;
    }
    e_die(StrFormat("Command subs not allowed here because %s", why), Alloc<loc::WordPart>(cs_part));
  }
  node = cs_part->child;
  if (node->tag_() == command_e::Simple) {
    command__Simple* simple = static_cast<command__Simple*>(node);
    if ((len(simple->words) == 0 and (len(simple->redirects) == 1 and simple->redirects->index_(0)->op->id == Id::Redir_Less))) {
      tok = lexer::DummyToken(Id::Lit_Chars, str292);
      cat_word = Alloc<compound_word>(NewList<syntax_asdl::word_part_t*>(std::initializer_list<syntax_asdl::word_part_t*>{tok}));
      simple->words->append(cat_word);
    }
  }
  p = this->_MakeProcess(node, this->exec_opts->inherit_errexit());
  Tuple2<int, int> tup0 = posix::pipe();
  r = tup0.at0();
  w = tup0.at1();
  p->AddStateChange(Alloc<process::StdoutToPipe>(r, w));
  p->Start(Alloc<trace::CommandSub>());
  chunks = Alloc<List<Str*>>();
  posix::close(w);
  while (true) {
    Tuple2<int, int> tup1 = pyos::Read(r, 4096, chunks);
    n = tup1.at0();
    err_num = tup1.at1();
    if (n < 0) {
      if (err_num == EINTR) {
        ;  // pass
      }
      else {
        e_die_status(2, StrFormat("osh I/O error (read): %s", posix::strerror(err_num)));
      }
    }
    else {
      if (n == 0) {
        break;
      }
    }
  }
  posix::close(r);
  status = p->Wait(this->waiter);
  if (this->exec_opts->command_sub_errexit()) {
    if (status != 0) {
      msg = StrFormat("Command Sub exited with status %d", status);
      throw Alloc<error::ErrExit>(status, msg, Alloc<loc::Span>(cs_part->left_token->span_id));
    }
  }
  else {
    this->cmd_ev->check_command_sub_status = true;
    this->mem->SetLastStatus(status);
  }
  return str295->join(chunks)->rstrip(str296);
}

Str* ShellExecutor::RunProcessSub(syntax_asdl::command_sub* cs_part) {
  process::Process* p = nullptr;
  int r;
  int w;
  int op_id;
  process::ChildStateChange* redir = nullptr;
  executor::_ProcessSubFrame* ps_frame = nullptr;
  StackRoots _roots({&cs_part, &p, &redir, &ps_frame});

  if (!this->exec_opts->_allow_process_sub()) {
    e_die(str297, Alloc<loc::WordPart>(cs_part));
  }
  p = this->_MakeProcess(cs_part->child);
  Tuple2<int, int> tup2 = posix::pipe();
  r = tup2.at0();
  w = tup2.at1();
  op_id = cs_part->left_token->id;
  if (op_id == Id::Left_ProcSubIn) {
    redir = Alloc<process::StdoutToPipe>(r, w);
  }
  else {
    if (op_id == Id::Left_ProcSubOut) {
      redir = Alloc<process::StdinFromPipe>(r, w);
    }
    else {
      assert(0);  // AssertionError
    }
  }
  p->AddStateChange(redir);
  p->Start(Alloc<trace::ProcessSub>());
  ps_frame = this->process_sub_stack->index_(-1);
  ps_frame->to_wait->append(p);
  ps_frame->span_ids->append(cs_part->left_token->span_id);
  if (op_id == Id::Left_ProcSubIn) {
    posix::close(w);
    ps_frame->to_close->append(r);
  }
  else {
    if (op_id == Id::Left_ProcSubOut) {
      posix::close(r);
      ps_frame->to_close->append(w);
    }
    else {
      assert(0);  // AssertionError
    }
  }
  if (op_id == Id::Left_ProcSubIn) {
    return StrFormat("/dev/fd/%d", r);
  }
  else {
    if (op_id == Id::Left_ProcSubOut) {
      return StrFormat("/dev/fd/%d", w);
    }
    else {
      assert(0);  // AssertionError
    }
  }
}

void ShellExecutor::MaybeWaitOnProcessSubs(executor::_ProcessSubFrame* frame, runtime_asdl::StatusArray* compound_st) {
  int i;
  int st;
  StackRoots _roots({&frame, &compound_st});

  for (ListIter<int> it(frame->to_close); !it.Done(); it.Next()) {
    int fd = it.Value();
    posix::close(fd);
  }
  i = 0;
  for (ListIter<process::Process*> it(frame->to_wait); !it.Done(); it.Next(), ++i) {
    process::Process* p = it.Value();
    StackRoots _for({&p  });
    st = p->Wait(this->waiter);
    compound_st->codes->append(st);
    compound_st->spids->append(frame->span_ids->index_(i));
  }
}

bool ShellExecutor::PushRedirects(List<runtime_asdl::redirect*>* redirects) {
  StackRoots _roots({&redirects});

  return this->fd_state->Push(redirects);
}

void ShellExecutor::PopRedirects() {
  this->fd_state->Pop();
}

void ShellExecutor::PushProcessSub() {
  this->process_sub_stack->append(Alloc<_ProcessSubFrame>());
}

void ShellExecutor::PopProcessSub(runtime_asdl::StatusArray* compound_st) {
  executor::_ProcessSubFrame* frame = nullptr;
  StackRoots _roots({&compound_st, &frame});

  frame = this->process_sub_stack->pop();
  this->MaybeWaitOnProcessSubs(frame, compound_st);
}

}  // define namespace executor

namespace main_loop {  // define

using syntax_asdl::command_t;
using syntax_asdl::command;
using syntax_asdl::parse_result__Node;
using syntax_asdl::parse_result_e;
using mylib::print_stderr;

ctx_Descriptors::ctx_Descriptors(List<int>* fds) 
    : header_(obj_header()) {
  this->saved0 = process::SaveFd(0);
  this->saved1 = process::SaveFd(1);
  this->saved2 = process::SaveFd(2);
  posix::dup2(fds->index_(0), 0);
  posix::dup2(fds->index_(1), 1);
  posix::dup2(fds->index_(2), 2);
  this->fds = fds;
}

ctx_Descriptors::~ctx_Descriptors(){
  posix::dup2(this->saved0, 0);
  posix::dup2(this->saved1, 1);
  posix::dup2(this->saved2, 2);
  posix::close(this->saved0);
  posix::close(this->saved1);
  posix::close(this->saved2);
  posix::close(this->fds->index_(0));
  posix::close(this->fds->index_(1));
  posix::close(this->fds->index_(2));
}

void fanos_log(Str* msg) {
  StackRoots _roots({&msg});

  print_stderr(StrFormat("[FANOS] %s", msg));
}

void ShowDescriptorState(Str* label) {
  StackRoots _roots({&label});

}

Headless::Headless(cmd_eval::CommandEvaluator* cmd_ev, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt) 
    : header_(obj_header()) {
  this->cmd_ev = cmd_ev;
  this->parse_ctx = parse_ctx;
  this->errfmt = errfmt;
}

int Headless::Loop() {
  try {
    return this->_Loop();
  }
  catch (ValueError* e) {
    fanos::send(1, StrFormat("ERROR %s", e));
    return 1;
  }
}

Str* Headless::EVAL(Str* arg) {
  reader::FileLineReader* line_reader = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  StackRoots _roots({&arg, &line_reader, &c_parser});

  line_reader = reader::StringLineReader(arg, this->parse_ctx->arena);
  c_parser = this->parse_ctx->MakeOshParser(line_reader);
  return str302;
}

int Headless::_Loop() {
  List<int>* fd_out = nullptr;
  Str* blob = nullptr;
  List<Str*>* bs = nullptr;
  Str* command = nullptr;
  Str* arg = nullptr;
  Str* reply = nullptr;
  StackRoots _roots({&fd_out, &blob, &bs, &command, &arg, &reply});

  fanos_log(str303);
  fd_out = Alloc<List<int>>();
  while (true) {
    try {
      blob = fanos::recv(0, fd_out);
    }
    catch (ValueError* e) {
      fanos_log(StrFormat("protocol error: %s", e));
      throw ;
    }
    if (blob == nullptr) {
      fanos_log(str305);
      break;
    }
    fanos_log(StrFormat("received blob %r", blob));
    if (str_contains(blob, str307)) {
      bs = blob->split(str308, 1);
      command = bs->index_(0);
      arg = bs->index_(1);
    }
    else {
      command = blob;
      arg = str309;
    }
    if (str_equals(command, str310)) {
      reply = str(posix::getpid());
    }
    else {
      if (str_equals(command, str311)) {
        if (len(fd_out) != 3) {
          throw Alloc<ValueError>(str312);
        }
        for (ListIter<int> it(fd_out); !it.Done(); it.Next()) {
          int fd = it.Value();
          fanos_log(StrFormat("received descriptor %d", fd));
        }
        {  // with
          ctx_Descriptors ctx{fd_out};

          reply = this->EVAL(arg);
        }
      }
      else {
        if (str_equals(command, str314)) {
          reply = str315;
        }
        else {
          fanos_log(StrFormat("Invalid command %r", command));
          throw Alloc<ValueError>(StrFormat("Invalid command %r", command));
        }
      }
    }
    fanos::send(1, StrFormat("OK %s", reply));
    fd_out->clear();
  }
  return 0;
}

int Interactive(arg_types::main* flag, cmd_eval::CommandEvaluator* cmd_ev, cmd_parse::CommandParser* c_parser, comp_ui::_IDisplay* display, prompt::UserPlugin* prompt_plugin, ui::ErrorFormatter* errfmt) {
  int status;
  bool done;
  bool quit;
  syntax_asdl::parse_result_t* result = nullptr;
  syntax_asdl::parse_result_t* UP_result = nullptr;
  syntax_asdl::command_t* node = nullptr;
  bool is_return;
  StackRoots _roots({&flag, &cmd_ev, &c_parser, &display, &prompt_plugin, &errfmt, &result, &UP_result, &node});

  status = 0;
  done = false;
  while (!done) {
    mylib::MaybeCollect();
    while (true) {
      quit = false;
      prompt_plugin->Run();
      try {
        result = c_parser->ParseInteractiveLine();
        UP_result = result;
        switch (result->tag_()) {
          case parse_result_e::EmptyLine: {
            display->EraseLines();
            quit = true;
          }
            break;
          case parse_result_e::Eof: {
            display->EraseLines();
            done = true;
            quit = true;
          }
            break;
          case parse_result_e::Node: {
            parse_result__Node* result = static_cast<parse_result__Node*>(UP_result);
            node = result->cmd;
          }
            break;
          default: {
            assert(0);  // AssertionError
          }
        }
      }
      catch (util::HistoryError* e) {
        display->EraseLines();
        print(e->UserErrorString());
        quit = true;
      }
      catch (error::Parse* e) {
        display->EraseLines();
        errfmt->PrettyPrintError(e);
        status = 2;
        cmd_ev->mem->SetLastStatus(status);
        quit = true;
      }
      catch (KeyboardInterrupt*) {
        print(str319);
        display->EraseLines();
        quit = true;
      }
      if (quit) {
        break;
      }
      display->EraseLines();
      if (cmd_ev->exec_opts->noexec()) {
        ui::PrintAst(node, flag);
        break;
      }
      try {
        Tuple2<bool, bool> tup0 = cmd_ev->ExecuteAndCatch(node);
        is_return = tup0.at0();
      }
      catch (KeyboardInterrupt*) {
        is_return = false;
        display->EraseLines();
        status = 130;
        cmd_ev->mem->SetLastStatus(status);
        break;
      }
      status = cmd_ev->LastStatus();
      if (is_return) {
        done = true;
        break;
      }
      break;
    }
    c_parser->arena->DiscardLines();
    cmd_ev->RunPendingTraps();
    c_parser->Reset();
    c_parser->ResetInputObjects();
    display->Reset();
    if (flag->print_status) {
      print(StrFormat("STATUS\t%r", status));
    }
  }
  return status;
}

int Batch(cmd_eval::CommandEvaluator* cmd_ev, cmd_parse::CommandParser* c_parser, ui::ErrorFormatter* errfmt, int cmd_flags) {
  int status;
  syntax_asdl::command_t* node = nullptr;
  bool is_return;
  bool is_fatal;
  StackRoots _roots({&cmd_ev, &c_parser, &errfmt, &node});

  status = 0;
  while (true) {
    try {
      node = c_parser->ParseLogicalLine();
      if (node == nullptr) {
        c_parser->CheckForPendingHereDocs();
        break;
      }
    }
    catch (error::Parse* e) {
      errfmt->PrettyPrintError(e);
      status = 2;
      break;
    }
    c_parser->arena->DiscardLines();
    if (((cmd_flags & cmd_eval::IsMainProgram) and c_parser->line_reader->LastLineHint())) {
      cmd_flags |= cmd_eval::Optimize;
    }
    Tuple2<bool, bool> tup1 = cmd_ev->ExecuteAndCatch(node, cmd_flags);
    is_return = tup1.at0();
    is_fatal = tup1.at1();
    status = cmd_ev->LastStatus();
    if ((is_return or is_fatal)) {
      break;
    }
    mylib::MaybeCollect();
  }
  return status;
}

syntax_asdl::command_t* ParseWholeFile(cmd_parse::CommandParser* c_parser) {
  List<syntax_asdl::command_t*>* children = nullptr;
  syntax_asdl::command_t* node = nullptr;
  StackRoots _roots({&c_parser, &children, &node});

  children = Alloc<List<syntax_asdl::command_t*>>();
  while (true) {
    node = c_parser->ParseLogicalLine();
    if (node == nullptr) {
      c_parser->CheckForPendingHereDocs();
      break;
    }
    children->append(node);
    mylib::MaybeCollect();
  }
  if (len(children) == 1) {
    return children->index_(0);
  }
  else {
    return Alloc<command::CommandList>(children);
  }
}

}  // define namespace main_loop

namespace process {  // define

using id_kind_asdl::Id;
using runtime_asdl::job_state_e;
using runtime_asdl::job_state_t;
using runtime_asdl::job_state_str;
using runtime_asdl::wait_status;
using runtime_asdl::wait_status_t;
using runtime_asdl::redirect;
using runtime_asdl::redirect_arg_e;
using runtime_asdl::redirect_arg__Path;
using runtime_asdl::redirect_arg__CopyFd;
using runtime_asdl::redirect_arg__MoveFd;
using runtime_asdl::redirect_arg__HereDoc;
using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value__Str;
using runtime_asdl::trace;
using runtime_asdl::trace_t;
using syntax_asdl::redir_loc;
using syntax_asdl::redir_loc_e;
using syntax_asdl::redir_loc_t;
using syntax_asdl::redir_loc__VarName;
using syntax_asdl::redir_loc__Fd;
using pyerror::e_die;
using mylib::print_stderr;
using mylib::StrFromC;
int NO_FD = -1;
int _SHELL_MIN_FD = 100;
int STYLE_DEFAULT = 0;
int STYLE_LONG = 1;
int STYLE_PID_ONLY = 2;

int SaveFd(int fd) {
  int saved;
  saved = fcntl_::fcntl(fd, F_DUPFD, _SHELL_MIN_FD);
  return saved;
}

_RedirFrame::_RedirFrame(int saved_fd, int orig_fd, bool forget) 
    : header_(obj_header()) {
  this->saved_fd = saved_fd;
  this->orig_fd = orig_fd;
  this->forget = forget;
}

_FdFrame::_FdFrame() 
    : header_(obj_header()) {
  this->saved = Alloc<List<process::_RedirFrame*>>();
  this->need_wait = Alloc<List<process::Process*>>();
}

void _FdFrame::Forget() {
  for (ReverseListIter<process::_RedirFrame*> it(this->saved); !it.Done(); it.Next()) {
    process::_RedirFrame* rf = it.Value();
    StackRoots _for({&rf  });
    if ((rf->saved_fd != NO_FD and rf->forget)) {
      posix::close(rf->saved_fd);
    }
  }
  this->saved->clear();
  this->need_wait->clear();
}

FdState::FdState(ui::ErrorFormatter* errfmt, process::JobState* job_state, state::Mem* mem, dev::Tracer* tracer, process::Waiter* waiter) 
    : header_(obj_header()) {
  this->errfmt = errfmt;
  this->job_state = job_state;
  this->cur_frame = Alloc<_FdFrame>();
  this->stack = NewList<process::_FdFrame*>(std::initializer_list<process::_FdFrame*>{this->cur_frame});
  this->mem = mem;
  this->tracer = tracer;
  this->waiter = waiter;
}

mylib::LineReader* FdState::Open(Str* path) {
  int fd_mode;
  StackRoots _roots({&path});

  fd_mode = O_RDONLY;
  return this->_Open(path, str322, fd_mode);
}

mylib::Writer* FdState::OpenForWrite(Str* path) {
  int fd_mode;
  mylib::LineReader* f = nullptr;
  StackRoots _roots({&path, &f});

  fd_mode = (O_CREAT | O_RDWR);
  f = this->_Open(path, str323, fd_mode);
  return reinterpret_cast<mylib::Writer*>(f);
}

mylib::LineReader* FdState::_Open(Str* path, Str* c_mode, int fd_mode) {
  int fd;
  int new_fd;
  mylib::LineReader* f = nullptr;
  StackRoots _roots({&path, &c_mode, &f});

  fd = posix::open(path, fd_mode, 438);
  new_fd = SaveFd(fd);
  posix::close(fd);
  f = posix::fdopen(new_fd, c_mode);
  return f;
}

void FdState::_WriteFdToMem(Str* fd_name, int fd) {
  StackRoots _roots({&fd_name});

  if (this->mem) {
    state::OshLanguageSetValue(this->mem, location::LName(fd_name), Alloc<value::Str>(str(fd)));
  }
}

int FdState::_ReadFdFromMem(Str* fd_name) {
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&fd_name, &val});

  val = this->mem->GetValue(fd_name);
  if (val->tag_() == value_e::Str) {
    try {
      return to_int(static_cast<value__Str*>(val)->s);
    }
    catch (ValueError*) {
      return NO_FD;
    }
  }
  return NO_FD;
}

bool FdState::_PushSave(int fd) {
  bool ok;
  int new_fd;
  ok = true;
  try {
    new_fd = SaveFd(fd);
  }
  catch (IOError* e) {
    ok = false;
    if (e->errno_ != EBADF) {
      throw ;
    }
  }
  if (ok) {
    posix::close(fd);
    fcntl_::fcntl(new_fd, F_SETFD, FD_CLOEXEC);
    this->cur_frame->saved->append(Alloc<_RedirFrame>(new_fd, fd, true));
  }
  else {
    this->_PushClose(fd);
  }
  return ok;
}

int FdState::_PushDup(int fd1, syntax_asdl::redir_loc_t* loc) {
  syntax_asdl::redir_loc_t* UP_loc = nullptr;
  Str* fd2_name = nullptr;
  int new_fd;
  int fd2;
  bool need_restore;
  process::_RedirFrame* rf = nullptr;
  StackRoots _roots({&loc, &UP_loc, &fd2_name, &rf});

  UP_loc = loc;
  if (loc->tag_() == redir_loc_e::VarName) {
    fd2_name = static_cast<redir_loc__VarName*>(UP_loc)->name;
    try {
      new_fd = fcntl_::fcntl(fd1, F_DUPFD, _SHELL_MIN_FD);
    }
    catch (IOError* e) {
      if (e->errno_ == EBADF) {
        this->errfmt->Print_(StrFormat("%d: %s", fd1, pyutil::strerror(e)));
        return NO_FD;
      }
      else {
        throw ;
      }
    }
    this->_WriteFdToMem(fd2_name, new_fd);
  }
  else {
    if (loc->tag_() == redir_loc_e::Fd) {
      fd2 = static_cast<redir_loc__Fd*>(UP_loc)->fd;
      if (fd1 == fd2) {
        return NO_FD;
      }
      try {
        fcntl_::fcntl(fd1, F_GETFD);
      }
      catch (IOError* e) {
        this->errfmt->Print_(StrFormat("%d: %s", fd1, pyutil::strerror(e)));
        throw ;
      }
      need_restore = this->_PushSave(fd2);
      try {
        posix::dup2(fd1, fd2);
      }
      catch (OSError* e) {
        this->errfmt->Print_(StrFormat("%d: %s", fd1, pyutil::strerror(e)));
        if (need_restore) {
          rf = this->cur_frame->saved->pop();
          posix::dup2(rf->saved_fd, rf->orig_fd);
          posix::close(rf->saved_fd);
        }
        throw ;
      }
      new_fd = fd2;
    }
    else {
      assert(0);  // AssertionError
    }
  }
  return new_fd;
}

bool FdState::_PushCloseFd(syntax_asdl::redir_loc_t* loc) {
  syntax_asdl::redir_loc_t* UP_loc = nullptr;
  Str* fd_name = nullptr;
  int fd;
  StackRoots _roots({&loc, &UP_loc, &fd_name});

  UP_loc = loc;
  if (loc->tag_() == redir_loc_e::VarName) {
    fd_name = static_cast<redir_loc__VarName*>(UP_loc)->name;
    fd = this->_ReadFdFromMem(fd_name);
    if (fd == NO_FD) {
      return false;
    }
  }
  else {
    if (loc->tag_() == redir_loc_e::Fd) {
      fd = static_cast<redir_loc__Fd*>(UP_loc)->fd;
    }
    else {
      assert(0);  // AssertionError
    }
  }
  this->_PushSave(fd);
  return true;
}

void FdState::_PushClose(int fd) {
  this->cur_frame->saved->append(Alloc<_RedirFrame>(NO_FD, fd, false));
}

void FdState::_PushWait(process::Process* proc) {
  StackRoots _roots({&proc});

  this->cur_frame->need_wait->append(proc);
}

void FdState::_ApplyRedirect(runtime_asdl::redirect* r) {
  runtime_asdl::redirect_arg_t* arg = nullptr;
  runtime_asdl::redirect_arg_t* UP_arg = nullptr;
  int mode;
  int open_fd;
  int new_fd;
  syntax_asdl::redir_loc_t* UP_loc = nullptr;
  int fd;
  int read_fd;
  int write_fd;
  process::_HereDocWriterThunk* thunk = nullptr;
  bool start_process;
  process::Process* here_proc = nullptr;
  StackRoots _roots({&r, &arg, &UP_arg, &UP_loc, &thunk, &here_proc});

  arg = r->arg;
  UP_arg = arg;
  switch (arg->tag_()) {
    case redirect_arg_e::Path: {
      redirect_arg__Path* arg = static_cast<redirect_arg__Path*>(UP_arg);
      if ((r->op_id == Id::Redir_Great || r->op_id == Id::Redir_AndGreat)) {
        mode = ((O_CREAT | O_WRONLY) | O_TRUNC);
      }
      else {
        if (r->op_id == Id::Redir_Clobber) {
          mode = ((O_CREAT | O_WRONLY) | O_TRUNC);
        }
        else {
          if ((r->op_id == Id::Redir_DGreat || r->op_id == Id::Redir_AndDGreat)) {
            mode = ((O_CREAT | O_WRONLY) | O_APPEND);
          }
          else {
            if (r->op_id == Id::Redir_Less) {
              mode = O_RDONLY;
            }
            else {
              if (r->op_id == Id::Redir_LessGreat) {
                mode = (O_CREAT | O_RDWR);
              }
              else {
                FAIL(kNotImplemented);  // Python NotImplementedError
              }
            }
          }
        }
      }
      try {
        open_fd = posix::open(arg->filename, mode, 438);
      }
      catch (OSError* e) {
        this->errfmt->Print_(StrFormat("Can't open %r: %s", arg->filename, pyutil::strerror(e)), r->op_spid);
        throw ;
      }
      new_fd = this->_PushDup(open_fd, r->loc);
      if (new_fd != NO_FD) {
        posix::close(open_fd);
      }
      if ((r->op_id == Id::Redir_AndGreat || r->op_id == Id::Redir_AndDGreat)) {
        this->_PushDup(new_fd, Alloc<redir_loc::Fd>(2));
      }
    }
      break;
    case redirect_arg_e::CopyFd: {
      redirect_arg__CopyFd* arg = static_cast<redirect_arg__CopyFd*>(UP_arg);
      if (r->op_id == Id::Redir_GreatAnd) {
        this->_PushDup(arg->target_fd, r->loc);
      }
      else {
        if (r->op_id == Id::Redir_LessAnd) {
          this->_PushDup(arg->target_fd, r->loc);
        }
        else {
          FAIL(kNotImplemented);  // Python NotImplementedError
        }
      }
    }
      break;
    case redirect_arg_e::MoveFd: {
      redirect_arg__MoveFd* arg = static_cast<redirect_arg__MoveFd*>(UP_arg);
      new_fd = this->_PushDup(arg->target_fd, r->loc);
      if (new_fd != NO_FD) {
        posix::close(arg->target_fd);
        UP_loc = r->loc;
        if (r->loc->tag_() == redir_loc_e::Fd) {
          fd = static_cast<redir_loc__Fd*>(UP_loc)->fd;
        }
        else {
          fd = NO_FD;
        }
        this->cur_frame->saved->append(Alloc<_RedirFrame>(new_fd, fd, false));
      }
    }
      break;
    case redirect_arg_e::CloseFd: {
      this->_PushCloseFd(r->loc);
    }
      break;
    case redirect_arg_e::HereDoc: {
      redirect_arg__HereDoc* arg = static_cast<redirect_arg__HereDoc*>(UP_arg);
      Tuple2<int, int> tup0 = posix::pipe();
      read_fd = tup0.at0();
      write_fd = tup0.at1();
      this->_PushDup(read_fd, r->loc);
      this->_PushClose(read_fd);
      thunk = Alloc<_HereDocWriterThunk>(write_fd, arg->body);
      start_process = true;
      if (start_process) {
        here_proc = Alloc<Process>(thunk, this->job_state, this->tracer);
        here_proc->Start(Alloc<trace::HereDoc>());
        this->_PushWait(here_proc);
        posix::close(write_fd);
      }
      else {
        posix::write(write_fd, arg->body);
        posix::close(write_fd);
      }
    }
      break;
  }
}

bool FdState::Push(List<runtime_asdl::redirect*>* redirects) {
  process::_FdFrame* new_frame = nullptr;
  StackRoots _roots({&redirects, &new_frame});

  new_frame = Alloc<_FdFrame>();
  this->stack->append(new_frame);
  this->cur_frame = new_frame;
  for (ListIter<runtime_asdl::redirect*> it(redirects); !it.Done(); it.Next()) {
    runtime_asdl::redirect* r = it.Value();
    StackRoots _for({&r  });
    {  // with
      ui::ctx_Location ctx{this->errfmt, r->op_spid};

      try {
        this->_ApplyRedirect(r);
      }
      catch (IOError_OSError* e) {
        this->Pop();
        return false;
      }
    }
  }
  return true;
}

bool FdState::PushStdinFromPipe(int r) {
  process::_FdFrame* new_frame = nullptr;
  StackRoots _roots({&new_frame});

  new_frame = Alloc<_FdFrame>();
  this->stack->append(new_frame);
  this->cur_frame = new_frame;
  this->_PushDup(r, Alloc<redir_loc::Fd>(0));
  return true;
}

void FdState::Pop() {
  process::_FdFrame* frame = nullptr;
  StackRoots _roots({&frame});

  frame = this->stack->pop();
  for (ReverseListIter<process::_RedirFrame*> it(frame->saved); !it.Done(); it.Next()) {
    process::_RedirFrame* rf = it.Value();
    StackRoots _for({&rf  });
    if (rf->saved_fd == NO_FD) {
      try {
        posix::close(rf->orig_fd);
      }
      catch (OSError* e) {
        mylib::print_stderr(StrFormat("Error closing descriptor %d: %s", rf->orig_fd, pyutil::strerror(e)));
        throw ;
      }
    }
    else {
      try {
        posix::dup2(rf->saved_fd, rf->orig_fd);
      }
      catch (OSError* e) {
        mylib::print_stderr(StrFormat("dup2(%d, %d) error: %s", rf->saved_fd, rf->orig_fd, pyutil::strerror(e)));
        throw ;
      }
      posix::close(rf->saved_fd);
    }
  }
  for (ListIter<process::Process*> it(frame->need_wait); !it.Done(); it.Next()) {
    process::Process* proc = it.Value();
    StackRoots _for({&proc  });
  }
}

void FdState::MakePermanent() {
  this->cur_frame->Forget();
}

ChildStateChange::ChildStateChange() 
    : header_(obj_header()) {
  ;  // pass
}

void ChildStateChange::Apply() {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

StdinFromPipe::StdinFromPipe(int pipe_read_fd, int w)  {
  this->r = pipe_read_fd;
  this->w = w;
}

void StdinFromPipe::Apply() {
  posix::dup2(this->r, 0);
  posix::close(this->r);
  posix::close(this->w);
}

StdoutToPipe::StdoutToPipe(int r, int pipe_write_fd)  {
  this->r = r;
  this->w = pipe_write_fd;
}

void StdoutToPipe::Apply() {
  posix::dup2(this->w, 1);
  posix::close(this->w);
  posix::close(this->r);
}

ExternalProgram::ExternalProgram(Str* hijack_shebang, process::FdState* fd_state, ui::ErrorFormatter* errfmt, util::_DebugFile* debug_f) 
    : header_(obj_header()) {
  this->hijack_shebang = hijack_shebang;
  this->fd_state = fd_state;
  this->errfmt = errfmt;
  this->debug_f = debug_f;
}

void ExternalProgram::Exec(Str* argv0_path, runtime_asdl::cmd_value__Argv* cmd_val, Dict<Str*, Str*>* environ) {
  StackRoots _roots({&argv0_path, &cmd_val, &environ});

  this->_Exec(argv0_path, cmd_val->argv, cmd_val->arg_spids->index_(0), environ, true);
}

void ExternalProgram::_Exec(Str* argv0_path, List<Str*>* argv, int argv0_spid, Dict<Str*, Str*>* environ, bool should_retry) {
  bool ok;
  mylib::LineReader* f = nullptr;
  Str* line = nullptr;
  List<Str*>* h_argv = nullptr;
  List<Str*>* new_argv = nullptr;
  int status;
  StackRoots _roots({&argv0_path, &argv, &environ, &f, &line, &h_argv, &new_argv});

  if (len(this->hijack_shebang)) {
    ok = true;
    try {
      f = this->fd_state->Open(argv0_path);
    }
    catch (IOError_OSError* e) {
      ok = false;
    }
    if (ok) {
      try {
        line = f->readline();
        if (match::ShouldHijack(line)) {
          h_argv = NewList<Str*>(std::initializer_list<Str*>{this->hijack_shebang, argv0_path});
          h_argv->extend(argv->slice(1));
          argv = h_argv;
          argv0_path = this->hijack_shebang;
          mylib::print_stderr(StrFormat("Hijacked: %s", argv0_path));
        }
        else {
          ;  // pass
        }
      }
      catch (std::exception const&) { }
    }
  }
  try {
    posix::execve(argv0_path, argv, environ);
  }
  catch (OSError* e) {
    if ((e->errno_ == ENOEXEC and should_retry)) {
      new_argv = NewList<Str*>(std::initializer_list<Str*>{str334, argv0_path});
      new_argv->extend(argv->slice(1));
      this->_Exec(str335, new_argv, argv0_spid, environ, false);
    }
    this->errfmt->Print_(StrFormat("Can't execute %r: %s", argv0_path, pyutil::strerror(e)), argv0_spid);
    if (e->errno_ == EACCES) {
      status = 126;
    }
    else {
      if (e->errno_ == ENOENT) {
        status = 127;
      }
      else {
        status = 127;
      }
    }
    posix::_exit(status);
  }
}

Thunk::Thunk() 
    : header_(obj_header()) {
  ;  // pass
}

void Thunk::Run() {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

Str* Thunk::UserString() {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

ExternalThunk::ExternalThunk(process::ExternalProgram* ext_prog, Str* argv0_path, runtime_asdl::cmd_value__Argv* cmd_val, Dict<Str*, Str*>* environ)  {
  FIELD_MASK(header_) |= ExternalThunk::field_mask();
  this->ext_prog = ext_prog;
  this->argv0_path = argv0_path;
  this->cmd_val = cmd_val;
  this->environ = environ;
}

Str* ExternalThunk::UserString() {
  List<Str*>* tmp = nullptr;
  StackRoots _roots({&tmp});

  tmp = Alloc<List<Str*>>();
  for (ListIter<Str*> it(this->cmd_val->argv); !it.Done(); it.Next()) {
    Str* a = it.Value();
    tmp->append(qsn::maybe_shell_encode(a));
  }
  return StrFormat("[process] %s", str338->join(tmp));
}

void ExternalThunk::Run() {
  this->ext_prog->Exec(this->argv0_path, this->cmd_val, this->environ);
}

SubProgramThunk::SubProgramThunk(cmd_eval::CommandEvaluator* cmd_ev, syntax_asdl::command_t* node, bool inherit_errexit)  {
  FIELD_MASK(header_) |= SubProgramThunk::field_mask();
  this->cmd_ev = cmd_ev;
  this->node = node;
  this->inherit_errexit = inherit_errexit;
}

Str* SubProgramThunk::UserString() {
  Str* thunk_str = nullptr;
  StackRoots _roots({&thunk_str});

  thunk_str = ui::CommandType(this->node);
  return StrFormat("[subprog] %s", thunk_str);
}

void SubProgramThunk::Run() {
  int status;
  if (!this->inherit_errexit) {
    this->cmd_ev->mutable_opts->DisableErrExit();
  }
  try {
    this->cmd_ev->ExecuteAndCatch(this->node, cmd_eval::Optimize);
    status = this->cmd_ev->LastStatus();
  }
  catch (util::UserExit* e) {
    status = e->status;
  }
  catch (KeyboardInterrupt*) {
    print(str340);
    status = 130;
  }
  catch (IOError_OSError* e) {
    print_stderr(StrFormat("osh I/O error (subprogram): %s", pyutil::strerror(e)));
    status = 2;
  }
  pyos::FlushStdout();
  posix::_exit(status);
}

_HereDocWriterThunk::_HereDocWriterThunk(int w, Str* body_str)  {
  FIELD_MASK(header_) |= _HereDocWriterThunk::field_mask();
  this->w = w;
  this->body_str = body_str;
}

Str* _HereDocWriterThunk::UserString() {
  return str342;
}

void _HereDocWriterThunk::Run() {
  posix::write(this->w, this->body_str);
  posix::close(this->w);
  posix::_exit(0);
}

Job::Job() 
    : header_(obj_header()) {
  this->state = job_state_e::Running;
}

void Job::DisplayJob(int job_id, mylib::Writer* f, int style) {
  StackRoots _roots({&f});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

runtime_asdl::job_state_t Job::State() {
  return this->state;
}

runtime_asdl::wait_status_t* Job::JobWait(process::Waiter* waiter) {
  StackRoots _roots({&waiter});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

Process::Process(process::Thunk* thunk, process::JobState* job_state, dev::Tracer* tracer) : Job() {
  FIELD_MASK(header_) |= Process::field_mask();
  this->thunk = thunk;
  this->job_state = job_state;
  this->tracer = tracer;
  this->parent_pipeline = nullptr;
  this->state_changes = Alloc<List<process::ChildStateChange*>>();
  this->close_r = -1;
  this->close_w = -1;
  this->pid = -1;
  this->status = -1;
}

void Process::Init_ParentPipeline(process::Pipeline* pi) {
  StackRoots _roots({&pi});

  this->parent_pipeline = pi;
}

void Process::DisplayJob(int job_id, mylib::Writer* f, int style) {
  Str* job_id_str = nullptr;
  StackRoots _roots({&f, &job_id_str});

  if (job_id == -1) {
    job_id_str = str344;
  }
  else {
    job_id_str = StrFormat("%%%d", job_id);
  }
  if (style == STYLE_PID_ONLY) {
    f->write(StrFormat("%d\n", this->pid));
  }
  else {
    f->write(StrFormat("%s %d %7s ", job_id_str, this->pid, _JobStateStr(this->state)));
    f->write(this->thunk->UserString());
    f->write(str348);
  }
}

void Process::AddStateChange(process::ChildStateChange* s) {
  StackRoots _roots({&s});

  this->state_changes->append(s);
}

void Process::AddPipeToClose(int r, int w) {
  this->close_r = r;
  this->close_w = w;
}

void Process::MaybeClosePipe() {
  if (this->close_r != -1) {
    posix::close(this->close_r);
    posix::close(this->close_w);
  }
}

int Process::Start(runtime_asdl::trace_t* why) {
  int pid;
  StackRoots _roots({&why});

  pid = posix::fork();
  if (pid < 0) {
    e_die(str349);
  }
  else {
    if (pid == 0) {
      pyos::Sigaction(SIGPIPE, SIG_DFL);
      pyos::Sigaction(SIGQUIT, SIG_DFL);
      pyos::Sigaction(SIGTSTP, SIG_DFL);
      pyos::Sigaction(SIGTTOU, SIG_DFL);
      pyos::Sigaction(SIGTTIN, SIG_DFL);
      for (ListIter<process::ChildStateChange*> it(this->state_changes); !it.Done(); it.Next()) {
        process::ChildStateChange* st = it.Value();
        StackRoots _for({&st      });
        st->Apply();
      }
      this->tracer->SetProcess(posix::getpid());
      this->thunk->Run();
    }
  }
  this->tracer->OnProcessStart(pid, why);
  this->pid = pid;
  this->job_state->AddChildProcess(pid, this);
  return pid;
}

int Process::Wait(process::Waiter* waiter) {
  StackRoots _roots({&waiter});

  while (this->state == job_state_e::Running) {
    if (waiter->WaitForOne() == W1_ECHILD) {
      break;
    }
  }
  return this->status;
}

runtime_asdl::wait_status_t* Process::JobWait(process::Waiter* waiter) {
  int result;
  StackRoots _roots({&waiter});

  while (this->state == job_state_e::Running) {
    result = waiter->WaitForOne();
    if (result >= 0) {
      return Alloc<wait_status::Cancelled>(result);
    }
    if (result == W1_ECHILD) {
      break;
    }
  }
  return Alloc<wait_status::Proc>(this->status);
}

void Process::WhenStopped() {
  this->state = job_state_e::Stopped;
}

void Process::WhenDone(int pid, int status) {
  this->status = status;
  this->state = job_state_e::Done;
  if (this->parent_pipeline) {
    this->parent_pipeline->WhenDone(pid, status);
  }
}

int Process::RunWait(process::Waiter* waiter, runtime_asdl::trace_t* why) {
  StackRoots _roots({&waiter, &why});

  this->Start(why);
  return this->Wait(waiter);
}

ctx_Pipe::ctx_Pipe(process::FdState* fd_state, int fd) 
    : header_(obj_header()) {
  fd_state->PushStdinFromPipe(fd);
  this->fd_state = fd_state;
}

ctx_Pipe::~ctx_Pipe(){
  this->fd_state->Pop();
}

Pipeline::Pipeline(bool sigpipe_status_ok) : Job() {
  FIELD_MASK(header_) |= Pipeline::field_mask();
  this->procs = Alloc<List<process::Process*>>();
  this->pids = Alloc<List<int>>();
  this->pipe_status = Alloc<List<int>>();
  this->status = -1;
  this->last_thunk = nullptr;
  this->last_pipe = nullptr;
  this->sigpipe_status_ok = sigpipe_status_ok;
}

void Pipeline::DisplayJob(int job_id, mylib::Writer* f, int style) {
  int i;
  Str* job_id_str = nullptr;
  StackRoots _roots({&f, &job_id_str});

  if (style == STYLE_PID_ONLY) {
    f->write(StrFormat("%d\n", this->procs->index_(0)->pid));
  }
  else {
    i = 0;
    for (ListIter<process::Process*> it(this->procs); !it.Done(); it.Next(), ++i) {
      process::Process* proc = it.Value();
      StackRoots _for({&proc    });
      if (i == 0) {
        job_id_str = StrFormat("%%%d", job_id);
      }
      else {
        job_id_str = str352;
        f->write(StrFormat("%s %d %7s ", job_id_str, proc->pid, _JobStateStr(proc->state)));
        f->write(proc->thunk->UserString());
        f->write(str354);
      }
    }
  }
}

void Pipeline::DebugPrint() {
  print(StrFormat("Pipeline in state %s", _JobStateStr(this->state)));
}

void Pipeline::Add(process::Process* p) {
  int r;
  int w;
  process::Process* prev = nullptr;
  StackRoots _roots({&p, &prev});

  if (len(this->procs) == 0) {
    this->procs->append(p);
    return ;
  }
  Tuple2<int, int> tup1 = posix::pipe();
  r = tup1.at0();
  w = tup1.at1();
  prev = this->procs->index_(-1);
  prev->AddStateChange(Alloc<StdoutToPipe>(r, w));
  p->AddStateChange(Alloc<StdinFromPipe>(r, w));
  p->AddPipeToClose(r, w);
  this->procs->append(p);
}

void Pipeline::AddLast(Tuple2<cmd_eval::CommandEvaluator*, syntax_asdl::command_t*>* thunk) {
  int r;
  int w;
  process::Process* prev = nullptr;
  StackRoots _roots({&thunk, &prev});

  this->last_thunk = thunk;
  if (len(this->procs) == 0) {
    return ;
  }
  Tuple2<int, int> tup2 = posix::pipe();
  r = tup2.at0();
  w = tup2.at1();
  prev = this->procs->index_(-1);
  prev->AddStateChange(Alloc<StdoutToPipe>(r, w));
  this->last_pipe = (Alloc<Tuple2<int, int>>(r, w));
}

void Pipeline::Start(process::Waiter* waiter) {
  int i;
  int pid;
  StackRoots _roots({&waiter});

  i = 0;
  for (ListIter<process::Process*> it(this->procs); !it.Done(); it.Next(), ++i) {
    process::Process* proc = it.Value();
    StackRoots _for({&proc  });
    pid = proc->Start(Alloc<trace::PipelinePart>());
    this->pids->append(pid);
    this->pipe_status->append(-1);
    proc->MaybeClosePipe();
  }
  if (this->last_thunk) {
    this->pipe_status->append(-1);
  }
}

int Pipeline::LastPid() {
  return this->pids->index_(-1);
}

List<int>* Pipeline::Wait(process::Waiter* waiter) {
  StackRoots _roots({&waiter});

  while (this->state == job_state_e::Running) {
    if (waiter->WaitForOne() == W1_ECHILD) {
      break;
    }
  }
  return this->pipe_status;
}

runtime_asdl::wait_status_t* Pipeline::JobWait(process::Waiter* waiter) {
  int result;
  StackRoots _roots({&waiter});

  while (this->state == job_state_e::Running) {
    result = waiter->WaitForOne();
    if (result >= 0) {
      return Alloc<wait_status::Cancelled>(result);
    }
    if (result == W1_ECHILD) {
      break;
    }
  }
  return Alloc<wait_status::Pipeline>(this->pipe_status);
}

List<int>* Pipeline::Run(process::Waiter* waiter, process::FdState* fd_state) {
  cmd_eval::CommandEvaluator* cmd_ev = nullptr;
  syntax_asdl::command_t* last_node = nullptr;
  int r;
  int w;
  StackRoots _roots({&waiter, &fd_state, &cmd_ev, &last_node});

  this->Start(waiter);
  Tuple2<cmd_eval::CommandEvaluator*, syntax_asdl::command_t*>* tup3 = this->last_thunk;
  cmd_ev = tup3->at0();
  last_node = tup3->at1();
  if (this->last_pipe != nullptr) {
    Tuple2<int, int>* tup4 = this->last_pipe;
    r = tup4->at0();
    w = tup4->at1();
    posix::close(w);
    {  // with
      ctx_Pipe ctx{fd_state, r};

      cmd_ev->ExecuteAndCatch(last_node);
    }
    posix::close(r);
  }
  else {
    if (len(this->procs)) {
      cmd_ev->ExecuteAndCatch(last_node);
    }
    else {
      cmd_ev->_Execute(last_node);
    }
  }
  this->pipe_status->set(-1, cmd_ev->LastStatus());
  if (this->AllDone()) {
    this->state = job_state_e::Done;
  }
  if (len(this->procs)) {
    return this->Wait(waiter);
  }
  else {
    return this->pipe_status;
  }
}

bool Pipeline::AllDone() {
  for (ListIter<int> it(this->pipe_status); !it.Done(); it.Next()) {
    int status = it.Value();
    if (status == -1) {
      return false;
    }
  }
  return true;
}

void Pipeline::WhenDone(int pid, int status) {
  int i;
  i = this->pids->index(pid);
  if ((status == 141 and this->sigpipe_status_ok)) {
    status = 0;
  }
  this->pipe_status->set(i, status);
  if (this->AllDone()) {
    this->status = this->pipe_status->index_(-1);
    this->state = job_state_e::Done;
  }
}

Str* _JobStateStr(runtime_asdl::job_state_t i) {
  return StrFromC(job_state_str(i))->slice(10);
}

JobState::JobState() 
    : header_(obj_header()) {
  this->jobs = Alloc<Dict<int, process::Job*>>();
  this->child_procs = Alloc<Dict<int, process::Process*>>();
  this->debug_pipelines = Alloc<List<process::Pipeline*>>();
  this->last_stopped_pid = -1;
  this->job_id = 1;
}

void JobState::WhenStopped(int pid) {
  this->last_stopped_pid = pid;
}

int JobState::GetLastStopped() {
  return this->last_stopped_pid;
}

int JobState::WhenContinued(int pid, process::Waiter* waiter) {
  process::Process* job = nullptr;
  StackRoots _roots({&waiter, &job});

  if (pid == this->last_stopped_pid) {
    this->last_stopped_pid = -1;
  }
  job = this->JobFromPid(pid);
  job->state = job_state_e::Running;
  return job->Wait(waiter);
}

void JobState::WhenDone(int pid) {
  if (pid == this->last_stopped_pid) {
    this->last_stopped_pid = -1;
  }
  mylib::dict_erase(this->jobs, pid);
}

int JobState::AddJob(process::Job* job) {
  int job_id;
  StackRoots _roots({&job});

  job_id = this->job_id;
  this->jobs->set(job_id, job);
  this->job_id += 1;
  return job_id;
}

void JobState::AddChildProcess(int pid, process::Process* proc) {
  StackRoots _roots({&proc});

  this->child_procs->set(pid, proc);
}

void JobState::AddPipeline(process::Pipeline* pi) {
  StackRoots _roots({&pi});

}

process::Process* JobState::JobFromPid(int pid) {
  return this->child_procs->get(pid);
}

void JobState::DisplayJobs(int style) {
  mylib::Writer* f = nullptr;
  StackRoots _roots({&f});

  f = mylib::Stdout();
  for (DictIter<int, process::Job*> it(this->jobs); !it.Done(); it.Next()) {
    int job_id = it.Key();
    process::Job* job = it.Value();
    job->DisplayJob(job_id, f, style);
  }
}

void JobState::DebugPrint() {
  mylib::Writer* f = nullptr;
  StackRoots _roots({&f});

  f = mylib::Stdout();
  f->write(str356);
  f->write(str357);
  for (DictIter<int, process::Process*> it(this->child_procs); !it.Done(); it.Next()) {
    int pid = it.Key();
    process::Process* proc = it.Value();
    proc->DisplayJob(-1, f, STYLE_DEFAULT);
  }
  if (len(this->debug_pipelines)) {
    f->write(str358);
    f->write(str359);
    for (ListIter<process::Pipeline*> it(this->debug_pipelines); !it.Done(); it.Next()) {
      process::Pipeline* pi = it.Value();
      StackRoots _for({&pi    });
      pi->DebugPrint();
    }
  }
}

void JobState::ListRecent() {
  ;  // pass
}

int JobState::NumRunning() {
  int count;
  count = 0;
  for (DictIter<int, process::Job*> it(this->jobs); !it.Done(); it.Next()) {
    int _ = it.Key();
    process::Job* job = it.Value();
    if (job->State() == job_state_e::Running) {
      count += 1;
    }
  }
  return count;
}
int W1_OK = -2;
int W1_ECHILD = -3;

Waiter::Waiter(process::JobState* job_state, optview::Exec* exec_opts, pyos::SignalSafe* signal_safe, dev::Tracer* tracer) 
    : header_(obj_header()) {
  this->job_state = job_state;
  this->exec_opts = exec_opts;
  this->signal_safe = signal_safe;
  this->tracer = tracer;
  this->last_status = 127;
}

int Waiter::WaitForOne() {
  int pid;
  int status;
  int err_num;
  process::Process* proc = nullptr;
  int term_sig;
  StackRoots _roots({&proc});

  Tuple2<int, int> tup5 = pyos::WaitPid();
  pid = tup5.at0();
  status = tup5.at1();
  if (pid < 0) {
    err_num = status;
    if (err_num == ECHILD) {
      return W1_ECHILD;
    }
    else {
      if (err_num == EINTR) {
        return this->signal_safe->LastSignal();
      }
      else {
        assert(0);  // AssertionError
      }
    }
  }
  if (!dict_contains(this->job_state->child_procs, pid)) {
    print_stderr(StrFormat("osh: PID %d stopped, but osh didn't start it", pid));
    return W1_OK;
  }
  proc = this->job_state->child_procs->index_(pid);
  if (WIFSIGNALED(status)) {
    term_sig = WTERMSIG(status);
    status = (128 + term_sig);
    if (term_sig == SIGINT) {
      print(str361);
    }
    this->job_state->WhenDone(pid);
    proc->WhenDone(pid, status);
  }
  else {
    if (WIFEXITED(status)) {
      status = WEXITSTATUS(status);
      this->job_state->WhenDone(pid);
      proc->WhenDone(pid, status);
    }
    else {
      if (WIFSTOPPED(status)) {
        mylib::print_stderr(str362);
        mylib::print_stderr(StrFormat("[PID %d] Stopped", pid));
        this->job_state->WhenStopped(pid);
        proc->WhenStopped();
      }
      else {
        assert(0);  // AssertionError
      }
    }
  }
  this->last_status = status;
  this->tracer->OnProcessEnd(pid, status);
  return W1_OK;
}

}  // define namespace process

namespace pyerror {  // define

int NO_SPID = -1;

[[noreturn]] void e_usage(Str* msg, int span_id) {
  StackRoots _roots({&msg});

  throw Alloc<error::Usage>(msg, span_id);
}

[[noreturn]] void e_strict(Str* msg, syntax_asdl::loc_t* location) {
  StackRoots _roots({&msg, &location});

  throw Alloc<error::Strict>(msg, location);
}

[[noreturn]] void p_die(Str* msg, syntax_asdl::loc_t* location) {
  StackRoots _roots({&msg, &location});

  throw Alloc<error::Parse>(msg, location);
}

[[noreturn]] void e_die(Str* msg, syntax_asdl::loc_t* location) {
  StackRoots _roots({&msg, &location});

  throw Alloc<error::FatalRuntime>(1, msg, location);
}

[[noreturn]] void e_die_status(int status, Str* msg, syntax_asdl::loc_t* location) {
  StackRoots _roots({&msg, &location});

  throw Alloc<error::FatalRuntime>(status, msg, location);
}

}  // define namespace pyerror

namespace shell_native {  // define

using option_asdl::builtin_i;
using runtime_asdl::cmd_value;

runtime_asdl::cmd_value__Argv* MakeBuiltinArgv(List<Str*>* argv1) {
  List<Str*>* argv = nullptr;
  StackRoots _roots({&argv1, &argv});

  argv = NewList<Str*>(std::initializer_list<Str*>{str364});
  argv->extend(argv1);
  return Alloc<cmd_value::Argv>(argv, list_repeat(runtime::NO_SPID, len(argv)), nullptr);
}

void AddPure(Dict<int, vm::_Builtin*>* b, state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, Dict<Str*, bool>* modules, state::MutableOpts* mutable_opts, Dict<Str*, Str*>* aliases, state::SearchPath* search_path, ui::ErrorFormatter* errfmt) {
  builtin_pure::Boolean* true_ = nullptr;
  StackRoots _roots({&b, &mem, &procs, &modules, &mutable_opts, &aliases, &search_path, &errfmt, &true_});

  b->set(builtin_i::set, Alloc<builtin_pure::Set>(mutable_opts, mem));
  b->set(builtin_i::alias, Alloc<builtin_pure::Alias>(aliases, errfmt));
  b->set(builtin_i::unalias, Alloc<builtin_pure::UnAlias>(aliases, errfmt));
  b->set(builtin_i::hash, Alloc<builtin_pure::Hash>(search_path));
  b->set(builtin_i::getopts, Alloc<builtin_pure::GetOpts>(mem, errfmt));
  true_ = Alloc<builtin_pure::Boolean>(0);
  b->set(builtin_i::colon, true_);
  b->set(builtin_i::true_, true_);
  b->set(builtin_i::false_, Alloc<builtin_pure::Boolean>(1));
  b->set(builtin_i::shift, Alloc<builtin_assign::Shift>(mem));
  b->set(builtin_i::type, Alloc<builtin_meta::Type>(procs, aliases, search_path, errfmt));
  b->set(builtin_i::module, Alloc<builtin_pure::Module>(modules, mem->exec_opts, errfmt));
}

void AddIO(Dict<int, vm::_Builtin*>* b, state::Mem* mem, state::DirStack* dir_stack, optview::Exec* exec_opts, split::SplitContext* splitter, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt) {
  StackRoots _roots({&b, &mem, &dir_stack, &exec_opts, &splitter, &parse_ctx, &errfmt});

  b->set(builtin_i::echo, Alloc<builtin_pure::Echo>(exec_opts));
  b->set(builtin_i::cat, Alloc<builtin_misc::Cat>());
  b->set(builtin_i::test, Alloc<builtin_bracket::Test>(false, exec_opts, mem, errfmt));
  b->set(builtin_i::bracket, Alloc<builtin_bracket::Test>(true, exec_opts, mem, errfmt));
  b->set(builtin_i::pushd, Alloc<builtin_misc::Pushd>(mem, dir_stack, errfmt));
  b->set(builtin_i::popd, Alloc<builtin_misc::Popd>(mem, dir_stack, errfmt));
  b->set(builtin_i::dirs, Alloc<builtin_misc::Dirs>(mem, dir_stack, errfmt));
  b->set(builtin_i::pwd, Alloc<builtin_misc::Pwd>(mem, errfmt));
  b->set(builtin_i::times, Alloc<builtin_misc::Times>());
}

void AddProcess(Dict<int, vm::_Builtin*>* b, state::Mem* mem, vm::_Executor* shell_ex, process::ExternalProgram* ext_prog, process::FdState* fd_state, process::JobState* job_state, process::Waiter* waiter, dev::Tracer* tracer, state::SearchPath* search_path, ui::ErrorFormatter* errfmt) {
  StackRoots _roots({&b, &mem, &shell_ex, &ext_prog, &fd_state, &job_state, &waiter, &tracer, &search_path, &errfmt});

  b->set(builtin_i::exec_, Alloc<builtin_process2::Exec>(mem, ext_prog, fd_state, search_path, errfmt));
  b->set(builtin_i::umask, Alloc<builtin_process2::Umask>());
  b->set(builtin_i::wait, Alloc<builtin_process2::Wait>(waiter, job_state, mem, tracer, errfmt));
  b->set(builtin_i::jobs, Alloc<builtin_process::Jobs>(job_state));
  b->set(builtin_i::fg, Alloc<builtin_process::Fg>(job_state, waiter));
  b->set(builtin_i::bg, Alloc<builtin_process::Bg>(job_state));
  b->set(builtin_i::fork, Alloc<builtin_process::Fork>(shell_ex));
  b->set(builtin_i::forkwait, Alloc<builtin_process::ForkWait>(shell_ex));
}

void AddMeta(Dict<int, vm::_Builtin*>* builtins, vm::_Executor* shell_ex, state::MutableOpts* mutable_opts, state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, Dict<Str*, Str*>* aliases, state::SearchPath* search_path, ui::ErrorFormatter* errfmt) {
  StackRoots _roots({&builtins, &shell_ex, &mutable_opts, &mem, &procs, &aliases, &search_path, &errfmt});

  builtins->set(builtin_i::builtin, Alloc<builtin_meta::Builtin>(shell_ex, errfmt));
  builtins->set(builtin_i::command, Alloc<builtin_meta::Command>(shell_ex, procs, aliases, search_path));
  builtins->set(builtin_i::runproc, Alloc<builtin_meta::RunProc>(shell_ex, procs, errfmt));
  builtins->set(builtin_i::boolstatus, Alloc<builtin_meta::BoolStatus>(shell_ex, errfmt));
}

void AddBlock(Dict<int, vm::_Builtin*>* builtins, state::Mem* mem, state::MutableOpts* mutable_opts, state::DirStack* dir_stack, cmd_eval::CommandEvaluator* cmd_ev, vm::_Executor* shell_ex, state::Hay* hay_state, ui::ErrorFormatter* errfmt) {
  StackRoots _roots({&builtins, &mem, &mutable_opts, &dir_stack, &cmd_ev, &shell_ex, &hay_state, &errfmt});

  builtins->set(builtin_i::cd, Alloc<builtin_misc::Cd>(mem, dir_stack, cmd_ev, errfmt));
  builtins->set(builtin_i::shopt, Alloc<builtin_pure::Shopt>(mutable_opts, cmd_ev));
  builtins->set(builtin_i::try_, Alloc<builtin_meta::Try>(mutable_opts, mem, cmd_ev, shell_ex, errfmt));
}

Dict<int, vm::_AssignBuiltin*>* InitAssignmentBuiltins(state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, ui::ErrorFormatter* errfmt) {
  Dict<int, vm::_AssignBuiltin*>* assign_b = nullptr;
  builtin_assign::NewVar* new_var = nullptr;
  StackRoots _roots({&mem, &procs, &errfmt, &assign_b, &new_var});

  assign_b = Alloc<Dict<int, vm::_AssignBuiltin*>>();
  new_var = Alloc<builtin_assign::NewVar>(mem, procs, errfmt);
  assign_b->set(builtin_i::declare, new_var);
  assign_b->set(builtin_i::typeset, new_var);
  assign_b->set(builtin_i::local, new_var);
  assign_b->set(builtin_i::export_, Alloc<builtin_assign::Export>(mem, errfmt));
  assign_b->set(builtin_i::readonly, Alloc<builtin_assign::Readonly>(mem, errfmt));
  return assign_b;
}

}  // define namespace shell_native

namespace state {  // define

using id_kind_asdl::Id;
using option_asdl::option_i;
using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value_t;
using runtime_asdl::value__Str;
using runtime_asdl::value__MaybeStrArray;
using runtime_asdl::value__AssocArray;
using runtime_asdl::lvalue_e;
using runtime_asdl::lvalue_t;
using runtime_asdl::lvalue__Named;
using runtime_asdl::lvalue__Indexed;
using runtime_asdl::lvalue__Keyed;
using runtime_asdl::scope_e;
using runtime_asdl::scope_t;
using runtime_asdl::hay_node;
using syntax_asdl::loc;
using syntax_asdl::loc_t;
using types_asdl::opt_group_i;
using pyerror::e_usage;
using pyerror::e_die;
using mylib::print_stderr;
Str* _READLINE_DELIMS = str365;
int LINE_ZERO = -2;
int SetReadOnly = (1 << 0);
int ClearReadOnly = (1 << 1);
int SetExport = (1 << 2);
int ClearExport = (1 << 3);
int SetNameref = (1 << 4);
int ClearNameref = (1 << 5);

SearchPath::SearchPath(state::Mem* mem) 
    : header_(obj_header()) {
  this->mem = mem;
  this->cache = Alloc<Dict<Str*, Str*>>();
}

Str* SearchPath::Lookup(Str* name, bool exec_required) {
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  List<Str*>* path_list = nullptr;
  Str* full_path = nullptr;
  bool found;
  StackRoots _roots({&name, &val, &UP_val, &path_list, &full_path});

  if (str_contains(name, str366)) {
    if (path_stat::exists(name)) {
      return name;
    }
    else {
      return nullptr;
    }
  }
  val = this->mem->GetValue(str367);
  UP_val = val;
  if (val->tag_() == value_e::Str) {
    value__Str* val = static_cast<value__Str*>(UP_val);
    path_list = val->s->split(str368);
  }
  else {
    path_list = Alloc<List<Str*>>();
  }
  for (ListIter<Str*> it(path_list); !it.Done(); it.Next()) {
    Str* path_dir = it.Value();
    StackRoots _for({&path_dir  });
    full_path = os_path::join(path_dir, name);
    if (exec_required) {
      found = posix::access(full_path, X_OK);
    }
    else {
      found = path_stat::exists(full_path);
    }
    if (found) {
      return full_path;
    }
  }
  return nullptr;
}

Str* SearchPath::CachedLookup(Str* name) {
  Str* full_path = nullptr;
  StackRoots _roots({&name, &full_path});

  if (dict_contains(this->cache, name)) {
    return this->cache->index_(name);
  }
  full_path = this->Lookup(name);
  if (full_path != nullptr) {
    this->cache->set(name, full_path);
  }
  return full_path;
}

void SearchPath::MaybeRemoveEntry(Str* name) {
  StackRoots _roots({&name});

  mylib::dict_erase(this->cache, name);
}

void SearchPath::ClearCache() {
  this->cache->clear();
}

List<Str*>* SearchPath::CachedCommands() {
  return this->cache->values();
}

ctx_Source::ctx_Source(state::Mem* mem, Str* source_name, List<Str*>* argv) 
    : header_(obj_header()) {
  mem->PushSource(source_name, argv);
  this->mem = mem;
  this->argv = argv;
}

ctx_Source::~ctx_Source(){
  this->mem->PopSource(this->argv);
}

ctx_Option::ctx_Option(state::MutableOpts* mutable_opts, List<int>* opt_nums, bool b) 
    : header_(obj_header()) {
  for (ListIter<int> it(opt_nums); !it.Done(); it.Next()) {
    int opt_num = it.Value();
    mutable_opts->Push(opt_num, b);
    if (opt_num == option_i::errexit) {
      mutable_opts->errexit_disabled_spid->append(runtime::NO_SPID);
    }
  }
  this->mutable_opts = mutable_opts;
  this->opt_nums = opt_nums;
}

ctx_Option::~ctx_Option(){
  for (ListIter<int> it(this->opt_nums); !it.Done(); it.Next()) {
    int opt_num = it.Value();
    if (opt_num == option_i::errexit) {
      this->mutable_opts->errexit_disabled_spid->pop();
    }
    this->mutable_opts->Pop(opt_num);
  }
}

ctx_AssignBuiltin::ctx_AssignBuiltin(state::MutableOpts* mutable_opts) 
    : header_(obj_header()) {
  this->strict = false;
  if (mutable_opts->Get(option_i::strict_errexit)) {
    mutable_opts->Push(option_i::_allow_command_sub, false);
    mutable_opts->Push(option_i::_allow_process_sub, false);
    this->strict = true;
  }
  this->mutable_opts = mutable_opts;
}

ctx_AssignBuiltin::~ctx_AssignBuiltin(){
  if (this->strict) {
    this->mutable_opts->Pop(option_i::_allow_command_sub);
    this->mutable_opts->Pop(option_i::_allow_process_sub);
  }
}

ctx_OilExpr::ctx_OilExpr(state::MutableOpts* mutable_opts) 
    : header_(obj_header()) {
  mutable_opts->Push(option_i::command_sub_errexit, true);
  this->mutable_opts = mutable_opts;
}

ctx_OilExpr::~ctx_OilExpr(){
  this->mutable_opts->Pop(option_i::command_sub_errexit);
}

ctx_ErrExit::ctx_ErrExit(state::MutableOpts* mutable_opts, bool b, int span_id) 
    : header_(obj_header()) {
  mutable_opts->Push(option_i::errexit, b);
  mutable_opts->errexit_disabled_spid->append(span_id);
  this->strict = false;
  if (mutable_opts->Get(option_i::strict_errexit)) {
    mutable_opts->Push(option_i::_allow_command_sub, false);
    mutable_opts->Push(option_i::_allow_process_sub, false);
    this->strict = true;
  }
  this->mutable_opts = mutable_opts;
}

ctx_ErrExit::~ctx_ErrExit(){
  this->mutable_opts->errexit_disabled_spid->pop();
  this->mutable_opts->Pop(option_i::errexit);
  if (this->strict) {
    this->mutable_opts->Pop(option_i::_allow_command_sub);
    this->mutable_opts->Pop(option_i::_allow_process_sub);
  }
}

ctx_HayNode::ctx_HayNode(state::Hay* hay_state, Str* hay_name) 
    : header_(obj_header()) {
  this->hay_state = hay_state;
  this->hay_state->Push(hay_name);
}

ctx_HayNode::~ctx_HayNode(){
  this->hay_state->Pop();
}

ctx_HayEval::ctx_HayEval(state::Hay* hay_state, state::MutableOpts* mutable_opts, state::Mem* mem) 
    : header_(obj_header()) {
  this->hay_state = hay_state;
  this->mutable_opts = mutable_opts;
  this->mem = mem;
  if (mutable_opts->Get(option_i::_running_hay)) {
    e_die(str369);
  }
  for (ListIter<int> it(consts::OIL_ALL); !it.Done(); it.Next()) {
    int opt_num = it.Value();
    mutable_opts->Push(opt_num, true);
  }
  mutable_opts->Push(option_i::_running_hay, true);
  this->hay_state->PushEval();
  this->mem->PushTemp();
}

ctx_HayEval::~ctx_HayEval(){
  this->mem->PopTemp();
  this->hay_state->PopEval();
  this->mutable_opts->Pop(option_i::_running_hay);
  for (ListIter<int> it(consts::OIL_ALL); !it.Done(); it.Next()) {
    int opt_num = it.Value();
    this->mutable_opts->Pop(opt_num);
  }
}

Hay::Hay() 
    : header_(obj_header()) {
  auto* ch = NewDict<Str*, runtime_asdl::hay_node*>();
  this->root_defs = Alloc<hay_node>(ch);
  this->cur_defs = this->root_defs;
  this->def_stack = NewList<runtime_asdl::hay_node*>(std::initializer_list<runtime_asdl::hay_node*>{this->root_defs});
  Dict<Str*, void*>* node = this->_MakeOutputNode();
  this->result_stack = NewList<Dict<Str*, void*>*>(std::initializer_list<Dict<Str*, void*>*>{node});
  this->output = nullptr;
}

Dict<Str*, void*>* Hay::_MakeOutputNode() {
  auto* d = NewDict<Str*, void*>();
  d->set(str370, nullptr);
  d->set(str371, Alloc<List<void*>>());
  return d;
}

void Hay::PushEval() {
  Dict<Str*, void*>* node = nullptr;
  StackRoots _roots({&node});

  node = this->_MakeOutputNode();
  this->result_stack = NewList<Dict<Str*, void*>*>(std::initializer_list<Dict<Str*, void*>*>{node});
  this->output = nullptr;
}

void Hay::PopEval() {
  Dict<Str*, void*>* node = nullptr;
  StackRoots _roots({&node});

  this->output = this->result_stack->index_(0);
  node = this->_MakeOutputNode();
  this->result_stack = NewList<Dict<Str*, void*>*>(std::initializer_list<Dict<Str*, void*>*>{node});
}

bool Hay::Resolve(Str* first_word) {
  StackRoots _roots({&first_word});

  return dict_contains(this->cur_defs->children, first_word);
}

void Hay::DefinePath(List<Str*>* path) {
  runtime_asdl::hay_node* current = nullptr;
  StackRoots _roots({&path, &current});

  current = this->root_defs;
  for (ListIter<Str*> it(path); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (!dict_contains(current->children, name)) {
      auto* ch = NewDict<Str*, runtime_asdl::hay_node*>();
      current->children->set(name, Alloc<hay_node>(ch));
    }
    current = current->children->index_(name);
  }
}

void Hay::Reset() {
  auto* ch = NewDict<Str*, runtime_asdl::hay_node*>();
  this->root_defs = Alloc<hay_node>(ch);
  this->cur_defs = this->root_defs;
  this->PopEval();
}

void Hay::Push(Str* hay_name) {
  StackRoots _roots({&hay_name});

  if (hay_name == nullptr) {
    this->def_stack->append(this->cur_defs);
  }
  else {
    this->cur_defs = this->cur_defs->children->index_(hay_name);
    this->def_stack->append(this->cur_defs);
  }
}

void Hay::Pop() {
  this->def_stack->pop();
  this->cur_defs = this->def_stack->index_(-1);
}

OptHook::OptHook() 
    : header_(obj_header()) {
  ;  // pass
}

bool OptHook::OnChange(List<bool>* opt0_array, Str* opt_name, bool b) {
  StackRoots _roots({&opt0_array, &opt_name});

  return true;
}

List<bool>* InitOpts() {
  List<bool>* opt0_array = nullptr;
  StackRoots _roots({&opt0_array});

  opt0_array = list_repeat(false, option_i::ARRAY_SIZE);
  for (ListIter<int> it(consts::DEFAULT_TRUE); !it.Done(); it.Next()) {
    int opt_num = it.Value();
    opt0_array->set(opt_num, true);
  }
  return opt0_array;
}

Tuple3<optview::Parse*, optview::Exec*, state::MutableOpts*> MakeOpts(state::Mem* mem, state::OptHook* opt_hook) {
  List<bool>* opt0_array = nullptr;
  List<bool>* no_stack = nullptr;
  List<List<bool>*>* opt_stacks = nullptr;
  optview::Parse* parse_opts = nullptr;
  optview::Exec* exec_opts = nullptr;
  state::MutableOpts* mutable_opts = nullptr;
  StackRoots _roots({&mem, &opt_hook, &opt0_array, &no_stack, &opt_stacks, &parse_opts, &exec_opts, &mutable_opts});

  opt0_array = InitOpts();
  no_stack = nullptr;
  opt_stacks = list_repeat(no_stack, option_i::ARRAY_SIZE);
  parse_opts = Alloc<optview::Parse>(opt0_array, opt_stacks);
  exec_opts = Alloc<optview::Exec>(opt0_array, opt_stacks);
  mutable_opts = Alloc<MutableOpts>(mem, opt0_array, opt_stacks, opt_hook);
  return Tuple3<optview::Parse*, optview::Exec*, state::MutableOpts*>(parse_opts, exec_opts, mutable_opts);
}

void _SetGroup(List<bool>* opt0_array, List<int>* opt_nums, bool b) {
  bool b2;
  StackRoots _roots({&opt0_array, &opt_nums});

  for (ListIter<int> it(opt_nums); !it.Done(); it.Next()) {
    int opt_num = it.Value();
    b2 = list_contains(consts::DEFAULT_TRUE, opt_num) ? !b : b;
    opt0_array->set(opt_num, b2);
  }
}

optview::Parse* MakeOilOpts() {
  List<bool>* opt0_array = nullptr;
  List<bool>* no_stack = nullptr;
  List<List<bool>*>* opt_stacks = nullptr;
  optview::Parse* parse_opts = nullptr;
  StackRoots _roots({&opt0_array, &no_stack, &opt_stacks, &parse_opts});

  opt0_array = InitOpts();
  _SetGroup(opt0_array, consts::OIL_ALL, true);
  no_stack = nullptr;
  opt_stacks = list_repeat(no_stack, option_i::ARRAY_SIZE);
  parse_opts = Alloc<optview::Parse>(opt0_array, opt_stacks);
  return parse_opts;
}

int _AnyOptionNum(Str* opt_name) {
  int opt_num;
  StackRoots _roots({&opt_name});

  opt_num = consts::OptionNum(opt_name);
  if (opt_num == 0) {
    e_usage(StrFormat("got invalid option %r", opt_name));
  }
  return opt_num;
}

int _SetOptionNum(Str* opt_name) {
  int opt_num;
  StackRoots _roots({&opt_name});

  opt_num = consts::OptionNum(opt_name);
  if (opt_num == 0) {
    e_usage(StrFormat("got invalid option %r", opt_name));
  }
  if (!list_contains(consts::SET_OPTION_NUMS, opt_num)) {
    e_usage(StrFormat("invalid option %r (try shopt)", opt_name));
  }
  return opt_num;
}

MutableOpts::MutableOpts(state::Mem* mem, List<bool>* opt0_array, List<List<bool>*>* opt_stacks, state::OptHook* opt_hook) 
    : header_(obj_header()) {
  this->mem = mem;
  this->opt0_array = opt0_array;
  this->opt_stacks = opt_stacks;
  this->errexit_disabled_spid = Alloc<List<int>>();
  this->opt_hook = opt_hook;
}

void MutableOpts::Init() {
  runtime_asdl::value_t* UP_shellopts = nullptr;
  StackRoots _roots({&UP_shellopts});

  UP_shellopts = this->mem->GetValue(str375);
  if (UP_shellopts->tag_() == value_e::Str) {
    value__Str* shellopts = static_cast<value__Str*>(UP_shellopts);
    this->_InitOptionsFromEnv(shellopts->s);
  }
}

void MutableOpts::_InitOptionsFromEnv(Str* shellopts) {
  List<Str*>* lookup = nullptr;
  Str* name = nullptr;
  StackRoots _roots({&shellopts, &lookup, &name});

  lookup = shellopts->split(str376);
  for (ListIter<int> it(consts::SET_OPTION_NUMS); !it.Done(); it.Next()) {
    int opt_num = it.Value();
    name = consts::OptionName(opt_num);
    if (list_contains(lookup, name)) {
      this->_SetOldOption(name, true);
    }
  }
}

void MutableOpts::Push(int opt_num, bool b) {
  List<bool>* overlay = nullptr;
  StackRoots _roots({&overlay});

  overlay = this->opt_stacks->index_(opt_num);
  if ((overlay == nullptr or len(overlay) == 0)) {
    this->opt_stacks->set(opt_num, NewList<bool>(std::initializer_list<bool>{b}));
  }
  else {
    overlay->append(b);
  }
}

bool MutableOpts::Pop(int opt_num) {
  List<bool>* overlay = nullptr;
  StackRoots _roots({&overlay});

  overlay = this->opt_stacks->index_(opt_num);
  return overlay->pop();
}

void MutableOpts::PushDynamicScope(bool b) {
  if (!this->Get(option_i::dynamic_scope)) {
    b = false;
  }
  this->Push(option_i::dynamic_scope, b);
}

void MutableOpts::PopDynamicScope() {
  this->Pop(option_i::dynamic_scope);
}

bool MutableOpts::Get(int opt_num) {
  List<bool>* overlay = nullptr;
  StackRoots _roots({&overlay});

  overlay = this->opt_stacks->index_(opt_num);
  if ((overlay == nullptr or len(overlay) == 0)) {
    return this->opt0_array->index_(opt_num);
  }
  else {
    return overlay->index_(-1);
  }
}

void MutableOpts::_Set(int opt_num, bool b) {
  List<bool>* overlay = nullptr;
  StackRoots _roots({&overlay});

  overlay = this->opt_stacks->index_(opt_num);
  if ((overlay == nullptr or len(overlay) == 0)) {
    this->opt0_array->set(opt_num, b);
  }
  else {
    overlay->set(-1, b);
  }
}

void MutableOpts::set_interactive() {
  this->_Set(option_i::interactive, true);
}

void MutableOpts::set_redefine_proc() {
  this->_Set(option_i::redefine_proc, true);
}

void MutableOpts::set_redefine_module() {
  this->_Set(option_i::redefine_module, true);
}

void MutableOpts::set_emacs() {
  this->_Set(option_i::emacs, true);
}

void MutableOpts::set_xtrace(bool b) {
  this->_Set(option_i::xtrace, b);
}

void MutableOpts::_SetArrayByNum(int opt_num, bool b) {
  if ((list_contains(consts::PARSE_OPTION_NUMS, opt_num) and !this->mem->InGlobalNamespace())) {
    e_die(str377);
  }
  this->_Set(opt_num, b);
}

void MutableOpts::SetDeferredErrExit(bool b) {
  this->opt0_array->set(option_i::errexit, b);
}

void MutableOpts::DisableErrExit() {
  this->_Set(option_i::errexit, false);
}

int MutableOpts::ErrExitDisabledSpanId() {
  if (this->Get(option_i::_running_trap)) {
    return runtime::NO_SPID;
  }
  if (len(this->errexit_disabled_spid) == 0) {
    return runtime::NO_SPID;
  }
  return this->errexit_disabled_spid->index_(-1);
}

void MutableOpts::_SetOldOption(Str* opt_name, bool b) {
  int opt_num;
  bool success;
  StackRoots _roots({&opt_name});

  opt_num = consts::OptionNum(opt_name);
  if (opt_num == option_i::errexit) {
    this->SetDeferredErrExit(b);
  }
  else {
    if ((opt_num == option_i::verbose and b)) {
      print_stderr(str378);
    }
    this->_SetArrayByNum(opt_num, b);
  }
  success = this->opt_hook->OnChange(this->opt0_array, opt_name, b);
}

void MutableOpts::SetOldOption(Str* opt_name, bool b) {
  runtime_asdl::value_t* UP_val = nullptr;
  Str* shellopts = nullptr;
  runtime_asdl::value__Str* new_val = nullptr;
  List<Str*>* names = nullptr;
  StackRoots _roots({&opt_name, &UP_val, &shellopts, &new_val, &names});

  this->_SetOldOption(opt_name, b);
  UP_val = this->mem->GetValue(str379);
  value__Str* val = static_cast<value__Str*>(UP_val);
  shellopts = val->s;
  if (b) {
    if (!str_contains(shellopts, opt_name)) {
      new_val = Alloc<value::Str>(StrFormat("%s:%s", shellopts, opt_name));
      this->mem->InternalSetGlobal(str381, new_val);
    }
  }
  else {
    if (str_contains(shellopts, opt_name)) {
      names = Alloc<List<Str*>>();
      for (ListIter<Str*> it(shellopts->split(str382)); !it.Done(); it.Next()) {
        Str* n = it.Value();
        if (!(str_equals(n, opt_name))) {
          names->append(n);
        }
      }
      new_val = Alloc<value::Str>(str383->join(names));
      this->mem->InternalSetGlobal(str384, new_val);
    }
  }
}

void MutableOpts::SetAnyOption(Str* opt_name, bool b) {
  int opt_group;
  int opt_num;
  StackRoots _roots({&opt_name});

  opt_group = consts::OptionGroupNum(opt_name);
  if (opt_group == opt_group_i::OilUpgrade) {
    _SetGroup(this->opt0_array, consts::OIL_UPGRADE, b);
    this->SetDeferredErrExit(b);
    return ;
  }
  if (opt_group == opt_group_i::OilAll) {
    _SetGroup(this->opt0_array, consts::OIL_ALL, b);
    this->SetDeferredErrExit(b);
    return ;
  }
  if (opt_group == opt_group_i::StrictAll) {
    _SetGroup(this->opt0_array, consts::STRICT_ALL, b);
    return ;
  }
  opt_num = _AnyOptionNum(opt_name);
  if (opt_num == option_i::errexit) {
    this->SetDeferredErrExit(b);
    return ;
  }
  this->_SetArrayByNum(opt_num, b);
}

void MutableOpts::ShowOptions(List<Str*>* opt_names) {
  int opt_num;
  bool b;
  StackRoots _roots({&opt_names});

  if (len(opt_names) == 0) {
    opt_names = Alloc<List<Str*>>();
    for (ListIter<int> it(consts::SET_OPTION_NUMS); !it.Done(); it.Next()) {
      int i = it.Value();
      opt_names->append(consts::OptionName(i));
    }
  }
  for (ListIter<Str*> it(opt_names); !it.Done(); it.Next()) {
    Str* opt_name = it.Value();
    StackRoots _for({&opt_name  });
    opt_num = _SetOptionNum(opt_name);
    b = this->Get(opt_num);
    print(StrFormat("set %so %s", b ? str386 : str387, opt_name));
  }
}

void MutableOpts::ShowShoptOptions(List<Str*>* opt_names) {
  List<int>* opt_nums = nullptr;
  int opt_group;
  int index;
  bool b;
  StackRoots _roots({&opt_names, &opt_nums});

  opt_nums = Alloc<List<int>>();
  for (ListIter<Str*> it(opt_names); !it.Done(); it.Next()) {
    Str* opt_name = it.Value();
    StackRoots _for({&opt_name  });
    opt_group = consts::OptionGroupNum(opt_name);
    if (opt_group == opt_group_i::OilUpgrade) {
      opt_nums->extend(consts::OIL_UPGRADE);
    }
    else {
      if (opt_group == opt_group_i::OilAll) {
        opt_nums->extend(consts::OIL_ALL);
      }
      else {
        if (opt_group == opt_group_i::StrictAll) {
          opt_nums->extend(consts::STRICT_ALL);
        }
        else {
          index = consts::OptionNum(opt_name);
          if (index == 0) {
            e_usage(StrFormat("got invalid option %r", opt_name));
          }
          opt_nums->append(index);
        }
      }
    }
  }
  if (len(opt_names) == 0) {
    opt_nums->extend(consts::VISIBLE_SHOPT_NUMS);
  }
  for (ListIter<int> it(opt_nums); !it.Done(); it.Next()) {
    int opt_num = it.Value();
    b = this->Get(opt_num);
    print(StrFormat("shopt -%s %s", b ? str390 : str391, consts::OptionName(opt_num)));
  }
}

_ArgFrame::_ArgFrame(List<Str*>* argv) 
    : header_(obj_header()) {
  this->argv = argv;
  this->num_shifted = 0;
}

runtime_asdl::value_t* _ArgFrame::GetArgNum(int arg_num) {
  int index;
  index = ((this->num_shifted + arg_num) - 1);
  if (index >= len(this->argv)) {
    return Alloc<value::Undef>();
  }
  return Alloc<value::Str>(this->argv->index_(index));
}

List<Str*>* _ArgFrame::GetArgv() {
  return this->argv->slice(this->num_shifted);
}

int _ArgFrame::GetNumArgs() {
  return (len(this->argv) - this->num_shifted);
}

void _ArgFrame::SetArgv(List<Str*>* argv) {
  StackRoots _roots({&argv});

  this->argv = argv;
  this->num_shifted = 0;
}

DirStack::DirStack() 
    : header_(obj_header()) {
  this->stack = Alloc<List<Str*>>();
  this->Reset();
}

void DirStack::Reset() {
  this->stack->clear();
  this->stack->append(posix::getcwd());
}

void DirStack::Push(Str* entry) {
  StackRoots _roots({&entry});

  this->stack->append(entry);
}

Str* DirStack::Pop() {
  if (len(this->stack) <= 1) {
    return nullptr;
  }
  this->stack->pop();
  return this->stack->index_(-1);
}

List<Str*>* DirStack::Iter() {
  List<Str*>* ret = nullptr;
  StackRoots _roots({&ret});

  ret = Alloc<List<Str*>>();
  ret->extend(this->stack);
  ret->reverse();
  return ret;
}

Str* _GetWorkingDir() {
  try {
    return posix::getcwd();
  }
  catch (OSError* e) {
    e_die(StrFormat("Can't determine working directory: %s", pyutil::strerror(e)));
  }
}

DebugFrame::DebugFrame(Str* bash_source, Str* func_name, Str* source_name, int call_spid, int argv_i, int var_i) 
    : header_(obj_header()) {
  this->bash_source = bash_source;
  this->func_name = func_name;
  this->source_name = source_name;
  this->call_spid = call_spid;
  this->argv_i = argv_i;
  this->var_i = var_i;
}

void _InitDefaults(state::Mem* mem) {
  StackRoots _roots({&mem});

  SetGlobalString(mem, str394, split::DEFAULT_IFS);
  SetGlobalString(mem, str395, str(posix::getuid()));
  SetGlobalString(mem, str396, str(posix::geteuid()));
  SetGlobalString(mem, str397, str(posix::getppid()));
  SetGlobalString(mem, str398, libc::gethostname());
  SetGlobalString(mem, str399, pyos::OsType());
  SetGlobalString(mem, str400, str401);
  SetGlobalString(mem, str402, str403);
  SetGlobalString(mem, str404, _READLINE_DELIMS);
}

void _InitVarsFromEnv(state::Mem* mem, Dict<Str*, Str*>* environ) {
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&mem, &environ, &val});

  for (DictIter<Str*, Str*> it(environ); !it.Done(); it.Next()) {
    Str* n = it.Key();
    Str* v = it.Value();
    mem->SetValue(location::LName(n), Alloc<value::Str>(v), scope_e::GlobalOnly, SetExport);
  }
  val = mem->GetValue(str405);
  if (val->tag_() == value_e::Undef) {
    SetGlobalString(mem, str406, str407);
  }
  mem->SetValue(location::LName(str408), nullptr, scope_e::GlobalOnly, SetReadOnly);
  val = mem->GetValue(str409);
  if (val->tag_() == value_e::Undef) {
    SetGlobalString(mem, str410, _GetWorkingDir());
  }
  mem->SetValue(location::LName(str411), nullptr, scope_e::GlobalOnly, SetExport);
  val = mem->GetValue(str412);
  if (val->tag_() == value_e::Undef) {
    SetGlobalString(mem, str413, str414);
  }
}

void InitMem(state::Mem* mem, Dict<Str*, Str*>* environ, Str* version_str) {
  runtime_asdl::value_t* val = nullptr;
  Str* pwd = nullptr;
  StackRoots _roots({&mem, &environ, &version_str, &val, &pwd});

  SetGlobalString(mem, str415, version_str);
  _InitDefaults(mem);
  _InitVarsFromEnv(mem, environ);
  val = mem->GetValue(str416);
  pwd = static_cast<value__Str*>(val)->s;
  mem->SetPwd(pwd);
}

void InitInteractive(state::Mem* mem) {
  StackRoots _roots({&mem});

  if (mem->GetValue(str417)->tag_() == value_e::Undef) {
    SetGlobalString(mem, str418, str419);
  }
}

ctx_Call::ctx_Call(state::Mem* mem, state::MutableOpts* mutable_opts, runtime_asdl::Proc* proc, List<Str*>* argv) 
    : header_(obj_header()) {
  mem->PushCall(proc->name, proc->name_spid, argv);
  mutable_opts->PushDynamicScope(proc->dynamic_scope);
  this->mem = mem;
  this->mutable_opts = mutable_opts;
}

ctx_Call::~ctx_Call(){
  this->mutable_opts->PopDynamicScope();
  this->mem->PopCall();
}

ctx_Temp::ctx_Temp(state::Mem* mem) 
    : header_(obj_header()) {
  mem->PushTemp();
  this->mem = mem;
}

ctx_Temp::~ctx_Temp(){
  this->mem->PopTemp();
}

ctx_Shvar::ctx_Shvar(state::Mem* mem, List<Tuple2<Str*, Str*>*>* pairs) 
    : header_(obj_header()) {
  this->mem = mem;
  this->restore = Alloc<List<Tuple2<runtime_asdl::lvalue_t*, runtime_asdl::value_t*>*>>();
  this->_Push(pairs);
}

ctx_Shvar::~ctx_Shvar(){
  this->_Pop();
}

void ctx_Shvar::_Push(List<Tuple2<Str*, Str*>*>* pairs) {
  Str* name = nullptr;
  Str* s = nullptr;
  runtime_asdl::lvalue_t* lval = nullptr;
  runtime_asdl::value_t* old_val = nullptr;
  StackRoots _roots({&pairs, &name, &s, &lval, &old_val});

  for (ListIter<Tuple2<Str*, Str*>*> it(pairs); !it.Done(); it.Next()) {
    Tuple2<Str*, Str*>* tup0 = it.Value();
    name = tup0->at0();
    s = tup0->at1();
    lval = location::LName(name);
    old_val = this->mem->GetValue(name, scope_e::LocalOnly);
    this->restore->append((Alloc<Tuple2<runtime_asdl::lvalue_t*, runtime_asdl::value_t*>>(lval, old_val)));
    this->mem->SetValue(lval, Alloc<value::Str>(s), scope_e::LocalOnly);
  }
}

void ctx_Shvar::_Pop() {
  runtime_asdl::lvalue_t* lval = nullptr;
  runtime_asdl::value_t* old_val = nullptr;
  StackRoots _roots({&lval, &old_val});

  for (ListIter<Tuple2<runtime_asdl::lvalue_t*, runtime_asdl::value_t*>*> it(this->restore); !it.Done(); it.Next()) {
    Tuple2<runtime_asdl::lvalue_t*, runtime_asdl::value_t*>* tup1 = it.Value();
    lval = tup1->at0();
    old_val = tup1->at1();
    if (old_val->tag_() == value_e::Undef) {
      this->mem->Unset(lval, scope_e::LocalOnly);
    }
    else {
      this->mem->SetValue(lval, old_val, scope_e::LocalOnly);
    }
  }
}

ctx_Registers::ctx_Registers(state::Mem* mem) 
    : header_(obj_header()) {
  int last = mem->last_status->index_(-1);
  mem->last_status->append(last);
  mem->try_status->append(0);
  mem->pipe_status->append(Alloc<List<int>>());
  mem->process_sub_status->append(Alloc<List<int>>());
  mem->regex_matches->append(Alloc<List<Str*>>());
  this->mem = mem;
}

ctx_Registers::~ctx_Registers(){
  this->mem->regex_matches->pop();
  this->mem->process_sub_status->pop();
  this->mem->pipe_status->pop();
  this->mem->try_status->pop();
  this->mem->last_status->pop();
}

ctx_ThisDir::ctx_ThisDir(state::Mem* mem, Str* filename) 
    : header_(obj_header()) {
  this->do_pop = false;
  if (filename != nullptr) {
    Str* d = os_path::dirname(os_path::abspath(filename));
    mem->this_dir->append(d);
    this->do_pop = true;
  }
  this->mem = mem;
}

ctx_ThisDir::~ctx_ThisDir(){
  if (this->do_pop) {
    this->mem->this_dir->pop();
  }
}

Mem::Mem(Str* dollar0, List<Str*>* argv, alloc::Arena* arena, List<state::DebugFrame*>* debug_stack) 
    : header_(obj_header()) {
  this->exec_opts = nullptr;
  this->unsafe_arith = nullptr;
  this->dollar0 = dollar0;
  this->argv_stack = NewList<state::_ArgFrame*>(std::initializer_list<state::_ArgFrame*>{Alloc<_ArgFrame>(argv)});
  auto* frame = NewDict<Str*, runtime_asdl::cell*>();
  this->var_stack = NewList<Dict<Str*, runtime_asdl::cell*>*>(std::initializer_list<Dict<Str*, runtime_asdl::cell*>*>{frame});
  this->arena = arena;
  this->debug_stack = debug_stack;
  this->pwd = nullptr;
  this->current_spid = runtime::NO_SPID;
  this->last_arg = str420;
  this->line_num = Alloc<value::Str>(str421);
  this->root_pid = posix::getpid();
  this->last_status = NewList<int>(std::initializer_list<int>{0});
  this->try_status = NewList<int>(std::initializer_list<int>{0});
  this->pipe_status = NewList<List<int>*>(std::initializer_list<List<int>*>{Alloc<List<int>>()});
  this->process_sub_status = NewList<List<int>*>(std::initializer_list<List<int>*>{Alloc<List<int>>()});
  this->this_dir = Alloc<List<Str*>>();
  this->regex_matches = NewList<List<Str*>*>(std::initializer_list<List<Str*>*>{Alloc<List<Str*>>()});
  this->last_bg_pid = -1;
}

void Mem::SetPwd(Str* pwd) {
  StackRoots _roots({&pwd});

  this->pwd = pwd;
}

bool Mem::InGlobalNamespace() {
  return len(this->argv_stack) == 1;
}

Tuple3<void*, void*, void*> Mem::Dump() {
  assert(0);  // AssertionError
}

void Mem::SetLastArgument(Str* s) {
  StackRoots _roots({&s});

  this->last_arg = s;
}

void Mem::SetCurrentSpanId(int span_id) {
  if (span_id == runtime::NO_SPID) {
    mylib::print_stderr(str428);
    return ;
  }
  this->current_spid = span_id;
}

syntax_asdl::loc_t* Mem::CurrentLocation() {
  return Alloc<loc::Span>(this->current_spid);
}

int Mem::LastStatus() {
  return this->last_status->index_(-1);
}

int Mem::TryStatus() {
  return this->try_status->index_(-1);
}

List<int>* Mem::PipeStatus() {
  return this->pipe_status->index_(-1);
}

void Mem::SetLastStatus(int x) {
  this->last_status->set(-1, x);
}

void Mem::SetTryStatus(int x) {
  this->try_status->set(-1, x);
}

void Mem::SetPipeStatus(List<int>* x) {
  StackRoots _roots({&x});

  this->pipe_status->set(-1, x);
}

void Mem::SetProcessSubStatus(List<int>* x) {
  StackRoots _roots({&x});

  this->process_sub_status->set(-1, x);
}

void Mem::PushCall(Str* func_name, int def_spid, List<Str*>* argv) {
  syntax_asdl::Token* token = nullptr;
  Str* source_str = nullptr;
  StackRoots _roots({&func_name, &argv, &token, &source_str});

  this->argv_stack->append(Alloc<_ArgFrame>(argv));
  auto* frame = NewDict<Str*, runtime_asdl::cell*>();
  this->var_stack->append(frame);
  token = this->arena->GetToken(def_spid);
  source_str = ui::GetLineSourceString(this->arena, token->line);
  this->_PushDebugStack(source_str, func_name, nullptr);
}

void Mem::PopCall() {
  this->_PopDebugStack();
  this->var_stack->pop();
  this->argv_stack->pop();
}

void Mem::PushSource(Str* source_name, List<Str*>* argv) {
  StackRoots _roots({&source_name, &argv});

  if (len(argv)) {
    this->argv_stack->append(Alloc<_ArgFrame>(argv));
  }
  this->_PushDebugStack(source_name, nullptr, source_name);
}

void Mem::PopSource(List<Str*>* argv) {
  StackRoots _roots({&argv});

  this->_PopDebugStack();
  if (len(argv)) {
    this->argv_stack->pop();
  }
}

void Mem::PushTemp() {
  auto* frame = NewDict<Str*, runtime_asdl::cell*>();
  this->var_stack->append(frame);
  this->_PushDebugStack(nullptr, nullptr, nullptr);
}

void Mem::PopTemp() {
  this->_PopDebugStack();
  this->var_stack->pop();
}

Dict<Str*, runtime_asdl::cell*>* Mem::TopNamespace() {
  return this->var_stack->index_(-1);
}

void Mem::_PushDebugStack(Str* bash_source, Str* func_name, Str* source_name) {
  int argv_i;
  int var_i;
  StackRoots _roots({&bash_source, &func_name, &source_name});

  argv_i = (len(this->argv_stack) - 1);
  var_i = (len(this->var_stack) - 1);
  this->debug_stack->append(Alloc<DebugFrame>(bash_source, func_name, source_name, this->current_spid, argv_i, var_i));
}

void Mem::_PopDebugStack() {
  this->debug_stack->pop();
}

int Mem::Shift(int n) {
  state::_ArgFrame* frame = nullptr;
  int num_args;
  StackRoots _roots({&frame});

  frame = this->argv_stack->index_(-1);
  num_args = len(frame->argv);
  if ((frame->num_shifted + n) <= num_args) {
    frame->num_shifted += n;
    return 0;
  }
  else {
    return 1;
  }
}

runtime_asdl::value__Str* Mem::GetArg0() {
  return Alloc<value::Str>(this->dollar0);
}

runtime_asdl::value_t* Mem::GetArgNum(int arg_num) {
  if (arg_num == 0) {
    return Alloc<value::Str>(this->dollar0);
  }
  return this->argv_stack->index_(-1)->GetArgNum(arg_num);
}

List<Str*>* Mem::GetArgv() {
  return this->argv_stack->index_(-1)->GetArgv();
}

void Mem::SetArgv(List<Str*>* argv) {
  StackRoots _roots({&argv});

  this->argv_stack->index_(-1)->SetArgv(argv);
}

runtime_asdl::value_t* Mem::GetSpecialVar(int op_id) {
  int n;
  if (op_id == Id::VSub_Bang) {
    n = this->last_bg_pid;
    if (n == -1) {
      return Alloc<value::Undef>();
    }
  }
  else {
    if (op_id == Id::VSub_QMark) {
      n = this->last_status->index_(-1);
    }
    else {
      if (op_id == Id::VSub_Pound) {
        n = this->argv_stack->index_(-1)->GetNumArgs();
      }
      else {
        if (op_id == Id::VSub_Dollar) {
          n = this->root_pid;
        }
        else {
          FAIL(kNotImplemented);  // Python NotImplementedError
        }
      }
    }
  }
  return Alloc<value::Str>(str(n));
}

Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*> Mem::_ResolveNameOnly(Str* name, runtime_asdl::scope_t which_scopes) {
  Dict<Str*, runtime_asdl::cell*>* name_map = nullptr;
  runtime_asdl::cell* cell = nullptr;
  runtime_asdl::cell* no_cell = nullptr;
  StackRoots _roots({&name, &name_map, &cell, &no_cell});

  if (which_scopes == scope_e::Dynamic) {
    for (int i = (len(this->var_stack) - 1); i > -1; i += -1) {
      name_map = this->var_stack->index_(i);
      if (dict_contains(name_map, name)) {
        cell = name_map->index_(name);
        return Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*>(cell, name_map);
      }
    }
    no_cell = nullptr;
    return Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*>(no_cell, this->var_stack->index_(0));
  }
  if (which_scopes == scope_e::LocalOnly) {
    name_map = this->var_stack->index_(-1);
    return Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*>(name_map->get(name), name_map);
  }
  if (which_scopes == scope_e::GlobalOnly) {
    name_map = this->var_stack->index_(0);
    return Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*>(name_map->get(name), name_map);
  }
  if (which_scopes == scope_e::LocalOrGlobal) {
    name_map = this->var_stack->index_(-1);
    cell = name_map->get(name);
    if (cell) {
      return Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*>(cell, name_map);
    }
    name_map = this->var_stack->index_(0);
    return Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*>(name_map->get(name), name_map);
  }
  if (which_scopes == scope_e::Parent) {
    name_map = this->var_stack->index_(-2);
    return Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*>(name_map->get(name), name_map);
  }
  assert(0);  // AssertionError
}

Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> Mem::_ResolveNameOrRef(Str* name, runtime_asdl::scope_t which_scopes, bool is_setref, List<Str*>* ref_trail) {
  runtime_asdl::cell* cell = nullptr;
  Dict<Str*, runtime_asdl::cell*>* name_map = nullptr;
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  Str* new_name = nullptr;
  Str* cell_name = nullptr;
  StackRoots _roots({&name, &ref_trail, &cell, &name_map, &val, &UP_val, &new_name, &cell_name});

  Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*> tup2 = this->_ResolveNameOnly(name, which_scopes);
  cell = tup2.at0();
  name_map = tup2.at1();
  if ((cell == nullptr or !cell->nameref)) {
    if (is_setref) {
      e_die(str429);
    }
    return Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*>(cell, name_map, name);
  }
  val = cell->val;
  UP_val = val;
  switch (val->tag_()) {
    case value_e::Undef: {
      if (this->exec_opts->strict_nameref()) {
        e_die(StrFormat("nameref %r is undefined", name));
      }
      else {
        return Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*>(cell, name_map, name);
      }
    }
      break;
    case value_e::Str: {
      value__Str* val = static_cast<value__Str*>(UP_val);
      new_name = val->s;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  if (!match::IsValidVarName(new_name)) {
    if (this->exec_opts->strict_nameref()) {
      e_die(StrFormat("nameref %r contains invalid variable name %r", name, new_name));
    }
    else {
      cell->nameref = false;
      return Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*>(cell, name_map, name);
    }
  }
  if (ref_trail == nullptr) {
    ref_trail = NewList<Str*>(std::initializer_list<Str*>{name});
  }
  else {
    if (list_contains(ref_trail, new_name)) {
      e_die(StrFormat("Circular nameref %s", str433->join(ref_trail)));
    }
  }
  ref_trail->append(new_name);
  which_scopes = is_setref ? scope_e::Parent : scope_e::Dynamic;
  Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> tup3 = this->_ResolveNameOrRef(new_name, which_scopes, false, ref_trail);
  cell = tup3.at0();
  name_map = tup3.at1();
  cell_name = tup3.at2();
  return Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*>(cell, name_map, cell_name);
}

bool Mem::IsAssocArray(Str* name) {
  runtime_asdl::cell* cell = nullptr;
  StackRoots _roots({&name, &cell});

  Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> tup4 = this->_ResolveNameOrRef(name, this->ScopesForReading(), false);
  cell = tup4.at0();
  if (cell) {
    if (cell->val->tag_() == value_e::AssocArray) {
      return true;
    }
  }
  return false;
}

void Mem::SetValue(runtime_asdl::lvalue_t* lval, runtime_asdl::value_t* val, runtime_asdl::scope_t which_scopes, int flags) {
  int keyword_id;
  bool is_setref;
  runtime_asdl::lvalue_t* UP_lval = nullptr;
  runtime_asdl::cell* cell = nullptr;
  Dict<Str*, runtime_asdl::cell*>* name_map = nullptr;
  Str* cell_name = nullptr;
  int left_spid;
  runtime_asdl::value_t* UP_cell_val = nullptr;
  List<Str*>* strs = nullptr;
  int n;
  int index;
  StackRoots _roots({&lval, &val, &UP_lval, &cell, &name_map, &cell_name, &UP_cell_val, &strs});

  keyword_id = (flags >> 8);
  is_setref = keyword_id == Id::KW_SetRef;
  UP_lval = lval;
  switch (lval->tag_()) {
    case lvalue_e::Named: {
      lvalue__Named* lval = static_cast<lvalue__Named*>(UP_lval);
      if (keyword_id == Id::KW_SetRef) {
        lval->name = str_concat(str434, lval->name);
      }
      if (((flags & SetNameref) or (flags & ClearNameref))) {
        Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*> tup5 = this->_ResolveNameOnly(lval->name, which_scopes);
        cell = tup5.at0();
        name_map = tup5.at1();
        cell_name = lval->name;
      }
      else {
        Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> tup6 = this->_ResolveNameOrRef(lval->name, which_scopes, is_setref);
        cell = tup6.at0();
        name_map = tup6.at1();
        cell_name = tup6.at2();
      }
      if (cell) {
        if ((flags & ClearExport)) {
          cell->exported = false;
        }
        if ((flags & ClearReadOnly)) {
          cell->readonly = false;
        }
        if ((flags & ClearNameref)) {
          cell->nameref = false;
        }
        if (val != nullptr) {
          if (cell->readonly) {
            e_die(StrFormat("Can't assign to readonly value %r", lval->name));
          }
          cell->val = val;
        }
        if ((flags & SetExport)) {
          cell->exported = true;
        }
        if ((flags & SetReadOnly)) {
          cell->readonly = true;
        }
        if ((flags & SetNameref)) {
          cell->nameref = true;
        }
      }
      else {
        if (val == nullptr) {
          val = Alloc<value::Undef>();
        }
        cell = Alloc<runtime_asdl::cell>(to_bool((flags & SetExport)), to_bool((flags & SetReadOnly)), to_bool((flags & SetNameref)), val);
        name_map->set(cell_name, cell);
      }
      if ((cell->val->tag_() != value_e::Undef && cell->val->tag_() != value_e::Str)) {
        if (cell->exported) {
          e_die(str436);
        }
        if (cell->nameref) {
          e_die(str437);
        }
      }
    }
      break;
    case lvalue_e::Indexed: {
      lvalue__Indexed* lval = static_cast<lvalue__Indexed*>(UP_lval);
      value__Str* rval = static_cast<value__Str*>(val);
      left_spid = lval->blame_spid;
      Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> tup7 = this->_ResolveNameOrRef(lval->name, which_scopes, is_setref);
      cell = tup7.at0();
      name_map = tup7.at1();
      if (!cell) {
        this->_BindNewArrayWithEntry(name_map, lval, rval, flags);
        return ;
      }
      if (cell->readonly) {
        e_die(str438, Alloc<loc::Span>(left_spid));
      }
      UP_cell_val = cell->val;
      switch (UP_cell_val->tag_()) {
        case value_e::Undef: {
          this->_BindNewArrayWithEntry(name_map, lval, rval, flags);
          return ;
        }
          break;
        case value_e::Str: {
          e_die(str439, Alloc<loc::Span>(left_spid));
        }
          break;
        case value_e::MaybeStrArray: {
          value__MaybeStrArray* cell_val = static_cast<value__MaybeStrArray*>(UP_cell_val);
          strs = cell_val->strs;
          n = len(strs);
          index = lval->index;
          if (index < 0) {
            index += n;
          }
          if ((0 <= index and index < n)) {
            strs->set(index, rval->s);
          }
          else {
            n = ((index - len(strs)) + 1);
            for (int i = 0; i < n; ++i) {
              strs->append(nullptr);
            }
            strs->set(lval->index, rval->s);
          }
          return ;
        }
          break;
      }
      e_die(StrFormat("Value of type %s can't be indexed", ui::ValType(cell->val)), Alloc<loc::Span>(left_spid));
    }
      break;
    case lvalue_e::Keyed: {
      lvalue__Keyed* lval = static_cast<lvalue__Keyed*>(UP_lval);
      value__Str* rval = static_cast<value__Str*>(val);
      left_spid = lval->blame_spid;
      Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> tup8 = this->_ResolveNameOrRef(lval->name, which_scopes, is_setref);
      cell = tup8.at0();
      name_map = tup8.at1();
      if (cell->readonly) {
        e_die(str441, Alloc<loc::Span>(left_spid));
      }
      value__AssocArray* cell_val2 = static_cast<value__AssocArray*>(cell->val);
      cell_val2->d->set(lval->key, rval->s);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

void Mem::_BindNewArrayWithEntry(Dict<Str*, runtime_asdl::cell*>* name_map, runtime_asdl::lvalue__Indexed* lval, runtime_asdl::value__Str* val, int flags) {
  Str* no_str = nullptr;
  List<Str*>* items = nullptr;
  runtime_asdl::value__MaybeStrArray* new_value = nullptr;
  bool readonly;
  StackRoots _roots({&name_map, &lval, &val, &no_str, &items, &new_value});

  no_str = nullptr;
  items = list_repeat(no_str, lval->index);
  items->append(val->s);
  new_value = Alloc<value::MaybeStrArray>(items);
  readonly = to_bool((flags & SetReadOnly));
  name_map->set(lval->name, Alloc<runtime_asdl::cell>(false, readonly, false, new_value));
}

void Mem::InternalSetGlobal(Str* name, runtime_asdl::value_t* new_val) {
  runtime_asdl::cell* cell = nullptr;
  StackRoots _roots({&name, &new_val, &cell});

  cell = this->var_stack->index_(0)->index_(name);
  cell->val = new_val;
}

runtime_asdl::value_t* Mem::GetValue(Str* name, runtime_asdl::scope_t which_scopes) {
  List<Str*>* pipe_strs = nullptr;
  List<Str*>* sub_strs = nullptr;
  List<Str*>* strs = nullptr;
  syntax_asdl::Token* token = nullptr;
  int line_num;
  syntax_asdl::Token* span = nullptr;
  runtime_asdl::cell* cell = nullptr;
  StackRoots _roots({&name, &pipe_strs, &sub_strs, &strs, &token, &span, &cell});

  if (which_scopes == scope_e::Shopt) {
    which_scopes = this->ScopesForReading();
  }
  if (str_equals(name, str442)) {
    return Alloc<value::MaybeStrArray>(this->GetArgv());
  }
  if (str_equals(name, str443)) {
    // if not PYTHON
    {
      return Alloc<value::Undef>();
    }
    // endif MYCPP
  }
  if (str_equals(name, str444)) {
    if (len(this->this_dir) == 0) {
      return Alloc<value::Undef>();
    }
    else {
      return Alloc<value::Str>(this->this_dir->index_(-1));
    }
  }
  if ((str_equals(name, str445) || str_equals(name, str446))) {
    pipe_strs = Alloc<List<Str*>>();
    for (ListIter<int> it(this->pipe_status->index_(-1)); !it.Done(); it.Next()) {
      int i = it.Value();
      pipe_strs->append(str(i));
    }
    return Alloc<value::MaybeStrArray>(pipe_strs);
  }
  if (str_equals(name, str447)) {
    sub_strs = Alloc<List<Str*>>();
    for (ListIter<int> it(this->process_sub_status->index_(-1)); !it.Done(); it.Next()) {
      int i = it.Value();
      sub_strs->append(str(i));
    }
    return Alloc<value::MaybeStrArray>(sub_strs);
  }
  if (str_equals(name, str448)) {
    return Alloc<value::MaybeStrArray>(this->regex_matches->index_(-1));
  }
  if (str_equals(name, str449)) {
    strs = Alloc<List<Str*>>();
    for (ReverseListIter<state::DebugFrame*> it(this->debug_stack); !it.Done(); it.Next()) {
      state::DebugFrame* frame = it.Value();
      StackRoots _for({&frame    });
      if (frame->func_name != nullptr) {
        strs->append(frame->func_name);
      }
      if (frame->source_name != nullptr) {
        strs->append(str450);
      }
    }
    return Alloc<value::MaybeStrArray>(strs);
  }
  if (str_equals(name, str451)) {
    strs = Alloc<List<Str*>>();
    for (ReverseListIter<state::DebugFrame*> it(this->debug_stack); !it.Done(); it.Next()) {
      state::DebugFrame* frame = it.Value();
      StackRoots _for({&frame    });
      if (frame->bash_source != nullptr) {
        strs->append(frame->bash_source);
      }
    }
    return Alloc<value::MaybeStrArray>(strs);
  }
  if (str_equals(name, str452)) {
    strs = Alloc<List<Str*>>();
    for (ReverseListIter<state::DebugFrame*> it(this->debug_stack); !it.Done(); it.Next()) {
      state::DebugFrame* frame = it.Value();
      StackRoots _for({&frame    });
      if (frame->call_spid == runtime::NO_SPID) {
        continue;
      }
      if (frame->call_spid == LINE_ZERO) {
        strs->append(str453);
        continue;
      }
      token = this->arena->GetToken(frame->call_spid);
      line_num = token->line->line_num;
      strs->append(str(line_num));
    }
    return Alloc<value::MaybeStrArray>(strs);
  }
  if (str_equals(name, str454)) {
    span = this->arena->GetToken(this->current_spid);
    this->line_num->s = str(span->line->line_num);
    return this->line_num;
  }
  if (str_equals(name, str455)) {
    return Alloc<value::Str>(str(posix::getpid()));
  }
  if (str_equals(name, str456)) {
    return Alloc<value::Str>(this->last_arg);
  }
  Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> tup9 = this->_ResolveNameOrRef(name, which_scopes, false);
  cell = tup9.at0();
  if (cell) {
    return cell->val;
  }
  return Alloc<value::Undef>();
}

runtime_asdl::cell* Mem::GetCell(Str* name, runtime_asdl::scope_t which_scopes) {
  runtime_asdl::cell* cell = nullptr;
  StackRoots _roots({&name, &cell});

  if (which_scopes == scope_e::Shopt) {
    which_scopes = this->ScopesForReading();
  }
  Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*> tup10 = this->_ResolveNameOnly(name, which_scopes);
  cell = tup10.at0();
  return cell;
}

bool Mem::Unset(runtime_asdl::lvalue_t* lval, runtime_asdl::scope_t which_scopes) {
  runtime_asdl::lvalue_t* UP_lval = nullptr;
  Str* var_name = nullptr;
  runtime_asdl::cell* cell = nullptr;
  Dict<Str*, runtime_asdl::cell*>* name_map = nullptr;
  Str* cell_name = nullptr;
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  List<Str*>* strs = nullptr;
  int n;
  int last_index;
  int index;
  StackRoots _roots({&lval, &UP_lval, &var_name, &cell, &name_map, &cell_name, &val, &UP_val, &strs});

  UP_lval = lval;
  switch (lval->tag_()) {
    case lvalue_e::Named: {
      lvalue__Named* lval = static_cast<lvalue__Named*>(UP_lval);
      var_name = lval->name;
    }
      break;
    case lvalue_e::Indexed: {
      lvalue__Indexed* lval = static_cast<lvalue__Indexed*>(UP_lval);
      var_name = lval->name;
    }
      break;
    case lvalue_e::Keyed: {
      lvalue__Keyed* lval = static_cast<lvalue__Keyed*>(UP_lval);
      var_name = lval->name;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  if (which_scopes == scope_e::Shopt) {
    which_scopes = this->ScopesForWriting();
  }
  Tuple3<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*, Str*> tup11 = this->_ResolveNameOrRef(var_name, which_scopes, false);
  cell = tup11.at0();
  name_map = tup11.at1();
  cell_name = tup11.at2();
  if (!cell) {
    return false;
  }
  if (cell->readonly) {
    throw Alloc<error::Runtime>(StrFormat("Can't unset readonly variable %r", var_name));
  }
  switch (lval->tag_()) {
    case lvalue_e::Named: {
      mylib::dict_erase(name_map, cell_name);
    }
      break;
    case lvalue_e::Indexed: {
      lvalue__Indexed* lval = static_cast<lvalue__Indexed*>(UP_lval);
      val = cell->val;
      UP_val = val;
      if (val->tag_() != value_e::MaybeStrArray) {
        throw Alloc<error::Runtime>(StrFormat("%r isn't an array", var_name));
      }
      value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
      strs = val->strs;
      n = len(strs);
      last_index = (n - 1);
      index = lval->index;
      if (index < 0) {
        index += n;
      }
      if (index == last_index) {
        strs->pop();
      }
      else {
        if ((0 <= index and index < last_index)) {
          strs->set(index, nullptr);
        }
        else {
          ;  // pass
        }
      }
    }
      break;
    case lvalue_e::Keyed: {
      lvalue__Keyed* lval = static_cast<lvalue__Keyed*>(UP_lval);
      val = cell->val;
      UP_val = val;
      value__AssocArray* val = static_cast<value__AssocArray*>(UP_val);
      mylib::dict_erase(val->d, lval->key);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  return true;
}

runtime_asdl::scope_t Mem::ScopesForReading() {
  return this->exec_opts->dynamic_scope() ? scope_e::Dynamic : scope_e::LocalOrGlobal;
}

runtime_asdl::scope_t Mem::ScopesForWriting() {
  return this->exec_opts->dynamic_scope() ? scope_e::Dynamic : scope_e::LocalOnly;
}

bool Mem::ClearFlag(Str* name, int flag) {
  runtime_asdl::cell* cell = nullptr;
  Dict<Str*, runtime_asdl::cell*>* name_map = nullptr;
  StackRoots _roots({&name, &cell, &name_map});

  Tuple2<runtime_asdl::cell*, Dict<Str*, runtime_asdl::cell*>*> tup12 = this->_ResolveNameOnly(name, this->ScopesForReading());
  cell = tup12.at0();
  name_map = tup12.at1();
  if (cell) {
    if ((flag & ClearExport)) {
      cell->exported = false;
    }
    if ((flag & ClearNameref)) {
      cell->nameref = false;
    }
    return true;
  }
  else {
    return false;
  }
}

Dict<Str*, Str*>* Mem::GetExported() {
  Dict<Str*, Str*>* exported = nullptr;
  StackRoots _roots({&exported});

  exported = Alloc<Dict<Str*, Str*>>();
  for (ListIter<Dict<Str*, runtime_asdl::cell*>*> it(this->var_stack); !it.Done(); it.Next()) {
    Dict<Str*, runtime_asdl::cell*>* scope = it.Value();
    StackRoots _for({&scope  });
    for (DictIter<Str*, runtime_asdl::cell*> it(scope); !it.Done(); it.Next()) {
      Str* name = it.Key();
      runtime_asdl::cell* cell = it.Value();
      if ((cell->exported and cell->val->tag_() == value_e::Str)) {
        value__Str* val = static_cast<value__Str*>(cell->val);
        exported->set(name, val->s);
      }
    }
  }
  return exported;
}

List<Str*>* Mem::VarNames() {
  List<Str*>* ret = nullptr;
  StackRoots _roots({&ret});

  ret = Alloc<List<Str*>>();
  for (ListIter<Dict<Str*, runtime_asdl::cell*>*> it(this->var_stack); !it.Done(); it.Next()) {
    Dict<Str*, runtime_asdl::cell*>* scope = it.Value();
    StackRoots _for({&scope  });
    for (DictIter<Str*, runtime_asdl::cell*> it(scope); !it.Done(); it.Next()) {
      Str* name = it.Key();
      StackRoots _for({&name    });
      ret->append(name);
    }
  }
  return ret;
}

List<Str*>* Mem::VarNamesStartingWith(Str* prefix) {
  List<Str*>* names = nullptr;
  StackRoots _roots({&prefix, &names});

  names = Alloc<List<Str*>>();
  for (ListIter<Dict<Str*, runtime_asdl::cell*>*> it(this->var_stack); !it.Done(); it.Next()) {
    Dict<Str*, runtime_asdl::cell*>* scope = it.Value();
    StackRoots _for({&scope  });
    for (DictIter<Str*, runtime_asdl::cell*> it(scope); !it.Done(); it.Next()) {
      Str* name = it.Key();
      StackRoots _for({&name    });
      if (name->startswith(prefix)) {
        names->append(name);
      }
    }
  }
  return names;
}

Dict<Str*, Str*>* Mem::GetAllVars() {
  Dict<Str*, Str*>* result = nullptr;
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&result, &val});

  result = Alloc<Dict<Str*, Str*>>();
  for (ListIter<Dict<Str*, runtime_asdl::cell*>*> it(this->var_stack); !it.Done(); it.Next()) {
    Dict<Str*, runtime_asdl::cell*>* scope = it.Value();
    StackRoots _for({&scope  });
    for (DictIter<Str*, runtime_asdl::cell*> it(scope); !it.Done(); it.Next()) {
      Str* name = it.Key();
      runtime_asdl::cell* cell = it.Value();
      val = cell->val;
      if (val->tag_() == value_e::Str) {
        value__Str* str_val = static_cast<value__Str*>(val);
        result->set(name, str_val->s);
      }
    }
  }
  return result;
}

Dict<Str*, runtime_asdl::cell*>* Mem::GetAllCells(runtime_asdl::scope_t which_scopes) {
  Dict<Str*, runtime_asdl::cell*>* result = nullptr;
  List<Dict<Str*, runtime_asdl::cell*>*>* scopes = nullptr;
  StackRoots _roots({&result, &scopes});

  result = Alloc<Dict<Str*, runtime_asdl::cell*>>();
  if (which_scopes == scope_e::Dynamic) {
    scopes = this->var_stack;
  }
  else {
    if (which_scopes == scope_e::LocalOnly) {
      scopes = this->var_stack->slice(-1);
    }
    else {
      if (which_scopes == scope_e::GlobalOnly) {
        scopes = this->var_stack->slice(0, 1);
      }
      else {
        if (which_scopes == scope_e::LocalOrGlobal) {
          scopes = NewList<Dict<Str*, runtime_asdl::cell*>*>(std::initializer_list<Dict<Str*, runtime_asdl::cell*>*>{this->var_stack->index_(0)});
          if (len(this->var_stack) > 1) {
            scopes->append(this->var_stack->index_(-1));
          }
        }
        else {
          assert(0);  // AssertionError
        }
      }
    }
  }
  for (ListIter<Dict<Str*, runtime_asdl::cell*>*> it(scopes); !it.Done(); it.Next()) {
    Dict<Str*, runtime_asdl::cell*>* scope = it.Value();
    StackRoots _for({&scope  });
    for (DictIter<Str*, runtime_asdl::cell*> it(scope); !it.Done(); it.Next()) {
      Str* name = it.Key();
      runtime_asdl::cell* cell = it.Value();
      result->set(name, cell);
    }
  }
  return result;
}

bool Mem::IsGlobalScope() {
  return len(this->var_stack) == 1;
}

void Mem::ClearMatches() {
  List<Str*>* top = nullptr;
  StackRoots _roots({&top});

  top = this->regex_matches->index_(-1);
  top->clear();
}

void Mem::SetMatches(List<Str*>* matches) {
  StackRoots _roots({&matches});

  this->regex_matches->set(-1, matches);
}

Str* Mem::GetMatch(int i) {
  List<Str*>* top = nullptr;
  StackRoots _roots({&top});

  top = this->regex_matches->index_(-1);
  if (i < len(top)) {
    return top->index_(i);
  }
  else {
    return nullptr;
  }
}

void OshLanguageSetValue(state::Mem* mem, runtime_asdl::lvalue_t* lval, runtime_asdl::value_t* val, int flags) {
  runtime_asdl::scope_t which_scopes;
  StackRoots _roots({&mem, &lval, &val});

  which_scopes = mem->ScopesForWriting();
  mem->SetValue(lval, val, which_scopes, flags);
}

void BuiltinSetValue(state::Mem* mem, runtime_asdl::lvalue_t* lval, runtime_asdl::value_t* val) {
  StackRoots _roots({&mem, &lval, &val});

  mem->SetValue(lval, val, mem->ScopesForWriting());
}

void BuiltinSetString(state::Mem* mem, Str* name, Str* s) {
  StackRoots _roots({&mem, &name, &s});

  BuiltinSetValue(mem, location::LName(name), Alloc<value::Str>(s));
}

void BuiltinSetArray(state::Mem* mem, Str* name, List<Str*>* a) {
  StackRoots _roots({&mem, &name, &a});

  BuiltinSetValue(mem, location::LName(name), Alloc<value::MaybeStrArray>(a));
}

void SetGlobalString(state::Mem* mem, Str* name, Str* s) {
  runtime_asdl::value__Str* val = nullptr;
  StackRoots _roots({&mem, &name, &s, &val});

  val = Alloc<value::Str>(s);
  mem->SetValue(location::LName(name), val, scope_e::GlobalOnly);
}

void SetGlobalArray(state::Mem* mem, Str* name, List<Str*>* a) {
  StackRoots _roots({&mem, &name, &a});

  mem->SetValue(location::LName(name), Alloc<value::MaybeStrArray>(a), scope_e::GlobalOnly);
}

void ExportGlobalString(state::Mem* mem, Str* name, Str* s) {
  runtime_asdl::value__Str* val = nullptr;
  StackRoots _roots({&mem, &name, &s, &val});

  val = Alloc<value::Str>(s);
  mem->SetValue(location::LName(name), val, scope_e::GlobalOnly, SetExport);
}

Str* GetString(state::Mem* mem, Str* name) {
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  StackRoots _roots({&mem, &name, &val, &UP_val});

  val = mem->GetValue(name);
  UP_val = val;
  switch (val->tag_()) {
    case value_e::Undef: {
      throw Alloc<error::Runtime>(StrFormat("$%s isn't defined", name));
    }
      break;
    case value_e::Str: {
      return static_cast<value__Str*>(UP_val)->s;
    }
      break;
    default: {
      throw Alloc<error::Runtime>(StrFormat("$%s should be a string", name));
    }
  }
}

Str* MaybeString(state::Mem* mem, Str* name) {
  StackRoots _roots({&mem, &name});

  try {
    return GetString(mem, name);
  }
  catch (error::Runtime*) {
    return nullptr;
  }
}

int GetInteger(state::Mem* mem, Str* name) {
  runtime_asdl::value_t* val = nullptr;
  Str* s = nullptr;
  int i;
  StackRoots _roots({&mem, &name, &val, &s});

  val = mem->GetValue(name);
  if (val->tag_() != value_e::Str) {
    throw Alloc<error::Runtime>(StrFormat("$%s should be a string, got %s", name, ui::ValType(val)));
  }
  s = static_cast<value__Str*>(val)->s;
  try {
    i = to_int(s);
  }
  catch (ValueError*) {
    throw Alloc<error::Runtime>(StrFormat("$%s doesn't look like an integer, got %r", name, s));
  }
  return i;
}

}  // define namespace state

namespace ui {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using id_kind_asdl::Id_str;
using syntax_asdl::loc_t;
using syntax_asdl::Token;
using syntax_asdl::SourceLine;
using syntax_asdl::command_t;
using syntax_asdl::command_str;
using syntax_asdl::source_e;
using syntax_asdl::source__Stdin;
using syntax_asdl::source__MainFile;
using syntax_asdl::source__SourcedFile;
using syntax_asdl::source__Alias;
using syntax_asdl::source__Reparsed;
using syntax_asdl::source__Variable;
using syntax_asdl::source__VarRef;
using syntax_asdl::source__ArgvWord;
using syntax_asdl::source__Synthetic;
using runtime_asdl::value_str;
using runtime_asdl::value_t;
namespace fmt = format;
using mylib::print_stderr;
using mylib::StrFromC;

Str* ValType(runtime_asdl::value_t* val) {
  StackRoots _roots({&val});

  return StrFromC(value_str(val->tag_()));
}

Str* CommandType(syntax_asdl::command_t* cmd) {
  StackRoots _roots({&cmd});

  return StrFromC(command_str(cmd->tag_()));
}

Str* PrettyId(int id_) {
  return StrFromC(Id_str(id_));
}

Str* PrettyToken(syntax_asdl::Token* tok, alloc::Arena* arena) {
  Str* val = nullptr;
  StackRoots _roots({&tok, &arena, &val});

  if (tok->id == Id::Eof_Real) {
    return str463;
  }
  val = tok->line->content->slice(tok->col, (tok->col + tok->length));
  return repr(val);
}

Str* PrettyDir(Str* dir_name, Str* home_dir) {
  StackRoots _roots({&dir_name, &home_dir});

  if (home_dir != nullptr) {
    if ((str_equals(dir_name, home_dir) or dir_name->startswith(str_concat(home_dir, str464)))) {
      return str_concat(str465, dir_name->slice(len(home_dir)));
    }
  }
  return dir_name;
}

void _PrintCodeExcerpt(Str* line, int col, int length, mylib::Writer* f) {
  mylib::BufWriter* buf = nullptr;
  StackRoots _roots({&line, &f, &buf});

  buf = Alloc<mylib::BufWriter>();
  buf->write(str466);
  buf->write(line->rstrip());
  buf->write(str467);
  for (StrIter it(line->slice(0, col)); !it.Done(); it.Next()) {
    Str* c = it.Value();
    StackRoots _for({&c  });
    buf->write(str_equals(c, str468) ? str469 : str470);
  }
  buf->write(str471);
  buf->write(str_repeat(str472, (length - 1)));
  buf->write(str473);
  f->write(buf->getvalue());
}

Str* GetLineSourceString(alloc::Arena* arena, syntax_asdl::SourceLine* line, bool quote_filename) {
  syntax_asdl::source_t* src = nullptr;
  syntax_asdl::source_t* UP_src = nullptr;
  Str* s = nullptr;
  syntax_asdl::Token* token = nullptr;
  int line_num;
  Str* outer_source = nullptr;
  Str* var_name = nullptr;
  Str* where = nullptr;
  syntax_asdl::Token* orig_tok = nullptr;
  syntax_asdl::Token* span2 = nullptr;
  StackRoots _roots({&arena, &line, &src, &UP_src, &s, &token, &outer_source, &var_name, &where, &orig_tok, &span2});

  src = line->src;
  UP_src = src;
  switch (src->tag_()) {
    case source_e::Interactive: {
      s = str474;
    }
      break;
    case source_e::Headless: {
      s = str475;
    }
      break;
    case source_e::CFlag: {
      s = str476;
    }
      break;
    case source_e::Stdin: {
      source__Stdin* src = static_cast<source__Stdin*>(UP_src);
      s = StrFormat("[ stdin%s ]", src->comment);
    }
      break;
    case source_e::MainFile: {
      source__MainFile* src = static_cast<source__MainFile*>(UP_src);
      s = src->path;
      if (quote_filename) {
        s = qsn::maybe_encode(s);
      }
    }
      break;
    case source_e::SourcedFile: {
      source__SourcedFile* src = static_cast<source__SourcedFile*>(UP_src);
      s = src->path;
      if (quote_filename) {
        s = qsn::maybe_encode(s);
      }
    }
      break;
    case source_e::ArgvWord: {
      source__ArgvWord* src = static_cast<source__ArgvWord*>(UP_src);
      if (src->span_id == runtime::NO_SPID) {
        s = StrFormat("[ %s word at ? ]", src->what);
      }
      else {
        token = arena->GetToken(src->span_id);
        line_num = token->line->line_num;
        outer_source = GetLineSourceString(arena, token->line, quote_filename);
        s = StrFormat("[ %s word at line %d of %s ]", src->what, line_num, outer_source);
      }
    }
      break;
    case source_e::Variable: {
      source__Variable* src = static_cast<source__Variable*>(UP_src);
      if (src->var_name == nullptr) {
        var_name = str480;
      }
      else {
        var_name = repr(src->var_name);
      }
      if (src->span_id == runtime::NO_SPID) {
        where = str481;
      }
      else {
        token = arena->GetToken(src->span_id);
        line_num = token->line->line_num;
        outer_source = GetLineSourceString(arena, token->line, quote_filename);
        where = StrFormat("line %d of %s", line_num, outer_source);
      }
      s = StrFormat("[ var %s at %s ]", var_name, where);
    }
      break;
    case source_e::VarRef: {
      source__VarRef* src = static_cast<source__VarRef*>(UP_src);
      orig_tok = src->orig_tok;
      line_num = orig_tok->line->line_num;
      outer_source = GetLineSourceString(arena, orig_tok->line, quote_filename);
      where = StrFormat("line %d of %s", line_num, outer_source);
      var_name = lexer::TokenVal(orig_tok);
      s = StrFormat("[ contents of var %r at %s ]", var_name, where);
    }
      break;
    case source_e::Alias: {
      source__Alias* src = static_cast<source__Alias*>(UP_src);
      s = StrFormat("[ expansion of alias %r ]", src->argv0);
    }
      break;
    case source_e::Reparsed: {
      source__Reparsed* src = static_cast<source__Reparsed*>(UP_src);
      span2 = src->left_token;
      outer_source = GetLineSourceString(arena, span2->line, quote_filename);
      s = StrFormat("[ %s in %s ]", src->what, outer_source);
    }
      break;
    case source_e::Synthetic: {
      source__Synthetic* src = static_cast<source__Synthetic*>(UP_src);
      s = StrFormat("-- %s", src->s);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  return s;
}

void _PrintWithSpanId(Str* prefix, Str* msg, int span_id, alloc::Arena* arena, bool show_code) {
  mylib::Writer* f = nullptr;
  syntax_asdl::Token* token = nullptr;
  int orig_col;
  syntax_asdl::source_t* src = nullptr;
  Str* line = nullptr;
  int line_num;
  syntax_asdl::source_t* UP_src = nullptr;
  syntax_asdl::Token* span2 = nullptr;
  Str* line2 = nullptr;
  int lbracket_col;
  Str* source_str = nullptr;
  StackRoots _roots({&prefix, &msg, &arena, &f, &token, &src, &line, &UP_src, &span2, &line2, &source_str});

  f = mylib::Stderr();
  if (span_id == runtime::NO_SPID) {
    f->write(StrFormat("[??? no location ???] %s%s\n", prefix, msg));
    return ;
  }
  token = arena->GetToken(span_id);
  orig_col = token->col;
  src = token->line->src;
  line = token->line->content;
  line_num = token->line->line_num;
  if (show_code) {
    UP_src = src;
    if (src->tag_() == source_e::Reparsed) {
      source__Reparsed* src = static_cast<source__Reparsed*>(UP_src);
      span2 = src->left_token;
      line_num = span2->line->line_num;
      line2 = span2->line->content;
      lbracket_col = (span2->col + span2->length);
      _PrintCodeExcerpt(line2, (orig_col + lbracket_col), 1, f);
    }
    else {
      _PrintCodeExcerpt(line, token->col, token->length, f);
    }
  }
  source_str = GetLineSourceString(arena, token->line, true);
  f->write(StrFormat("%s:%d: %s%s\n", source_str, line_num, prefix, msg));
}

ctx_Location::ctx_Location(ui::ErrorFormatter* errfmt, int spid) 
    : header_(obj_header()) {
  errfmt->spid_stack->append(spid);
  this->errfmt = errfmt;
}

ctx_Location::~ctx_Location(){
  this->errfmt->spid_stack->pop();
}

ErrorFormatter::ErrorFormatter(alloc::Arena* arena) 
    : header_(obj_header()) {
  this->arena = arena;
  this->last_spid = runtime::NO_SPID;
  this->spid_stack = Alloc<List<int>>();
  this->one_line_errexit = false;
}

void ErrorFormatter::OneLineErrExit() {
  this->one_line_errexit = true;
}

int ErrorFormatter::CurrentLocation() {
  if (len(this->spid_stack)) {
    return this->spid_stack->index_(-1);
  }
  else {
    return runtime::NO_SPID;
  }
}

void ErrorFormatter::PrefixPrint(Str* msg, Str* prefix, syntax_asdl::loc_t* blame_loc) {
  int span_id;
  StackRoots _roots({&msg, &prefix, &blame_loc});

  span_id = location::GetSpanId(blame_loc);
  _PrintWithSpanId(prefix, msg, span_id, this->arena, true);
}

void ErrorFormatter::Print_(Str* msg, int span_id) {
  StackRoots _roots({&msg});

  if (span_id == runtime::NO_SPID) {
    span_id = this->CurrentLocation();
  }
  _PrintWithSpanId(str491, msg, span_id, this->arena, true);
}

void ErrorFormatter::PrintMessage(Str* msg, int span_id) {
  StackRoots _roots({&msg});

  if (span_id == runtime::NO_SPID) {
    span_id = this->CurrentLocation();
  }
  _PrintWithSpanId(str492, msg, span_id, this->arena, false);
}

void ErrorFormatter::StderrLine(Str* msg) {
  StackRoots _roots({&msg});

  print_stderr(msg);
}

void ErrorFormatter::PrettyPrintError(error::_ErrorWithLocation* err, Str* prefix) {
  Str* msg = nullptr;
  int span_id;
  StackRoots _roots({&err, &prefix, &msg});

  msg = err->UserErrorString();
  span_id = location::GetSpanId(err->location);
  _PrintWithSpanId(prefix, msg, span_id, this->arena, true);
}

void ErrorFormatter::PrintErrExit(error::ErrExit* err, int pid) {
  Str* prefix = nullptr;
  Str* msg = nullptr;
  int span_id;
  StackRoots _roots({&err, &prefix, &msg});

  prefix = StrFormat("errexit PID %d: ", pid);
  msg = err->UserErrorString();
  span_id = location::GetSpanId(err->location);
  _PrintWithSpanId(prefix, msg, span_id, this->arena, err->show_code);
}

void PrintAst(syntax_asdl::command_t* node, arg_types::main* flag) {
  mylib::Writer* f = nullptr;
  Str* afmt = nullptr;
  format::ColorOutput* ast_f = nullptr;
  hnode_asdl::hnode_t* tree = nullptr;
  StackRoots _roots({&node, &flag, &f, &afmt, &ast_f, &tree});

  if (maybe_str_equals(flag->ast_format, str495)) {
    print_stderr(str496);
  }
  else {
    f = mylib::Stdout();
    afmt = flag->ast_format;
    if ((maybe_str_equals(afmt, str497) || maybe_str_equals(afmt, str498))) {
      ast_f = fmt::DetectConsoleOutput(f);
    }
    else {
      if ((maybe_str_equals(afmt, str499) || maybe_str_equals(afmt, str500))) {
        ast_f = Alloc<fmt::HtmlOutput>(f);
      }
      else {
        assert(0);  // AssertionError
      }
    }
    if (str_contains(afmt, str501)) {
      // if not PYTHON
      {
        tree = node->PrettyTree();
      }
      // endif MYCPP
    }
    else {
      tree = node->PrettyTree();
    }
    ast_f->FileHeader();
    fmt::PrintTree(tree, ast_f);
    ast_f->FileFooter();
    ast_f->write(str502);
  }
}

}  // define namespace ui

namespace util {  // define


UserExit::UserExit(int status) 
    : header_(obj_header()) {
  this->status = status;
}

HistoryError::HistoryError(Str* msg) 
    : header_(obj_header()) {
  this->msg = msg;
}

Str* HistoryError::UserErrorString() {
  return StrFormat("history: %s", this->msg);
}

_DebugFile::_DebugFile() 
    : header_(obj_header()) {
  ;  // pass
}

void _DebugFile::log(Str* msg, void* args) {
  StackRoots _roots({&msg, &args});

  ;  // pass
}

void _DebugFile::write(Str* s) {
  StackRoots _roots({&s});

  ;  // pass
}

void _DebugFile::writeln(Str* s) {
  StackRoots _roots({&s});

  this->write(str_concat(s, str504));
}

bool _DebugFile::isatty() {
  return false;
}

NullDebugFile::NullDebugFile() : _DebugFile() {
}

DebugFile::DebugFile(mylib::Writer* f) : _DebugFile() {
  FIELD_MASK(header_) |= DebugFile::field_mask();
  this->f = f;
}

void DebugFile::log(Str* msg, void* args) {
  StackRoots _roots({&msg, &args});

  this->f->write(msg);
  this->f->write(str505);
  this->f->flush();
}

void DebugFile::write(Str* s) {
  StackRoots _roots({&s});

  this->f->write(s);
}

bool DebugFile::isatty() {
  return this->f->isatty();
}

}  // define namespace util

namespace args {  // define

using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value_t;
using runtime_asdl::value__Bool;
using runtime_asdl::value__Int;
using runtime_asdl::value__Float;
using runtime_asdl::value__Str;
using pyerror::e_usage;
int String = 1;
int Int = 2;
int Float = 3;
int Bool = 4;

_Attributes::_Attributes(Dict<Str*, runtime_asdl::value_t*>* defaults) 
    : header_(obj_header()) {
  this->attrs = Alloc<Dict<Str*, runtime_asdl::value_t*>>();
  this->opt_changes = Alloc<List<Tuple2<Str*, bool>*>>();
  this->shopt_changes = Alloc<List<Tuple2<Str*, bool>*>>();
  this->show_options = false;
  this->actions = Alloc<List<Str*>>();
  this->saw_double_dash = false;
  for (DictIter<Str*, runtime_asdl::value_t*> it(defaults); !it.Done(); it.Next()) {
    Str* name = it.Key();
    runtime_asdl::value_t* v = it.Value();
    this->Set(name, v);
  }
}

void _Attributes::SetTrue(Str* name) {
  StackRoots _roots({&name});

  this->Set(name, Alloc<value::Bool>(true));
}

void _Attributes::Set(Str* name, runtime_asdl::value_t* val) {
  StackRoots _roots({&name, &val});

  name = name->replace(str506, str507);
  this->attrs->set(name, val);
}

Reader::Reader(List<Str*>* argv, List<int>* spids) 
    : header_(obj_header()) {
  this->argv = argv;
  this->spids = spids;
  this->n = len(argv);
  this->i = 0;
}

void Reader::Next() {
  this->i += 1;
}

Str* Reader::Peek() {
  if (this->i >= this->n) {
    return nullptr;
  }
  else {
    return this->argv->index_(this->i);
  }
}

Tuple2<Str*, int> Reader::Peek2() {
  Str* no_str = nullptr;
  StackRoots _roots({&no_str});

  if (this->i >= this->n) {
    no_str = nullptr;
    return Tuple2<Str*, int>(no_str, -1);
  }
  else {
    return Tuple2<Str*, int>(this->argv->index_(this->i), this->spids->index_(this->i));
  }
}

Str* Reader::ReadRequired(Str* error_msg) {
  Str* arg = nullptr;
  StackRoots _roots({&error_msg, &arg});

  arg = this->Peek();
  if (arg == nullptr) {
    e_usage(error_msg, this->_FirstSpanId());
  }
  this->Next();
  return arg;
}

Tuple2<Str*, int> Reader::ReadRequired2(Str* error_msg) {
  Str* arg = nullptr;
  int spid;
  StackRoots _roots({&error_msg, &arg});

  arg = this->Peek();
  if (arg == nullptr) {
    e_usage(error_msg, this->_FirstSpanId());
  }
  spid = this->spids->index_(this->i);
  this->Next();
  return Tuple2<Str*, int>(arg, spid);
}

List<Str*>* Reader::Rest() {
  return this->argv->slice(this->i);
}

Tuple2<List<Str*>*, List<int>*> Reader::Rest2() {
  return Tuple2<List<Str*>*, List<int>*>(this->argv->slice(this->i), this->spids->slice(this->i));
}

bool Reader::AtEnd() {
  return this->i >= this->n;
}

int Reader::_FirstSpanId() {
  if (this->spids) {
    return this->spids->index_(0);
  }
  else {
    return runtime::NO_SPID;
  }
}

int Reader::SpanId() {
  int i;
  if (this->spids) {
    if (this->i == this->n) {
      i = (this->n - 1);
    }
    else {
      i = this->i;
    }
    return this->spids->index_(i);
  }
  else {
    return runtime::NO_SPID;
  }
}

_Action::_Action() 
    : header_(obj_header()) {
  ;  // pass
}

bool _Action::OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out) {
  StackRoots _roots({&attached_arg, &arg_r, &out});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

_ArgAction::_ArgAction(Str* name, bool quit_parsing_flags, List<Str*>* valid)  {
  FIELD_MASK(header_) |= _ArgAction::field_mask();
  this->name = name;
  this->quit_parsing_flags = quit_parsing_flags;
  this->valid = valid;
}

runtime_asdl::value_t* _ArgAction::_Value(Str* arg, int span_id) {
  StackRoots _roots({&arg});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

bool _ArgAction::OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out) {
  Str* arg = nullptr;
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&attached_arg, &arg_r, &out, &arg, &val});

  if (attached_arg != nullptr) {
    arg = attached_arg;
  }
  else {
    arg_r->Next();
    arg = arg_r->Peek();
    if (arg == nullptr) {
      e_usage(StrFormat("expected argument to %r", str_concat(str511, this->name)), arg_r->SpanId());
    }
  }
  val = this->_Value(arg, arg_r->SpanId());
  out->Set(this->name, val);
  return this->quit_parsing_flags;
}

SetToInt::SetToInt(Str* name) : _ArgAction(name, false, nullptr) {
}

runtime_asdl::value_t* SetToInt::_Value(Str* arg, int span_id) {
  int i;
  StackRoots _roots({&arg});

  try {
    i = to_int(arg);
  }
  catch (ValueError*) {
    e_usage(StrFormat("expected integer after %s, got %r", str_concat(str513, this->name), arg), span_id);
  }
  if (i < 0) {
    e_usage(StrFormat("got invalid integer for %s: %s", str_concat(str515, this->name), arg), span_id);
  }
  return Alloc<value::Int>(i);
}

SetToFloat::SetToFloat(Str* name) : _ArgAction(name, false, nullptr) {
}

runtime_asdl::value_t* SetToFloat::_Value(Str* arg, int span_id) {
  double f;
  StackRoots _roots({&arg});

  try {
    f = to_float(arg);
  }
  catch (ValueError*) {
    e_usage(StrFormat("expected number after %r, got %r", str_concat(str517, this->name), arg), span_id);
  }
  if (f < 0) {
    e_usage(StrFormat("got invalid float for %s: %s", str_concat(str519, this->name), arg), span_id);
  }
  return Alloc<value::Float>(f);
}

SetToString::SetToString(Str* name, bool quit_parsing_flags, List<Str*>* valid) : _ArgAction(name, quit_parsing_flags, valid) {
}

runtime_asdl::value_t* SetToString::_Value(Str* arg, int span_id) {
  StackRoots _roots({&arg});

  if ((this->valid != nullptr and !list_contains(this->valid, arg))) {
    e_usage(StrFormat("got invalid argument %r to %r, expected one of: %s", arg, str_concat(str521, this->name), str522->join(this->valid)), span_id);
  }
  return Alloc<value::Str>(arg);
}

SetAttachedBool::SetAttachedBool(Str* name)  {
  FIELD_MASK(header_) |= SetAttachedBool::field_mask();
  this->name = name;
}

bool SetAttachedBool::OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out) {
  bool b;
  StackRoots _roots({&attached_arg, &arg_r, &out});

  if (attached_arg != nullptr) {
    if ((str_equals(attached_arg, str523) || str_equals(attached_arg, str524) || str_equals(attached_arg, str525) || str_equals(attached_arg, str526))) {
      b = false;
    }
    else {
      if ((str_equals(attached_arg, str527) || str_equals(attached_arg, str528) || str_equals(attached_arg, str529) || str_equals(attached_arg, str530))) {
        b = true;
      }
      else {
        e_usage(StrFormat("got invalid argument to boolean flag: %r", attached_arg));
      }
    }
  }
  else {
    b = true;
  }
  out->Set(this->name, Alloc<value::Bool>(b));
  return false;
}

SetToTrue::SetToTrue(Str* name)  {
  FIELD_MASK(header_) |= SetToTrue::field_mask();
  this->name = name;
}

bool SetToTrue::OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out) {
  StackRoots _roots({&attached_arg, &arg_r, &out});

  out->SetTrue(this->name);
  return false;
}

SetOption::SetOption(Str* name)  {
  FIELD_MASK(header_) |= SetOption::field_mask();
  this->name = name;
}

bool SetOption::OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out) {
  bool b;
  StackRoots _roots({&attached_arg, &arg_r, &out});

  b = maybe_str_equals(attached_arg, str532);
  out->opt_changes->append((Alloc<Tuple2<Str*, bool>>(this->name, b)));
  return false;
}

SetNamedOption::SetNamedOption(bool shopt)  {
  FIELD_MASK(header_) |= SetNamedOption::field_mask();
  this->names = Alloc<List<Str*>>();
  this->shopt = shopt;
}

void SetNamedOption::ArgName(Str* name) {
  StackRoots _roots({&name});

  this->names->append(name);
}

bool SetNamedOption::OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out) {
  bool b;
  Str* arg = nullptr;
  Str* attr_name = nullptr;
  List<Tuple2<Str*, bool>*>* changes = nullptr;
  StackRoots _roots({&attached_arg, &arg_r, &out, &arg, &attr_name, &changes});

  b = maybe_str_equals(attached_arg, str533);
  arg_r->Next();
  arg = arg_r->Peek();
  if (arg == nullptr) {
    out->show_options = true;
    return true;
  }
  attr_name = arg;
  if ((len(this->names) and !list_contains(this->names, attr_name))) {
    e_usage(StrFormat("Invalid option %r", arg));
  }
  changes = this->shopt ? out->shopt_changes : out->opt_changes;
  changes->append((Alloc<Tuple2<Str*, bool>>(attr_name, b)));
  return false;
}

SetAction::SetAction(Str* name)  {
  FIELD_MASK(header_) |= SetAction::field_mask();
  this->name = name;
}

bool SetAction::OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out) {
  StackRoots _roots({&attached_arg, &arg_r, &out});

  out->actions->append(this->name);
  return false;
}

SetNamedAction::SetNamedAction()  {
  FIELD_MASK(header_) |= SetNamedAction::field_mask();
  this->names = Alloc<List<Str*>>();
}

void SetNamedAction::ArgName(Str* name) {
  StackRoots _roots({&name});

  this->names->append(name);
}

bool SetNamedAction::OnMatch(Str* attached_arg, args::Reader* arg_r, args::_Attributes* out) {
  Str* arg = nullptr;
  Str* attr_name = nullptr;
  StackRoots _roots({&attached_arg, &arg_r, &out, &arg, &attr_name});

  arg_r->Next();
  arg = arg_r->Peek();
  if (arg == nullptr) {
    e_usage(str535);
  }
  attr_name = arg;
  if ((len(this->names) and !list_contains(this->names, attr_name))) {
    e_usage(StrFormat("Invalid action name %r", arg));
  }
  out->actions->append(attr_name);
  return false;
}

args::_Attributes* Parse(flag_spec::_FlagSpec* spec, args::Reader* arg_r) {
  args::_Attributes* out = nullptr;
  Str* arg = nullptr;
  int pos;
  Str* suffix = nullptr;
  Str* flag_name = nullptr;
  args::_Action* action = nullptr;
  int n;
  Str* ch = nullptr;
  Str* attached_arg = nullptr;
  StackRoots _roots({&spec, &arg_r, &out, &arg, &suffix, &flag_name, &action, &ch, &attached_arg});

  out = Alloc<_Attributes>(spec->defaults);
  while (!arg_r->AtEnd()) {
    arg = arg_r->Peek();
    if (maybe_str_equals(arg, str537)) {
      out->saw_double_dash = true;
      arg_r->Next();
      break;
    }
    if ((len(spec->actions_long) and arg->startswith(str538))) {
      pos = arg->find(str539, 2);
      if (pos == -1) {
        suffix = nullptr;
        flag_name = arg->slice(2);
      }
      else {
        suffix = arg->slice((pos + 1));
        flag_name = arg->slice(2, pos);
      }
      action = spec->actions_long->get(flag_name);
      if (action == nullptr) {
        e_usage(StrFormat("got invalid flag %r", arg), arg_r->SpanId());
      }
      action->OnMatch(suffix, arg_r, out);
      arg_r->Next();
      continue;
    }
    else {
      if ((arg->startswith(str541) and len(arg) > 1)) {
        n = len(arg);
        for (int i = 1; i < n; ++i) {
          ch = arg->index_(i);
          if (str_equals(ch, str542)) {
            ch = str543;
          }
          if (list_contains(spec->plus_flags, ch)) {
            out->Set(ch, Alloc<value::Str>(str544));
            continue;
          }
          if (list_contains(spec->arity0, ch)) {
            out->SetTrue(ch);
            continue;
          }
          if (dict_contains(spec->arity1, ch)) {
            action = spec->arity1->index_(ch);
            attached_arg = i < (n - 1) ? arg->slice((i + 1)) : nullptr;
            action->OnMatch(attached_arg, arg_r, out);
            break;
          }
          e_usage(StrFormat("doesn't accept flag %s", str_concat(str546, ch)), arg_r->SpanId());
        }
        arg_r->Next();
      }
      else {
        if ((len(spec->plus_flags) and (arg->startswith(str547) and len(arg) > 1))) {
          n = len(arg);
          for (int i = 1; i < n; ++i) {
            ch = arg->index_(i);
            if (list_contains(spec->plus_flags, ch)) {
              out->Set(ch, Alloc<value::Str>(str548));
              continue;
            }
            e_usage(StrFormat("doesn't accept option %s", str_concat(str550, ch)), arg_r->SpanId());
          }
          arg_r->Next();
        }
        else {
          break;
        }
      }
    }
  }
  return out;
}

args::_Attributes* ParseLikeEcho(flag_spec::_FlagSpec* spec, args::Reader* arg_r) {
  args::_Attributes* out = nullptr;
  Str* arg = nullptr;
  Str* chars = nullptr;
  bool done;
  StackRoots _roots({&spec, &arg_r, &out, &arg, &chars});

  out = Alloc<_Attributes>(spec->defaults);
  while (!arg_r->AtEnd()) {
    arg = arg_r->Peek();
    chars = arg->slice(1);
    if ((arg->startswith(str551) and len(chars))) {
      done = false;
      for (StrIter it(chars); !it.Done(); it.Next()) {
        Str* c = it.Value();
        StackRoots _for({&c      });
        if (!list_contains(spec->arity0, c)) {
          done = true;
          break;
        }
      }
      if (done) {
        break;
      }
      for (StrIter it(chars); !it.Done(); it.Next()) {
        Str* ch = it.Value();
        StackRoots _for({&ch      });
        out->SetTrue(ch);
      }
    }
    else {
      break;
    }
    arg_r->Next();
  }
  return out;
}

args::_Attributes* ParseMore(flag_spec::_FlagSpecAndMore* spec, args::Reader* arg_r) {
  args::_Attributes* out = nullptr;
  bool quit;
  Str* arg = nullptr;
  args::_Action* action = nullptr;
  Str* char0 = nullptr;
  Str* attached_arg = nullptr;
  StackRoots _roots({&spec, &arg_r, &out, &arg, &action, &char0, &attached_arg});

  out = Alloc<_Attributes>(spec->defaults);
  quit = false;
  while (!arg_r->AtEnd()) {
    arg = arg_r->Peek();
    if (maybe_str_equals(arg, str552)) {
      out->saw_double_dash = true;
      arg_r->Next();
      break;
    }
    if (arg->startswith(str553)) {
      action = spec->actions_long->get(arg->slice(2));
      if (action == nullptr) {
        e_usage(StrFormat("got invalid flag %r", arg), arg_r->SpanId());
      }
      action->OnMatch(nullptr, arg_r, out);
      arg_r->Next();
      continue;
    }
    if (((arg->startswith(str555) or arg->startswith(str556)) and len(arg) > 1)) {
      char0 = arg->index_(0);
      for (StrIter it(arg->slice(1)); !it.Done(); it.Next()) {
        Str* ch = it.Value();
        StackRoots _for({&ch      });
        action = spec->actions_short->get(ch);
        if (action == nullptr) {
          e_usage(StrFormat("got invalid flag %r", str_concat(str558, ch)), arg_r->SpanId());
        }
        attached_arg = list_contains(spec->plus_flags, ch) ? char0 : nullptr;
        quit = action->OnMatch(attached_arg, arg_r, out);
      }
      arg_r->Next();
      if (quit) {
        break;
      }
      else {
        continue;
      }
    }
    break;
  }
  return out;
}

}  // define namespace args

namespace lexer {  // define

using syntax_asdl::Token;
using syntax_asdl::SourceLine;
using types_asdl::lex_mode_t;
using types_asdl::lex_mode_e;
using id_kind_asdl::Id_t;
using id_kind_asdl::Id;
using id_kind_asdl::Id_str;
using id_kind_asdl::Kind;

Token gobj0(Id::Eol_Tok, -1, -1, runtime::NO_SPID, nullptr, nullptr);
syntax_asdl::Token* _EOL_TOK = &gobj0;

bool IsPlusEquals(syntax_asdl::Token* tok) {
  int index;
  StackRoots _roots({&tok});

  index = ((tok->col + tok->length) - 2);
  return str_equals(tok->line->content->index_(index), str559);
}

Str* TokenVal(syntax_asdl::Token* tok) {
  StackRoots _roots({&tok});

  return tok->line->content->slice(tok->col, (tok->col + tok->length));
}

Str* TokenSliceLeft(syntax_asdl::Token* tok, int left_index) {
  int left;
  StackRoots _roots({&tok});

  left = (tok->col + left_index);
  return tok->line->content->slice(left, (tok->col + tok->length));
}

Str* TokenSliceRight(syntax_asdl::Token* tok, int right_index) {
  int right;
  StackRoots _roots({&tok});

  right = ((tok->col + tok->length) + right_index);
  return tok->line->content->slice(tok->col, right);
}

syntax_asdl::Token* DummyToken(int id_, Str* val) {
  int col;
  int length;
  StackRoots _roots({&val});

  col = -1;
  length = -1;
  return Alloc<Token>(id_, col, length, runtime::NO_SPID, nullptr, val);
}

LineLexer::LineLexer(alloc::Arena* arena) 
    : header_(obj_header()) {
  this->arena = arena;
  this->replace_last_token = false;
  this->Reset(nullptr, 0);
}

void LineLexer::Reset(syntax_asdl::SourceLine* src_line, int line_pos) {
  StackRoots _roots({&src_line});

  this->src_line = src_line;
  this->line_pos = line_pos;
}

bool LineLexer::MaybeUnreadOne() {
  if (this->line_pos == 0) {
    return false;
  }
  else {
    this->line_pos -= 1;
    this->replace_last_token = true;
    return true;
  }
}

syntax_asdl::Token* LineLexer::GetEofToken(int id_) {
  syntax_asdl::SourceLine* src_line = nullptr;
  StackRoots _roots({&src_line});

  if (this->src_line == nullptr) {
    src_line = this->arena->AddLine(str561, 0);
  }
  else {
    src_line = this->src_line;
  }
  return this->arena->NewToken(id_, this->line_pos, 0, src_line, str562);
}

int LineLexer::LookAheadOne(types_asdl::lex_mode_t lex_mode) {
  int pos;
  Str* line_str = nullptr;
  int n;
  int tok_type;
  StackRoots _roots({&line_str});

  pos = this->line_pos;
  line_str = this->src_line->content;
  n = len(line_str);
  if (pos == n) {
    return Id::Unknown_Tok;
  }
  else {
    Tuple2<int, int> tup1 = match::OneToken(lex_mode, line_str, pos);
    tok_type = tup1.at0();
    return tok_type;
  }
}

int LineLexer::LookPastSpace(types_asdl::lex_mode_t lex_mode) {
  int pos;
  Str* line_str = nullptr;
  int n;
  int tok_type;
  int end_pos;
  StackRoots _roots({&line_str});

  pos = this->line_pos;
  line_str = this->src_line->content;
  n = len(line_str);
  while (true) {
    if (pos == n) {
      return Id::Unknown_Tok;
    }
    Tuple2<int, int> tup2 = match::OneToken(lex_mode, line_str, pos);
    tok_type = tup2.at0();
    end_pos = tup2.at1();
    if (tok_type != Id::WS_Space) {
      break;
    }
    pos = end_pos;
  }
  return tok_type;
}

bool LineLexer::LookAheadFuncParens(int unread) {
  int pos;
  int tok_type;
  pos = (this->line_pos - unread);
  Tuple2<int, int> tup3 = match::OneToken(lex_mode_e::FuncParens, this->src_line->content, pos);
  tok_type = tup3.at0();
  return tok_type == Id::LookAhead_FuncParens;
}

Str* LineLexer::ByteLookAhead() {
  int pos;
  pos = this->line_pos;
  if (pos == len(this->src_line->content)) {
    return str563;
  }
  else {
    return this->src_line->content->index_(pos);
  }
}

int LineLexer::ByteLookBack() {
  int pos;
  pos = (this->line_pos - 2);
  if (pos < 0) {
    return -1;
  }
  else {
    return ord(this->src_line->content->index_(pos));
  }
}

syntax_asdl::Token* LineLexer::Read(types_asdl::lex_mode_t lex_mode) {
  Str* line_str = nullptr;
  int line_pos;
  int tok_type;
  int end_pos;
  id_kind_asdl::Kind_t kind;
  Str* tok_val = nullptr;
  int tok_len;
  syntax_asdl::Token* t = nullptr;
  StackRoots _roots({&line_str, &tok_val, &t});

  if (this->src_line) {
    line_str = this->src_line->content;
  }
  else {
    line_str = str564;
  }
  line_pos = this->line_pos;
  Tuple2<int, int> tup4 = match::OneToken(lex_mode, line_str, line_pos);
  tok_type = tup4.at0();
  end_pos = tup4.at1();
  if (tok_type == Id::Eol_Tok) {
    return _EOL_TOK;
  }
  kind = consts::GetKind(tok_type);
  if ((kind == Kind::Arith || kind == Kind::Op || kind == Kind::VTest || kind == Kind::VOp0 || kind == Kind::VOp2 || kind == Kind::VOp3 || kind == Kind::WS || kind == Kind::Ignored || kind == Kind::Eof)) {
    tok_val = nullptr;
  }
  else {
    tok_val = line_str->slice(line_pos, end_pos);
  }
  if (this->replace_last_token) {
    this->arena->tokens->pop();
    this->replace_last_token = false;
  }
  tok_len = (end_pos - line_pos);
  t = this->arena->NewToken(tok_type, line_pos, tok_len, this->src_line, tok_val);
  this->line_pos = end_pos;
  return t;
}

Lexer::Lexer(lexer::LineLexer* line_lexer, reader::_Reader* line_reader) 
    : header_(obj_header()) {
  this->line_lexer = line_lexer;
  this->line_reader = line_reader;
  this->line_id = -1;
  this->translation_stack = Alloc<List<Tuple2<int, int>*>>();
  this->emit_comp_dummy = false;
}

void Lexer::ResetInputObjects() {
  this->line_lexer->Reset(nullptr, 0);
}

bool Lexer::MaybeUnreadOne() {
  return this->line_lexer->MaybeUnreadOne();
}

int Lexer::LookAheadOne(types_asdl::lex_mode_t lex_mode) {
  return this->line_lexer->LookAheadOne(lex_mode);
}

int Lexer::LookPastSpace(types_asdl::lex_mode_t lex_mode) {
  return this->line_lexer->LookPastSpace(lex_mode);
}

bool Lexer::LookAheadFuncParens(int unread) {
  return this->line_lexer->LookAheadFuncParens(unread);
}

Str* Lexer::ByteLookAhead() {
  return this->line_lexer->ByteLookAhead();
}

int Lexer::ByteLookBack() {
  return this->line_lexer->ByteLookBack();
}

void Lexer::EmitCompDummy() {
  this->emit_comp_dummy = true;
}

void Lexer::PushHint(int old_id, int new_id) {
  this->translation_stack->append((Alloc<Tuple2<int, int>>(old_id, new_id)));
}

syntax_asdl::Token* Lexer::_Read(types_asdl::lex_mode_t lex_mode) {
  syntax_asdl::Token* t = nullptr;
  syntax_asdl::SourceLine* src_line = nullptr;
  int line_pos;
  int id_;
  int old_id;
  int new_id;
  StackRoots _roots({&t, &src_line});

  t = this->line_lexer->Read(lex_mode);
  if (t->id == Id::Eol_Tok) {
    Tuple2<syntax_asdl::SourceLine*, int> tup5 = this->line_reader->GetLine();
    src_line = tup5.at0();
    line_pos = tup5.at1();
    if (src_line == nullptr) {
      if (this->emit_comp_dummy) {
        id_ = Id::Lit_CompDummy;
        this->emit_comp_dummy = false;
      }
      else {
        id_ = Id::Eof_Real;
      }
      return this->line_lexer->GetEofToken(id_);
    }
    this->line_lexer->Reset(src_line, line_pos);
    t = this->line_lexer->Read(lex_mode);
  }
  if (len(this->translation_stack)) {
    Tuple2<int, int>* tup6 = this->translation_stack->index_(-1);
    old_id = tup6->at0();
    new_id = tup6->at1();
    if (t->id == old_id) {
      this->translation_stack->pop();
      t->id = new_id;
    }
  }
  return t;
}

syntax_asdl::Token* Lexer::Read(types_asdl::lex_mode_t lex_mode) {
  syntax_asdl::Token* t = nullptr;
  StackRoots _roots({&t});

  while (true) {
    t = this->_Read(lex_mode);
    if (t->id != Id::Ignored_LineCont) {
      break;
    }
  }
  return t;
}

}  // define namespace lexer

namespace location {  // define

using syntax_asdl::loc_t;
using syntax_asdl::loc_e;
using syntax_asdl::loc__Span;
using syntax_asdl::loc__WordPart;
using syntax_asdl::loc__Word;
using syntax_asdl::command_e;
using syntax_asdl::command_t;
using syntax_asdl::command__Simple;
using syntax_asdl::command__ShAssignment;
using syntax_asdl::command__Pipeline;
using syntax_asdl::command__AndOr;
using syntax_asdl::command__DoGroup;
using syntax_asdl::command__Sentence;
using syntax_asdl::command__Subshell;
using syntax_asdl::command__WhileUntil;
using syntax_asdl::command__If;
using syntax_asdl::command__Case;
using syntax_asdl::command__TimeBlock;
using syntax_asdl::BraceGroup;
using syntax_asdl::arith_expr_e;
using syntax_asdl::arith_expr_t;
using syntax_asdl::compound_word;
using syntax_asdl::simple_var_sub;
using syntax_asdl::Token;
using runtime_asdl::lvalue;
using runtime_asdl::lvalue__Named;

runtime_asdl::lvalue__Named* LName(Str* name) {
  StackRoots _roots({&name});

  return Alloc<lvalue::Named>(name, runtime::NO_SPID);
}

int GetSpanId(syntax_asdl::loc_t* loc_) {
  syntax_asdl::loc_t* UP_location = nullptr;
  StackRoots _roots({&loc_, &UP_location});

  UP_location = loc_;
  switch (loc_->tag_()) {
    case loc_e::Missing: {
      return runtime::NO_SPID;
    }
      break;
    case loc_e::Token: {
      Token* tok = static_cast<Token*>(UP_location);
      if (tok) {
        return tok->span_id;
      }
      else {
        return runtime::NO_SPID;
      }
    }
      break;
    case loc_e::Span: {
      loc__Span* loc_ = static_cast<loc__Span*>(UP_location);
      return loc_->span_id;
    }
      break;
    case loc_e::WordPart: {
      loc__WordPart* loc_ = static_cast<loc__WordPart*>(UP_location);
      if (loc_->p) {
        return word_::LeftMostSpanForPart(loc_->p);
      }
      else {
        return runtime::NO_SPID;
      }
    }
      break;
    case loc_e::Word: {
      loc__Word* loc_ = static_cast<loc__Word*>(UP_location);
      if (loc_->w) {
        return word_::LeftMostSpanForWord(loc_->w);
      }
      else {
        return runtime::NO_SPID;
      }
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  assert(0);  // AssertionError
}

int SpanForCommand(syntax_asdl::command_t* node) {
  syntax_asdl::command_t* UP_node = nullptr;
  int tag;
  StackRoots _roots({&node, &UP_node});

  UP_node = node;
  tag = node->tag_();
  if (tag == command_e::Sentence) {
    command__Sentence* node = static_cast<command__Sentence*>(UP_node);
    return node->terminator->span_id;
  }
  if (tag == command_e::Simple) {
    command__Simple* node = static_cast<command__Simple*>(UP_node);
    if (len(node->words)) {
      return word_::LeftMostSpanForWord(node->words->index_(0));
    }
    else {
      if (len(node->redirects)) {
        return node->redirects->index_(0)->op->span_id;
      }
    }
  }
  if (tag == command_e::ShAssignment) {
    command__ShAssignment* node = static_cast<command__ShAssignment*>(UP_node);
    return node->spids->index_(0);
  }
  if (tag == command_e::Pipeline) {
    command__Pipeline* node = static_cast<command__Pipeline*>(UP_node);
    return node->spids->index_(0);
  }
  if (tag == command_e::AndOr) {
    command__AndOr* node = static_cast<command__AndOr*>(UP_node);
    return node->spids->index_(0);
  }
  if (tag == command_e::DoGroup) {
    command__DoGroup* node = static_cast<command__DoGroup*>(UP_node);
    return node->spids->index_(0);
  }
  if (tag == command_e::BraceGroup) {
    BraceGroup* node = static_cast<BraceGroup*>(UP_node);
    return node->left->span_id;
  }
  if (tag == command_e::Subshell) {
    command__Subshell* node = static_cast<command__Subshell*>(UP_node);
    return node->spids->index_(0);
  }
  if (tag == command_e::WhileUntil) {
    command__WhileUntil* node = static_cast<command__WhileUntil*>(UP_node);
    return node->spids->index_(0);
  }
  if (tag == command_e::If) {
    command__If* node = static_cast<command__If*>(UP_node);
    return node->arms->index_(0)->spids->index_(0);
  }
  if (tag == command_e::Case) {
    command__Case* node = static_cast<command__Case*>(UP_node);
    return node->spids->index_(0);
  }
  if (tag == command_e::TimeBlock) {
    command__TimeBlock* node = static_cast<command__TimeBlock*>(UP_node);
    return node->spids->index_(0);
  }
  return runtime::NO_SPID;
}

int SpanForArithExpr(syntax_asdl::arith_expr_t* node) {
  syntax_asdl::arith_expr_t* UP_node = nullptr;
  StackRoots _roots({&node, &UP_node});

  UP_node = node;
  switch (node->tag_()) {
    case arith_expr_e::VarSub: {
      simple_var_sub* vsub = static_cast<simple_var_sub*>(UP_node);
      return vsub->left->span_id;
    }
      break;
    case arith_expr_e::Word: {
      compound_word* w = static_cast<compound_word*>(UP_node);
      return word_::LeftMostSpanForWord(w);
    }
      break;
  }
  return runtime::NO_SPID;
}

}  // define namespace location

namespace parse_lib {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using syntax_asdl::Token;
using syntax_asdl::compound_word;
using syntax_asdl::expr_t;
using syntax_asdl::word_t;
using syntax_asdl::redir;
using syntax_asdl::ArgList;
using syntax_asdl::name_type;
using types_asdl::lex_mode_e;
using pyerror::p_die;

_BaseTrail::_BaseTrail() 
    : header_(obj_header()) {
  this->words = Alloc<List<syntax_asdl::compound_word*>>();
  this->redirects = Alloc<List<syntax_asdl::redir*>>();
  this->tokens = Alloc<List<syntax_asdl::Token*>>();
  this->alias_words = Alloc<List<syntax_asdl::compound_word*>>();
  this->_expanding_alias = false;
}

void _BaseTrail::Clear() {
  ;  // pass
}

void _BaseTrail::SetLatestWords(List<syntax_asdl::compound_word*>* words, List<syntax_asdl::redir*>* redirects) {
  StackRoots _roots({&words, &redirects});

  ;  // pass
}

void _BaseTrail::AppendToken(syntax_asdl::Token* token) {
  StackRoots _roots({&token});

  ;  // pass
}

void _BaseTrail::BeginAliasExpansion() {
  ;  // pass
}

void _BaseTrail::EndAliasExpansion() {
  ;  // pass
}

ctx_Alias::ctx_Alias(parse_lib::_BaseTrail* trail) 
    : header_(obj_header()) {
  trail->_expanding_alias = true;
  this->trail = trail;
}

ctx_Alias::~ctx_Alias(){
  this->trail->_expanding_alias = false;
}

Trail::Trail() : _BaseTrail() {
}

void Trail::Clear() {
  this->words->clear();
  this->redirects->clear();
  this->tokens->clear();
  this->alias_words->clear();
}

void Trail::SetLatestWords(List<syntax_asdl::compound_word*>* words, List<syntax_asdl::redir*>* redirects) {
  StackRoots _roots({&words, &redirects});

  if (this->_expanding_alias) {
    this->alias_words = words;
    return ;
  }
  this->words = words;
  this->redirects = redirects;
}

void Trail::AppendToken(syntax_asdl::Token* token) {
  StackRoots _roots({&token});

  if (this->_expanding_alias) {
    return ;
  }
  this->tokens->append(token);
}

ParseContext::ParseContext(alloc::Arena* arena, optview::Parse* parse_opts, Dict<Str*, Str*>* aliases, grammar::Grammar* oil_grammar, bool one_pass_parse) 
    : header_(obj_header()) {
  this->arena = arena;
  this->parse_opts = parse_opts;
  this->aliases = aliases;
  this->oil_grammar = oil_grammar;
  this->one_pass_parse = one_pass_parse;
  if (oil_grammar) {
    this->tr = Alloc<expr_to_ast::Transformer>(oil_grammar);
  }
  else {
    this->tr = nullptr;
  }
  this->trail = Alloc<_BaseTrail>();
}

void ParseContext::Init_Trail(parse_lib::_BaseTrail* trail) {
  StackRoots _roots({&trail});

  this->trail = trail;
}

lexer::Lexer* ParseContext::MakeLexer(reader::_Reader* line_reader) {
  lexer::LineLexer* line_lexer = nullptr;
  StackRoots _roots({&line_reader, &line_lexer});

  line_lexer = Alloc<lexer::LineLexer>(line_reader->arena);
  return Alloc<lexer::Lexer>(line_lexer, line_reader);
}

cmd_parse::CommandParser* ParseContext::MakeOshParser(reader::_Reader* line_reader, bool emit_comp_dummy) {
  lexer::Lexer* lx = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  StackRoots _roots({&line_reader, &lx, &w_parser, &c_parser});

  lx = this->MakeLexer(line_reader);
  if (emit_comp_dummy) {
    lx->EmitCompDummy();
  }
  w_parser = Alloc<word_parse::WordParser>(this, lx, line_reader);
  c_parser = Alloc<cmd_parse::CommandParser>(this, this->parse_opts, w_parser, lx, line_reader);
  return c_parser;
}

cmd_parse::CommandParser* ParseContext::MakeConfigParser(reader::_Reader* line_reader) {
  lexer::Lexer* lx = nullptr;
  optview::Parse* parse_opts = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  StackRoots _roots({&line_reader, &lx, &parse_opts, &w_parser, &c_parser});

  lx = this->MakeLexer(line_reader);
  parse_opts = state::MakeOilOpts();
  w_parser = Alloc<word_parse::WordParser>(this, lx, line_reader);
  c_parser = Alloc<cmd_parse::CommandParser>(this, parse_opts, w_parser, lx, line_reader);
  return c_parser;
}

word_parse::WordParser* ParseContext::MakeWordParserForHereDoc(reader::_Reader* line_reader) {
  lexer::Lexer* lx = nullptr;
  StackRoots _roots({&line_reader, &lx});

  lx = this->MakeLexer(line_reader);
  return Alloc<word_parse::WordParser>(this, lx, line_reader);
}

word_parse::WordParser* ParseContext::MakeWordParser(lexer::Lexer* lx, reader::_Reader* line_reader) {
  StackRoots _roots({&lx, &line_reader});

  return Alloc<word_parse::WordParser>(this, lx, line_reader);
}

tdop::TdopParser* ParseContext::MakeArithParser(Str* code_str) {
  reader::FileLineReader* line_reader = nullptr;
  lexer::Lexer* lx = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  tdop::TdopParser* a_parser = nullptr;
  StackRoots _roots({&code_str, &line_reader, &lx, &w_parser, &a_parser});

  line_reader = reader::StringLineReader(code_str, this->arena);
  lx = this->MakeLexer(line_reader);
  w_parser = Alloc<word_parse::WordParser>(this, lx, line_reader);
  w_parser->Init(lex_mode_e::Arith);
  a_parser = Alloc<tdop::TdopParser>(arith_parse::Spec(), w_parser, this->parse_opts);
  return a_parser;
}

cmd_parse::CommandParser* ParseContext::MakeParserForCommandSub(reader::_Reader* line_reader, lexer::Lexer* lexer, int eof_id) {
  word_parse::WordParser* w_parser = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  StackRoots _roots({&line_reader, &lexer, &w_parser, &c_parser});

  w_parser = Alloc<word_parse::WordParser>(this, lexer, line_reader);
  c_parser = Alloc<cmd_parse::CommandParser>(this, this->parse_opts, w_parser, lexer, line_reader, eof_id);
  return c_parser;
}

word_parse::WordParser* ParseContext::MakeWordParserForPlugin(Str* code_str) {
  reader::FileLineReader* line_reader = nullptr;
  lexer::Lexer* lx = nullptr;
  StackRoots _roots({&code_str, &line_reader, &lx});

  line_reader = reader::StringLineReader(code_str, this->arena);
  lx = this->MakeLexer(line_reader);
  return Alloc<word_parse::WordParser>(this, lx, line_reader);
}

Tuple2<pnode::PNode*, syntax_asdl::Token*> ParseContext::_ParseOil(lexer::Lexer* lexer, int start_symbol) {
  expr_parse::ExprParser* e_parser = nullptr;
  StackRoots _roots({&lexer, &e_parser});

  e_parser = Alloc<expr_parse::ExprParser>(this, this->oil_grammar, false);
  return e_parser->Parse(lexer, start_symbol);
}

Tuple2<pnode::PNode*, syntax_asdl::Token*> ParseContext::_ParseTea(lexer::Lexer* lexer, int start_symbol) {
  expr_parse::ExprParser* e_parser = nullptr;
  StackRoots _roots({&lexer, &e_parser});

  e_parser = Alloc<expr_parse::ExprParser>(this, this->oil_grammar, true);
  return e_parser->Parse(lexer, start_symbol);
}

Tuple2<syntax_asdl::command__VarDecl*, syntax_asdl::Token*> ParseContext::ParseVarDecl(syntax_asdl::Token* kw_token, lexer::Lexer* lexer) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  syntax_asdl::command__VarDecl* ast_node = nullptr;
  StackRoots _roots({&kw_token, &lexer, &pnode, &last_token, &ast_node});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup0 = this->_ParseOil(lexer, grammar_nt::oil_var_decl);
  pnode = tup0.at0();
  last_token = tup0.at1();
  ast_node = this->tr->MakeVarDecl(pnode);
  ast_node->keyword = kw_token;
  return Tuple2<syntax_asdl::command__VarDecl*, syntax_asdl::Token*>(ast_node, last_token);
}

Tuple2<syntax_asdl::command__PlaceMutation*, syntax_asdl::Token*> ParseContext::ParsePlaceMutation(syntax_asdl::Token* kw_token, lexer::Lexer* lexer) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  syntax_asdl::command__PlaceMutation* ast_node = nullptr;
  StackRoots _roots({&kw_token, &lexer, &pnode, &last_token, &ast_node});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup1 = this->_ParseOil(lexer, grammar_nt::oil_place_mutation);
  pnode = tup1.at0();
  last_token = tup1.at1();
  ast_node = this->tr->MakePlaceMutation(pnode);
  ast_node->keyword = kw_token;
  return Tuple2<syntax_asdl::command__PlaceMutation*, syntax_asdl::Token*>(ast_node, last_token);
}

void ParseContext::ParseOilArgList(lexer::Lexer* lx, syntax_asdl::ArgList* out) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&lx, &out, &pnode, &last_token});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup2 = this->_ParseOil(lx, grammar_nt::oil_arglist);
  pnode = tup2.at0();
  last_token = tup2.at1();
  this->tr->ToArgList(pnode, out);
  out->right = last_token;
}

Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> ParseContext::ParseOilExpr(lexer::Lexer* lx, int start_symbol) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  syntax_asdl::expr_t* ast_node = nullptr;
  StackRoots _roots({&lx, &pnode, &last_token, &ast_node});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup3 = this->_ParseOil(lx, start_symbol);
  pnode = tup3.at0();
  last_token = tup3.at1();
  ast_node = this->tr->Expr(pnode);
  return Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*>(ast_node, last_token);
}

Tuple3<List<syntax_asdl::name_type*>*, syntax_asdl::expr_t*, syntax_asdl::Token*> ParseContext::ParseOilForExpr(lexer::Lexer* lexer, int start_symbol) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  List<syntax_asdl::name_type*>* lvalue = nullptr;
  syntax_asdl::expr_t* iterable = nullptr;
  StackRoots _roots({&lexer, &pnode, &last_token, &lvalue, &iterable});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup4 = this->_ParseOil(lexer, start_symbol);
  pnode = tup4.at0();
  last_token = tup4.at1();
  Tuple2<List<syntax_asdl::name_type*>*, syntax_asdl::expr_t*> tup5 = this->tr->OilForExpr(pnode);
  lvalue = tup5.at0();
  iterable = tup5.at1();
  return Tuple3<List<syntax_asdl::name_type*>*, syntax_asdl::expr_t*, syntax_asdl::Token*>(lvalue, iterable, last_token);
}

syntax_asdl::Token* ParseContext::ParseProc(lexer::Lexer* lexer, syntax_asdl::command__Proc* out) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&lexer, &out, &pnode, &last_token});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup6 = this->_ParseOil(lexer, grammar_nt::oil_proc);
  pnode = tup6.at0();
  last_token = tup6.at1();
  out->sig = this->tr->Proc(pnode);
  return last_token;
}

syntax_asdl::Token* ParseContext::ParseFunc(lexer::Lexer* lexer, syntax_asdl::command__Func* out) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&lexer, &out, &pnode, &last_token});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup7 = this->_ParseTea(lexer, grammar_nt::named_func);
  pnode = tup7.at0();
  last_token = tup7.at1();
  this->tr->NamedFunc(pnode, out);
  return last_token;
}

syntax_asdl::Token* ParseContext::ParseDataType(lexer::Lexer* lexer, syntax_asdl::command__Data* out) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&lexer, &out, &pnode, &last_token});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup8 = this->_ParseTea(lexer, grammar_nt::tea_data);
  pnode = tup8.at0();
  last_token = tup8.at1();
  this->tr->Data(pnode, out);
  return last_token;
}

syntax_asdl::Token* ParseContext::ParseEnum(lexer::Lexer* lexer, syntax_asdl::command__Enum* out) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&lexer, &out, &pnode, &last_token});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup9 = this->_ParseTea(lexer, grammar_nt::tea_enum);
  pnode = tup9.at0();
  last_token = tup9.at1();
  this->tr->Enum(pnode, out);
  return last_token;
}

syntax_asdl::Token* ParseContext::ParseClass(lexer::Lexer* lexer, syntax_asdl::command__Class* out) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&lexer, &out, &pnode, &last_token});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup10 = this->_ParseTea(lexer, grammar_nt::tea_class);
  pnode = tup10.at0();
  last_token = tup10.at1();
  this->tr->Class(pnode, out);
  return last_token;
}

syntax_asdl::Token* ParseContext::ParseImport(lexer::Lexer* lexer, syntax_asdl::command__Import* out) {
  pnode::PNode* pnode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&lexer, &out, &pnode, &last_token});

  Tuple2<pnode::PNode*, syntax_asdl::Token*> tup11 = this->_ParseTea(lexer, grammar_nt::tea_import);
  pnode = tup11.at0();
  last_token = tup11.at1();
  this->tr->Import(pnode, out);
  return last_token;
}

}  // define namespace parse_lib

namespace reader {  // define

using pyerror::p_die;
Str* _PS2 = str566;

_Reader::_Reader(alloc::Arena* arena) 
    : header_(obj_header()) {
  this->arena = arena;
  this->line_num = 1;
}

void _Reader::SetLineOffset(int n) {
  this->line_num = n;
}

Str* _Reader::_GetLine() {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

Tuple2<syntax_asdl::SourceLine*, int> _Reader::GetLine() {
  Str* line_str = nullptr;
  syntax_asdl::SourceLine* eof_line = nullptr;
  syntax_asdl::SourceLine* src_line = nullptr;
  StackRoots _roots({&line_str, &eof_line, &src_line});

  line_str = this->_GetLine();
  if (line_str == nullptr) {
    eof_line = nullptr;
    return Tuple2<syntax_asdl::SourceLine*, int>(eof_line, 0);
  }
  src_line = this->arena->AddLine(line_str, this->line_num);
  this->line_num += 1;
  return Tuple2<syntax_asdl::SourceLine*, int>(src_line, 0);
}

void _Reader::Reset() {
  ;  // pass
}

bool _Reader::LastLineHint() {
  return false;
}

DisallowedLineReader::DisallowedLineReader(alloc::Arena* arena, syntax_asdl::Token* blame_token) : _Reader(arena) {
  FIELD_MASK(header_) |= DisallowedLineReader::field_mask();
  this->blame_token = blame_token;
}

Str* DisallowedLineReader::_GetLine() {
  p_die(str567, this->blame_token);
}

FileLineReader::FileLineReader(mylib::LineReader* f, alloc::Arena* arena) : _Reader(arena) {
  FIELD_MASK(header_) |= FileLineReader::field_mask();
  this->f = f;
  this->last_line_hint = false;
}

Str* FileLineReader::_GetLine() {
  Str* line = nullptr;
  StackRoots _roots({&line});

  line = this->f->readline();
  if (len(line) == 0) {
    return nullptr;
  }
  if (!line->endswith(str568)) {
    this->last_line_hint = true;
  }
  return line;
}

bool FileLineReader::LastLineHint() {
  return this->last_line_hint;
}

reader::FileLineReader* StringLineReader(Str* s, alloc::Arena* arena) {
  StackRoots _roots({&s, &arena});

  return Alloc<FileLineReader>(Alloc<mylib::BufLineReader>(s), arena);
}

VirtualLineReader::VirtualLineReader(List<Tuple2<syntax_asdl::SourceLine*, int>*>* lines, alloc::Arena* arena) : _Reader(arena) {
  FIELD_MASK(header_) |= VirtualLineReader::field_mask();
  this->lines = lines;
  this->num_lines = len(lines);
  this->pos = 0;
}

Tuple2<syntax_asdl::SourceLine*, int> VirtualLineReader::GetLine() {
  syntax_asdl::SourceLine* eof_line = nullptr;
  syntax_asdl::SourceLine* src_line = nullptr;
  int start_offset;
  StackRoots _roots({&eof_line, &src_line});

  if (this->pos == this->num_lines) {
    eof_line = nullptr;
    return Tuple2<syntax_asdl::SourceLine*, int>(eof_line, 0);
  }
  Tuple2<syntax_asdl::SourceLine*, int>* tup0 = this->lines->index_(this->pos);
  src_line = tup0->at0();
  start_offset = tup0->at1();
  this->pos += 1;
  return Tuple2<syntax_asdl::SourceLine*, int>(src_line, start_offset);
}

Str* _readline_no_tty(Str* prompt) {
  mylib::Writer* w = nullptr;
  Str* line = nullptr;
  StackRoots _roots({&prompt, &w, &line});

  w = mylib::Stderr();
  w->write(prompt);
  w->flush();
  line = mylib::Stdin()->readline();
  if ((line == nullptr or len(line) == 0)) {
    throw Alloc<EOFError>();
  }
  return line;
}

InteractiveLineReader::InteractiveLineReader(alloc::Arena* arena, prompt::Evaluator* prompt_ev, history::Evaluator* hist_ev, py_readline::Readline* line_input, comp_ui::PromptState* prompt_state) : _Reader(arena) {
  FIELD_MASK(header_) |= InteractiveLineReader::field_mask();
  this->prompt_ev = prompt_ev;
  this->hist_ev = hist_ev;
  this->line_input = line_input;
  this->prompt_state = prompt_state;
  this->prev_line = nullptr;
  this->prompt_str = str569;
  this->Reset();
}

void InteractiveLineReader::Reset() {
  this->render_ps1 = true;
}

Str* InteractiveLineReader::_GetLine() {
  Str* line = nullptr;
  StackRoots _roots({&line});

  if (this->render_ps1) {
    this->prompt_str = this->prompt_ev->EvalFirstPrompt();
    this->prompt_state->SetLastPrompt(this->prompt_str);
  }
  line = nullptr;
  try {
    if ((!mylib::Stdout()->isatty() or !mylib::Stdin()->isatty())) {
      line = str_concat(_readline_no_tty(this->prompt_str), str570);
    }
    else {
      line = str_concat(raw_input(this->prompt_str), str571);
    }
  }
  catch (EOFError*) {
    print(str572);
  }
  if (line != nullptr) {
    line = this->hist_ev->Eval(line);
    if ((line->strip() and (!(str_equals(line, this->prev_line)) and this->line_input != nullptr))) {
      this->line_input->add_history(line->rstrip());
      this->prev_line = line;
    }
  }
  this->prompt_str = _PS2;
  this->prompt_state->SetLastPrompt(this->prompt_str);
  this->render_ps1 = false;
  return line;
}

}  // define namespace reader

namespace typed_args {  // define

using syntax_asdl::ArgList;
using syntax_asdl::BlockArg;
using syntax_asdl::command_t;
using syntax_asdl::expr_e;
using syntax_asdl::expr_t;
using syntax_asdl::command_sub;
using pyerror::e_usage;

void DoesNotAccept(syntax_asdl::ArgList* arg_list) {
  StackRoots _roots({&arg_list});

  if (arg_list != nullptr) {
    e_usage(str573, arg_list->left->span_id);
  }
}

syntax_asdl::expr_t* RequiredExpr(syntax_asdl::ArgList* arg_list) {
  int n;
  StackRoots _roots({&arg_list});

  if (arg_list == nullptr) {
    e_usage(str574);
  }
  n = len(arg_list->positional);
  if (n == 0) {
    e_usage(str575, arg_list->left->span_id);
  }
  else {
    if (n == 1) {
      return arg_list->positional->index_(0);
    }
    else {
      e_usage(str576, arg_list->left->span_id);
    }
  }
}

syntax_asdl::command_t* GetOneBlock(syntax_asdl::ArgList* arg_list) {
  int n;
  syntax_asdl::expr_t* arg = nullptr;
  syntax_asdl::expr_t* UP_arg = nullptr;
  StackRoots _roots({&arg_list, &arg, &UP_arg});

  if (arg_list == nullptr) {
    return nullptr;
  }
  n = len(arg_list->positional);
  if (n == 0) {
    return nullptr;
  }
  else {
    if (n == 1) {
      arg = arg_list->positional->index_(0);
      UP_arg = arg;
      switch (arg->tag_()) {
        case expr_e::BlockArg: {
          BlockArg* arg = static_cast<BlockArg*>(UP_arg);
          return arg->brace_group;
        }
          break;
        case expr_e::CommandSub: {
          command_sub* arg = static_cast<command_sub*>(UP_arg);
          return arg->child;
        }
          break;
        default: {
          e_usage(str577, arg_list->left->span_id);
        }
      }
    }
    else {
      e_usage(str578, arg_list->left->span_id);
    }
  }
}

syntax_asdl::BlockArg* GetLiteralBlock(syntax_asdl::ArgList* arg_list) {
  int n;
  syntax_asdl::expr_t* arg = nullptr;
  StackRoots _roots({&arg_list, &arg});

  if (arg_list == nullptr) {
    return nullptr;
  }
  n = len(arg_list->positional);
  if (n == 0) {
    return nullptr;
  }
  else {
    if (n == 1) {
      arg = arg_list->positional->index_(0);
      if (arg->tag_() == expr_e::BlockArg) {
        return static_cast<BlockArg*>(arg);
      }
      else {
        return nullptr;
      }
    }
    else {
      e_usage(str579, arg_list->left->span_id);
    }
  }
}

}  // define namespace typed_args

namespace expr_parse {  // define

using syntax_asdl::loc;
using syntax_asdl::Token;
using syntax_asdl::double_quoted;
using syntax_asdl::single_quoted;
using syntax_asdl::command_sub;
using syntax_asdl::sh_array_literal;
using syntax_asdl::compound_word;
using syntax_asdl::word_part_t;
using syntax_asdl::word_e;
using id_kind_asdl::Id;
using id_kind_asdl::Kind;
using id_kind_asdl::Id_str;
using types_asdl::lex_mode_e;
using pyerror::p_die;

int _Classify(grammar::Grammar* gr, syntax_asdl::Token* tok, bool tea_keywords) {
  Str* type_str = nullptr;
  StackRoots _roots({&gr, &tok, &type_str});

  if ((tea_keywords and tok->id == Id::Expr_Name)) {
    if (dict_contains(gr->keywords, tok->tval)) {
      return gr->keywords->index_(tok->tval);
    }
  }
  if (dict_contains(gr->tokens, tok->id)) {
    return gr->tokens->index_(tok->id);
  }
  if (tok->id == Id::Unknown_DEqual) {
    p_die(str580, tok);
  }
  if (tok->id == Id::Unknown_Tok) {
    type_str = str581;
  }
  else {
    type_str = StrFormat(" (%s)", ui::PrettyId(tok->id));
  }
  p_die(StrFormat("Unexpected token in expression mode%s", type_str), tok);
}
Dict<int, int> gdict0(std::initializer_list<int>{}, std::initializer_list<int>{});
Dict<int, int>* _OTHER_BALANCE = &gdict0;

syntax_asdl::Token* _PushOilTokens(parse_lib::ParseContext* parse_ctx, grammar::Grammar* gr, parse::Parser* p, lexer::Lexer* lex, bool tea_keywords) {
  syntax_asdl::Token* last_token = nullptr;
  bool prev_was_newline;
  int balance;
  syntax_asdl::Token* tok = nullptr;
  int ilabel;
  syntax_asdl::Token* left_tok = nullptr;
  reader::DisallowedLineReader* line_reader = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  List<syntax_asdl::compound_word*>* words = nullptr;
  syntax_asdl::Token* close_tok = nullptr;
  bool done;
  syntax_asdl::word_t* w = nullptr;
  List<syntax_asdl::word_t*>* words2 = nullptr;
  List<syntax_asdl::word_t*>* words3 = nullptr;
  int typ;
  syntax_asdl::sh_array_literal* lit_part = nullptr;
  syntax_asdl::Token* left_token = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  syntax_asdl::command_t* node = nullptr;
  syntax_asdl::Token* right_token = nullptr;
  syntax_asdl::command_sub* cs_part = nullptr;
  List<syntax_asdl::word_part_t*>* parts = nullptr;
  syntax_asdl::double_quoted* expr_dq_part = nullptr;
  syntax_asdl::braced_var_sub* part = nullptr;
  types_asdl::lex_mode_t sq_mode;
  List<syntax_asdl::Token*>* tokens = nullptr;
  syntax_asdl::single_quoted* sq_part = nullptr;
  StackRoots _roots({&parse_ctx, &gr, &p, &lex, &last_token, &tok, &left_tok, &line_reader, &w_parser, &words, &close_tok, &w, &words2, &words3, &lit_part, &left_token, &c_parser, &node, &right_token, &cs_part, &parts, &expr_dq_part, &part, &tokens, &sq_part});

  last_token = nullptr;
  prev_was_newline = false;
  balance = 0;
  while (true) {
    if (last_token) {
      tok = last_token;
      last_token = nullptr;
    }
    else {
      tok = lex->Read(lex_mode_e::Expr);
    }
    if (consts::GetKind(tok->id) == Kind::Ignored) {
      continue;
    }
    if (tok->id == Id::Op_Newline) {
      if (balance > 0) {
        continue;
      }
      if (prev_was_newline) {
        continue;
      }
      prev_was_newline = true;
    }
    else {
      prev_was_newline = false;
    }
    balance += _OTHER_BALANCE->get(tok->id, 0);
    if (tok->id == Id::Op_LParen) {
      lex->PushHint(Id::Op_RParen, Id::Op_RParen);
    }
    ilabel = _Classify(gr, tok, tea_keywords);
    if (p->addtoken(tok->id, tok, ilabel)) {
      return tok;
    }
    if (tok->id == Id::Left_PercentParen) {
      left_tok = tok;
      lex->PushHint(Id::Op_RParen, Id::Right_ShArrayLiteral);
      line_reader = Alloc<reader::DisallowedLineReader>(parse_ctx->arena, tok);
      w_parser = parse_ctx->MakeWordParser(lex, line_reader);
      words = Alloc<List<syntax_asdl::compound_word*>>();
      close_tok = nullptr;
      done = false;
      while (!done) {
        w = w_parser->ReadWord(lex_mode_e::ShCommand);
        switch (w->tag_()) {
          case word_e::Token: {
            Token* tok = reinterpret_cast<Token*>(w);
            if (tok->id == Id::Right_ShArrayLiteral) {
              close_tok = tok;
              done = true;
            }
            else {
              if (tok->id == Id::Op_Newline) {
                continue;
              }
              else {
                p_die(str584, Alloc<loc::Word>(w));
              }
            }
          }
            break;
          case word_e::Compound: {
            words->append(static_cast<compound_word*>(w));
          }
            break;
          default: {
            assert(0);  // AssertionError
          }
        }
      }
      words2 = braces::BraceDetectAll(words);
      words3 = word_::TildeDetectAll(words2);
      typ = Id::Expr_CastedDummy;
      lit_part = Alloc<sh_array_literal>(left_tok, words3);
      Token* opaque = reinterpret_cast<Token*>(lit_part);
      done = p->addtoken(typ, opaque, gr->tokens->index_(typ));
      ilabel = _Classify(gr, close_tok, tea_keywords);
      done = p->addtoken(tok->id, close_tok, ilabel);
      continue;
    }
    if ((tok->id == Id::Left_DollarParen || tok->id == Id::Left_AtParen || tok->id == Id::Left_CaretParen)) {
      left_token = tok;
      lex->PushHint(Id::Op_RParen, Id::Eof_RParen);
      line_reader = Alloc<reader::DisallowedLineReader>(parse_ctx->arena, tok);
      c_parser = parse_ctx->MakeParserForCommandSub(line_reader, lex, Id::Eof_RParen);
      node = c_parser->ParseCommandSub();
      right_token = c_parser->w_parser->cur_token;
      cs_part = Alloc<command_sub>(left_token, node, right_token);
      typ = Id::Expr_CastedDummy;
      Token* opaque = reinterpret_cast<Token*>(cs_part);
      done = p->addtoken(typ, opaque, gr->tokens->index_(typ));
      ilabel = _Classify(gr, right_token, tea_keywords);
      done = p->addtoken(right_token->id, right_token, ilabel);
      continue;
    }
    if ((tok->id == Id::Left_DoubleQuote || tok->id == Id::Left_TDoubleQuote)) {
      left_token = tok;
      line_reader = Alloc<reader::DisallowedLineReader>(parse_ctx->arena, tok);
      w_parser = parse_ctx->MakeWordParser(lex, line_reader);
      parts = Alloc<List<syntax_asdl::word_part_t*>>();
      last_token = w_parser->ReadDoubleQuoted(left_token, parts);
      expr_dq_part = Alloc<double_quoted>(left_token, parts, last_token);
      typ = Id::Expr_CastedDummy;
      Token* opaque = reinterpret_cast<Token*>(expr_dq_part);
      done = p->addtoken(typ, opaque, gr->tokens->index_(typ));
      continue;
    }
    if (tok->id == Id::Left_DollarBrace) {
      left_token = tok;
      line_reader = Alloc<reader::DisallowedLineReader>(parse_ctx->arena, tok);
      w_parser = parse_ctx->MakeWordParser(lex, line_reader);
      Tuple2<syntax_asdl::braced_var_sub*, syntax_asdl::Token*> tup1 = w_parser->ReadBracedVarSub(left_token);
      part = tup1.at0();
      last_token = tup1.at1();
      typ = Id::Expr_CastedDummy;
      Token* opaque = reinterpret_cast<Token*>(part);
      done = p->addtoken(typ, opaque, gr->tokens->index_(typ));
      continue;
    }
    if ((tok->id == Id::Left_SingleQuote || tok->id == Id::Left_RSingleQuote || tok->id == Id::Left_DollarSingleQuote || tok->id == Id::Left_TSingleQuote || tok->id == Id::Left_RTSingleQuote || tok->id == Id::Left_DollarTSingleQuote)) {
      if ((tok->id == Id::Left_DollarSingleQuote || tok->id == Id::Left_DollarTSingleQuote)) {
        sq_mode = lex_mode_e::SQ_C;
      }
      else {
        sq_mode = lex_mode_e::SQ_Raw;
      }
      left_token = tok;
      line_reader = Alloc<reader::DisallowedLineReader>(parse_ctx->arena, tok);
      w_parser = parse_ctx->MakeWordParser(lex, line_reader);
      tokens = Alloc<List<syntax_asdl::Token*>>();
      last_token = w_parser->ReadSingleQuoted(sq_mode, left_token, tokens, true);
      sq_part = Alloc<single_quoted>(left_token, tokens, last_token);
      typ = Id::Expr_CastedDummy;
      Token* opaque = reinterpret_cast<Token*>(sq_part);
      done = p->addtoken(typ, opaque, gr->tokens->index_(typ));
      continue;
    }
  }
}

ExprParser::ExprParser(parse_lib::ParseContext* parse_ctx, grammar::Grammar* gr, bool tea_keywords) 
    : header_(obj_header()) {
  this->parse_ctx = parse_ctx;
  this->gr = gr;
  this->tea_keywords = tea_keywords;
  this->push_parser = Alloc<parse::Parser>(gr);
}

Tuple2<pnode::PNode*, syntax_asdl::Token*> ExprParser::Parse(lexer::Lexer* lexer, int start_symbol) {
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&lexer, &last_token});

  this->push_parser->setup(start_symbol);
  try {
    last_token = _PushOilTokens(this->parse_ctx, this->gr, this->push_parser, lexer, this->tea_keywords);
  }
  catch (parse::ParseError* e) {
    p_die(StrFormat("Syntax error in expression (near %s)", ui::PrettyId(e->tok->id)), e->tok);
  }
  return Tuple2<pnode::PNode*, syntax_asdl::Token*>(this->push_parser->rootnode, last_token);
}

}  // define namespace expr_parse

namespace expr_to_ast {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using id_kind_asdl::Id_str;
using syntax_asdl::Token;
using syntax_asdl::loc;
using syntax_asdl::loc_t;
using syntax_asdl::double_quoted;
using syntax_asdl::single_quoted;
using syntax_asdl::simple_var_sub;
using syntax_asdl::braced_var_sub;
using syntax_asdl::command_sub;
using syntax_asdl::sh_array_literal;
using syntax_asdl::command;
using syntax_asdl::command_t;
using syntax_asdl::expr;
using syntax_asdl::expr_e;
using syntax_asdl::expr_t;
using syntax_asdl::expr__Var;
using syntax_asdl::expr__Dict;
using syntax_asdl::expr_context_e;
using syntax_asdl::re;
using syntax_asdl::re_t;
using syntax_asdl::re_repeat;
using syntax_asdl::re_repeat_t;
using syntax_asdl::class_literal_term;
using syntax_asdl::class_literal_term_t;
using syntax_asdl::posix_class;
using syntax_asdl::perl_class;
using syntax_asdl::name_type;
using syntax_asdl::place_expr;
using syntax_asdl::place_expr_e;
using syntax_asdl::place_expr_t;
using syntax_asdl::type_expr_t;
using syntax_asdl::comprehension;
using syntax_asdl::subscript;
using syntax_asdl::attribute;
using syntax_asdl::proc_sig;
using syntax_asdl::proc_sig_t;
using syntax_asdl::param;
using syntax_asdl::named_arg;
using syntax_asdl::ArgList;
using syntax_asdl::TypedParam;
using syntax_asdl::UntypedParam;
using syntax_asdl::variant;
using syntax_asdl::variant_type;
using syntax_asdl::variant_type_t;
using pyerror::p_die;
Dict<Str*, Str*> gdict0(std::initializer_list<Str*>{}, std::initializer_list<Str*>{});
Dict<Str*, Str*>* PERL_CLASSES = &gdict0;
GLOBAL_LIST(Str*, 12, POSIX_CLASSES, {str586 COMMA str587 COMMA str588 COMMA str589 COMMA str590 COMMA str591 COMMA str592 COMMA str593 COMMA str594 COMMA str595 COMMA str596 COMMA str597});
Str* RANGE_POINT_TOO_LONG = str598;
int NT_OFFSET = 256;

bool ISNONTERMINAL(int x) {
  return x >= NT_OFFSET;
}

Transformer::Transformer(grammar::Grammar* gr) 
    : header_(obj_header()) {
  this->number2symbol = gr->number2symbol;
}

syntax_asdl::expr_t* Transformer::_AssocBinary(List<pnode::PNode*>* children) {
  int n;
  syntax_asdl::expr_t* left = nullptr;
  pnode::PNode* op = nullptr;
  syntax_asdl::expr_t* right = nullptr;
  StackRoots _roots({&children, &left, &op, &right});

  n = len(children);
  if (n == 1) {
    return this->Expr(children->index_(0));
  }
  left = this->Expr(children->index_(0));
  op = children->index_(1);
  if (n == 3) {
    right = this->Expr(children->index_(2));
  }
  else {
    right = this->_AssocBinary(children->slice(2));
  }
  return Alloc<expr::Binary>(op->tok, left, right);
}

syntax_asdl::expr_t* Transformer::_Trailer(syntax_asdl::expr_t* base, pnode::PNode* p_trailer) {
  List<pnode::PNode*>* children = nullptr;
  syntax_asdl::Token* op_tok = nullptr;
  syntax_asdl::ArgList* arglist = nullptr;
  pnode::PNode* p = nullptr;
  pnode::PNode* p_args = nullptr;
  List<syntax_asdl::expr_t*>* indices = nullptr;
  int n;
  pnode::PNode* a = nullptr;
  syntax_asdl::Token* attr = nullptr;
  StackRoots _roots({&base, &p_trailer, &children, &op_tok, &arglist, &p, &p_args, &indices, &a, &attr});

  children = p_trailer->children;
  op_tok = children->index_(0)->tok;
  if (op_tok->id == Id::Op_LParen) {
    arglist = ArgList::Create();
    if (len(children) == 2) {
      return Alloc<expr::FuncCall>(base, arglist);
    }
    p = children->index_(1);
    this->_Arglist(p->children, arglist);
    return Alloc<expr::FuncCall>(base, arglist);
  }
  if (op_tok->id == Id::Op_LBracket) {
    p_args = children->index_(1);
    indices = Alloc<List<syntax_asdl::expr_t*>>();
    n = len(p_args->children);
    for (int i = 0; i < n; i += 2) {
      a = p_args->children->index_(i);
      indices->append(this->_Subscript(a->children));
    }
    return Alloc<subscript>(base, indices);
  }
  if ((op_tok->id == Id::Expr_Dot || op_tok->id == Id::Expr_RArrow || op_tok->id == Id::Expr_DColon)) {
    attr = children->index_(1)->tok;
    return Alloc<attribute>(base, op_tok, attr, expr_context_e::Store);
  }
  assert(0);  // AssertionError
}

Tuple2<syntax_asdl::expr_t*, syntax_asdl::expr_t*> Transformer::_DictPair(pnode::PNode* p_node) {
  List<pnode::PNode*>* children = nullptr;
  int typ;
  syntax_asdl::expr_t* key = nullptr;
  syntax_asdl::expr_t* value = nullptr;
  syntax_asdl::Token* tok0 = nullptr;
  int id_;
  StackRoots _roots({&p_node, &children, &key, &value, &tok0});

  children = p_node->children;
  typ = children->index_(0)->typ;
  if (ISNONTERMINAL(typ)) {
    if (typ == grammar_nt::sq_string) {
      key = this->Expr(children->index_(0));
    }
    else {
      if (typ == grammar_nt::dq_string) {
        key = this->Expr(children->index_(0));
      }
    }
    value = this->Expr(children->index_(2));
    return Tuple2<syntax_asdl::expr_t*, syntax_asdl::expr_t*>(key, value);
  }
  tok0 = children->index_(0)->tok;
  id_ = tok0->id;
  if (id_ == Id::Expr_Name) {
    key = Alloc<expr::Const>(tok0);
    if (len(children) >= 3) {
      value = this->Expr(children->index_(2));
    }
    else {
      value = Alloc<expr::Implicit>();
    }
  }
  if (id_ == Id::Op_LBracket) {
    key = this->Expr(children->index_(1));
    value = this->Expr(children->index_(4));
    return Tuple2<syntax_asdl::expr_t*, syntax_asdl::expr_t*>(key, value);
  }
  return Tuple2<syntax_asdl::expr_t*, syntax_asdl::expr_t*>(key, value);
}

syntax_asdl::expr__Dict* Transformer::_Dict(pnode::PNode* p_node) {
  List<syntax_asdl::expr_t*>* keys = nullptr;
  List<syntax_asdl::expr_t*>* values = nullptr;
  int n;
  syntax_asdl::expr_t* key = nullptr;
  syntax_asdl::expr_t* value = nullptr;
  StackRoots _roots({&p_node, &keys, &values, &key, &value});

  if (!ISNONTERMINAL(p_node->typ)) {
    return Alloc<expr::Dict>(Alloc<List<syntax_asdl::expr_t*>>(), Alloc<List<syntax_asdl::expr_t*>>());
  }
  keys = Alloc<List<syntax_asdl::expr_t*>>();
  values = Alloc<List<syntax_asdl::expr_t*>>();
  n = len(p_node->children);
  for (int i = 0; i < n; i += 2) {
    Tuple2<syntax_asdl::expr_t*, syntax_asdl::expr_t*> tup1 = this->_DictPair(p_node->children->index_(i));
    key = tup1.at0();
    value = tup1.at1();
    keys->append(key);
    values->append(value);
  }
  return Alloc<expr::Dict>(keys, values);
}

syntax_asdl::expr_t* Transformer::_Tuple(List<pnode::PNode*>* children) {
  int n;
  List<syntax_asdl::expr_t*>* elts = nullptr;
  pnode::PNode* p_node = nullptr;
  StackRoots _roots({&children, &elts, &p_node});

  n = len(children);
  if (n == 1) {
    return this->Expr(children->index_(0));
  }
  if (n == 2) {
    p_die(str599, children->index_(1)->tok);
  }
  elts = Alloc<List<syntax_asdl::expr_t*>>();
  for (int i = 0; i < n; i += 2) {
    p_node = children->index_(i);
    elts->append(this->Expr(p_node));
  }
  return Alloc<expr::Tuple>(elts, expr_context_e::Store);
}

syntax_asdl::expr_t* Transformer::_TestlistComp(pnode::PNode* p_node, int id0) {
  List<pnode::PNode*>* children = nullptr;
  int n;
  syntax_asdl::expr_t* elt = nullptr;
  syntax_asdl::comprehension* comp = nullptr;
  List<syntax_asdl::expr_t*>* elts = nullptr;
  StackRoots _roots({&p_node, &children, &elt, &comp, &elts});

  children = p_node->children;
  n = len(children);
  if ((n > 1 and children->index_(1)->typ == grammar_nt::comp_for)) {
    elt = this->Expr(children->index_(0));
    comp = this->_CompFor(children->index_(1));
    if (id0 == Id::Op_LParen) {
      return Alloc<expr::GeneratorExp>(elt, NewList<syntax_asdl::comprehension*>(std::initializer_list<syntax_asdl::comprehension*>{comp}));
    }
    if (id0 == Id::Op_LBracket) {
      return Alloc<expr::ListComp>(elt, NewList<syntax_asdl::comprehension*>(std::initializer_list<syntax_asdl::comprehension*>{comp}));
    }
    assert(0);  // AssertionError
  }
  if (id0 == Id::Op_LParen) {
    if (len(children) == 1) {
      return this->Expr(children->index_(0));
    }
    if (children->index_(1)->tok->id == Id::Arith_Comma) {
      return this->_Tuple(children);
    }
    FAIL(kNotImplemented);  // Python NotImplementedError
  }
  if (id0 == Id::Op_LBracket) {
    elts = Alloc<List<syntax_asdl::expr_t*>>();
    for (int i = 0; i < n; i += 2) {
      elts->append(this->Expr(children->index_(i)));
    }
    return Alloc<expr::List>(elts, expr_context_e::Store);
  }
  assert(0);  // AssertionError
}

syntax_asdl::expr_t* Transformer::_Atom(List<pnode::PNode*>* children) {
  syntax_asdl::Token* tok = nullptr;
  int id_;
  int n;
  int i;
  syntax_asdl::re_t* r = nullptr;
  List<syntax_asdl::Token*>* flags = nullptr;
  syntax_asdl::Token* trans_pref = nullptr;
  StackRoots _roots({&children, &tok, &r, &flags, &trans_pref});

  tok = children->index_(0)->tok;
  id_ = tok->id;
  n = len(children);
  if (id_ == Id::Op_LParen) {
    if (n == 2) {
      return Alloc<expr::Tuple>(Alloc<List<syntax_asdl::expr_t*>>(), expr_context_e::Store);
    }
    return this->_TestlistComp(children->index_(1), id_);
  }
  if (id_ == Id::Op_LBracket) {
    if (n == 2) {
      return Alloc<expr::List>(Alloc<List<syntax_asdl::expr_t*>>(), expr_context_e::Store);
    }
    return this->_TestlistComp(children->index_(1), id_);
  }
  if (id_ == Id::Op_LBrace) {
    i = 1;
    if (children->index_(i)->tok->id == Id::Op_Newline) {
      i += 1;
    }
    return this->_Dict(children->index_(i));
  }
  if (id_ == Id::Arith_Slash) {
    r = this->_Regex(children->index_(1));
    flags = Alloc<List<syntax_asdl::Token*>>();
    trans_pref = nullptr;
    return Alloc<expr::RegexLiteral>(children->index_(0)->tok, r, flags, trans_pref);
  }
  if (id_ == Id::Expr_Func) {
    return Alloc<expr::Lambda>(Alloc<List<syntax_asdl::name_type*>>(), Alloc<expr::Implicit>());
  }
  FAIL(kNotImplemented);  // Python NotImplementedError
}

List<syntax_asdl::name_type*>* Transformer::_NameTypeList(pnode::PNode* p_node) {
  List<syntax_asdl::name_type*>* results = nullptr;
  int n;
  pnode::PNode* p = nullptr;
  List<pnode::PNode*>* children = nullptr;
  syntax_asdl::type_expr_t* typ = nullptr;
  syntax_asdl::name_type* node = nullptr;
  StackRoots _roots({&p_node, &results, &p, &children, &typ, &node});

  results = Alloc<List<syntax_asdl::name_type*>>();
  n = len(p_node->children);
  for (int i = 0; i < n; i += 2) {
    p = p_node->children->index_(i);
    children = p->children;
    if (len(children) == 2) {
      typ = this->_TypeExpr(children->index_(1));
    }
    else {
      typ = nullptr;
    }
    node = Alloc<name_type>(children->index_(0)->tok, typ);
    results->append(node);
  }
  return results;
}

syntax_asdl::comprehension* Transformer::_CompFor(pnode::PNode* p_node) {
  List<pnode::PNode*>* children = nullptr;
  List<syntax_asdl::name_type*>* lhs = nullptr;
  syntax_asdl::expr_t* iterable = nullptr;
  syntax_asdl::expr_t* cond = nullptr;
  StackRoots _roots({&p_node, &children, &lhs, &iterable, &cond});

  children = p_node->children;
  lhs = this->_NameTypeList(children->index_(1));
  iterable = this->Expr(children->index_(3));
  if (len(children) >= 6) {
    cond = this->Expr(children->index_(5));
  }
  else {
    cond = nullptr;
  }
  return Alloc<comprehension>(lhs, iterable, cond);
}

syntax_asdl::expr_t* Transformer::_CompareChain(List<pnode::PNode*>* children) {
  List<syntax_asdl::Token*>* cmp_ops = nullptr;
  List<syntax_asdl::expr_t*>* comparators = nullptr;
  syntax_asdl::expr_t* left = nullptr;
  int i;
  int n;
  List<pnode::PNode*>* op_children = nullptr;
  syntax_asdl::Token* op = nullptr;
  StackRoots _roots({&children, &cmp_ops, &comparators, &left, &op_children, &op});

  cmp_ops = Alloc<List<syntax_asdl::Token*>>();
  comparators = Alloc<List<syntax_asdl::expr_t*>>();
  left = this->Expr(children->index_(0));
  i = 1;
  n = len(children);
  while (i < n) {
    op_children = children->index_(i)->children;
    op = op_children->index_(0)->tok;
    if (len(op_children) == 2) {
      if (op->id == Id::Expr_Not) {
        op->id = Id::Node_NotIn;
      }
      else {
        if (op->id == Id::Expr_Is) {
          op->id = Id::Node_IsNot;
        }
        else {
          assert(0);  // AssertionError
        }
      }
    }
    else {
      ;  // pass
    }
    cmp_ops->append(op);
    i += 1;
    comparators->append(this->Expr(children->index_(i)));
    i += 1;
  }
  return Alloc<expr::Compare>(left, cmp_ops, comparators);
}

syntax_asdl::expr_t* Transformer::_Subscript(List<pnode::PNode*>* children) {
  int typ0;
  int n;
  syntax_asdl::expr_t* lower = nullptr;
  syntax_asdl::expr_t* upper = nullptr;
  StackRoots _roots({&children, &lower, &upper});

  typ0 = children->index_(0)->typ;
  n = len(children);
  if (ISNONTERMINAL(typ0)) {
    if (n == 3) {
      lower = this->Expr(children->index_(0));
      upper = this->Expr(children->index_(2));
    }
    else {
      if (n == 2) {
        lower = this->Expr(children->index_(0));
        upper = nullptr;
      }
      else {
        return this->Expr(children->index_(0));
      }
    }
  }
  else {
    lower = nullptr;
    if (n == 1) {
      upper = nullptr;
    }
    else {
      upper = this->Expr(children->index_(1));
    }
  }
  return Alloc<expr::Slice>(lower, upper);
}

syntax_asdl::expr_t* Transformer::Expr(pnode::PNode* pnode) {
  int typ;
  syntax_asdl::Token* tok = nullptr;
  List<pnode::PNode*>* children = nullptr;
  syntax_asdl::expr_t* test = nullptr;
  syntax_asdl::expr_t* body = nullptr;
  syntax_asdl::expr_t* orelse = nullptr;
  int n;
  List<syntax_asdl::name_type*>* params = nullptr;
  syntax_asdl::Token* op_tok = nullptr;
  pnode::PNode* op = nullptr;
  pnode::PNode* e = nullptr;
  syntax_asdl::expr_t* node = nullptr;
  int i;
  syntax_asdl::expr_t* factor = nullptr;
  Str* bare = nullptr;
  Str* nt_name = nullptr;
  int id_;
  StackRoots _roots({&pnode, &tok, &children, &test, &body, &orelse, &params, &op_tok, &op, &e, &node, &factor, &bare, &nt_name});

  typ = pnode->typ;
  tok = pnode->tok;
  children = pnode->children;
  if (ISNONTERMINAL(typ)) {
    if (typ == grammar_nt::oil_expr) {
      return this->Expr(children->index_(1));
    }
    if (typ == grammar_nt::command_expr) {
      return this->Expr(children->index_(0));
    }
    if (typ == grammar_nt::atom) {
      if (len(children) == 1) {
        return this->Expr(children->index_(0));
      }
      return this->_Atom(children);
    }
    if (typ == grammar_nt::testlist) {
      return this->_Tuple(children);
    }
    if (typ == grammar_nt::test) {
      if (len(children) == 1) {
        return this->Expr(children->index_(0));
      }
      test = this->Expr(children->index_(2));
      body = this->Expr(children->index_(0));
      orelse = this->Expr(children->index_(4));
      return Alloc<expr::IfExp>(test, body, orelse);
    }
    if (typ == grammar_nt::lambdef) {
      n = len(children);
      if (n == 4) {
        params = this->_NameTypeList(children->index_(1));
      }
      else {
        params = Alloc<List<syntax_asdl::name_type*>>();
      }
      body = this->Expr(children->index_((n - 1)));
      return Alloc<expr::Lambda>(params, body);
    }
    if (typ == grammar_nt::or_test) {
      return this->_AssocBinary(children);
    }
    if (typ == grammar_nt::and_test) {
      return this->_AssocBinary(children);
    }
    if (typ == grammar_nt::not_test) {
      if (len(children) == 1) {
        return this->Expr(children->index_(0));
      }
      op_tok = children->index_(0)->tok;
      return Alloc<expr::Unary>(op_tok, this->Expr(children->index_(1)));
    }
    else {
      if (typ == grammar_nt::comparison) {
        if (len(children) == 1) {
          return this->Expr(children->index_(0));
        }
        return this->_CompareChain(children);
      }
      else {
        if (typ == grammar_nt::range_expr) {
          n = len(children);
          if (n == 1) {
            return this->Expr(children->index_(0));
          }
          if (n == 3) {
            return Alloc<expr::Range>(this->Expr(children->index_(0)), this->Expr(children->index_(2)));
          }
          assert(0);  // AssertionError
        }
        else {
          if (typ == grammar_nt::expr) {
            return this->_AssocBinary(children);
          }
        }
      }
    }
    if (typ == grammar_nt::xor_expr) {
      return this->_AssocBinary(children);
    }
    if (typ == grammar_nt::and_expr) {
      return this->_AssocBinary(children);
    }
    else {
      if (typ == grammar_nt::shift_expr) {
        return this->_AssocBinary(children);
      }
      else {
        if (typ == grammar_nt::arith_expr) {
          return this->_AssocBinary(children);
        }
        else {
          if (typ == grammar_nt::term) {
            return this->_AssocBinary(children);
          }
          else {
            if (typ == grammar_nt::factor) {
              if (len(children) == 1) {
                return this->Expr(children->index_(0));
              }
              op = children->index_(0);
              e = children->index_(1);
              return Alloc<expr::Unary>(op->tok, this->Expr(e));
            }
            else {
              if (typ == grammar_nt::power) {
                node = this->Expr(children->index_(0));
                if (len(children) == 1) {
                  return node;
                }
                n = len(children);
                i = 1;
                while ((i < n and ISNONTERMINAL(children->index_(i)->typ))) {
                  node = this->_Trailer(node, children->index_(i));
                  i += 1;
                }
                if (node->tag_() == expr_e::Attribute) {
                  attribute* attr_node = static_cast<attribute*>(node);
                  if (attr_node->op->id == Id::Expr_Dot) {
                    p_die(str601, attr_node->op);
                  }
                }
                if (i != n) {
                  op_tok = children->index_(i)->tok;
                  factor = this->Expr(children->index_((i + 1)));
                  node = Alloc<expr::Binary>(op_tok, node, factor);
                }
                return node;
              }
              else {
                if (typ == grammar_nt::oil_expr_sub) {
                  return this->Expr(children->index_(0));
                }
                else {
                  if (typ == grammar_nt::sh_array_literal) {
                    return reinterpret_cast<sh_array_literal*>(children->index_(1)->tok);
                  }
                  else {
                    if (typ == grammar_nt::sh_command_sub) {
                      return reinterpret_cast<command_sub*>(children->index_(1)->tok);
                    }
                    else {
                      if (typ == grammar_nt::braced_var_sub) {
                        return reinterpret_cast<braced_var_sub*>(children->index_(1)->tok);
                      }
                      else {
                        if (typ == grammar_nt::dq_string) {
                          return reinterpret_cast<double_quoted*>(children->index_(1)->tok);
                        }
                        else {
                          if (typ == grammar_nt::sq_string) {
                            return reinterpret_cast<single_quoted*>(children->index_(1)->tok);
                          }
                          else {
                            if (typ == grammar_nt::simple_var_sub) {
                              tok = children->index_(0)->tok;
                              if (tok->id == Id::VSub_DollarName) {
                                bare = tok->tval->slice(1);
                                p_die(StrFormat("In expressions, remove $ and use `%s`, or sometimes \"$%s\"", bare, bare), tok);
                              }
                              return Alloc<simple_var_sub>(tok, lexer::TokenSliceLeft(tok, 1));
                            }
                            else {
                              nt_name = this->number2symbol->index_(typ);
                              assert(0);  // AssertionError
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else {
    id_ = tok->id;
    if (id_ == Id::Expr_Name) {
      return Alloc<expr::Var>(tok);
    }
    if ((id_ == Id::Expr_DecInt || id_ == Id::Expr_BinInt || id_ == Id::Expr_OctInt || id_ == Id::Expr_HexInt || id_ == Id::Expr_Float)) {
      return Alloc<expr::Const>(tok);
    }
    if ((id_ == Id::Expr_Null || id_ == Id::Expr_True || id_ == Id::Expr_False || id_ == Id::Char_OneChar || id_ == Id::Char_UBraced || id_ == Id::Char_Pound)) {
      return Alloc<expr::Const>(tok);
    }
    FAIL(kNotImplemented);  // Python NotImplementedError
  }
}

syntax_asdl::expr_t* Transformer::_ArrayItem(pnode::PNode* p_node) {
  pnode::PNode* child0 = nullptr;
  int typ0;
  StackRoots _roots({&p_node, &child0});

  child0 = p_node->children->index_(0);
  typ0 = child0->typ;
  if (ISNONTERMINAL(typ0)) {
    return this->Expr(child0);
  }
  else {
    if (child0->tok->id == Id::Op_LParen) {
      return this->Expr(p_node->children->index_(1));
    }
    return this->Expr(child0);
  }
}

List<syntax_asdl::place_expr_t*>* Transformer::_PlaceList(pnode::PNode* p_node) {
  List<syntax_asdl::place_expr_t*>* places = nullptr;
  int n;
  pnode::PNode* p = nullptr;
  syntax_asdl::expr_t* e = nullptr;
  syntax_asdl::expr_t* UP_e = nullptr;
  int tag;
  syntax_asdl::loc_t* blame = nullptr;
  StackRoots _roots({&p_node, &places, &p, &e, &UP_e, &blame});

  places = Alloc<List<syntax_asdl::place_expr_t*>>();
  n = len(p_node->children);
  for (int i = 0; i < n; i += 2) {
    p = p_node->children->index_(i);
    e = this->Expr(p);
    UP_e = e;
    tag = e->tag_();
    if (tag == expr_e::Var) {
      expr__Var* e = static_cast<expr__Var*>(UP_e);
      places->append(Alloc<place_expr::Var>(e->name));
    }
    else {
      if ((tag == place_expr_e::Var || tag == place_expr_e::Subscript || tag == place_expr_e::Attribute)) {
        places->append(reinterpret_cast<place_expr_t*>(UP_e));
      }
      else {
        blame = p->tok ? static_cast<loc_t*>(p->tok) : Alloc<loc::Missing>();
        p_die(str604, blame);
      }
    }
  }
  return places;
}

syntax_asdl::command__VarDecl* Transformer::MakeVarDecl(pnode::PNode* p_node) {
  int typ;
  List<pnode::PNode*>* children = nullptr;
  List<syntax_asdl::name_type*>* lhs = nullptr;
  syntax_asdl::expr_t* rhs = nullptr;
  StackRoots _roots({&p_node, &children, &lhs, &rhs});

  typ = p_node->typ;
  children = p_node->children;
  lhs = this->_NameTypeList(children->index_(0));
  rhs = this->Expr(children->index_(2));
  return Alloc<command::VarDecl>(nullptr, lhs, rhs);
}

syntax_asdl::command__PlaceMutation* Transformer::MakePlaceMutation(pnode::PNode* p_node) {
  int typ;
  List<pnode::PNode*>* children = nullptr;
  List<syntax_asdl::place_expr_t*>* place_list = nullptr;
  syntax_asdl::Token* op_tok = nullptr;
  syntax_asdl::expr_t* rhs = nullptr;
  StackRoots _roots({&p_node, &children, &place_list, &op_tok, &rhs});

  typ = p_node->typ;
  children = p_node->children;
  place_list = this->_PlaceList(children->index_(0));
  op_tok = children->index_(1)->tok;
  rhs = this->Expr(children->index_(2));
  return Alloc<command::PlaceMutation>(nullptr, place_list, op_tok, rhs);
}

Tuple2<List<syntax_asdl::name_type*>*, syntax_asdl::expr_t*> Transformer::OilForExpr(pnode::PNode* pnode) {
  int typ;
  List<pnode::PNode*>* children = nullptr;
  List<syntax_asdl::name_type*>* lhs = nullptr;
  syntax_asdl::expr_t* iterable = nullptr;
  Str* nt_name = nullptr;
  StackRoots _roots({&pnode, &children, &lhs, &iterable, &nt_name});

  typ = pnode->typ;
  children = pnode->children;
  if (typ == grammar_nt::oil_for) {
    lhs = this->_NameTypeList(children->index_(1));
    iterable = this->Expr(children->index_(3));
    return Tuple2<List<syntax_asdl::name_type*>*, syntax_asdl::expr_t*>(lhs, iterable);
  }
  nt_name = this->number2symbol->index_(typ);
  assert(0);  // AssertionError
}

void Transformer::_Argument(pnode::PNode* p_node, bool do_named, syntax_asdl::ArgList* arglist) {
  List<syntax_asdl::expr_t*>* positional = nullptr;
  List<syntax_asdl::named_arg*>* named = nullptr;
  List<pnode::PNode*>* children = nullptr;
  int n;
  syntax_asdl::expr_t* arg = nullptr;
  syntax_asdl::expr_t* spread_expr = nullptr;
  syntax_asdl::expr_t* elt = nullptr;
  syntax_asdl::comprehension* comp = nullptr;
  syntax_asdl::named_arg* n1 = nullptr;
  StackRoots _roots({&p_node, &arglist, &positional, &named, &children, &arg, &spread_expr, &elt, &comp, &n1});

  positional = arglist->positional;
  named = arglist->named;
  children = p_node->children;
  n = len(children);
  if (n == 1) {
    arg = this->Expr(children->index_(0));
    positional->append(arg);
    return ;
  }
  if (n == 2) {
    if (children->index_(0)->tok->id == Id::Expr_Ellipsis) {
      spread_expr = this->Expr(children->index_(1));
      if (do_named) {
        named->append(Alloc<named_arg>(nullptr, spread_expr));
      }
      else {
        positional->append(Alloc<expr::Spread>(spread_expr, expr_context_e::Store));
      }
      return ;
    }
    if (children->index_(1)->typ == grammar_nt::comp_for) {
      elt = this->Expr(children->index_(0));
      comp = this->_CompFor(children->index_(1));
      arg = Alloc<expr::GeneratorExp>(elt, NewList<syntax_asdl::comprehension*>(std::initializer_list<syntax_asdl::comprehension*>{comp}));
      positional->append(arg);
      return ;
    }
    assert(0);  // AssertionError
  }
  if (n == 3) {
    n1 = Alloc<named_arg>(children->index_(0)->tok, this->Expr(children->index_(2)));
    named->append(n1);
    return ;
  }
  FAIL(kNotImplemented);  // Python NotImplementedError
}

void Transformer::_Arglist(List<pnode::PNode*>* children, syntax_asdl::ArgList* arglist) {
  bool do_named;
  StackRoots _roots({&children, &arglist});

  do_named = false;
  for (ListIter<pnode::PNode*> it(children); !it.Done(); it.Next()) {
    pnode::PNode* p_child = it.Value();
    StackRoots _for({&p_child  });
    if (ISNONTERMINAL(p_child->typ)) {
      this->_Argument(p_child, do_named, arglist);
    }
    else {
      if (p_child->tok->id == Id::Op_Semi) {
        do_named = true;
      }
    }
  }
}

void Transformer::ToArgList(pnode::PNode* pnode, syntax_asdl::ArgList* arglist) {
  pnode::PNode* p = nullptr;
  StackRoots _roots({&pnode, &arglist, &p});

  if (len(pnode->children) == 2) {
    return ;
  }
  p = pnode->children->index_(1);
  this->_Arglist(p->children, arglist);
}

syntax_asdl::type_expr_t* Transformer::_TypeExpr(pnode::PNode* pnode) {
  StackRoots _roots({&pnode});

  return nullptr;
}

List<syntax_asdl::type_expr_t*>* Transformer::_TypeExprList(pnode::PNode* pnode) {
  StackRoots _roots({&pnode});

  return nullptr;
}

Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::expr_t*> Transformer::_ProcParam(pnode::PNode* pnode) {
  List<pnode::PNode*>* children = nullptr;
  syntax_asdl::Token* tok0 = nullptr;
  int n;
  syntax_asdl::Token* prefix = nullptr;
  syntax_asdl::Token* name = nullptr;
  syntax_asdl::Token* typ = nullptr;
  syntax_asdl::expr_t* default_val = nullptr;
  int i;
  syntax_asdl::Token* tok1 = nullptr;
  StackRoots _roots({&pnode, &children, &tok0, &prefix, &name, &typ, &default_val, &tok1});

  children = pnode->children;
  tok0 = children->index_(0)->tok;
  n = len(children);
  prefix = nullptr;
  name = nullptr;
  typ = nullptr;
  default_val = nullptr;
  if ((tok0->id == Id::Arith_Colon || tok0->id == Id::Expr_At)) {
    prefix = tok0;
    name = children->index_(1)->tok;
    return Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::expr_t*>(prefix, name, typ, default_val);
  }
  name = children->index_(0)->tok;
  if (n == 1) {
    return Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::expr_t*>(prefix, name, typ, default_val);
  }
  i = 1;
  tok1 = children->index_(1)->tok;
  if (tok1->id == Id::Expr_Name) {
    typ = tok1;
    i += 1;
  }
  if ((i + 1) == (n - 1)) {
    default_val = this->Expr(children->index_((i + 1)));
  }
  return Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::expr_t*>(prefix, name, typ, default_val);
}

syntax_asdl::proc_sig_t* Transformer::_ProcParams(pnode::PNode* p_node) {
  List<pnode::PNode*>* children = nullptr;
  int n;
  List<syntax_asdl::UntypedParam*>* untyped = nullptr;
  syntax_asdl::Token* rest = nullptr;
  List<syntax_asdl::TypedParam*>* typed = nullptr;
  int state;
  int i;
  syntax_asdl::Token* prefix = nullptr;
  syntax_asdl::Token* name = nullptr;
  syntax_asdl::Token* typ = nullptr;
  syntax_asdl::expr_t* default_val = nullptr;
  StackRoots _roots({&p_node, &children, &untyped, &rest, &typed, &prefix, &name, &typ, &default_val});

  children = p_node->children;
  n = len(children);
  untyped = Alloc<List<syntax_asdl::UntypedParam*>>();
  rest = nullptr;
  typed = Alloc<List<syntax_asdl::TypedParam*>>();
  state = 0;
  i = 0;
  while (i < n) {
    Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::Token*, syntax_asdl::expr_t*> tup2 = this->_ProcParam(children->index_(i));
    prefix = tup2.at0();
    name = tup2.at1();
    typ = tup2.at2();
    default_val = tup2.at3();
    if ((prefix and prefix->id == Id::Expr_At)) {
      rest = name;
    }
    else {
      if (typ == nullptr) {
        untyped->append(Alloc<UntypedParam>(prefix, name, default_val));
      }
      else {
        if ((typ->tval != str606 && typ->tval != str607)) {
          p_die(str608, typ);
        }
        typed->append(Alloc<TypedParam>(name, typ, default_val));
      }
    }
    i += 2;
  }
  return Alloc<proc_sig::Closed>(untyped, rest, typed);
}

syntax_asdl::param* Transformer::_FuncParam(pnode::PNode* pnode) {
  List<pnode::PNode*>* children = nullptr;
  syntax_asdl::Token* tok0 = nullptr;
  int n;
  syntax_asdl::expr_t* default_val = nullptr;
  syntax_asdl::type_expr_t* type_ = nullptr;
  syntax_asdl::Token* prefix_tok = nullptr;
  StackRoots _roots({&pnode, &children, &tok0, &default_val, &type_, &prefix_tok});

  children = pnode->children;
  tok0 = children->index_(0)->tok;
  n = len(children);
  if (tok0->id == Id::Expr_Name) {
    default_val = nullptr;
    type_ = nullptr;
    if ((n > 1 and children->index_(1)->tok->id == Id::Arith_Equal)) {
      default_val = this->Expr(children->index_(2));
    }
    else {
      if ((n > 2 and children->index_(2)->tok->id == Id::Arith_Equal)) {
        default_val = this->Expr(children->index_(3));
      }
    }
    prefix_tok = nullptr;
    return Alloc<param>(prefix_tok, tok0, type_, default_val);
  }
  assert(0);  // AssertionError
}

Tuple2<List<syntax_asdl::param*>*, syntax_asdl::Token*> Transformer::_FuncParams(pnode::PNode* p_node) {
  List<syntax_asdl::param*>* params = nullptr;
  syntax_asdl::Token* splat = nullptr;
  List<pnode::PNode*>* children = nullptr;
  int n;
  pnode::PNode* p = nullptr;
  StackRoots _roots({&p_node, &params, &splat, &children, &p});

  params = Alloc<List<syntax_asdl::param*>>();
  splat = nullptr;
  children = p_node->children;
  n = len(children);
  for (int i = 0; i < n; ++i) {
    p = children->index_(i);
    if (ISNONTERMINAL(p->typ)) {
      params->append(this->_FuncParam(p));
    }
    else {
      if (p->tok->id == Id::Expr_Ellipsis) {
        splat = children->index_((i + 1))->tok;
      }
    }
  }
  return Tuple2<List<syntax_asdl::param*>*, syntax_asdl::Token*>(params, splat);
}

syntax_asdl::proc_sig_t* Transformer::Proc(pnode::PNode* pnode) {
  int typ;
  List<pnode::PNode*>* children = nullptr;
  int n;
  syntax_asdl::proc_sig_t* sig = nullptr;
  StackRoots _roots({&pnode, &children, &sig});

  typ = pnode->typ;
  children = pnode->children;
  n = len(children);
  if (n == 1) {
    sig = Alloc<proc_sig::Open>();
  }
  else {
    if (n == 3) {
      sig = proc_sig::Closed::Create();
    }
    else {
      if (n == 4) {
        sig = this->_ProcParams(children->index_(1));
      }
      else {
        assert(0);  // AssertionError
      }
    }
  }
  return sig;
}

syntax_asdl::command_t* Transformer::func_item(pnode::PNode* node) {
  StackRoots _roots({&node});

  if (node->tok->id == Id::Expr_While) {
    return Alloc<command::While>(this->Expr(node->children->index_(1)), this->_Suite(node->children->index_(2)));
  }
  else {
    if (node->tok->id == Id::Expr_For) {
      return Alloc<command::For>(this->_NameTypeList(node->children->index_(1)), this->Expr(node->children->index_(3)), this->_Suite(node->children->index_(4)));
    }
    else {
      if (node->tok->id == Id::Expr_Break) {
        return Alloc<command::Break>();
      }
      else {
        if (node->tok->id == Id::Expr_Continue) {
          return Alloc<command::Continue>();
        }
        else {
          if (node->tok->id == Id::Expr_Return) {
            if (len(node->children) == 1) {
              return Alloc<command::Return>(nullptr);
            }
            else {
              return Alloc<command::Return>(this->Expr(node->children->index_(1)));
            }
          }
          else {
            if (node->tok->id == Id::Expr_Name) {
              return Alloc<command::NoOp>();
            }
            else {
              FAIL(kNotImplemented);  // Python NotImplementedError
            }
          }
        }
      }
    }
  }
}

List<syntax_asdl::command_t*>* Transformer::func_items(pnode::PNode* pnode) {
  List<syntax_asdl::command_t*>* result = nullptr;
  int n;
  StackRoots _roots({&pnode, &result});

  result = Alloc<List<syntax_asdl::command_t*>>();
  n = len(pnode->children);
  for (int i = 0; i < n; i += 2) {
    result->append(this->func_item(pnode->children->index_(i)));
  }
  return result;
}

syntax_asdl::command__CommandList* Transformer::_Suite(pnode::PNode* pnode) {
  int n;
  int items_index;
  StackRoots _roots({&pnode});

  n = len(pnode->children);
  if (n == 2) {
    return Alloc<command::CommandList>(Alloc<List<syntax_asdl::command_t*>>());
  }
  if (n == 3) {
    if (pnode->children->index_(1)->typ == grammar_nt::func_items) {
      items_index = 1;
    }
    else {
      return Alloc<command::CommandList>(Alloc<List<syntax_asdl::command_t*>>());
    }
  }
  if (n == 4) {
    items_index = 2;
  }
  return Alloc<command::CommandList>(this->func_items(pnode->children->index_(items_index)));
}

void Transformer::TeaFunc(pnode::PNode* pnode, syntax_asdl::command__Func* out) {
  List<pnode::PNode*>* children = nullptr;
  int pos;
  int typ2;
  int id_;
  StackRoots _roots({&pnode, &out, &children});

  children = pnode->children;
  pos = 1;
  typ2 = children->index_(pos)->typ;
  if (ISNONTERMINAL(typ2)) {
    Tuple2<List<syntax_asdl::param*>*, syntax_asdl::Token*> tup3 = this->_FuncParams(children->index_(pos));
    out->pos_params = tup3.at0();
    out->pos_splat = tup3.at1();
    pos += 1;
  }
  id_ = children->index_(pos)->tok->id;
  if (id_ == Id::Op_RParen) {
    pos += 1;
  }
  else {
    if (id_ == Id::Op_Semi) {
      Tuple2<List<syntax_asdl::param*>*, syntax_asdl::Token*> tup4 = this->_FuncParams(children->index_((pos + 1)));
      out->named_params = tup4.at0();
      out->named_splat = tup4.at1();
      pos += 3;
    }
  }
  if (children->index_(pos)->typ == grammar_nt::type_expr_list) {
    out->return_types = this->_TypeExprList(children->index_(pos));
    pos += 1;
  }
  out->body = this->_Suite(children->index_(pos));
}

void Transformer::NamedFunc(pnode::PNode* pnode, syntax_asdl::command__Func* out) {
  List<pnode::PNode*>* children = nullptr;
  StackRoots _roots({&pnode, &out, &children});

  children = pnode->children;
  out->name = children->index_(0)->tok;
  this->TeaFunc(children->index_(1), out);
}

List<syntax_asdl::param*>* Transformer::_DataParams(pnode::PNode* p_node) {
  List<syntax_asdl::param*>* params = nullptr;
  List<pnode::PNode*>* children = nullptr;
  int n;
  StackRoots _roots({&p_node, &params, &children});

  params = Alloc<List<syntax_asdl::param*>>();
  children = p_node->children;
  n = len(children);
  for (int i = 0; i < n; i += 2) {
    params->append(this->_FuncParam(children->index_(i)));
  }
  return params;
}

void Transformer::Data(pnode::PNode* pnode, syntax_asdl::command__Data* out) {
  List<pnode::PNode*>* children = nullptr;
  StackRoots _roots({&pnode, &out, &children});

  children = pnode->children;
  out->name = children->index_(0)->tok;
  if (ISNONTERMINAL(children->index_(2)->typ)) {
    out->params = this->_DataParams(children->index_(2));
  }
}

syntax_asdl::variant_type_t* Transformer::_VariantType(pnode::PNode* pnode) {
  int n;
  StackRoots _roots({&pnode});

  n = len(pnode->children);
  if (n == 1) {
    return Alloc<variant_type::Ref>(pnode->children->index_(0)->tok);
  }
  else {
    return Alloc<variant_type::Anon>(this->_DataParams(pnode->children->index_(1)));
  }
}

syntax_asdl::variant* Transformer::_Variant(pnode::PNode* pnode) {
  syntax_asdl::variant_type_t* t = nullptr;
  StackRoots _roots({&pnode, &t});

  t = nullptr;
  if (len(pnode->children) == 2) {
    t = this->_VariantType(pnode->children->index_(1));
  }
  return Alloc<variant>(pnode->children->index_(0)->tok, t);
}

void Transformer::Enum(pnode::PNode* pnode, syntax_asdl::command__Enum* out) {
  List<pnode::PNode*>* children = nullptr;
  int start;
  int n;
  pnode::PNode* p_node = nullptr;
  StackRoots _roots({&pnode, &out, &children, &p_node});

  children = pnode->children;
  out->name = children->index_(0)->tok;
  start = 2;
  if (children->index_(start)->tok->id == Id::Op_Newline) {
    start = 3;
  }
  n = len(children);
  for (int i = start; i < (n - 1); i += 2) {
    p_node = children->index_(i);
    out->variants->append(this->_Variant(p_node));
  }
}

void Transformer::Class(pnode::PNode* pnode, syntax_asdl::command__Class* out) {
  List<pnode::PNode*>* children = nullptr;
  StackRoots _roots({&pnode, &out, &children});

  children = pnode->children;
  out->name = children->index_(0)->tok;
  return ;
}

void Transformer::Import(pnode::PNode* pnode, syntax_asdl::command__Import* out) {
  List<pnode::PNode*>* children = nullptr;
  int typ;
  StackRoots _roots({&pnode, &out, &children});

  children = pnode->children;
  typ = children->index_(0)->typ;
  if (ISNONTERMINAL(typ)) {
    if (typ == grammar_nt::sq_string) {
      single_quoted* sq_part = reinterpret_cast<single_quoted*>(children->index_(0)->children->index_(1)->tok);
      out->path = sq_part;
    }
  }
}

syntax_asdl::Token* Transformer::_RangeChar(pnode::PNode* p_node) {
  List<pnode::PNode*>* children = nullptr;
  int typ;
  List<syntax_asdl::Token*>* tokens = nullptr;
  syntax_asdl::Token* tok = nullptr;
  StackRoots _roots({&p_node, &children, &tokens, &tok});

  children = p_node->children;
  typ = children->index_(0)->typ;
  if (ISNONTERMINAL(typ)) {
    if (typ == grammar_nt::sq_string) {
      single_quoted* sq_part = reinterpret_cast<single_quoted*>(children->index_(0)->children->index_(1)->tok);
      tokens = sq_part->tokens;
      if (len(tokens) > 1) {
        p_die(RANGE_POINT_TOO_LONG, Alloc<loc::WordPart>(sq_part));
      }
      if (len(tokens->index_(0)->tval) > 1) {
        p_die(RANGE_POINT_TOO_LONG, Alloc<loc::WordPart>(sq_part));
      }
      return tokens->index_(0);
    }
    if (typ == grammar_nt::char_literal) {
      tok = children->index_(0)->children->index_(0)->tok;
      return tok;
    }
    FAIL(kNotImplemented);  // Python NotImplementedError
  }
  else {
    tok = p_node->tok;
    if ((tok->id == Id::Expr_Name || tok->id == Id::Expr_DecInt)) {
      if (len(tok->tval) != 1) {
        p_die(RANGE_POINT_TOO_LONG, tok);
      }
      return tok;
    }
    FAIL(kNotImplemented);  // Python NotImplementedError
  }
}

syntax_asdl::class_literal_term_t* Transformer::_NonRangeChars(pnode::PNode* p_node) {
  List<pnode::PNode*>* children = nullptr;
  int typ;
  pnode::PNode* p_child = nullptr;
  syntax_asdl::Token* tok = nullptr;
  StackRoots _roots({&p_node, &children, &p_child, &tok});

  children = p_node->children;
  typ = children->index_(0)->typ;
  if (ISNONTERMINAL(typ)) {
    p_child = children->index_(0);
    if (typ == grammar_nt::braced_var_sub) {
      return reinterpret_cast<braced_var_sub*>(p_child->children->index_(1)->tok);
    }
    if (typ == grammar_nt::dq_string) {
      return reinterpret_cast<double_quoted*>(p_child->children->index_(1)->tok);
    }
    if (typ == grammar_nt::sq_string) {
      return reinterpret_cast<single_quoted*>(p_child->children->index_(1)->tok);
    }
    if (typ == grammar_nt::simple_var_sub) {
      tok = children->index_(0)->tok;
      return Alloc<simple_var_sub>(tok, lexer::TokenSliceLeft(tok, 1));
    }
    if (typ == grammar_nt::char_literal) {
      return Alloc<class_literal_term::CharLiteral>(children->index_(0)->tok);
    }
    FAIL(kNotImplemented);  // Python NotImplementedError
  }
  else {
    return this->_NameInClass(nullptr, children->index_(0)->tok);
  }
}

syntax_asdl::class_literal_term_t* Transformer::_ClassLiteralTerm(pnode::PNode* p_node) {
  List<pnode::PNode*>* children = nullptr;
  int typ;
  pnode::PNode* p_child = nullptr;
  syntax_asdl::Token* tok = nullptr;
  int n;
  syntax_asdl::Token* start = nullptr;
  syntax_asdl::Token* end = nullptr;
  Str* nt_name = nullptr;
  StackRoots _roots({&p_node, &children, &p_child, &tok, &start, &end, &nt_name});

  children = p_node->children;
  typ = children->index_(0)->typ;
  if (ISNONTERMINAL(typ)) {
    p_child = children->index_(0);
    if (typ == grammar_nt::simple_var_sub) {
      tok = p_child->children->index_(0)->tok;
      return Alloc<simple_var_sub>(tok, lexer::TokenSliceLeft(tok, 1));
    }
    if (typ == grammar_nt::braced_var_sub) {
      return reinterpret_cast<braced_var_sub*>(p_child->children->index_(1)->tok);
    }
    if (typ == grammar_nt::dq_string) {
      return reinterpret_cast<double_quoted*>(p_child->children->index_(1)->tok);
    }
    n = len(children);
    if ((n == 1 and typ == grammar_nt::range_char)) {
      return this->_NonRangeChars(children->index_(0));
    }
    if ((n == 3 and children->index_(1)->tok->id == Id::Arith_Minus)) {
      start = this->_RangeChar(children->index_(0));
      end = this->_RangeChar(children->index_(2));
      return Alloc<class_literal_term::Range>(start, end);
    }
  }
  else {
    if (children->index_(0)->tok->id == Id::Expr_Bang) {
      return this->_NameInClass(children->index_(0)->tok, children->index_(1)->tok);
    }
    assert(0);  // AssertionError
  }
  nt_name = this->number2symbol->index_(typ);
  FAIL(kNotImplemented);  // Python NotImplementedError
}

List<syntax_asdl::class_literal_term_t*>* Transformer::_ClassLiteral(pnode::PNode* p_node) {
  List<syntax_asdl::class_literal_term_t*>* terms = nullptr;
  StackRoots _roots({&p_node, &terms});

  terms = Alloc<List<syntax_asdl::class_literal_term_t*>>();
  for (ListIter<pnode::PNode*> it(p_node->children->slice(1, -1)); !it.Done(); it.Next()) {
    pnode::PNode* c = it.Value();
    terms->append(this->_ClassLiteralTerm(c));
  }
  return terms;
}

syntax_asdl::re_t* Transformer::_NameInRegex(syntax_asdl::Token* negated_tok, syntax_asdl::Token* tok) {
  Str* tok_str = nullptr;
  Str* perl = nullptr;
  StackRoots _roots({&negated_tok, &tok, &tok_str, &perl});

  tok_str = tok->tval;
  if (str_equals(tok_str, str609)) {
    if (negated_tok) {
      p_die(str610, tok);
    }
    return tok;
  }
  if (list_contains(POSIX_CLASSES, tok_str)) {
    return Alloc<posix_class>(negated_tok, tok_str);
  }
  perl = PERL_CLASSES->get(tok_str);
  if (perl != nullptr) {
    return Alloc<perl_class>(negated_tok, perl);
  }
  if (tok_str->index_(0)->isupper()) {
    return Alloc<re::Splice>(tok, lexer::TokenSliceLeft(tok, 1));
  }
  p_die(StrFormat("%r isn't a character class", tok_str), tok);
}

syntax_asdl::class_literal_term_t* Transformer::_NameInClass(syntax_asdl::Token* negated_tok, syntax_asdl::Token* tok) {
  Str* tok_str = nullptr;
  Str* perl = nullptr;
  StackRoots _roots({&negated_tok, &tok, &tok_str, &perl});

  tok_str = tok->tval;
  if (len(tok_str) == 1) {
    if (negated_tok) {
      p_die(str612, tok);
    }
    return Alloc<class_literal_term::CharLiteral>(tok);
  }
  if (list_contains(POSIX_CLASSES, tok_str)) {
    return Alloc<posix_class>(negated_tok, tok_str);
  }
  perl = PERL_CLASSES->get(tok_str);
  if (perl != nullptr) {
    return Alloc<perl_class>(negated_tok, perl);
  }
  p_die(StrFormat("%r isn't a character class", tok_str), tok);
}

syntax_asdl::re_t* Transformer::_ReAtom(pnode::PNode* p_atom) {
  List<pnode::PNode*>* children = nullptr;
  int typ;
  pnode::PNode* p_child = nullptr;
  syntax_asdl::Token* tok = nullptr;
  int n;
  syntax_asdl::re_t* regex = nullptr;
  syntax_asdl::Token* name_tok = nullptr;
  StackRoots _roots({&p_atom, &children, &p_child, &tok, &regex, &name_tok});

  children = p_atom->children;
  typ = children->index_(0)->typ;
  if (ISNONTERMINAL(typ)) {
    p_child = p_atom->children->index_(0);
    if (typ == grammar_nt::class_literal) {
      return Alloc<re::CharClassLiteral>(false, this->_ClassLiteral(p_child));
    }
    if (typ == grammar_nt::braced_var_sub) {
      return reinterpret_cast<braced_var_sub*>(p_child->children->index_(1)->tok);
    }
    if (typ == grammar_nt::dq_string) {
      return reinterpret_cast<double_quoted*>(p_child->children->index_(1)->tok);
    }
    if (typ == grammar_nt::sq_string) {
      return reinterpret_cast<single_quoted*>(p_child->children->index_(1)->tok);
    }
    if (typ == grammar_nt::simple_var_sub) {
      tok = children->index_(0)->tok;
      return Alloc<simple_var_sub>(tok, lexer::TokenSliceLeft(tok, 1));
    }
    if (typ == grammar_nt::char_literal) {
      return children->index_(0)->tok;
    }
    FAIL(kNotImplemented);  // Python NotImplementedError
  }
  else {
    tok = children->index_(0)->tok;
    if ((tok->id == Id::Expr_Dot || tok->id == Id::Arith_Caret || tok->id == Id::Expr_Dollar)) {
      return tok;
    }
    if (tok->id == Id::Expr_Name) {
      return this->_NameInRegex(nullptr, tok);
    }
    if (tok->id == Id::Expr_Symbol) {
      if ((str_equals(tok->tval, str614) || str_equals(tok->tval, str615) || str_equals(tok->tval, str616))) {
        return tok;
      }
      p_die(StrFormat("Unexpected token %r in regex", tok->tval), tok);
    }
    if (tok->id == Id::Expr_At) {
      tok = children->index_(1)->tok;
      return Alloc<re::Splice>(tok, lexer::TokenSliceLeft(tok, 1));
    }
    if (tok->id == Id::Expr_Bang) {
      n = len(children);
      if (n == 2) {
        typ = children->index_(1)->typ;
        if (ISNONTERMINAL(typ)) {
          return Alloc<re::CharClassLiteral>(true, this->_ClassLiteral(children->index_(1)));
        }
        else {
          return this->_NameInRegex(tok, children->index_(1)->tok);
        }
      }
      else {
        p_die(str618, children->index_(1)->tok);
      }
    }
    if (tok->id == Id::Op_LParen) {
      return Alloc<re::Group>(this->_Regex(children->index_(1)));
    }
    if (tok->id == Id::Arith_Less) {
      regex = this->_Regex(children->index_(1));
      n = len(children);
      if (n == 5) {
        name_tok = children->index_(3)->children->index_(0)->tok;
      }
      else {
        name_tok = nullptr;
      }
      return Alloc<re::Capture>(regex, name_tok);
    }
    if (tok->id == Id::Arith_Colon) {
      FAIL(kNotImplemented);  // Python NotImplementedError
    }
    FAIL(kNotImplemented);  // Python NotImplementedError
  }
}

syntax_asdl::re_repeat_t* Transformer::_RepeatOp(pnode::PNode* p_repeat) {
  syntax_asdl::Token* tok = nullptr;
  int id_;
  pnode::PNode* p_range = nullptr;
  List<pnode::PNode*>* children = nullptr;
  int n;
  StackRoots _roots({&p_repeat, &tok, &p_range, &children});

  tok = p_repeat->children->index_(0)->tok;
  id_ = tok->id;
  if ((id_ == Id::Arith_Plus || id_ == Id::Arith_Star || id_ == Id::Arith_QMark)) {
    return Alloc<re_repeat::Op>(tok);
  }
  if (id_ == Id::Op_LBrace) {
    p_range = p_repeat->children->index_(1);
    children = p_range->children;
    n = len(children);
    if (n == 1) {
      return Alloc<re_repeat::Num>(children->index_(0)->tok);
    }
    if (n == 2) {
      if (children->index_(0)->tok->id == Id::Expr_DecInt) {
        return Alloc<re_repeat::Range>(children->index_(0)->tok, nullptr);
      }
      else {
        return Alloc<re_repeat::Range>(nullptr, children->index_(1)->tok);
      }
    }
    if (n == 3) {
      return Alloc<re_repeat::Range>(children->index_(0)->tok, children->index_(2)->tok);
    }
    assert(0);  // AssertionError
  }
  assert(0);  // AssertionError
}

syntax_asdl::re_t* Transformer::_Regex(pnode::PNode* p_node) {
  int typ;
  List<pnode::PNode*>* children = nullptr;
  List<syntax_asdl::re_t*>* alts = nullptr;
  int n;
  pnode::PNode* c = nullptr;
  int i;
  List<syntax_asdl::re_t*>* seq = nullptr;
  syntax_asdl::re_t* r = nullptr;
  syntax_asdl::re_repeat_t* repeat_op = nullptr;
  Str* nt_name = nullptr;
  StackRoots _roots({&p_node, &children, &alts, &c, &seq, &r, &repeat_op, &nt_name});

  typ = p_node->typ;
  children = p_node->children;
  if (typ == grammar_nt::regex) {
    if (len(children) == 1) {
      return this->_Regex(children->index_(0));
    }
    alts = Alloc<List<syntax_asdl::re_t*>>();
    n = len(p_node->children);
    for (int i = 0; i < n; i += 2) {
      c = p_node->children->index_(i);
      alts->append(this->_Regex(c));
    }
    return Alloc<re::Alt>(alts);
  }
  if (typ == grammar_nt::re_alt) {
    i = 0;
    n = len(children);
    seq = Alloc<List<syntax_asdl::re_t*>>();
    while (i < n) {
      r = this->_ReAtom(children->index_(i));
      i += 1;
      if ((i < n and children->index_(i)->typ == grammar_nt::repeat_op)) {
        repeat_op = this->_RepeatOp(children->index_(i));
        r = Alloc<re::Repeat>(r, repeat_op);
        i += 1;
      }
      seq->append(r);
    }
    if (len(seq) == 1) {
      return seq->index_(0);
    }
    else {
      return Alloc<re::Seq>(seq);
    }
  }
  nt_name = this->number2symbol->index_(typ);
  FAIL(kNotImplemented);  // Python NotImplementedError
}

}  // define namespace expr_to_ast

namespace funcs {  // define

using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value__Block;
using syntax_asdl::source;
using syntax_asdl::loc;

ParseHay::ParseHay(process::FdState* fd_state, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt) 
    : header_(obj_header()) {
  this->fd_state = fd_state;
  this->parse_ctx = parse_ctx;
  this->errfmt = errfmt;
}

runtime_asdl::value_t* ParseHay::Call(Str* path) {
  int call_spid;
  mylib::LineReader* f = nullptr;
  Str* msg = nullptr;
  alloc::Arena* arena = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  optview::Parse* parse_opts = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  syntax_asdl::source__SourcedFile* src = nullptr;
  syntax_asdl::command_t* node = nullptr;
  StackRoots _roots({&path, &f, &msg, &arena, &line_reader, &parse_opts, &c_parser, &src, &node});

  call_spid = runtime::NO_SPID;
  try {
    f = this->fd_state->Open(path);
  }
  catch (IOError_OSError* e) {
    msg = posix::strerror(e->errno_);
    throw Alloc<error::Expr>(StrFormat("Couldn't open %r: %s", path, msg), Alloc<loc::Span>(call_spid));
  }
  arena = this->parse_ctx->arena;
  line_reader = Alloc<reader::FileLineReader>(f, arena);
  parse_opts = state::MakeOilOpts();
  c_parser = this->parse_ctx->MakeConfigParser(line_reader);
  src = Alloc<source::SourcedFile>(path, call_spid);
  try {
    {  // with
      alloc::ctx_Location ctx{arena, src};

      node = main_loop::ParseWholeFile(c_parser);
    }
  }
  catch (error::Parse* e) {
    this->errfmt->PrettyPrintError(e);
    return nullptr;
  }
  return Alloc<value::Block>(node);
}

EvalHay::EvalHay(state::Hay* hay_state, state::MutableOpts* mutable_opts, state::Mem* mem, cmd_eval::CommandEvaluator* cmd_ev) 
    : header_(obj_header()) {
  this->hay_state = hay_state;
  this->mutable_opts = mutable_opts;
  this->mem = mem;
  this->cmd_ev = cmd_ev;
}

BlockAsStr::BlockAsStr(alloc::Arena* arena) 
    : header_(obj_header()) {
  this->arena = arena;
}

runtime_asdl::value_t* BlockAsStr::Call(runtime_asdl::value_t* block) {
  StackRoots _roots({&block});

  return block;
}

HayFunc::HayFunc(state::Hay* hay_state) 
    : header_(obj_header()) {
  this->hay_state = hay_state;
}

}  // define namespace funcs

namespace regex_translate {  // define

using syntax_asdl::char_class_term_e;
using syntax_asdl::char_class_term_t;
using syntax_asdl::char_class_term__Range;
using syntax_asdl::posix_class;
using syntax_asdl::perl_class;
using syntax_asdl::CharCode;
using syntax_asdl::re_e;
using syntax_asdl::re__CharClass;
using syntax_asdl::re__Primitive;
using syntax_asdl::re__LiteralChars;
using syntax_asdl::re__Seq;
using syntax_asdl::re__Alt;
using syntax_asdl::re__Repeat;
using syntax_asdl::re__Group;
using syntax_asdl::re_repeat_e;
using syntax_asdl::re_repeat__Op;
using syntax_asdl::re_repeat__Num;
using syntax_asdl::re_repeat__Range;
using syntax_asdl::loc;
using id_kind_asdl::Id;
using pyerror::e_die;
Dict<Str*, Str*> gdict0(std::initializer_list<Str*>{}, std::initializer_list<Str*>{});
Dict<Str*, Str*>* PERL_CLASS = &gdict0;
int CH_RBRACKET = 93;
int CH_BACKSLASH = 92;
int CH_CARET = 94;
int CH_HYPHEN = 45;
int FLAG_RBRACKET = 1;
int FLAG_BACKSLASH = 2;
int FLAG_CARET = 4;
int FLAG_HYPHEN = 8;

void _CharCodeToEre(syntax_asdl::CharCode* term, List<Str*>* parts, List<int>* special_char_flags) {
  int char_int;
  int mask;
  StackRoots _roots({&term, &parts, &special_char_flags});

  char_int = term->i;
  if ((char_int >= 128 and term->u_braced)) {
    e_die(StrFormat("ERE can't express char code %d", char_int), Alloc<loc::Span>(term->spid));
  }
  mask = special_char_flags->index_(0);
  if (char_int == CH_HYPHEN) {
    mask |= FLAG_HYPHEN;
  }
  else {
    if (char_int == CH_CARET) {
      mask |= FLAG_CARET;
    }
    else {
      if (char_int == CH_RBRACKET) {
        mask |= FLAG_RBRACKET;
      }
      else {
        if (char_int == CH_BACKSLASH) {
          mask |= FLAG_BACKSLASH;
        }
        else {
          parts->append(chr(char_int));
        }
      }
    }
  }
  special_char_flags->set(0, mask);
}

void _CharClassTermToEre(syntax_asdl::char_class_term_t* term, List<Str*>* parts, List<int>* special_char_flags) {
  syntax_asdl::char_class_term_t* UP_term = nullptr;
  int tag;
  List<int>* range_no_special = nullptr;
  Str* n = nullptr;
  Str* chars = nullptr;
  Str* pat = nullptr;
  StackRoots _roots({&term, &parts, &special_char_flags, &UP_term, &range_no_special, &n, &chars, &pat});

  UP_term = term;
  tag = term->tag_();
  switch (term->tag_()) {
    case char_class_term_e::Range: {
      char_class_term__Range* term = static_cast<char_class_term__Range*>(UP_term);
      range_no_special = NewList<int>(std::initializer_list<int>{0});
      _CharCodeToEre(term->start, parts, range_no_special);
      if (range_no_special->index_(0) != 0) {
        e_die(StrFormat("Can't use char %d as start of range in ERE syntax", term->start->i), Alloc<loc::Span>(term->start->spid));
      }
      parts->append(str622);
      _CharCodeToEre(term->end, parts, range_no_special);
      if (range_no_special->index_(0) != 0) {
        e_die(StrFormat("Can't use char %d as end of range in ERE syntax", term->end->i), Alloc<loc::Span>(term->end->spid));
      }
    }
      break;
    case char_class_term_e::CharCode: {
      CharCode* term = static_cast<CharCode*>(UP_term);
      _CharCodeToEre(term, parts, special_char_flags);
    }
      break;
    case char_class_term_e::PerlClass: {
      perl_class* term = static_cast<perl_class*>(UP_term);
      n = term->name;
      chars = PERL_CLASS->index_(term->name);
      if (term->negated) {
        e_die(str624, term->negated);
      }
      else {
        pat = StrFormat("%s", chars);
      }
      parts->append(pat);
    }
      break;
    case char_class_term_e::PosixClass: {
      posix_class* term = static_cast<posix_class*>(UP_term);
      n = term->name;
      if (term->negated) {
        e_die(str626, term->negated);
      }
      else {
        pat = StrFormat("[:%s:]", n);
      }
      parts->append(pat);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

void AsPosixEre(syntax_asdl::re_t* node, List<Str*>* parts) {
  syntax_asdl::re_t* UP_node = nullptr;
  int tag;
  int i;
  syntax_asdl::re_repeat_t* op = nullptr;
  int op_tag;
  syntax_asdl::re_repeat_t* UP_op = nullptr;
  int op_id;
  Str* lower = nullptr;
  Str* upper = nullptr;
  Str* n = nullptr;
  Str* chars = nullptr;
  Str* pat = nullptr;
  List<int>* special_char_flags = nullptr;
  List<Str*>* non_special_parts = nullptr;
  StackRoots _roots({&node, &parts, &UP_node, &op, &UP_op, &lower, &upper, &n, &chars, &pat, &special_char_flags, &non_special_parts});

  UP_node = node;
  tag = node->tag_();
  if (tag == re_e::Primitive) {
    re__Primitive* node = static_cast<re__Primitive*>(UP_node);
    if (node->id == Id::Re_Dot) {
      parts->append(str628);
    }
    else {
      if (node->id == Id::Re_Start) {
        parts->append(str629);
      }
      else {
        if (node->id == Id::Re_End) {
          parts->append(str630);
        }
        else {
          assert(0);  // AssertionError
        }
      }
    }
    return ;
  }
  if (tag == re_e::LiteralChars) {
    re__LiteralChars* node = static_cast<re__LiteralChars*>(UP_node);
    parts->append(glob_::ExtendedRegexEscape(node->s));
    return ;
  }
  if (tag == re_e::Seq) {
    re__Seq* node = static_cast<re__Seq*>(UP_node);
    for (ListIter<syntax_asdl::re_t*> it(node->children); !it.Done(); it.Next()) {
      syntax_asdl::re_t* c = it.Value();
      StackRoots _for({&c    });
      AsPosixEre(c, parts);
    }
    return ;
  }
  if (tag == re_e::Alt) {
    re__Alt* node = static_cast<re__Alt*>(UP_node);
    i = 0;
    for (ListIter<syntax_asdl::re_t*> it(node->children); !it.Done(); it.Next(), ++i) {
      syntax_asdl::re_t* c = it.Value();
      StackRoots _for({&c    });
      if (i != 0) {
        parts->append(str631);
      }
      AsPosixEre(c, parts);
    }
    return ;
  }
  if (tag == re_e::Repeat) {
    re__Repeat* node = static_cast<re__Repeat*>(UP_node);
    if (node->child->tag_() == re_e::LiteralChars) {
      re__LiteralChars* child = static_cast<re__LiteralChars*>(node->child);
      if (len(child->s) > 1) {
        e_die(str632, Alloc<loc::Span>(child->spid));
      }
    }
    AsPosixEre(node->child, parts);
    op = node->op;
    op_tag = op->tag_();
    UP_op = op;
    if (op_tag == re_repeat_e::Op) {
      re_repeat__Op* op = static_cast<re_repeat__Op*>(UP_op);
      op_id = op->op->id;
      if (op_id == Id::Arith_Plus) {
        parts->append(str633);
      }
      else {
        if (op_id == Id::Arith_Star) {
          parts->append(str634);
        }
        else {
          if (op_id == Id::Arith_QMark) {
            parts->append(str635);
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
      return ;
    }
    if (op_tag == re_repeat_e::Num) {
      re_repeat__Num* op = static_cast<re_repeat__Num*>(UP_op);
      parts->append(StrFormat("{%s}", op->times->tval));
      return ;
    }
    if (op_tag == re_repeat_e::Range) {
      re_repeat__Range* op = static_cast<re_repeat__Range*>(UP_op);
      lower = op->lower ? op->lower->tval : str637;
      upper = op->upper ? op->upper->tval : str638;
      parts->append(StrFormat("{%s,%s}", lower, upper));
      return ;
    }
    FAIL(kNotImplemented);  // Python NotImplementedError
  }
  if ((tag == re_e::Group || tag == re_e::Capture)) {
    re__Group* node = static_cast<re__Group*>(UP_node);
    parts->append(str640);
    AsPosixEre(node->child, parts);
    parts->append(str641);
    return ;
  }
  if (tag == re_e::PerlClass) {
    perl_class* node = static_cast<perl_class*>(UP_node);
    n = node->name;
    chars = PERL_CLASS->index_(node->name);
    if (node->negated) {
      pat = StrFormat("[^%s]", chars);
    }
    else {
      pat = StrFormat("[%s]", chars);
    }
    parts->append(pat);
    return ;
  }
  if (tag == re_e::PosixClass) {
    posix_class* node = static_cast<posix_class*>(UP_node);
    n = node->name;
    if (node->negated) {
      pat = StrFormat("[^[:%s:]]", n);
    }
    else {
      pat = StrFormat("[[:%s:]]", n);
    }
    parts->append(pat);
    return ;
  }
  if (tag == re_e::CharClass) {
    re__CharClass* node = static_cast<re__CharClass*>(UP_node);
    special_char_flags = NewList<int>(std::initializer_list<int>{0});
    non_special_parts = Alloc<List<Str*>>();
    for (ListIter<syntax_asdl::char_class_term_t*> it(node->terms); !it.Done(); it.Next()) {
      syntax_asdl::char_class_term_t* term = it.Value();
      StackRoots _for({&term    });
      _CharClassTermToEre(term, non_special_parts, special_char_flags);
    }
    parts->append(str646);
    if (node->negated) {
      parts->append(str647);
    }
    if ((special_char_flags->index_(0) & FLAG_RBRACKET)) {
      parts->append(str648);
    }
    parts->extend(non_special_parts);
    if ((special_char_flags->index_(0) & FLAG_BACKSLASH)) {
      parts->append(str649);
    }
    if ((special_char_flags->index_(0) & FLAG_CARET)) {
      parts->append(str650);
    }
    if ((special_char_flags->index_(0) & FLAG_HYPHEN)) {
      parts->append(str651);
    }
    parts->append(str652);
    return ;
  }
  FAIL(kNotImplemented);  // Python NotImplementedError
}

}  // define namespace regex_translate

namespace arith_parse {  // define

using id_kind_asdl::Id;
using syntax_asdl::loc;
using syntax_asdl::arith_expr;
using syntax_asdl::arith_expr_t;
using syntax_asdl::word_t;
using pyerror::p_die;

syntax_asdl::arith_expr_t* NullIncDec(tdop::TdopParser* p, syntax_asdl::word_t* w, int bp) {
  syntax_asdl::arith_expr_t* right = nullptr;
  StackRoots _roots({&p, &w, &right});

  right = p->ParseUntil(bp);
  tdop::CheckLhsExpr(right, w);
  return Alloc<arith_expr::UnaryAssign>(word_::ArithId(w), right);
}

syntax_asdl::arith_expr_t* NullUnaryPlus(tdop::TdopParser* p, syntax_asdl::word_t* t, int bp) {
  syntax_asdl::arith_expr_t* right = nullptr;
  StackRoots _roots({&p, &t, &right});

  right = p->ParseUntil(bp);
  return Alloc<arith_expr::Unary>(Id::Node_UnaryPlus, right);
}

syntax_asdl::arith_expr_t* NullUnaryMinus(tdop::TdopParser* p, syntax_asdl::word_t* t, int bp) {
  syntax_asdl::arith_expr_t* right = nullptr;
  StackRoots _roots({&p, &t, &right});

  right = p->ParseUntil(bp);
  return Alloc<arith_expr::Unary>(Id::Node_UnaryMinus, right);
}

syntax_asdl::arith_expr_t* LeftIncDec(tdop::TdopParser* p, syntax_asdl::word_t* w, syntax_asdl::arith_expr_t* left, int rbp) {
  int arith_id;
  int op_id;
  StackRoots _roots({&p, &w, &left});

  arith_id = word_::ArithId(w);
  if (arith_id == Id::Arith_DPlus) {
    op_id = Id::Node_PostDPlus;
  }
  else {
    if (arith_id == Id::Arith_DMinus) {
      op_id = Id::Node_PostDMinus;
    }
    else {
      assert(0);  // AssertionError
    }
  }
  tdop::CheckLhsExpr(left, w);
  return Alloc<arith_expr::UnaryAssign>(op_id, left);
}

syntax_asdl::arith_expr_t* LeftIndex(tdop::TdopParser* p, syntax_asdl::word_t* w, syntax_asdl::arith_expr_t* left, int unused_bp) {
  syntax_asdl::arith_expr_t* index = nullptr;
  StackRoots _roots({&p, &w, &left, &index});

  if (!tdop::IsIndexable(left)) {
    p_die(str653, Alloc<loc::Word>(w));
  }
  index = p->ParseUntil(0);
  p->Eat(Id::Arith_RBracket);
  return Alloc<arith_expr::Binary>(word_::ArithId(w), left, index);
}

syntax_asdl::arith_expr_t* LeftTernary(tdop::TdopParser* p, syntax_asdl::word_t* t, syntax_asdl::arith_expr_t* left, int bp) {
  syntax_asdl::arith_expr_t* true_expr = nullptr;
  syntax_asdl::arith_expr_t* false_expr = nullptr;
  StackRoots _roots({&p, &t, &left, &true_expr, &false_expr});

  true_expr = p->ParseUntil(0);
  p->Eat(Id::Arith_Colon);
  false_expr = p->ParseUntil(bp);
  return Alloc<arith_expr::TernaryOp>(left, true_expr, false_expr);
}

}  // define namespace arith_parse

namespace bool_parse {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Kind;
using types_asdl::lex_mode_t;
using types_asdl::lex_mode_e;
using syntax_asdl::loc;
using syntax_asdl::word_t;
using syntax_asdl::word_e;
using syntax_asdl::bool_expr;
using syntax_asdl::bool_expr_t;
using pyerror::p_die;

BoolParser::BoolParser(word_parse::WordEmitter* w_parser) 
    : header_(obj_header()) {
  this->w_parser = w_parser;
  this->words = Alloc<List<syntax_asdl::word_t*>>();
  this->cur_word = nullptr;
  this->bool_id = Id::Undefined_Tok;
  this->bool_kind = Kind::Undefined;
}

void BoolParser::_NextOne(types_asdl::lex_mode_t lex_mode) {
  int n;
  syntax_asdl::word_t* w = nullptr;
  StackRoots _roots({&w});

  n = len(this->words);
  if (n == 2) {
    this->words->set(0, this->words->index_(1));
    this->cur_word = this->words->index_(0);
    this->words->pop();
  }
  else {
    if ((n == 0 || n == 1)) {
      w = this->w_parser->ReadWord(lex_mode);
      if (n == 0) {
        this->words->append(w);
      }
      else {
        this->words->set(0, w);
      }
      this->cur_word = w;
    }
  }
  this->bool_id = word_::BoolId(this->cur_word);
  this->bool_kind = consts::GetKind(this->bool_id);
}

void BoolParser::_Next(types_asdl::lex_mode_t lex_mode) {
  while (true) {
    this->_NextOne(lex_mode);
    if (this->bool_id != Id::Op_Newline) {
      break;
    }
  }
}

syntax_asdl::word_t* BoolParser::_LookAhead() {
  int n;
  syntax_asdl::word_t* w = nullptr;
  StackRoots _roots({&w});

  n = len(this->words);
  if (n != 1) {
    assert(0);  // AssertionError
  }
  w = this->w_parser->ReadWord(lex_mode_e::DBracket);
  this->words->append(w);
  return w;
}

syntax_asdl::bool_expr_t* BoolParser::Parse() {
  syntax_asdl::bool_expr_t* node = nullptr;
  StackRoots _roots({&node});

  this->_Next();
  node = this->ParseExpr();
  if (this->bool_id != Id::Lit_DRightBracket) {
    p_die(str654, Alloc<loc::Word>(this->cur_word));
  }
  return node;
}

bool BoolParser::_TestAtEnd() {
  return this->bool_id == Id::Lit_DRightBracket;
}

syntax_asdl::bool_expr_t* BoolParser::ParseForBuiltin() {
  syntax_asdl::bool_expr_t* node = nullptr;
  StackRoots _roots({&node});

  this->_Next();
  node = this->ParseExpr();
  if (this->bool_id != Id::Eof_Real) {
    p_die(StrFormat("Unexpected trailing word %s", word_::Pretty(this->cur_word)), Alloc<loc::Word>(this->cur_word));
  }
  return node;
}

syntax_asdl::bool_expr_t* BoolParser::ParseExpr() {
  syntax_asdl::bool_expr_t* left = nullptr;
  syntax_asdl::bool_expr_t* right = nullptr;
  StackRoots _roots({&left, &right});

  left = this->ParseTerm();
  if ((this->bool_id == Id::Op_DPipe || this->bool_id == Id::BoolUnary_o)) {
    this->_Next();
    right = this->ParseExpr();
    return Alloc<bool_expr::LogicalOr>(left, right);
  }
  else {
    return left;
  }
}

syntax_asdl::bool_expr_t* BoolParser::ParseTerm() {
  syntax_asdl::bool_expr_t* left = nullptr;
  syntax_asdl::bool_expr_t* right = nullptr;
  StackRoots _roots({&left, &right});

  left = this->ParseNegatedFactor();
  if ((this->bool_id == Id::Op_DAmp || this->bool_id == Id::BoolUnary_a)) {
    this->_Next();
    right = this->ParseTerm();
    return Alloc<bool_expr::LogicalAnd>(left, right);
  }
  else {
    return left;
  }
}

syntax_asdl::bool_expr_t* BoolParser::ParseNegatedFactor() {
  syntax_asdl::bool_expr_t* child = nullptr;
  StackRoots _roots({&child});

  if (this->bool_id == Id::KW_Bang) {
    this->_Next();
    child = this->ParseFactor();
    return Alloc<bool_expr::LogicalNot>(child);
  }
  else {
    return this->ParseFactor();
  }
}

syntax_asdl::bool_expr_t* BoolParser::ParseFactor() {
  int op;
  syntax_asdl::word_t* w = nullptr;
  int tag;
  syntax_asdl::compound_word* tilde = nullptr;
  syntax_asdl::bool_expr_t* node = nullptr;
  syntax_asdl::word_t* t2 = nullptr;
  int t2_bool_id;
  id_kind_asdl::Kind_t t2_bool_kind;
  syntax_asdl::word_t* left = nullptr;
  bool is_regex;
  syntax_asdl::word_t* right = nullptr;
  StackRoots _roots({&w, &tilde, &node, &t2, &left, &right});

  if (this->bool_kind == Kind::BoolUnary) {
    op = this->bool_id;
    this->_Next();
    w = this->cur_word;
    tag = w->tag_();
    if ((tag != word_e::Compound and tag != word_e::String)) {
      p_die(str656, Alloc<loc::Word>(w));
    }
    this->_Next();
    tilde = word_::TildeDetect(w);
    if (tilde) {
      w = tilde;
    }
    node = Alloc<bool_expr::Unary>(op, w);
    return node;
  }
  if (this->bool_kind == Kind::Word) {
    t2 = this->_LookAhead();
    t2_bool_id = word_::BoolId(t2);
    t2_bool_kind = consts::GetKind(t2_bool_id);
    if ((t2_bool_kind == Kind::BoolBinary or (t2_bool_id == Id::Op_Less || t2_bool_id == Id::Op_Great))) {
      left = this->cur_word;
      this->_Next();
      op = this->bool_id;
      is_regex = t2_bool_id == Id::BoolBinary_EqualTilde;
      if (is_regex) {
        this->_Next(lex_mode_e::BashRegex);
      }
      else {
        this->_Next();
      }
      right = this->cur_word;
      if (is_regex) {
        ;  // pass
      }
      this->_Next();
      tilde = word_::TildeDetect(left);
      if (tilde) {
        left = tilde;
      }
      tilde = word_::TildeDetect(right);
      if (tilde) {
        right = tilde;
      }
      return Alloc<bool_expr::Binary>(op, left, right);
    }
    else {
      w = this->cur_word;
      tilde = word_::TildeDetect(w);
      if (tilde) {
        w = tilde;
      }
      this->_Next();
      return Alloc<bool_expr::WordTest>(w);
    }
  }
  if (this->bool_id == Id::Op_LParen) {
    this->_Next();
    node = this->ParseExpr();
    if (this->bool_id != Id::Op_RParen) {
      p_die(StrFormat("Expected ), got %s", word_::Pretty(this->cur_word)), Alloc<loc::Word>(this->cur_word));
    }
    this->_Next();
    return node;
  }
  p_die(StrFormat("Unexpected token in boolean expression (%s)", ui::PrettyId(this->bool_id)), Alloc<loc::Word>(this->cur_word));
}

}  // define namespace bool_parse

namespace braces {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using syntax_asdl::Token;
using syntax_asdl::compound_word;
using syntax_asdl::word;
using syntax_asdl::word_e;
using syntax_asdl::word_t;
using syntax_asdl::word__BracedTree;
using syntax_asdl::word_part;
using syntax_asdl::word_part_e;
using syntax_asdl::word_part_t;
using syntax_asdl::word_part__BracedTuple;
using syntax_asdl::word_part__BracedRange;
using pyerror::p_die;
int NO_STEP = 0;

_NotARange::_NotARange(Str* s) 
    : header_(obj_header()) {
  ;  // pass
}

_RangeParser::_RangeParser(match::SimpleLexer* lexer, syntax_asdl::Token* blame_tok) 
    : header_(obj_header()) {
  this->lexer = lexer;
  this->blame_tok = blame_tok;
  this->token_type = Id::Undefined_Tok;
  this->token_val = str659;
}

void _RangeParser::_Next() {
  Tuple2<int, Str*> tup0 = this->lexer->Next();
  this->token_type = tup0.at0();
  this->token_val = tup0.at1();
}

Str* _RangeParser::_Eat(int token_type) {
  Str* val = nullptr;
  StackRoots _roots({&val});

  if (this->token_type != token_type) {
    throw Alloc<_NotARange>(StrFormat("Expected %d, got %d", token_type, this->token_type));
  }
  val = this->token_val;
  this->_Next();
  return val;
}

int _RangeParser::_ParseStep() {
  int step;
  this->_Next();
  step = to_int(this->_Eat(Id::Range_Int));
  if (step == 0) {
    p_die(str661, this->blame_tok);
  }
  return step;
}

syntax_asdl::word_part__BracedRange* _RangeParser::_ParseRange(int range_kind) {
  Str* start = nullptr;
  Str* end = nullptr;
  int step;
  syntax_asdl::word_part__BracedRange* part = nullptr;
  StackRoots _roots({&start, &end, &part});

  start = this->token_val;
  this->_Next();
  this->_Eat(Id::Range_Dots);
  end = this->_Eat(range_kind);
  if (this->token_type == Id::Range_Dots) {
    step = this->_ParseStep();
  }
  else {
    step = NO_STEP;
  }
  part = Alloc<word_part::BracedRange>(range_kind, start, end, step);
  return part;
}

syntax_asdl::word_part__BracedRange* _RangeParser::Parse() {
  syntax_asdl::word_part__BracedRange* part = nullptr;
  int start;
  int end;
  int start_num;
  int end_num;
  bool upper1;
  bool upper2;
  StackRoots _roots({&part});

  this->_Next();
  if (this->token_type == Id::Range_Int) {
    part = this->_ParseRange(this->token_type);
    start = to_int(part->start);
    end = to_int(part->end);
    if (start < end) {
      if (part->step == NO_STEP) {
        part->step = 1;
      }
      if (part->step <= 0) {
        p_die(StrFormat("Invalid step %d for ascending integer range", part->step), this->blame_tok);
      }
    }
    else {
      if (start > end) {
        if (part->step == NO_STEP) {
          part->step = -1;
        }
        if (part->step >= 0) {
          p_die(StrFormat("Invalid step %d for descending integer range", part->step), this->blame_tok);
        }
      }
      else {
        part->step = 1;
      }
    }
  }
  else {
    if (this->token_type == Id::Range_Char) {
      part = this->_ParseRange(this->token_type);
      start_num = ord(part->start->index_(0));
      end_num = ord(part->end->index_(0));
      if (start_num < end_num) {
        if (part->step == NO_STEP) {
          part->step = 1;
        }
        if (part->step <= 0) {
          p_die(StrFormat("Invalid step %d for ascending character range", part->step), this->blame_tok);
        }
      }
      else {
        if (start_num > end_num) {
          if (part->step == NO_STEP) {
            part->step = -1;
          }
          if (part->step >= 0) {
            p_die(StrFormat("Invalid step %d for descending character range", part->step), this->blame_tok);
          }
        }
        else {
          part->step = 1;
        }
      }
      upper1 = part->start->isupper();
      upper2 = part->end->isupper();
      if (upper1 != upper2) {
        p_die(str666, this->blame_tok);
      }
    }
    else {
      throw Alloc<_NotARange>(str667);
    }
  }
  this->_Eat(Id::Eol_Tok);
  return part;
}

syntax_asdl::word_part_t* _RangePartDetect(syntax_asdl::Token* tok) {
  match::SimpleLexer* lexer = nullptr;
  braces::_RangeParser* p = nullptr;
  syntax_asdl::word_part__BracedRange* part = nullptr;
  StackRoots _roots({&tok, &lexer, &p, &part});

  lexer = match::BraceRangeLexer(tok->tval);
  p = Alloc<_RangeParser>(lexer, tok);
  try {
    part = p->Parse();
  }
  catch (_NotARange* e) {
    return nullptr;
  }
  part->spids->append(tok->span_id);
  return part;
}

_StackFrame::_StackFrame(List<syntax_asdl::word_part_t*>* cur_parts) 
    : header_(obj_header()) {
  this->cur_parts = cur_parts;
  this->alt_part = Alloc<word_part::BracedTuple>(Alloc<List<syntax_asdl::compound_word*>>());
  this->saw_comma = false;
}

syntax_asdl::word__BracedTree* _BraceDetect(syntax_asdl::compound_word* w) {
  List<syntax_asdl::word_part_t*>* cur_parts = nullptr;
  List<braces::_StackFrame*>* stack = nullptr;
  bool found;
  int i;
  bool append;
  syntax_asdl::word_part_t* UP_part = nullptr;
  int id_;
  braces::_StackFrame* new_frame = nullptr;
  syntax_asdl::word_part_t* range_part = nullptr;
  syntax_asdl::word_part_t* part2 = nullptr;
  braces::_StackFrame* frame = nullptr;
  StackRoots _roots({&w, &cur_parts, &stack, &UP_part, &new_frame, &range_part, &part2, &frame});

  cur_parts = Alloc<List<syntax_asdl::word_part_t*>>();
  stack = Alloc<List<braces::_StackFrame*>>();
  found = false;
  i = 0;
  for (ListIter<syntax_asdl::word_part_t*> it(w->parts); !it.Done(); it.Next(), ++i) {
    syntax_asdl::word_part_t* part = it.Value();
    StackRoots _for({&part  });
    append = true;
    UP_part = part;
    if (part->tag_() == word_part_e::Literal) {
      Token* part = static_cast<Token*>(UP_part);
      id_ = part->id;
      if (id_ == Id::Lit_LBrace) {
        new_frame = Alloc<_StackFrame>(cur_parts);
        stack->append(new_frame);
        cur_parts = Alloc<List<syntax_asdl::word_part_t*>>();
        append = false;
        found = true;
      }
      else {
        if (id_ == Id::Lit_Comma) {
          if (len(stack)) {
            stack->index_(-1)->saw_comma = true;
            stack->index_(-1)->alt_part->words->append(Alloc<compound_word>(cur_parts));
            cur_parts = Alloc<List<syntax_asdl::word_part_t*>>();
            append = false;
          }
        }
        else {
          if (id_ == Id::Lit_RBrace) {
            if (len(stack) == 0) {
              return nullptr;
            }
            range_part = nullptr;
            if ((!stack->index_(-1)->saw_comma and len(cur_parts) == 1)) {
              part2 = cur_parts->index_(0);
              if (part2->tag_() == word_part_e::Literal) {
                Token* tok = static_cast<Token*>(part2);
                if (tok->id == Id::Lit_Chars) {
                  range_part = _RangePartDetect(tok);
                  if (range_part) {
                    frame = stack->pop();
                    cur_parts = frame->cur_parts;
                    cur_parts->append(range_part);
                    append = false;
                  }
                }
              }
            }
            if (!range_part) {
              if (!stack->index_(-1)->saw_comma) {
                return nullptr;
              }
              stack->index_(-1)->alt_part->words->append(Alloc<compound_word>(cur_parts));
              frame = stack->pop();
              cur_parts = frame->cur_parts;
              cur_parts->append(frame->alt_part);
              append = false;
            }
          }
        }
      }
    }
    if (append) {
      cur_parts->append(part);
    }
  }
  if (len(stack) != 0) {
    return nullptr;
  }
  if (found) {
    return Alloc<word::BracedTree>(cur_parts);
  }
  else {
    return nullptr;
  }
}

List<syntax_asdl::word_t*>* BraceDetectAll(List<syntax_asdl::compound_word*>* words) {
  List<syntax_asdl::word_t*>* out = nullptr;
  syntax_asdl::word__BracedTree* brace_tree = nullptr;
  StackRoots _roots({&words, &out, &brace_tree});

  out = Alloc<List<syntax_asdl::word_t*>>();
  for (ListIter<syntax_asdl::compound_word*> it(words); !it.Done(); it.Next()) {
    syntax_asdl::compound_word* w = it.Value();
    StackRoots _for({&w  });
    if (len(w->parts) >= 3) {
      brace_tree = _BraceDetect(w);
      if (brace_tree) {
        out->append(brace_tree);
        continue;
      }
    }
    out->append(w);
  }
  return out;
}

int _LeadingZeros(Str* s) {
  int n;
  StackRoots _roots({&s});

  n = 0;
  for (StrIter it(s); !it.Done(); it.Next()) {
    Str* c = it.Value();
    StackRoots _for({&c  });
    if (str_equals(c, str668)) {
      n += 1;
    }
    else {
      break;
    }
  }
  return n;
}

Str* _IntToString(int i, int width) {
  Str* s = nullptr;
  int n;
  Str* pad = nullptr;
  StackRoots _roots({&s, &pad});

  s = str(i);
  n = len(s);
  if (n < width) {
    pad = str_repeat(str669, (width - n));
    return str_concat(pad, s);
  }
  else {
    return s;
  }
}

List<Str*>* _RangeStrings(syntax_asdl::word_part__BracedRange* part) {
  List<Str*>* nums = nullptr;
  int z1;
  int z2;
  int width;
  int n;
  int end;
  int step;
  List<Str*>* chars = nullptr;
  int ord_end;
  StackRoots _roots({&part, &nums, &chars});

  if (part->kind == Id::Range_Int) {
    nums = Alloc<List<Str*>>();
    z1 = _LeadingZeros(part->start);
    z2 = _LeadingZeros(part->end);
    if ((z1 == 0 and z2 == 0)) {
      width = 0;
    }
    else {
      if (z1 < z2) {
        width = len(part->end);
      }
      else {
        width = len(part->start);
      }
    }
    n = to_int(part->start);
    end = to_int(part->end);
    step = part->step;
    if (step > 0) {
      while (true) {
        nums->append(_IntToString(n, width));
        n += step;
        if (n > end) {
          break;
        }
      }
    }
    else {
      while (true) {
        nums->append(_IntToString(n, width));
        n += step;
        if (n < end) {
          break;
        }
      }
    }
    return nums;
  }
  else {
    chars = Alloc<List<Str*>>();
    n = ord(part->start);
    ord_end = ord(part->end);
    step = part->step;
    if (step > 0) {
      while (true) {
        chars->append(chr(n));
        n += step;
        if (n > ord_end) {
          break;
        }
      }
    }
    else {
      while (true) {
        chars->append(chr(n));
        n += step;
        if (n < ord_end) {
          break;
        }
      }
    }
    return chars;
  }
}

List<List<syntax_asdl::word_part_t*>*>* _ExpandPart(List<syntax_asdl::word_part_t*>* parts, int first_alt_index, List<List<syntax_asdl::word_part_t*>*>* suffixes) {
  List<List<syntax_asdl::word_part_t*>*>* out = nullptr;
  List<syntax_asdl::word_part_t*>* prefix = nullptr;
  syntax_asdl::word_part_t* expand_part = nullptr;
  syntax_asdl::word_part_t* UP_part = nullptr;
  List<List<syntax_asdl::word_part_t*>*>* expanded_alts = nullptr;
  List<syntax_asdl::word_part_t*>* out_parts = nullptr;
  List<Str*>* strs = nullptr;
  List<syntax_asdl::word_part_t*>* out_parts_ = nullptr;
  syntax_asdl::Token* t = nullptr;
  StackRoots _roots({&parts, &suffixes, &out, &prefix, &expand_part, &UP_part, &expanded_alts, &out_parts, &strs, &out_parts_, &t});

  out = Alloc<List<List<syntax_asdl::word_part_t*>*>>();
  prefix = parts->slice(0, first_alt_index);
  expand_part = parts->index_(first_alt_index);
  UP_part = expand_part;
  switch (expand_part->tag_()) {
    case word_part_e::BracedTuple: {
      word_part__BracedTuple* expand_part = static_cast<word_part__BracedTuple*>(UP_part);
      expanded_alts = Alloc<List<List<syntax_asdl::word_part_t*>*>>();
      for (ListIter<syntax_asdl::compound_word*> it(expand_part->words); !it.Done(); it.Next()) {
        syntax_asdl::compound_word* w = it.Value();
        StackRoots _for({&w      });
        expanded_alts->extend(_BraceExpand(w->parts));
      }
      for (ListIter<List<syntax_asdl::word_part_t*>*> it(expanded_alts); !it.Done(); it.Next()) {
        List<syntax_asdl::word_part_t*>* alt_parts = it.Value();
        StackRoots _for({&alt_parts      });
        for (ListIter<List<syntax_asdl::word_part_t*>*> it(suffixes); !it.Done(); it.Next()) {
          List<syntax_asdl::word_part_t*>* suffix = it.Value();
          StackRoots _for({&suffix        });
          out_parts = Alloc<List<syntax_asdl::word_part_t*>>();
          out_parts->extend(prefix);
          out_parts->extend(alt_parts);
          out_parts->extend(suffix);
          out->append(out_parts);
        }
      }
    }
      break;
    case word_part_e::BracedRange: {
      word_part__BracedRange* expand_part = static_cast<word_part__BracedRange*>(UP_part);
      strs = _RangeStrings(expand_part);
      for (ListIter<Str*> it(strs); !it.Done(); it.Next()) {
        Str* s = it.Value();
        StackRoots _for({&s      });
        for (ListIter<List<syntax_asdl::word_part_t*>*> it(suffixes); !it.Done(); it.Next()) {
          List<syntax_asdl::word_part_t*>* suffix = it.Value();
          StackRoots _for({&suffix        });
          out_parts_ = Alloc<List<syntax_asdl::word_part_t*>>();
          out_parts_->extend(prefix);
          t = lexer::DummyToken(Id::Lit_Chars, s);
          out_parts_->append(t);
          out_parts_->extend(suffix);
          out->append(out_parts_);
        }
      }
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  return out;
}

List<List<syntax_asdl::word_part_t*>*>* _BraceExpand(List<syntax_asdl::word_part_t*>* parts) {
  int num_alts;
  int first_alt_index;
  int i;
  int tag;
  List<syntax_asdl::word_part_t*>* suffix = nullptr;
  List<syntax_asdl::word_part_t*>* tail_parts = nullptr;
  List<List<syntax_asdl::word_part_t*>*>* suffixes = nullptr;
  StackRoots _roots({&parts, &suffix, &tail_parts, &suffixes});

  mylib::MaybeCollect();
  num_alts = 0;
  first_alt_index = -1;
  i = 0;
  for (ListIter<syntax_asdl::word_part_t*> it(parts); !it.Done(); it.Next(), ++i) {
    syntax_asdl::word_part_t* part = it.Value();
    StackRoots _for({&part  });
    tag = part->tag_();
    if ((tag == word_part_e::BracedTuple || tag == word_part_e::BracedRange)) {
      num_alts += 1;
      if (num_alts == 1) {
        first_alt_index = i;
      }
      else {
        if (num_alts == 2) {
          break;
        }
      }
    }
  }
  if (num_alts == 0) {
    return NewList<List<syntax_asdl::word_part_t*>*>(std::initializer_list<List<syntax_asdl::word_part_t*>*>{parts});
  }
  else {
    if (num_alts == 1) {
      suffix = parts->slice((first_alt_index + 1));
      return _ExpandPart(parts, first_alt_index, NewList<List<syntax_asdl::word_part_t*>*>(std::initializer_list<List<syntax_asdl::word_part_t*>*>{suffix}));
    }
    else {
      tail_parts = parts->slice((first_alt_index + 1));
      suffixes = _BraceExpand(tail_parts);
      return _ExpandPart(parts, first_alt_index, suffixes);
    }
  }
}

List<syntax_asdl::compound_word*>* BraceExpandWords(List<syntax_asdl::word_t*>* words) {
  List<syntax_asdl::compound_word*>* out = nullptr;
  syntax_asdl::word_t* UP_w = nullptr;
  List<List<syntax_asdl::word_part_t*>*>* parts_list = nullptr;
  StackRoots _roots({&words, &out, &UP_w, &parts_list});

  out = Alloc<List<syntax_asdl::compound_word*>>();
  for (ListIter<syntax_asdl::word_t*> it(words); !it.Done(); it.Next()) {
    syntax_asdl::word_t* w = it.Value();
    StackRoots _for({&w  });
    UP_w = w;
    switch (w->tag_()) {
      case word_e::BracedTree: {
        word__BracedTree* w = static_cast<word__BracedTree*>(UP_w);
        parts_list = _BraceExpand(w->parts);
        for (ListIter<List<syntax_asdl::word_part_t*>*> it(parts_list); !it.Done(); it.Next()) {
          List<syntax_asdl::word_part_t*>* p = it.Value();
          StackRoots _for({&p        });
          out->append(Alloc<compound_word>(p));
        }
      }
        break;
      case word_e::Compound: {
        compound_word* w = static_cast<compound_word*>(UP_w);
        out->append(w);
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  return out;
}

}  // define namespace braces

namespace builtin_assign {  // define

using option_asdl::builtin_i;
using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value_t;
using runtime_asdl::value__Bool;
using runtime_asdl::value__Str;
using runtime_asdl::value__MaybeStrArray;
using runtime_asdl::value__AssocArray;
using runtime_asdl::scope_e;
using runtime_asdl::cmd_value__Argv;
using runtime_asdl::cmd_value__Assign;
using runtime_asdl::assign_arg;
using pyerror::e_usage;
int _OTHER = 0;
int _READONLY = 1;
int _EXPORT = 2;

int _PrintVariables(state::Mem* mem, runtime_asdl::cmd_value__Assign* cmd_val, args::_Attributes* attrs, bool print_flags, int builtin) {
  Dict<Str*, runtime_asdl::value_t*>* flag = nullptr;
  runtime_asdl::value_t* tmp_g = nullptr;
  runtime_asdl::value_t* tmp_a = nullptr;
  runtime_asdl::value_t* tmp_A = nullptr;
  bool flag_g;
  bool flag_a;
  bool flag_A;
  runtime_asdl::value_t* tmp_n = nullptr;
  runtime_asdl::value_t* tmp_r = nullptr;
  runtime_asdl::value_t* tmp_x = nullptr;
  Str* flag_n = nullptr;
  Str* flag_r = nullptr;
  Str* flag_x = nullptr;
  runtime_asdl::scope_t which_scopes;
  bool print_all;
  Dict<Str*, runtime_asdl::cell*>* cells = nullptr;
  List<Str*>* names = nullptr;
  Str* name = nullptr;
  Str* s = nullptr;
  Str* invalid = nullptr;
  int count;
  runtime_asdl::cell* cell = nullptr;
  runtime_asdl::value_t* val = nullptr;
  List<Str*>* decl = nullptr;
  List<Str*>* flags = nullptr;
  bool has_holes;
  bool first;
  int i;
  List<Str*>* body = nullptr;
  Str* key_quoted = nullptr;
  Str* value_quoted = nullptr;
  StackRoots _roots({&mem, &cmd_val, &attrs, &flag, &tmp_g, &tmp_a, &tmp_A, &tmp_n, &tmp_r, &tmp_x, &flag_n, &flag_r, &flag_x, &cells, &names, &name, &s, &invalid, &cell, &val, &decl, &flags, &body, &key_quoted, &value_quoted});

  flag = attrs->attrs;
  tmp_g = flag->get(str670);
  tmp_a = flag->get(str671);
  tmp_A = flag->get(str672);
  flag_g = (tmp_g and tmp_g->tag_() == value_e::Bool) ? static_cast<value__Bool*>(tmp_g)->b : false;
  flag_a = (tmp_a and tmp_a->tag_() == value_e::Bool) ? static_cast<value__Bool*>(tmp_a)->b : false;
  flag_A = (tmp_A and tmp_A->tag_() == value_e::Bool) ? static_cast<value__Bool*>(tmp_A)->b : false;
  tmp_n = flag->get(str673);
  tmp_r = flag->get(str674);
  tmp_x = flag->get(str675);
  flag_n = (tmp_n and tmp_n->tag_() == value_e::Str) ? static_cast<value__Str*>(tmp_n)->s : nullptr;
  flag_r = (tmp_r and tmp_r->tag_() == value_e::Str) ? static_cast<value__Str*>(tmp_r)->s : nullptr;
  flag_x = (tmp_x and tmp_x->tag_() == value_e::Str) ? static_cast<value__Str*>(tmp_x)->s : nullptr;
  if (cmd_val->builtin_id == builtin_i::local) {
    if ((flag_g and !mem->IsGlobalScope())) {
      return 1;
    }
    which_scopes = scope_e::LocalOnly;
  }
  else {
    if (flag_g) {
      which_scopes = scope_e::GlobalOnly;
    }
    else {
      which_scopes = mem->ScopesForReading();
    }
  }
  if (len(cmd_val->pairs) == 0) {
    print_all = true;
    cells = mem->GetAllCells(which_scopes);
    names = sorted(cells);
  }
  else {
    print_all = false;
    names = Alloc<List<Str*>>();
    cells = Alloc<Dict<Str*, runtime_asdl::cell*>>();
    for (ListIter<runtime_asdl::assign_arg*> it(cmd_val->pairs); !it.Done(); it.Next()) {
      runtime_asdl::assign_arg* pair = it.Value();
      StackRoots _for({&pair    });
      name = pair->var_name;
      if ((pair->rval and pair->rval->tag_() == value_e::Str)) {
        s = static_cast<value__Str*>(pair->rval)->s;
        invalid = StrFormat("%s=%s", name, s);
        names->append(invalid);
        cells->set(invalid, nullptr);
      }
      else {
        names->append(name);
        cells->set(name, mem->GetCell(name, which_scopes));
      }
    }
  }
  count = 0;
  for (ListIter<Str*> it(names); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    cell = cells->index_(name);
    if (cell == nullptr) {
      continue;
    }
    val = cell->val;
    if (val->tag_() == value_e::Undef) {
      continue;
    }
    if ((builtin == _READONLY and !cell->readonly)) {
      continue;
    }
    if ((builtin == _EXPORT and !cell->exported)) {
      continue;
    }
    if ((maybe_str_equals(flag_n, str677) and !cell->nameref)) {
      continue;
    }
    if ((maybe_str_equals(flag_n, str678) and cell->nameref)) {
      continue;
    }
    if ((maybe_str_equals(flag_r, str679) and !cell->readonly)) {
      continue;
    }
    if ((maybe_str_equals(flag_r, str680) and cell->readonly)) {
      continue;
    }
    if ((maybe_str_equals(flag_x, str681) and !cell->exported)) {
      continue;
    }
    if ((maybe_str_equals(flag_x, str682) and cell->exported)) {
      continue;
    }
    if ((flag_a and val->tag_() != value_e::MaybeStrArray)) {
      continue;
    }
    if ((flag_A and val->tag_() != value_e::AssocArray)) {
      continue;
    }
    decl = Alloc<List<Str*>>();
    if (print_flags) {
      flags = Alloc<List<Str*>>();
      if (cell->nameref) {
        flags->append(str683);
      }
      if (cell->readonly) {
        flags->append(str684);
      }
      if (cell->exported) {
        flags->append(str685);
      }
      if (val->tag_() == value_e::MaybeStrArray) {
        flags->append(str686);
      }
      else {
        if (val->tag_() == value_e::AssocArray) {
          flags->append(str687);
        }
      }
      if (len(flags) == 0) {
        flags->append(str688);
      }
      decl->extend(NewList<Str*>(std::initializer_list<Str*>{str689, str690->join(flags), str691, name}));
    }
    else {
      decl->append(name);
    }
    if (val->tag_() == value_e::Str) {
      value__Str* str_val = static_cast<value__Str*>(val);
      decl->extend(NewList<Str*>(std::initializer_list<Str*>{str692, qsn::maybe_shell_encode(str_val->s)}));
    }
    else {
      if (val->tag_() == value_e::MaybeStrArray) {
        value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(val);
        has_holes = false;
        for (ListIter<Str*> it(array_val->strs); !it.Done(); it.Next()) {
          Str* s = it.Value();
          StackRoots _for({&s        });
          if (s == nullptr) {
            has_holes = true;
            break;
          }
        }
        if (has_holes) {
          decl->append(str693);
          first = true;
          i = 0;
          for (ListIter<Str*> it(array_val->strs); !it.Done(); it.Next(), ++i) {
            Str* element = it.Value();
            StackRoots _for({&element          });
            if (element != nullptr) {
              if (first) {
                decl->append(str694);
                first = false;
              }
              decl->extend(NewList<Str*>(std::initializer_list<Str*>{str695, name, str696, str(i), str697, qsn::maybe_shell_encode(element)}));
            }
          }
        }
        else {
          body = Alloc<List<Str*>>();
          for (ListIter<Str*> it(array_val->strs); !it.Done(); it.Next()) {
            Str* element = it.Value();
            StackRoots _for({&element          });
            if (len(body) > 0) {
              body->append(str698);
            }
            body->append(qsn::maybe_shell_encode(element));
          }
          decl->extend(NewList<Str*>(std::initializer_list<Str*>{str699, str700->join(body), str701}));
        }
      }
      else {
        if (val->tag_() == value_e::AssocArray) {
          value__AssocArray* assoc_val = static_cast<value__AssocArray*>(val);
          body = Alloc<List<Str*>>();
          for (ListIter<Str*> it(sorted(assoc_val->d)); !it.Done(); it.Next()) {
            Str* key = it.Value();
            StackRoots _for({&key          });
            if (len(body) > 0) {
              body->append(str702);
            }
            key_quoted = qsn::maybe_shell_encode(key, qsn::MUST_QUOTE);
            value_quoted = qsn::maybe_shell_encode(assoc_val->d->index_(key));
            body->extend(NewList<Str*>(std::initializer_list<Str*>{str703, key_quoted, str704, value_quoted}));
          }
          if (len(body) > 0) {
            decl->extend(NewList<Str*>(std::initializer_list<Str*>{str705, str706->join(body), str707}));
          }
        }
        else {
          ;  // pass
        }
      }
    }
    print(str708->join(decl));
    count += 1;
  }
  if ((print_all or count == len(names))) {
    return 0;
  }
  else {
    return 1;
  }
}

void _ExportReadonly(state::Mem* mem, runtime_asdl::assign_arg* pair, int flags) {
  runtime_asdl::scope_t which_scopes;
  runtime_asdl::lvalue__Named* lval = nullptr;
  runtime_asdl::value_t* old_val = nullptr;
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&mem, &pair, &lval, &old_val, &val});

  which_scopes = mem->ScopesForWriting();
  lval = location::LName(pair->var_name);
  if (pair->plus_eq) {
    old_val = sh_expr_eval::OldValue(lval, mem, nullptr);
    val = cmd_eval::PlusEquals(old_val, pair->rval);
  }
  else {
    val = pair->rval;
  }
  mem->SetValue(lval, val, which_scopes, flags);
}

Export::Export(state::Mem* mem, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Export::field_mask();
  this->mem = mem;
  this->errfmt = errfmt;
}

int Export::Run(runtime_asdl::cmd_value__Assign* cmd_val) {
  args::Reader* arg_r = nullptr;
  args::_Attributes* attrs = nullptr;
  arg_types::export_* arg = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &attrs, &arg});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  attrs = flag_spec::Parse(str709, arg_r);
  arg = Alloc<arg_types::export_>(attrs->attrs);
  if (arg->f) {
    e_usage(str710);
  }
  if ((arg->p or len(cmd_val->pairs) == 0)) {
    return _PrintVariables(this->mem, cmd_val, attrs, true, _EXPORT);
  }
  if (arg->n) {
    for (ListIter<runtime_asdl::assign_arg*> it(cmd_val->pairs); !it.Done(); it.Next()) {
      runtime_asdl::assign_arg* pair = it.Value();
      StackRoots _for({&pair    });
      if (pair->rval != nullptr) {
        e_usage(str711, pair->spid);
      }
      this->mem->ClearFlag(pair->var_name, state::ClearExport);
    }
  }
  else {
    for (ListIter<runtime_asdl::assign_arg*> it(cmd_val->pairs); !it.Done(); it.Next()) {
      runtime_asdl::assign_arg* pair = it.Value();
      StackRoots _for({&pair    });
      _ExportReadonly(this->mem, pair, state::SetExport);
    }
  }
  return 0;
}

runtime_asdl::value_t* _ReconcileTypes(runtime_asdl::value_t* rval, bool flag_a, bool flag_A, int span_id) {
  StackRoots _roots({&rval});

  if ((flag_a and (rval != nullptr and rval->tag_() != value_e::MaybeStrArray))) {
    e_usage(str712, span_id);
  }
  if ((flag_A and rval)) {
    if (rval->tag_() == value_e::MaybeStrArray) {
      value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(rval);
      if (len(array_val->strs) == 0) {
        return Alloc<value::AssocArray>(Alloc<Dict<Str*, Str*>>());
      }
    }
    if (rval->tag_() != value_e::AssocArray) {
      e_usage(str713, span_id);
    }
  }
  return rval;
}

Readonly::Readonly(state::Mem* mem, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Readonly::field_mask();
  this->mem = mem;
  this->errfmt = errfmt;
}

int Readonly::Run(runtime_asdl::cmd_value__Assign* cmd_val) {
  args::Reader* arg_r = nullptr;
  args::_Attributes* attrs = nullptr;
  arg_types::readonly* arg = nullptr;
  runtime_asdl::value_t* rval = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &attrs, &arg, &rval});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  attrs = flag_spec::Parse(str714, arg_r);
  arg = Alloc<arg_types::readonly>(attrs->attrs);
  if ((arg->p or len(cmd_val->pairs) == 0)) {
    return _PrintVariables(this->mem, cmd_val, attrs, true, _READONLY);
  }
  for (ListIter<runtime_asdl::assign_arg*> it(cmd_val->pairs); !it.Done(); it.Next()) {
    runtime_asdl::assign_arg* pair = it.Value();
    StackRoots _for({&pair  });
    if (pair->rval == nullptr) {
      if (arg->a) {
        rval = Alloc<value::MaybeStrArray>(Alloc<List<Str*>>());
      }
      else {
        if (arg->A) {
          rval = Alloc<value::AssocArray>(Alloc<Dict<Str*, Str*>>());
        }
        else {
          rval = nullptr;
        }
      }
    }
    else {
      rval = pair->rval;
    }
    rval = _ReconcileTypes(rval, arg->a, arg->A, pair->spid);
    _ExportReadonly(this->mem, pair, state::SetReadOnly);
  }
  return 0;
}

NewVar::NewVar(state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= NewVar::field_mask();
  this->mem = mem;
  this->procs = procs;
  this->errfmt = errfmt;
}

int NewVar::_PrintFuncs(List<Str*>* names) {
  int status;
  StackRoots _roots({&names});

  status = 0;
  for (ListIter<Str*> it(names); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (dict_contains(this->procs, name)) {
      print(name);
    }
    else {
      status = 1;
    }
  }
  return status;
}

int NewVar::Run(runtime_asdl::cmd_value__Assign* cmd_val) {
  args::Reader* arg_r = nullptr;
  args::_Attributes* attrs = nullptr;
  arg_types::new_var* arg = nullptr;
  int status;
  List<Str*>* names = nullptr;
  runtime_asdl::scope_t which_scopes;
  int flags;
  int flags_to_clear;
  runtime_asdl::value_t* rval = nullptr;
  runtime_asdl::value_t* old_val = nullptr;
  runtime_asdl::lvalue__Named* lval = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &attrs, &arg, &names, &rval, &old_val, &lval});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  attrs = flag_spec::Parse(str715, arg_r);
  arg = Alloc<arg_types::new_var>(attrs->attrs);
  status = 0;
  if (arg->f) {
    names = arg_r->Rest();
    if (len(names)) {
      status = this->_PrintFuncs(names);
    }
    else {
      e_usage(str716);
    }
    return status;
  }
  if (arg->F) {
    names = arg_r->Rest();
    if (len(names)) {
      status = this->_PrintFuncs(names);
    }
    else {
      for (ListIter<Str*> it(sorted(this->procs)); !it.Done(); it.Next()) {
        Str* func_name = it.Value();
        StackRoots _for({&func_name      });
        print(StrFormat("declare -f %s", func_name));
      }
    }
    return status;
  }
  if (arg->p) {
    return _PrintVariables(this->mem, cmd_val, attrs, true);
  }
  else {
    if (len(cmd_val->pairs) == 0) {
      return _PrintVariables(this->mem, cmd_val, attrs, false);
    }
  }
  if (cmd_val->builtin_id == builtin_i::local) {
    which_scopes = scope_e::LocalOnly;
  }
  else {
    if (arg->g) {
      which_scopes = scope_e::GlobalOnly;
    }
    else {
      which_scopes = scope_e::LocalOnly;
    }
  }
  flags = 0;
  if (maybe_str_equals(arg->x, str718)) {
    flags |= state::SetExport;
  }
  if (maybe_str_equals(arg->r, str719)) {
    flags |= state::SetReadOnly;
  }
  if (maybe_str_equals(arg->n, str720)) {
    flags |= state::SetNameref;
  }
  flags_to_clear = 0;
  if (maybe_str_equals(arg->x, str721)) {
    flags |= state::ClearExport;
  }
  if (maybe_str_equals(arg->r, str722)) {
    flags |= state::ClearReadOnly;
  }
  if (maybe_str_equals(arg->n, str723)) {
    flags |= state::ClearNameref;
  }
  for (ListIter<runtime_asdl::assign_arg*> it(cmd_val->pairs); !it.Done(); it.Next()) {
    runtime_asdl::assign_arg* pair = it.Value();
    StackRoots _for({&pair  });
    rval = pair->rval;
    if ((rval == nullptr and (arg->a or arg->A))) {
      old_val = this->mem->GetValue(pair->var_name);
      if (arg->a) {
        if (old_val->tag_() != value_e::MaybeStrArray) {
          rval = Alloc<value::MaybeStrArray>(Alloc<List<Str*>>());
        }
      }
      else {
        if (arg->A) {
          if (old_val->tag_() != value_e::AssocArray) {
            rval = Alloc<value::AssocArray>(Alloc<Dict<Str*, Str*>>());
          }
        }
      }
    }
    lval = location::LName(pair->var_name);
    if (pair->plus_eq) {
      old_val = sh_expr_eval::OldValue(lval, this->mem, nullptr);
      rval = cmd_eval::PlusEquals(old_val, pair->rval);
    }
    else {
      rval = _ReconcileTypes(rval, arg->a, arg->A, pair->spid);
    }
    this->mem->SetValue(lval, rval, which_scopes, flags);
  }
  return status;
}

Unset::Unset(state::Mem* mem, Dict<Str*, runtime_asdl::Proc*>* procs, sh_expr_eval::UnsafeArith* unsafe_arith, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Unset::field_mask();
  this->mem = mem;
  this->procs = procs;
  this->unsafe_arith = unsafe_arith;
  this->errfmt = errfmt;
}

bool Unset::_UnsetVar(Str* arg, int spid, bool proc_fallback) {
  runtime_asdl::lvalue_t* lval = nullptr;
  bool found;
  Str* msg = nullptr;
  StackRoots _roots({&arg, &lval, &msg});

  lval = this->unsafe_arith->ParseLValue(arg, spid);
  found = false;
  try {
    found = this->mem->Unset(lval, scope_e::Shopt);
  }
  catch (error::Runtime* e) {
    msg = e->UserErrorString();
    this->errfmt->Print_(msg, spid);
    return false;
  }
  if ((proc_fallback and !found)) {
    mylib::dict_erase(this->procs, arg);
  }
  return true;
}

int Unset::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::unset* arg = nullptr;
  List<Str*>* argv = nullptr;
  List<int>* arg_spids = nullptr;
  int i;
  int spid;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &argv, &arg_spids});

  Tuple2<args::_Attributes*, args::Reader*> tup0 = flag_spec::ParseCmdVal(str724, cmd_val);
  attrs = tup0.at0();
  arg_r = tup0.at1();
  arg = Alloc<arg_types::unset>(attrs->attrs);
  Tuple2<List<Str*>*, List<int>*> tup1 = arg_r->Rest2();
  argv = tup1.at0();
  arg_spids = tup1.at1();
  i = 0;
  for (ListIter<Str*> it(argv); !it.Done(); it.Next(), ++i) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    spid = arg_spids->index_(i);
    if (arg->f) {
      mylib::dict_erase(this->procs, name);
    }
    else {
      if (arg->v) {
        if (!this->_UnsetVar(name, spid, false)) {
          return 1;
        }
      }
      else {
        if (!this->_UnsetVar(name, spid, true)) {
          return 1;
        }
      }
    }
  }
  return 0;
}

Shift::Shift(state::Mem* mem)  {
  FIELD_MASK(header_) |= Shift::field_mask();
  this->mem = mem;
}

int Shift::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  int num_args;
  int n;
  Str* arg = nullptr;
  StackRoots _roots({&cmd_val, &arg});

  num_args = (len(cmd_val->argv) - 1);
  if (num_args == 0) {
    n = 1;
  }
  else {
    if (num_args == 1) {
      arg = cmd_val->argv->index_(1);
      try {
        n = to_int(arg);
      }
      catch (ValueError*) {
        e_usage(StrFormat("Invalid shift argument %r", arg));
      }
    }
    else {
      e_usage(str726);
    }
  }
  return this->mem->Shift(n);
}

}  // define namespace builtin_assign

namespace builtin_comp {  // define

using runtime_asdl::value_e;
using runtime_asdl::value__MaybeStrArray;
GLOBAL_LIST(Str*, 0, HELP_TOPICS, {});

_FixedWordsAction::_FixedWordsAction(List<Str*>* d)  {
  FIELD_MASK(header_) |= _FixedWordsAction::field_mask();
  this->d = d;
}

void _FixedWordsAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  StackRoots _roots({&comp});

  for (ListIter<Str*> it(sorted(this->d)); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (name->startswith(comp->to_complete)) {
            _out_yield_acc->append(name);
;
    }
  }
}

_DynamicProcDictAction::_DynamicProcDictAction(Dict<Str*, runtime_asdl::Proc*>* d)  {
  FIELD_MASK(header_) |= _DynamicProcDictAction::field_mask();
  this->d = d;
}

void _DynamicProcDictAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  StackRoots _roots({&comp});

  for (ListIter<Str*> it(sorted(this->d)); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (name->startswith(comp->to_complete)) {
            _out_yield_acc->append(name);
;
    }
  }
}

_DynamicStrDictAction::_DynamicStrDictAction(Dict<Str*, Str*>* d)  {
  FIELD_MASK(header_) |= _DynamicStrDictAction::field_mask();
  this->d = d;
}

void _DynamicStrDictAction::Matches(completion::Api* comp, List<Str*>* _out_yield_acc) {
  StackRoots _roots({&comp});

  for (ListIter<Str*> it(sorted(this->d)); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (name->startswith(comp->to_complete)) {
            _out_yield_acc->append(name);
;
    }
  }
}

SpecBuilder::SpecBuilder(cmd_eval::CommandEvaluator* cmd_ev, parse_lib::ParseContext* parse_ctx, word_eval::NormalWordEvaluator* word_ev, split::SplitContext* splitter, completion::Lookup* comp_lookup, ui::ErrorFormatter* errfmt) 
    : header_(obj_header()) {
  this->cmd_ev = cmd_ev;
  this->parse_ctx = parse_ctx;
  this->word_ev = word_ev;
  this->splitter = splitter;
  this->comp_lookup = comp_lookup;
  this->errfmt = errfmt;
}

completion::UserSpec* SpecBuilder::Build(List<Str*>* argv, args::_Attributes* attrs, Dict<Str*, bool>* base_opts) {
  cmd_eval::CommandEvaluator* cmd_ev = nullptr;
  arg_types::compgen* arg = nullptr;
  List<completion::CompletionAction*>* actions = nullptr;
  Str* func_name = nullptr;
  runtime_asdl::Proc* func = nullptr;
  completion::CompletionAction* a = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  syntax_asdl::compound_word* arg_word = nullptr;
  List<completion::CompletionAction*>* extra_actions = nullptr;
  List<completion::CompletionAction*>* else_actions = nullptr;
  completion::_Predicate* p = nullptr;
  Str* filter_pat = nullptr;
  Str* prefix = nullptr;
  Str* suffix = nullptr;
  StackRoots _roots({&argv, &attrs, &base_opts, &cmd_ev, &arg, &actions, &func_name, &func, &a, &w_parser, &arg_word, &extra_actions, &else_actions, &p, &filter_pat, &prefix, &suffix});

  cmd_ev = this->cmd_ev;
  arg = Alloc<arg_types::compgen>(attrs->attrs);
  actions = Alloc<List<completion::CompletionAction*>>();
  if (arg->F != nullptr) {
    func_name = arg->F;
    func = cmd_ev->procs->get(func_name);
    if (func == nullptr) {
      throw Alloc<error::Usage>(StrFormat("Function %r not found", func_name));
    }
    actions->append(Alloc<completion::ShellFuncAction>(cmd_ev, func, this->comp_lookup));
  }
  for (ListIter<Str*> it(attrs->actions); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (str_equals(name, str728)) {
      a = Alloc<_DynamicStrDictAction>(this->parse_ctx->aliases);
    }
    else {
      if (str_equals(name, str729)) {
        a = Alloc<_FixedWordsAction>(NewList<Str*>(std::initializer_list<Str*>{str730}));
      }
      else {
        if (str_equals(name, str731)) {
          actions->append(Alloc<_FixedWordsAction>(consts::BUILTIN_NAMES));
          actions->append(Alloc<_DynamicStrDictAction>(this->parse_ctx->aliases));
          actions->append(Alloc<_DynamicProcDictAction>(cmd_ev->procs));
          actions->append(Alloc<_FixedWordsAction>(consts::OSH_KEYWORD_NAMES));
          actions->append(Alloc<completion::FileSystemAction>(false, true, false));
          a = Alloc<completion::ExternalCommandAction>(cmd_ev->mem);
        }
        else {
          if (str_equals(name, str732)) {
            a = Alloc<completion::FileSystemAction>(true, false, false);
          }
          else {
            if (str_equals(name, str733)) {
              a = Alloc<completion::FileSystemAction>(false, false, false);
            }
            else {
              if (str_equals(name, str734)) {
                a = Alloc<_DynamicProcDictAction>(cmd_ev->procs);
              }
              else {
                if (str_equals(name, str735)) {
                  a = Alloc<_FixedWordsAction>(NewList<Str*>(std::initializer_list<Str*>{str736}));
                }
                else {
                  if (str_equals(name, str737)) {
                    a = Alloc<completion::UsersAction>();
                  }
                  else {
                    if (str_equals(name, str738)) {
                      a = Alloc<completion::VariablesAction>(cmd_ev->mem);
                    }
                    else {
                      if (str_equals(name, str739)) {
                        a = Alloc<_FixedWordsAction>(HELP_TOPICS);
                      }
                      else {
                        if (str_equals(name, str740)) {
                          a = Alloc<_FixedWordsAction>(consts::SET_OPTION_NAMES);
                        }
                        else {
                          if (str_equals(name, str741)) {
                            a = Alloc<_FixedWordsAction>(consts::SHOPT_OPTION_NAMES);
                          }
                          else {
                            if (str_equals(name, str742)) {
                              a = Alloc<_FixedWordsAction>(NewList<Str*>(std::initializer_list<Str*>{str743}));
                            }
                            else {
                              if (str_equals(name, str744)) {
                                a = Alloc<_FixedWordsAction>(NewList<Str*>(std::initializer_list<Str*>{str745}));
                              }
                              else {
                                FAIL(kNotImplemented);  // Python NotImplementedError
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    actions->append(a);
  }
  if (arg->W != nullptr) {
    w_parser = this->parse_ctx->MakeWordParserForPlugin(arg->W);
    try {
      arg_word = w_parser->ReadForPlugin();
    }
    catch (error::Parse* e) {
      this->errfmt->PrettyPrintError(e);
      throw ;
    }
    a = Alloc<completion::DynamicWordsAction>(this->word_ev, this->splitter, arg_word, this->errfmt);
    actions->append(a);
  }
  extra_actions = Alloc<List<completion::CompletionAction*>>();
  if (base_opts->get(str746, false)) {
    extra_actions->append(Alloc<completion::FileSystemAction>(true, false, false));
  }
  else_actions = Alloc<List<completion::CompletionAction*>>();
  if (base_opts->get(str747, false)) {
    else_actions->append(Alloc<completion::FileSystemAction>(false, false, false));
  }
  if (base_opts->get(str748, false)) {
    else_actions->append(Alloc<completion::FileSystemAction>(true, false, false));
  }
  if ((!actions and !else_actions)) {
    throw Alloc<error::Usage>(StrFormat("No actions defined in completion: %s", argv));
  }
  p = Alloc<completion::DefaultPredicate>();
  if (arg->X != nullptr) {
    filter_pat = arg->X;
    if (filter_pat->startswith(str750)) {
      p = Alloc<completion::GlobPredicate>(false, filter_pat->slice(1));
    }
    else {
      p = Alloc<completion::GlobPredicate>(true, filter_pat);
    }
  }
  prefix = arg->P;
  if (prefix == nullptr) {
    prefix = str751;
  }
  suffix = arg->S;
  if (suffix == nullptr) {
    suffix = str752;
  }
  return Alloc<completion::UserSpec>(actions, extra_actions, else_actions, p, prefix, suffix);
}

Complete::Complete(builtin_comp::SpecBuilder* spec_builder, completion::Lookup* comp_lookup)  {
  FIELD_MASK(header_) |= Complete::field_mask();
  this->spec_builder = spec_builder;
  this->comp_lookup = comp_lookup;
}

int Complete::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  args::_Attributes* attrs = nullptr;
  arg_types::complete* arg = nullptr;
  List<Str*>* commands = nullptr;
  Dict<Str*, bool>* base_opts = nullptr;
  completion::UserSpec* user_spec = nullptr;
  List<Str*>* patterns = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &attrs, &arg, &commands, &base_opts, &user_spec, &patterns});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  attrs = flag_spec::ParseMore(str753, arg_r);
  arg = Alloc<arg_types::complete>(attrs->attrs);
  commands = arg_r->Rest();
  if (arg->D) {
    commands->append(str754);
  }
  if (arg->E) {
    commands->append(str755);
  }
  if (len(commands) == 0) {
    this->comp_lookup->PrintSpecs();
    return 0;
  }
  base_opts = dict(attrs->opt_changes);
  try {
    user_spec = this->spec_builder->Build(cmd_val->argv, attrs, base_opts);
  }
  catch (error::Parse* e) {
    return 2;
  }
  for (ListIter<Str*> it(commands); !it.Done(); it.Next()) {
    Str* command = it.Value();
    StackRoots _for({&command  });
    this->comp_lookup->RegisterName(command, base_opts, user_spec);
  }
  patterns = Alloc<List<Str*>>();
  for (ListIter<Str*> it(patterns); !it.Done(); it.Next()) {
    Str* pat = it.Value();
    StackRoots _for({&pat  });
    this->comp_lookup->RegisterGlob(pat, base_opts, user_spec);
  }
  return 0;
}

CompGen::CompGen(builtin_comp::SpecBuilder* spec_builder)  {
  FIELD_MASK(header_) |= CompGen::field_mask();
  this->spec_builder = spec_builder;
}

int CompGen::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  args::_Attributes* arg = nullptr;
  Str* to_complete = nullptr;
  bool matched;
  Dict<Str*, bool>* base_opts = nullptr;
  completion::UserSpec* user_spec = nullptr;
  completion::Api* comp = nullptr;
  Str* m = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &arg, &to_complete, &base_opts, &user_spec, &comp, &m});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  arg = flag_spec::ParseMore(str756, arg_r);
  if (arg_r->AtEnd()) {
    to_complete = str757;
  }
  else {
    to_complete = arg_r->Peek();
    arg_r->Next();
  }
  matched = false;
  base_opts = dict(arg->opt_changes);
  try {
    user_spec = this->spec_builder->Build(cmd_val->argv, arg, base_opts);
  }
  catch (error::Parse* e) {
    return 2;
  }
  matched = false;
  comp = Alloc<completion::Api>(str758, 0, 0);
  comp->Update(str759, to_complete, str760, -1, nullptr);
  try {
    List<Tuple2<Str*, bool>*> _for_yield_acc0;
    user_spec->Matches(comp, &_for_yield_acc0);
    for (ListIter<Tuple2<Str*, bool>*> it(&_for_yield_acc0); !it.Done(); it.Next()) {
      Tuple2<Str*, bool>* tup1 = it.Value();
      m = tup1->at0();
      matched = true;
      print(m);
    }
  }
  catch (error::FatalRuntime*) {
    return 1;
  }
  return matched ? 0 : 1;
}

CompOpt::CompOpt(completion::OptionState* comp_state, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= CompOpt::field_mask();
  this->comp_state = comp_state;
  this->errfmt = errfmt;
}

int CompOpt::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  args::_Attributes* arg = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &arg});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  arg = flag_spec::ParseMore(str761, arg_r);
  if (!this->comp_state->currently_completing) {
    this->errfmt->Print_(str762);
    return 1;
  }
  this->comp_state->dynamic_opts->update(arg->opt_changes);
  return 0;
}

CompAdjust::CompAdjust(state::Mem* mem)  {
  FIELD_MASK(header_) |= CompAdjust::field_mask();
  this->mem = mem;
}

int CompAdjust::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  args::_Attributes* attrs = nullptr;
  arg_types::compadjust* arg = nullptr;
  List<Str*>* var_names = nullptr;
  runtime_asdl::value_t* val = nullptr;
  List<Str*>* comp_argv = nullptr;
  List<Str*>* break_chars = nullptr;
  Str* omit_chars = nullptr;
  List<Str*>* adjusted_argv = nullptr;
  int n;
  Str* cur = nullptr;
  Str* prev = nullptr;
  Str* split = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &attrs, &arg, &var_names, &val, &comp_argv, &break_chars, &omit_chars, &adjusted_argv, &cur, &prev, &split});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  attrs = flag_spec::ParseMore(str763, arg_r);
  arg = Alloc<arg_types::compadjust>(attrs->attrs);
  var_names = arg_r->Rest();
  for (ListIter<Str*> it(var_names); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (!list_contains(NewList<Str*>(std::initializer_list<Str*>{str764, str765, str766, str767}), name)) {
      throw Alloc<error::Usage>(StrFormat("Invalid output variable name %r", name));
    }
  }
  val = this->mem->GetValue(str769);
  if (val->tag_() != value_e::MaybeStrArray) {
    throw Alloc<error::Usage>(str770);
  }
  comp_argv = static_cast<value__MaybeStrArray*>(val)->strs;
  break_chars = NewList<Str*>(std::initializer_list<Str*>{str771, str772});
  if (arg->s) {
    break_chars->remove(str773);
  }
  omit_chars = arg->n;
  if (omit_chars == nullptr) {
    omit_chars = str774;
  }
  for (StrIter it(omit_chars); !it.Done(); it.Next()) {
    Str* c = it.Value();
    StackRoots _for({&c  });
    if (list_contains(break_chars, c)) {
      break_chars->remove(c);
    }
  }
  adjusted_argv = Alloc<List<Str*>>();
  for (ListIter<Str*> it(comp_argv); !it.Done(); it.Next()) {
    Str* a = it.Value();
    StackRoots _for({&a  });
    completion::AdjustArg(a, break_chars, adjusted_argv);
  }
  if (list_contains(var_names, str775)) {
    state::BuiltinSetArray(this->mem, str776, adjusted_argv);
  }
  n = len(adjusted_argv);
  cur = adjusted_argv->index_(-1);
  prev = n < 2 ? str777 : adjusted_argv->index_(-2);
  if (arg->s) {
    if ((cur->startswith(str778) and str_contains(cur, str779))) {
      Tuple2<Str*, Str*> tup2 = mylib::split_once(cur, str780);
      prev = tup2.at0();
      cur = tup2.at1();
      split = str781;
    }
    else {
      split = str782;
    }
    state::BuiltinSetString(this->mem, str783, split);
  }
  if (list_contains(var_names, str784)) {
    state::BuiltinSetString(this->mem, str785, cur);
  }
  if (list_contains(var_names, str786)) {
    state::BuiltinSetString(this->mem, str787, prev);
  }
  if (list_contains(var_names, str788)) {
    state::BuiltinSetString(this->mem, str789, str((n - 1)));
  }
  return 0;
}

}  // define namespace builtin_comp

namespace builtin_lib {  // define

using pyerror::e_usage;

Bind::Bind(py_readline::Readline* readline, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Bind::field_mask();
  this->readline = readline;
  this->errfmt = errfmt;
}

int Bind::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  StackRoots _roots({&cmd_val});

  this->errfmt->Print_(str790, cmd_val->arg_spids->index_(0));
  return 1;
}

History::History(py_readline::Readline* readline, mylib::Writer* f)  {
  FIELD_MASK(header_) |= History::field_mask();
  this->readline = readline;
  this->f = f;
}

int History::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  py_readline::Readline* readline = nullptr;
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::history* arg = nullptr;
  int cmd_index;
  int num_items;
  List<Str*>* rest = nullptr;
  int start_index;
  Str* arg0 = nullptr;
  int num_to_show;
  Str* item = nullptr;
  StackRoots _roots({&cmd_val, &readline, &attrs, &arg_r, &arg, &rest, &arg0, &item});

  readline = this->readline;
  if (!readline) {
    e_usage(str791);
  }
  Tuple2<args::_Attributes*, args::Reader*> tup0 = flag_spec::ParseCmdVal(str792, cmd_val);
  attrs = tup0.at0();
  arg_r = tup0.at1();
  arg = Alloc<arg_types::history>(attrs->attrs);
  if (arg->c) {
    readline->clear_history();
    return 0;
  }
  if (arg->d >= 0) {
    cmd_index = (arg->d - 1);
    try {
      readline->remove_history_item(cmd_index);
    }
    catch (ValueError*) {
      e_usage(StrFormat("couldn't find item %d", arg->d));
    }
    return 0;
  }
  num_items = readline->get_current_history_length();
  rest = arg_r->Rest();
  if (len(rest) == 0) {
    start_index = 1;
  }
  else {
    if (len(rest) == 1) {
      arg0 = rest->index_(0);
      try {
        num_to_show = to_int(arg0);
      }
      catch (ValueError*) {
        e_usage(StrFormat("got invalid argument %r", arg0));
      }
      start_index = max(1, ((num_items + 1) - num_to_show));
    }
    else {
      e_usage(str795);
    }
  }
  for (int i = start_index; i < (num_items + 1); ++i) {
    item = readline->get_history_item(i);
    this->f->write(StrFormat("%5d  %s\n", i, item));
  }
  return 0;
}

}  // define namespace builtin_lib

namespace builtin_meta {  // define

using runtime_asdl::cmd_value;
using runtime_asdl::CommandStatus;
using syntax_asdl::source;
using syntax_asdl::loc;
using pyerror::e_die_status;
using pyerror::e_usage;

Eval::Eval(parse_lib::ParseContext* parse_ctx, optview::Exec* exec_opts, cmd_eval::CommandEvaluator* cmd_ev, dev::Tracer* tracer, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Eval::field_mask();
  this->parse_ctx = parse_ctx;
  this->arena = parse_ctx->arena;
  this->exec_opts = exec_opts;
  this->cmd_ev = cmd_ev;
  this->tracer = tracer;
  this->errfmt = errfmt;
}

int Eval::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Str* code_str = nullptr;
  int eval_spid;
  reader::FileLineReader* line_reader = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  syntax_asdl::source__ArgvWord* src = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &code_str, &line_reader, &c_parser, &src});

  Tuple2<args::_Attributes*, args::Reader*> tup0 = flag_spec::ParseCmdVal(str797, cmd_val);
  arg_r = tup0.at1();
  if (this->exec_opts->simple_eval_builtin()) {
    Tuple2<Str*, int> tup1 = arg_r->ReadRequired2(str798);
    code_str = tup1.at0();
    eval_spid = tup1.at1();
    if (!arg_r->AtEnd()) {
      e_usage(str799);
    }
  }
  else {
    code_str = str800->join(arg_r->Rest());
    eval_spid = cmd_val->arg_spids->index_(0);
  }
  line_reader = reader::StringLineReader(code_str, this->arena);
  c_parser = this->parse_ctx->MakeOshParser(line_reader);
  src = Alloc<source::ArgvWord>(str801, eval_spid);
  {  // with
    dev::ctx_Tracer ctx{this->tracer, str802, nullptr};

    {  // with
      alloc::ctx_Location ctx{this->arena, src};

      return main_loop::Batch(this->cmd_ev, c_parser, this->errfmt, cmd_eval::RaiseControlFlow);
    }
  }
}

Source::Source(parse_lib::ParseContext* parse_ctx, state::SearchPath* search_path, cmd_eval::CommandEvaluator* cmd_ev, process::FdState* fd_state, dev::Tracer* tracer, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Source::field_mask();
  this->parse_ctx = parse_ctx;
  this->arena = parse_ctx->arena;
  this->search_path = search_path;
  this->cmd_ev = cmd_ev;
  this->fd_state = fd_state;
  this->tracer = tracer;
  this->errfmt = errfmt;
  this->mem = cmd_ev->mem;
}

int Source::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  int call_spid;
  args::Reader* arg_r = nullptr;
  Str* path = nullptr;
  Str* resolved = nullptr;
  mylib::LineReader* f = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  List<Str*>* source_argv = nullptr;
  syntax_asdl::source__SourcedFile* src = nullptr;
  int status;
  StackRoots _roots({&cmd_val, &arg_r, &path, &resolved, &f, &line_reader, &c_parser, &source_argv, &src});

  call_spid = cmd_val->arg_spids->index_(0);
  Tuple2<args::_Attributes*, args::Reader*> tup2 = flag_spec::ParseCmdVal(str803, cmd_val);
  arg_r = tup2.at1();
  path = arg_r->Peek();
  if (path == nullptr) {
    e_usage(str804);
  }
  arg_r->Next();
  resolved = this->search_path->Lookup(path, false);
  if (resolved == nullptr) {
    resolved = path;
  }
  try {
    f = this->fd_state->Open(resolved);
  }
  catch (IOError_OSError* e) {
    this->errfmt->Print_(StrFormat("source %r failed: %s", path, pyutil::strerror(e)), cmd_val->arg_spids->index_(1));
    return 1;
  }
  line_reader = Alloc<reader::FileLineReader>(f, this->arena);
  c_parser = this->parse_ctx->MakeOshParser(line_reader);
  {  // with
    dev::ctx_Tracer ctx{this->tracer, str806, cmd_val->argv};

    source_argv = arg_r->Rest();
    {  // with
      state::ctx_Source ctx{this->mem, path, source_argv};

      {  // with
        state::ctx_ThisDir ctx{this->mem, path};

        src = Alloc<source::SourcedFile>(path, call_spid);
        {  // with
          alloc::ctx_Location ctx{this->arena, src};

          try {
            try {
              status = main_loop::Batch(this->cmd_ev, c_parser, this->errfmt, cmd_eval::RaiseControlFlow);
            }
            catch (vm::ControlFlow* e) {
              if (e->IsReturn()) {
                status = e->StatusCode();
              }
              else {
                throw ;
              }
            }
          }
          catch (std::exception const&) { }
        }
      }
    }
  }
  return status;
}

Command::Command(vm::_Executor* shell_ex, Dict<Str*, runtime_asdl::Proc*>* funcs, Dict<Str*, Str*>* aliases, state::SearchPath* search_path)  {
  FIELD_MASK(header_) |= Command::field_mask();
  this->shell_ex = shell_ex;
  this->funcs = funcs;
  this->aliases = aliases;
  this->search_path = search_path;
}

int Command::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::command* arg = nullptr;
  int status;
  List<Str*>* names = nullptr;
  Str* kind = nullptr;
  Str* argument = nullptr;
  runtime_asdl::CommandStatus* cmd_st = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &names, &kind, &argument, &cmd_st});

  Tuple2<args::_Attributes*, args::Reader*> tup3 = flag_spec::ParseCmdVal(str807, cmd_val, true);
  attrs = tup3.at0();
  arg_r = tup3.at1();
  arg = Alloc<arg_types::command>(attrs->attrs);
  if (arg->v) {
    status = 0;
    names = arg_r->Rest();
    for (ListIter<Tuple2<Str*, Str*>*> it(_ResolveNames(names, this->funcs, this->aliases, this->search_path)); !it.Done(); it.Next()) {
      Tuple2<Str*, Str*>* tup4 = it.Value();
      kind = tup4->at0();
      argument = tup4->at1();
      if (kind == nullptr) {
        status = 1;
      }
      else {
        print(argument);
      }
    }
    return status;
  }
  cmd_val = Alloc<cmd_value::Argv>(cmd_val->argv->slice(1), cmd_val->arg_spids->slice(1), cmd_val->typed_args);
  cmd_st = CommandStatus::Create();
  return this->shell_ex->RunSimpleCommand(cmd_val, cmd_st, true, false);
}

Builtin::Builtin(vm::_Executor* shell_ex, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Builtin::field_mask();
  this->shell_ex = shell_ex;
  this->errfmt = errfmt;
}

int Builtin::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  Str* name = nullptr;
  int to_run;
  int span_id;
  runtime_asdl::cmd_value__Argv* cmd_val2 = nullptr;
  StackRoots _roots({&cmd_val, &name, &cmd_val2});

  if (len(cmd_val->argv) == 1) {
    return 0;
  }
  name = cmd_val->argv->index_(1);
  to_run = consts::LookupNormalBuiltin(name);
  if (to_run == consts::NO_INDEX) {
    to_run = consts::LookupSpecialBuiltin(name);
  }
  if (to_run == consts::NO_INDEX) {
    span_id = cmd_val->arg_spids->index_(1);
    if (consts::LookupAssignBuiltin(name) != consts::NO_INDEX) {
      this->errfmt->Print_(str808, span_id);
    }
    else {
      this->errfmt->Print_(StrFormat("%r isn't a shell builtin", name), span_id);
    }
    return 1;
  }
  cmd_val2 = Alloc<cmd_value::Argv>(cmd_val->argv->slice(1), cmd_val->arg_spids->slice(1), cmd_val->typed_args);
  return this->shell_ex->RunBuiltin(to_run, cmd_val2);
}

RunProc::RunProc(vm::_Executor* shell_ex, Dict<Str*, runtime_asdl::Proc*>* procs, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= RunProc::field_mask();
  this->shell_ex = shell_ex;
  this->procs = procs;
  this->errfmt = errfmt;
}

int RunProc::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  List<Str*>* argv = nullptr;
  List<int>* spids = nullptr;
  Str* name = nullptr;
  runtime_asdl::cmd_value__Argv* cmd_val2 = nullptr;
  runtime_asdl::CommandStatus* cmd_st = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &argv, &spids, &name, &cmd_val2, &cmd_st});

  Tuple2<args::_Attributes*, args::Reader*> tup5 = flag_spec::ParseCmdVal(str810, cmd_val, true);
  arg_r = tup5.at1();
  Tuple2<List<Str*>*, List<int>*> tup6 = arg_r->Rest2();
  argv = tup6.at0();
  spids = tup6.at1();
  if (len(argv) == 0) {
    throw Alloc<error::Usage>(str811, runtime::NO_SPID);
  }
  name = argv->index_(0);
  if (!dict_contains(this->procs, name)) {
    this->errfmt->PrintMessage(StrFormat("runproc: no proc named %r", name));
    return 1;
  }
  cmd_val2 = Alloc<cmd_value::Argv>(argv, spids, cmd_val->typed_args);
  cmd_st = CommandStatus::Create();
  return this->shell_ex->RunSimpleCommand(cmd_val2, cmd_st, true);
}

Try::Try(state::MutableOpts* mutable_opts, state::Mem* mem, cmd_eval::CommandEvaluator* cmd_ev, vm::_Executor* shell_ex, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Try::field_mask();
  this->mutable_opts = mutable_opts;
  this->mem = mem;
  this->shell_ex = shell_ex;
  this->cmd_ev = cmd_ev;
  this->errfmt = errfmt;
}

int Try::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  syntax_asdl::command_t* block = nullptr;
  int status;
  List<Str*>* argv = nullptr;
  List<int>* spids = nullptr;
  runtime_asdl::cmd_value__Argv* cmd_val2 = nullptr;
  runtime_asdl::CommandStatus* cmd_st = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &block, &argv, &spids, &cmd_val2, &cmd_st});

  Tuple2<args::_Attributes*, args::Reader*> tup7 = flag_spec::ParseCmdVal(str813, cmd_val, true);
  arg_r = tup7.at1();
  block = typed_args::GetOneBlock(cmd_val->typed_args);
  if (block) {
    status = 0;
    try {
      {  // with
        state::ctx_ErrExit ctx{this->mutable_opts, true, runtime::NO_SPID};

      }
    }
    catch (error::Expr* e) {
      status = e->ExitStatus();
    }
    catch (error::ErrExit* e) {
      status = e->ExitStatus();
    }
    this->mem->SetTryStatus(status);
    return 0;
  }
  if (arg_r->Peek() == nullptr) {
    e_usage(str814);
  }
  Tuple2<List<Str*>*, List<int>*> tup8 = arg_r->Rest2();
  argv = tup8.at0();
  spids = tup8.at1();
  cmd_val2 = Alloc<cmd_value::Argv>(argv, spids, cmd_val->typed_args);
  try {
    {  // with
      state::ctx_ErrExit ctx{this->mutable_opts, true, runtime::NO_SPID};

      cmd_st = CommandStatus::Create();
      status = this->shell_ex->RunSimpleCommand(cmd_val2, cmd_st, true);
    }
  }
  catch (error::Expr* e) {
    status = e->ExitStatus();
  }
  catch (error::ErrExit* e) {
    status = e->ExitStatus();
  }
  this->mem->SetTryStatus(status);
  return 0;
}

BoolStatus::BoolStatus(vm::_Executor* shell_ex, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= BoolStatus::field_mask();
  this->shell_ex = shell_ex;
  this->errfmt = errfmt;
}

int BoolStatus::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  List<Str*>* argv = nullptr;
  List<int>* spids = nullptr;
  runtime_asdl::cmd_value__Argv* cmd_val2 = nullptr;
  runtime_asdl::CommandStatus* cmd_st = nullptr;
  int status;
  StackRoots _roots({&cmd_val, &arg_r, &argv, &spids, &cmd_val2, &cmd_st});

  Tuple2<args::_Attributes*, args::Reader*> tup9 = flag_spec::ParseCmdVal(str815, cmd_val);
  arg_r = tup9.at1();
  if (arg_r->Peek() == nullptr) {
    e_usage(str816);
  }
  Tuple2<List<Str*>*, List<int>*> tup10 = arg_r->Rest2();
  argv = tup10.at0();
  spids = tup10.at1();
  cmd_val2 = Alloc<cmd_value::Argv>(argv, spids, cmd_val->typed_args);
  cmd_st = CommandStatus::Create();
  status = this->shell_ex->RunSimpleCommand(cmd_val2, cmd_st, true);
  if ((status != 0 && status != 1)) {
    e_die_status(status, StrFormat("boolstatus expected status 0 or 1, got %d", status), Alloc<loc::Span>(spids->index_(0)));
  }
  return status;
}

List<Tuple2<Str*, Str*>*>* _ResolveNames(List<Str*>* names, Dict<Str*, runtime_asdl::Proc*>* funcs, Dict<Str*, Str*>* aliases, state::SearchPath* search_path) {
  List<Tuple2<Str*, Str*>*>* results = nullptr;
  Tuple2<Str*, Str*>* kind = nullptr;
  Str* resolved = nullptr;
  Str* no_str = nullptr;
  StackRoots _roots({&names, &funcs, &aliases, &search_path, &results, &kind, &resolved, &no_str});

  results = Alloc<List<Tuple2<Str*, Str*>*>>();
  for (ListIter<Str*> it(names); !it.Done(); it.Next()) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (dict_contains(funcs, name)) {
      kind = (Alloc<Tuple2<Str*, Str*>>(str818, name));
    }
    else {
      if (dict_contains(aliases, name)) {
        kind = (Alloc<Tuple2<Str*, Str*>>(str819, name));
      }
      else {
        if (consts::LookupNormalBuiltin(name) != 0) {
          kind = (Alloc<Tuple2<Str*, Str*>>(str820, name));
        }
        else {
          if (consts::LookupSpecialBuiltin(name) != 0) {
            kind = (Alloc<Tuple2<Str*, Str*>>(str821, name));
          }
          else {
            if (consts::LookupAssignBuiltin(name) != 0) {
              kind = (Alloc<Tuple2<Str*, Str*>>(str822, name));
            }
            else {
              if (consts::IsControlFlow(name)) {
                kind = (Alloc<Tuple2<Str*, Str*>>(str823, name));
              }
              else {
                if (consts::IsKeyword(name)) {
                  kind = (Alloc<Tuple2<Str*, Str*>>(str824, name));
                }
                else {
                  resolved = search_path->Lookup(name);
                  if (resolved == nullptr) {
                    no_str = nullptr;
                    kind = (Alloc<Tuple2<Str*, Str*>>(no_str, name));
                  }
                  else {
                    kind = (Alloc<Tuple2<Str*, Str*>>(str825, resolved));
                  }
                }
              }
            }
          }
        }
      }
    }
    results->append(kind);
  }
  return results;
}

Type::Type(Dict<Str*, runtime_asdl::Proc*>* funcs, Dict<Str*, Str*>* aliases, state::SearchPath* search_path, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Type::field_mask();
  this->funcs = funcs;
  this->aliases = aliases;
  this->search_path = search_path;
  this->errfmt = errfmt;
}

int Type::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::type* arg = nullptr;
  Dict<Str*, runtime_asdl::Proc*>* funcs = nullptr;
  int status;
  List<Tuple2<Str*, Str*>*>* r = nullptr;
  Str* kind = nullptr;
  Str* name = nullptr;
  Str* resolved = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &funcs, &r, &kind, &name, &resolved});

  Tuple2<args::_Attributes*, args::Reader*> tup11 = flag_spec::ParseCmdVal(str826, cmd_val);
  attrs = tup11.at0();
  arg_r = tup11.at1();
  arg = Alloc<arg_types::type>(attrs->attrs);
  if (arg->f) {
    funcs = Alloc<Dict<Str*, runtime_asdl::Proc*>>();
  }
  else {
    funcs = this->funcs;
  }
  status = 0;
  r = _ResolveNames(arg_r->Rest(), funcs, this->aliases, this->search_path);
  for (ListIter<Tuple2<Str*, Str*>*> it(r); !it.Done(); it.Next()) {
    Tuple2<Str*, Str*>* tup12 = it.Value();
    kind = tup12->at0();
    name = tup12->at1();
    if (kind == nullptr) {
      if (!arg->t) {
        this->errfmt->PrintMessage(StrFormat("type: %r not found", name));
      }
      status = 1;
    }
    else {
      if (arg->t) {
        print(kind);
      }
      else {
        if (arg->p) {
          if (str_equals(kind, str828)) {
            print(name);
          }
        }
        else {
          if (arg->P) {
            if (str_equals(kind, str829)) {
              print(name);
            }
            else {
              resolved = this->search_path->Lookup(name);
              if (resolved == nullptr) {
                status = 1;
              }
              else {
                print(resolved);
              }
            }
          }
          else {
            print(StrFormat("%s is a %s", name, kind));
            if (str_equals(kind, str831)) {
              ;  // pass
            }
          }
        }
      }
    }
  }
  return status;
}

}  // define namespace builtin_meta

namespace builtin_misc {  // define

using runtime_asdl::span_e;
using runtime_asdl::cmd_value__Argv;
using runtime_asdl::value;
using runtime_asdl::scope_e;
using syntax_asdl::source;
using pyerror::e_usage;
using pyerror::e_die;
using pyerror::e_die_status;

Times::Times() : vm::_Builtin() {
}

int Times::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  StackRoots _roots({&cmd_val});

  pyos::PrintTimes();
  return 0;
}

Tuple2<bool, bool> _AppendParts(Str* s, List<Tuple2<runtime_asdl::span_t, int>*>* spans, int max_results, bool join_next, List<mylib::BufWriter*>* parts) {
  int start_index;
  bool last_span_was_black;
  runtime_asdl::span_t span_type;
  int end_index;
  mylib::BufWriter* buf = nullptr;
  bool done;
  runtime_asdl::span_t last_span_type;
  StackRoots _roots({&s, &spans, &parts, &buf});

  start_index = 0;
  last_span_was_black = false;
  for (ListIter<Tuple2<runtime_asdl::span_t, int>*> it(spans); !it.Done(); it.Next()) {
    Tuple2<runtime_asdl::span_t, int>* tup0 = it.Value();
    span_type = tup0->at0();
    end_index = tup0->at1();
    if (span_type == span_e::Black) {
      if ((join_next and parts)) {
        parts->index_(-1)->write(s->slice(start_index, end_index));
        join_next = false;
      }
      else {
        buf = Alloc<mylib::BufWriter>();
        buf->write(s->slice(start_index, end_index));
        parts->append(buf);
      }
      last_span_was_black = true;
    }
    else {
      if (span_type == span_e::Delim) {
        if (join_next) {
          parts->index_(-1)->write(s->slice(start_index, end_index));
          join_next = false;
        }
        last_span_was_black = false;
      }
      else {
        if (span_type == span_e::Backslash) {
          if (last_span_was_black) {
            join_next = true;
          }
          last_span_was_black = false;
        }
      }
    }
    if ((max_results and len(parts) >= max_results)) {
      join_next = true;
    }
    start_index = end_index;
  }
  done = true;
  if (len(spans)) {
    Tuple2<runtime_asdl::span_t, int>* tup1 = spans->index_(-1);
    last_span_type = tup1->at0();
    if (last_span_type == span_e::Backslash) {
      done = false;
    }
  }
  return Tuple2<bool, bool>(done, join_next);
}

Str* _ReadN(int num_bytes, cmd_eval::CommandEvaluator* cmd_ev) {
  List<Str*>* chunks = nullptr;
  int bytes_left;
  int n;
  int err_num;
  StackRoots _roots({&cmd_ev, &chunks});

  chunks = Alloc<List<Str*>>();
  bytes_left = num_bytes;
  while (bytes_left > 0) {
    Tuple2<int, int> tup2 = pyos::Read(STDIN_FILENO, bytes_left, chunks);
    n = tup2.at0();
    err_num = tup2.at1();
    if (n < 0) {
      if (err_num == EINTR) {
        cmd_ev->RunPendingTraps();
      }
      else {
        throw Alloc<pyos::ReadError>(err_num);
      }
    }
    else {
      if (n == 0) {
        break;
      }
      else {
        bytes_left -= n;
      }
    }
  }
  return str832->join(chunks);
}

Tuple2<Str*, bool> _ReadUntilDelim(int delim_byte, cmd_eval::CommandEvaluator* cmd_ev) {
  bool eof;
  List<int>* ch_array = nullptr;
  int ch;
  int err_num;
  StackRoots _roots({&cmd_ev, &ch_array});

  eof = false;
  ch_array = Alloc<List<int>>();
  while (true) {
    Tuple2<int, int> tup3 = pyos::ReadByte(0);
    ch = tup3.at0();
    err_num = tup3.at1();
    if (ch < 0) {
      if (err_num == EINTR) {
        cmd_ev->RunPendingTraps();
      }
      else {
        throw Alloc<pyos::ReadError>(err_num);
      }
    }
    else {
      if (ch == pyos::EOF_SENTINEL) {
        eof = true;
        break;
      }
      else {
        if (ch == delim_byte) {
          break;
        }
        else {
          ch_array->append(ch);
        }
      }
    }
  }
  return Tuple2<Str*, bool>(pyutil::ChArrayToString(ch_array), eof);
}

Str* _ReadLineSlowly(cmd_eval::CommandEvaluator* cmd_ev) {
  List<int>* ch_array = nullptr;
  int ch;
  int err_num;
  StackRoots _roots({&cmd_ev, &ch_array});

  ch_array = Alloc<List<int>>();
  while (true) {
    Tuple2<int, int> tup4 = pyos::ReadByte(0);
    ch = tup4.at0();
    err_num = tup4.at1();
    if (ch < 0) {
      if (err_num == EINTR) {
        cmd_ev->RunPendingTraps();
      }
      else {
        throw Alloc<pyos::ReadError>(err_num);
      }
    }
    else {
      if (ch == pyos::EOF_SENTINEL) {
        break;
      }
      else {
        ch_array->append(ch);
      }
    }
    if (ch == pyos::NEWLINE_CH) {
      break;
    }
  }
  return pyutil::ChArrayToString(ch_array);
}

Str* _ReadAll() {
  List<Str*>* chunks = nullptr;
  int n;
  int err_num;
  StackRoots _roots({&chunks});

  chunks = Alloc<List<Str*>>();
  while (true) {
    Tuple2<int, int> tup5 = pyos::Read(0, 4096, chunks);
    n = tup5.at0();
    err_num = tup5.at1();
    if (n < 0) {
      if (err_num == EINTR) {
        ;  // pass
      }
      else {
        throw Alloc<pyos::ReadError>(err_num);
      }
    }
    else {
      if (n == 0) {
        break;
      }
    }
  }
  return str833->join(chunks);
}

Read::Read(split::SplitContext* splitter, state::Mem* mem, parse_lib::ParseContext* parse_ctx, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Read::field_mask();
  this->splitter = splitter;
  this->mem = mem;
  this->parse_ctx = parse_ctx;
  this->cmd_ev = cmd_ev;
  this->errfmt = errfmt;
  this->stdin = mylib::Stdin();
}

int Read::_Line(arg_types::read* arg, Str* var_name) {
  Str* line = nullptr;
  alloc::Arena* arena = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  lexer::Lexer* lexer = nullptr;
  List<syntax_asdl::Token*>* tokens = nullptr;
  List<Str*>* tmp = nullptr;
  runtime_asdl::lvalue__Named* lhs = nullptr;
  StackRoots _roots({&arg, &var_name, &line, &arena, &line_reader, &lexer, &tokens, &tmp, &lhs});

  line = pyos::ReadLine();
  if (len(line) == 0) {
    return 1;
  }
  if (!arg->with_eol) {
    if (line->endswith(str834)) {
      line = line->slice(0, -2);
    }
    else {
      if (line->endswith(str835)) {
        line = line->slice(0, -1);
      }
    }
  }
  if ((arg->q and line->startswith(str836))) {
    arena = this->parse_ctx->arena;
    line_reader = reader::StringLineReader(line, arena);
    lexer = this->parse_ctx->MakeLexer(line_reader);
    try {
      {  // with
        alloc::ctx_Location ctx{arena, Alloc<source::Stdin>(str837)};

        tokens = qsn_native::Parse(lexer);
      }
    }
    catch (error::Parse* e) {
      this->errfmt->PrettyPrintError(e);
      return 1;
    }
    tmp = Alloc<List<Str*>>();
    for (ListIter<syntax_asdl::Token*> it(tokens); !it.Done(); it.Next()) {
      syntax_asdl::Token* t = it.Value();
      tmp->append(word_compile::EvalCStringToken(t));
    }
    line = str838->join(tmp);
  }
  lhs = location::LName(var_name);
  this->mem->SetValue(lhs, Alloc<value::Str>(line), scope_e::LocalOnly);
  return 0;
}

int Read::_All(Str* var_name) {
  Str* contents = nullptr;
  runtime_asdl::lvalue__Named* lhs = nullptr;
  StackRoots _roots({&var_name, &contents, &lhs});

  contents = _ReadAll();
  lhs = location::LName(var_name);
  this->mem->SetValue(lhs, Alloc<value::Str>(contents), scope_e::LocalOnly);
  return 0;
}

int Read::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  int status;
  StackRoots _roots({&cmd_val});

  try {
    status = this->_Run(cmd_val);
  }
  catch (pyos::ReadError* e) {
    this->errfmt->PrintMessage(StrFormat("read error: %s", posix::strerror(e->err_num)));
    status = 1;
  }
  return status;
}

int Read::_Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::read* arg = nullptr;
  List<Str*>* names = nullptr;
  Str* var_name = nullptr;
  int var_spid;
  Str* next_arg = nullptr;
  int next_spid;
  int bits;
  int status;
  pyos::TermState* term = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &names, &var_name, &next_arg, &term});

  Tuple2<args::_Attributes*, args::Reader*> tup6 = flag_spec::ParseCmdVal(str840, cmd_val);
  attrs = tup6.at0();
  arg_r = tup6.at1();
  arg = Alloc<arg_types::read>(attrs->attrs);
  names = arg_r->Rest();
  if (arg->line) {
    Tuple2<Str*, int> tup7 = arg_r->Peek2();
    var_name = tup7.at0();
    var_spid = tup7.at1();
    if (var_name == nullptr) {
      var_name = str841;
    }
    else {
      if (var_name->startswith(str842)) {
        var_name = var_name->slice(1);
      }
      arg_r->Next();
    }
    Tuple2<Str*, int> tup8 = arg_r->Peek2();
    next_arg = tup8.at0();
    next_spid = tup8.at1();
    if (next_arg != nullptr) {
      throw Alloc<error::Usage>(str843, next_spid);
    }
    return this->_Line(arg, var_name);
  }
  if (arg->q) {
    e_usage(str844);
  }
  if (arg->all) {
    Tuple2<Str*, int> tup9 = arg_r->Peek2();
    var_name = tup9.at0();
    var_spid = tup9.at1();
    if (var_name == nullptr) {
      var_name = str845;
    }
    else {
      if (var_name->startswith(str846)) {
        var_name = var_name->slice(1);
      }
      arg_r->Next();
    }
    Tuple2<Str*, int> tup10 = arg_r->Peek2();
    next_arg = tup10.at0();
    next_spid = tup10.at1();
    if (next_arg != nullptr) {
      throw Alloc<error::Usage>(str847, next_spid);
    }
    return this->_All(var_name);
  }
  if (arg->q) {
    e_usage(str848);
  }
  if (arg->t >= 0.0) {
    if (arg->t != 0.0) {
      e_die(str849);
    }
    else {
      return pyos::InputAvailable(STDIN_FILENO) ? 0 : 1;
    }
  }
  bits = 0;
  if (this->stdin->isatty()) {
    if ((arg->d != nullptr or arg->n >= 0)) {
      bits |= pyos::TERM_ICANON;
    }
    if (arg->s) {
      bits |= pyos::TERM_ECHO;
    }
    if (arg->p != nullptr) {
      mylib::Stderr()->write(arg->p);
    }
  }
  if (bits == 0) {
    status = this->_Read(arg, names);
  }
  else {
    term = Alloc<pyos::TermState>(STDIN_FILENO, ~bits);
    try {
      status = this->_Read(arg, names);
    }
    catch (std::exception const&) { }
  }
  return status;
}

int Read::_Read(arg_types::read* arg, List<Str*>* names) {
  Str* name = nullptr;
  Str* s = nullptr;
  int max_results;
  bool raw;
  int delim_byte;
  List<mylib::BufWriter*>* parts = nullptr;
  bool join_next;
  int status;
  Str* line = nullptr;
  bool eof;
  List<Tuple2<runtime_asdl::span_t, int>*>* spans = nullptr;
  bool done;
  List<Str*>* entries = nullptr;
  int num_parts;
  Str* var_name = nullptr;
  StackRoots _roots({&arg, &names, &name, &s, &parts, &line, &spans, &entries, &var_name});

  if (arg->n >= 0) {
    if (len(names)) {
      name = names->index_(0);
    }
    else {
      name = str850;
    }
    s = _ReadN(arg->n, this->cmd_ev);
    state::BuiltinSetString(this->mem, name, s);
    return len(s) == arg->n ? 0 : 1;
  }
  if (len(names) == 0) {
    names->append(str851);
  }
  if (arg->a != nullptr) {
    max_results = 0;
  }
  else {
    max_results = len(names);
  }
  if (arg->Z) {
    raw = true;
    delim_byte = 0;
  }
  else {
    raw = arg->r;
    if (arg->d != nullptr) {
      if (len(arg->d)) {
        delim_byte = ord(arg->d->index_(0));
      }
      else {
        delim_byte = 0;
      }
    }
    else {
      delim_byte = pyos::NEWLINE_CH;
    }
  }
  parts = Alloc<List<mylib::BufWriter*>>();
  join_next = false;
  status = 0;
  while (true) {
    Tuple2<Str*, bool> tup11 = _ReadUntilDelim(delim_byte, this->cmd_ev);
    line = tup11.at0();
    eof = tup11.at1();
    if (eof) {
      status = 1;
    }
    if (len(line) == 0) {
      break;
    }
    spans = this->splitter->SplitForRead(line, !raw);
    Tuple2<bool, bool> tup12 = _AppendParts(line, spans, max_results, join_next, parts);
    done = tup12.at0();
    join_next = tup12.at1();
    if (done) {
      break;
    }
  }
  entries = Alloc<List<Str*>>();
  for (ListIter<mylib::BufWriter*> it(parts); !it.Done(); it.Next()) {
    mylib::BufWriter* buf = it.Value();
    entries->append(buf->getvalue());
  }
  num_parts = len(entries);
  if (arg->a != nullptr) {
    state::BuiltinSetArray(this->mem, arg->a, entries);
  }
  else {
    for (int i = 0; i < max_results; ++i) {
      if (i < num_parts) {
        s = entries->index_(i);
      }
      else {
        s = str852;
      }
      var_name = names->index_(i);
      if (var_name->startswith(str853)) {
        var_name = var_name->slice(1);
      }
      state::BuiltinSetString(this->mem, var_name, s);
    }
  }
  return status;
}

MapFile::MapFile(state::Mem* mem, ui::ErrorFormatter* errfmt, cmd_eval::CommandEvaluator* cmd_ev)  {
  FIELD_MASK(header_) |= MapFile::field_mask();
  this->mem = mem;
  this->errfmt = errfmt;
  this->cmd_ev = cmd_ev;
}

int MapFile::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::mapfile* arg = nullptr;
  Str* var_name = nullptr;
  List<Str*>* lines = nullptr;
  Str* line = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &var_name, &lines, &line});

  Tuple2<args::_Attributes*, args::Reader*> tup13 = flag_spec::ParseCmdVal(str854, cmd_val);
  attrs = tup13.at0();
  arg_r = tup13.at1();
  arg = Alloc<arg_types::mapfile>(attrs->attrs);
  Tuple2<Str*, int> tup14 = arg_r->Peek2();
  var_name = tup14.at0();
  if (var_name == nullptr) {
    var_name = str855;
  }
  else {
    if (var_name->startswith(str856)) {
      var_name = var_name->slice(1);
    }
  }
  lines = Alloc<List<Str*>>();
  while (true) {
    try {
      line = _ReadLineSlowly(this->cmd_ev);
    }
    catch (pyos::ReadError* e) {
      this->errfmt->PrintMessage(StrFormat("mapfile: read() error: %s", posix::strerror(e->err_num)));
      return 1;
    }
    if (len(line) == 0) {
      break;
    }
    if ((arg->t and line->endswith(str858))) {
      line = line->slice(0, -1);
    }
    lines->append(line);
  }
  state::BuiltinSetArray(this->mem, var_name, lines);
  return 0;
}

ctx_CdBlock::ctx_CdBlock(state::DirStack* dir_stack, Str* dest_dir, state::Mem* mem, ui::ErrorFormatter* errfmt, List<bool>* out_errs) 
    : header_(obj_header()) {
  dir_stack->Push(dest_dir);
  this->dir_stack = dir_stack;
  this->mem = mem;
  this->errfmt = errfmt;
  this->out_errs = out_errs;
}

ctx_CdBlock::~ctx_CdBlock(){
  _PopDirStack(str859, this->mem, this->dir_stack, this->errfmt, this->out_errs);
}

Cd::Cd(state::Mem* mem, state::DirStack* dir_stack, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Cd::field_mask();
  this->mem = mem;
  this->dir_stack = dir_stack;
  this->cmd_ev = cmd_ev;
  this->errfmt = errfmt;
}

int Cd::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::cd* arg = nullptr;
  Str* dest_dir = nullptr;
  int arg_spid;
  runtime_asdl::value_t* val = nullptr;
  Str* pwd = nullptr;
  Str* abspath = nullptr;
  Str* real_dest_dir = nullptr;
  int err_num;
  syntax_asdl::command_t* block = nullptr;
  List<bool>* out_errs = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &dest_dir, &val, &pwd, &abspath, &real_dest_dir, &block, &out_errs});

  Tuple2<args::_Attributes*, args::Reader*> tup15 = flag_spec::ParseCmdVal(str860, cmd_val, true);
  attrs = tup15.at0();
  arg_r = tup15.at1();
  arg = Alloc<arg_types::cd>(attrs->attrs);
  Tuple2<Str*, int> tup16 = arg_r->Peek2();
  dest_dir = tup16.at0();
  arg_spid = tup16.at1();
  if (dest_dir == nullptr) {
    val = this->mem->GetValue(str861);
    try {
      dest_dir = state::GetString(this->mem, str862);
    }
    catch (error::Runtime* e) {
      this->errfmt->Print_(e->UserErrorString());
      return 1;
    }
  }
  if (str_equals(dest_dir, str863)) {
    try {
      dest_dir = state::GetString(this->mem, str864);
      print(dest_dir);
    }
    catch (error::Runtime* e) {
      this->errfmt->Print_(e->UserErrorString());
      return 1;
    }
  }
  try {
    pwd = state::GetString(this->mem, str865);
  }
  catch (error::Runtime* e) {
    this->errfmt->Print_(e->UserErrorString());
    return 1;
  }
  abspath = os_path::join(pwd, dest_dir);
  if (arg->P) {
    real_dest_dir = libc::realpath(abspath);
  }
  else {
    real_dest_dir = os_path::normpath(abspath);
  }
  err_num = pyos::Chdir(real_dest_dir);
  if (err_num != 0) {
    this->errfmt->Print_(StrFormat("cd %r: %s", real_dest_dir, posix::strerror(err_num)), arg_spid);
    return 1;
  }
  state::ExportGlobalString(this->mem, str867, real_dest_dir);
  this->mem->SetPwd(real_dest_dir);
  block = typed_args::GetOneBlock(cmd_val->typed_args);
  if (block) {
    out_errs = Alloc<List<bool>>();
    {  // with
      ctx_CdBlock ctx{this->dir_stack, real_dest_dir, this->mem, this->errfmt, out_errs};

    }
    if (len(out_errs)) {
      return 1;
    }
  }
  else {
    state::ExportGlobalString(this->mem, str868, pwd);
    this->dir_stack->Reset();
  }
  return 0;
}
int WITH_LINE_NUMBERS = 1;
int WITHOUT_LINE_NUMBERS = 2;
int SINGLE_LINE = 3;

void _PrintDirStack(state::DirStack* dir_stack, int style, Str* home_dir) {
  int i;
  List<Str*>* parts = nullptr;
  Str* s = nullptr;
  StackRoots _roots({&dir_stack, &home_dir, &parts, &s});

  if (style == WITH_LINE_NUMBERS) {
    i = 0;
    for (ListIter<Str*> it(dir_stack->Iter()); !it.Done(); it.Next(), ++i) {
      Str* entry = it.Value();
      StackRoots _for({&entry    });
      print(StrFormat("%2d  %s", i, ui::PrettyDir(entry, home_dir)));
    }
  }
  else {
    if (style == WITHOUT_LINE_NUMBERS) {
      for (ListIter<Str*> it(dir_stack->Iter()); !it.Done(); it.Next()) {
        Str* entry = it.Value();
        StackRoots _for({&entry      });
        print(ui::PrettyDir(entry, home_dir));
      }
    }
    else {
      if (style == SINGLE_LINE) {
        parts = Alloc<List<Str*>>();
        for (ListIter<Str*> it(dir_stack->Iter()); !it.Done(); it.Next()) {
          Str* entry = it.Value();
          parts->append(ui::PrettyDir(entry, home_dir));
        }
        s = str870->join(parts);
        print(s);
      }
    }
  }
}

Pushd::Pushd(state::Mem* mem, state::DirStack* dir_stack, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Pushd::field_mask();
  this->mem = mem;
  this->dir_stack = dir_stack;
  this->errfmt = errfmt;
}

int Pushd::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Str* dir_arg = nullptr;
  int dir_arg_spid;
  Str* extra = nullptr;
  int extra_spid;
  Str* dest_dir = nullptr;
  int err_num;
  StackRoots _roots({&cmd_val, &arg_r, &dir_arg, &extra, &dest_dir});

  Tuple2<args::_Attributes*, args::Reader*> tup17 = flag_spec::ParseCmdVal(str871, cmd_val);
  arg_r = tup17.at1();
  Tuple2<Str*, int> tup18 = arg_r->Peek2();
  dir_arg = tup18.at0();
  dir_arg_spid = tup18.at1();
  if (dir_arg == nullptr) {
    this->errfmt->Print_(str872);
    return 1;
  }
  arg_r->Next();
  Tuple2<Str*, int> tup19 = arg_r->Peek2();
  extra = tup19.at0();
  extra_spid = tup19.at1();
  if (extra != nullptr) {
    e_usage(str873, extra_spid);
  }
  dest_dir = os_path::abspath(dir_arg);
  err_num = pyos::Chdir(dest_dir);
  if (err_num != 0) {
    this->errfmt->Print_(StrFormat("pushd: %r: %s", dest_dir, posix::strerror(err_num)), dir_arg_spid);
    return 1;
  }
  this->dir_stack->Push(dest_dir);
  _PrintDirStack(this->dir_stack, SINGLE_LINE, state::MaybeString(this->mem, str875));
  state::ExportGlobalString(this->mem, str876, dest_dir);
  this->mem->SetPwd(dest_dir);
  return 0;
}

bool _PopDirStack(Str* label, state::Mem* mem, state::DirStack* dir_stack, ui::ErrorFormatter* errfmt, List<bool>* out_errs) {
  Str* dest_dir = nullptr;
  int err_num;
  StackRoots _roots({&label, &mem, &dir_stack, &errfmt, &out_errs, &dest_dir});

  dest_dir = dir_stack->Pop();
  if (dest_dir == nullptr) {
    errfmt->Print_(StrFormat("%s: directory stack is empty", label));
    out_errs->append(true);
    return false;
  }
  err_num = pyos::Chdir(dest_dir);
  if (err_num != 0) {
    errfmt->Print_(StrFormat("%s: %r: %s", label, dest_dir, posix::strerror(err_num)));
    out_errs->append(true);
    return false;
  }
  state::SetGlobalString(mem, str879, dest_dir);
  mem->SetPwd(dest_dir);
  return true;
}

Popd::Popd(state::Mem* mem, state::DirStack* dir_stack, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Popd::field_mask();
  this->mem = mem;
  this->dir_stack = dir_stack;
  this->errfmt = errfmt;
}

int Popd::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Str* extra = nullptr;
  int extra_spid;
  List<bool>* out_errs = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &extra, &out_errs});

  Tuple2<args::_Attributes*, args::Reader*> tup20 = flag_spec::ParseCmdVal(str880, cmd_val);
  arg_r = tup20.at1();
  Tuple2<Str*, int> tup21 = arg_r->Peek2();
  extra = tup21.at0();
  extra_spid = tup21.at1();
  if (extra != nullptr) {
    e_usage(str881, extra_spid);
  }
  out_errs = Alloc<List<bool>>();
  _PopDirStack(str882, this->mem, this->dir_stack, this->errfmt, out_errs);
  if (len(out_errs)) {
    return 1;
  }
  _PrintDirStack(this->dir_stack, SINGLE_LINE, state::MaybeString(this->mem, str883));
  return 0;
}

Dirs::Dirs(state::Mem* mem, state::DirStack* dir_stack, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Dirs::field_mask();
  this->mem = mem;
  this->dir_stack = dir_stack;
  this->errfmt = errfmt;
}

int Dirs::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::dirs* arg = nullptr;
  Str* home_dir = nullptr;
  int style;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &home_dir});

  Tuple2<args::_Attributes*, args::Reader*> tup22 = flag_spec::ParseCmdVal(str884, cmd_val);
  attrs = tup22.at0();
  arg_r = tup22.at1();
  arg = Alloc<arg_types::dirs>(attrs->attrs);
  home_dir = state::MaybeString(this->mem, str885);
  style = SINGLE_LINE;
  if (arg->l) {
    home_dir = nullptr;
  }
  if (arg->c) {
    this->dir_stack->Reset();
    return 0;
  }
  else {
    if (arg->v) {
      style = WITH_LINE_NUMBERS;
    }
    else {
      if (arg->p) {
        style = WITHOUT_LINE_NUMBERS;
      }
    }
  }
  _PrintDirStack(this->dir_stack, style, home_dir);
  return 0;
}

Pwd::Pwd(state::Mem* mem, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Pwd::field_mask();
  this->mem = mem;
  this->errfmt = errfmt;
}

int Pwd::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::pwd* arg = nullptr;
  Str* pwd = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &pwd});

  Tuple2<args::_Attributes*, args::Reader*> tup23 = flag_spec::ParseCmdVal(str886, cmd_val);
  attrs = tup23.at0();
  arg_r = tup23.at1();
  arg = Alloc<arg_types::pwd>(attrs->attrs);
  pwd = this->mem->pwd;
  if (arg->P) {
    pwd = libc::realpath(pwd);
  }
  print(pwd);
  return 0;
}

Help::Help(pyutil::_ResourceLoader* loader, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Help::field_mask();
  this->loader = loader;
  this->errfmt = errfmt;
}

List<Str*>* Help::_Groups() {
  Str* contents = nullptr;
  List<Str*>* groups = nullptr;
  StackRoots _roots({&contents, &groups});

  contents = this->loader->Get(str887);
  groups = contents->splitlines(false);
  return groups;
}

int Help::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  Str* topic = nullptr;
  int blame_spid;
  Str* contents = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &topic, &contents});

  Tuple2<args::_Attributes*, args::Reader*> tup24 = flag_spec::ParseCmdVal(str888, cmd_val);
  attrs = tup24.at0();
  arg_r = tup24.at1();
  Tuple2<Str*, int> tup25 = arg_r->Peek2();
  topic = tup25.at0();
  blame_spid = tup25.at1();
  if (topic == nullptr) {
    topic = str889;
    blame_spid = runtime::NO_SPID;
  }
  else {
    arg_r->Next();
  }
  try {
    contents = this->loader->Get(StrFormat("_devbuild/help/%s", topic));
  }
  catch (IOError*) {
    this->errfmt->Print_(StrFormat("no help topics match %r", topic), blame_spid);
    return 1;
  }
  print(contents);
  return 0;
}

Cat::Cat() : vm::_Builtin() {
}

int Cat::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  List<Str*>* chunks = nullptr;
  int n;
  int err_num;
  StackRoots _roots({&cmd_val, &chunks});

  chunks = Alloc<List<Str*>>();
  while (true) {
    Tuple2<int, int> tup26 = pyos::Read(0, 4096, chunks);
    n = tup26.at0();
    err_num = tup26.at1();
    if (n < 0) {
      if (err_num == EINTR) {
        ;  // pass
      }
      else {
        e_die_status(2, StrFormat("osh I/O error: %s", posix::strerror(err_num)));
      }
    }
    else {
      if (n == 0) {
        break;
      }
      else {
        mylib::Stdout()->write(chunks->index_(0));
        chunks->pop();
      }
    }
  }
  return 0;
}

}  // define namespace builtin_misc

namespace builtin_printf {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Kind;
using id_kind_asdl::Id_t;
using id_kind_asdl::Kind_t;
using runtime_asdl::cmd_value__Argv;
using runtime_asdl::value_e;
using runtime_asdl::value__Str;
using runtime_asdl::value;
using syntax_asdl::printf_part;
using syntax_asdl::printf_part_e;
using syntax_asdl::printf_part_t;
using syntax_asdl::printf_part__Literal;
using syntax_asdl::printf_part__Percent;
using syntax_asdl::source;
using syntax_asdl::Token;
using syntax_asdl::loc;
using types_asdl::lex_mode_e;
using types_asdl::lex_mode_t;
using pyerror::e_die;
using pyerror::p_die;

_FormatStringParser::_FormatStringParser(lexer::Lexer* lexer) 
    : header_(obj_header()) {
  this->lexer = lexer;
  this->cur_token = nullptr;
  this->token_type = Id::Undefined_Tok;
  this->token_kind = Kind::Undefined;
}

void _FormatStringParser::_Next(types_asdl::lex_mode_t lex_mode) {
  this->cur_token = this->lexer->Read(lex_mode);
  this->token_type = this->cur_token->id;
  this->token_kind = consts::GetKind(this->token_type);
}

syntax_asdl::printf_part_t* _FormatStringParser::_ParseFormatStr() {
  syntax_asdl::printf_part__Percent* part = nullptr;
  Str* flag = nullptr;
  Str* type_val = nullptr;
  StackRoots _roots({&part, &flag, &type_val});

  this->_Next(lex_mode_e::PrintfPercent);
  part = printf_part::Percent::Create();
  while ((this->token_type == Id::Format_Flag || this->token_type == Id::Format_Zero)) {
    flag = lexer::TokenVal(this->cur_token);
    if (str_contains(str893, flag)) {
      p_die(StrFormat("osh printf doesn't support the %r flag", flag), this->cur_token);
    }
    part->flags->append(this->cur_token);
    this->_Next(lex_mode_e::PrintfPercent);
  }
  if ((this->token_type == Id::Format_Num || this->token_type == Id::Format_Star)) {
    part->width = this->cur_token;
    this->_Next(lex_mode_e::PrintfPercent);
  }
  if (this->token_type == Id::Format_Dot) {
    part->precision = this->cur_token;
    this->_Next(lex_mode_e::PrintfPercent);
    if ((this->token_type == Id::Format_Num || this->token_type == Id::Format_Star || this->token_type == Id::Format_Zero)) {
      part->precision = this->cur_token;
      this->_Next(lex_mode_e::PrintfPercent);
    }
  }
  if ((this->token_type == Id::Format_Type || this->token_type == Id::Format_Time)) {
    part->type = this->cur_token;
    type_val = lexer::TokenVal(part->type);
    if (str_contains(str895, type_val)) {
      p_die(str896, part->type);
    }
    if (str_equals(type_val, str897)) {
      p_die(str898, part->type);
    }
  }
  else {
    if (this->token_type == Id::Unknown_Tok) {
      p_die(str899, this->cur_token);
    }
    else {
      p_die(str900, this->cur_token);
    }
  }
  return part;
}

List<syntax_asdl::printf_part_t*>* _FormatStringParser::Parse() {
  List<syntax_asdl::printf_part_t*>* parts = nullptr;
  StackRoots _roots({&parts});

  this->_Next(lex_mode_e::PrintfOuter);
  parts = Alloc<List<syntax_asdl::printf_part_t*>>();
  while (true) {
    if ((this->token_kind == Kind::Char or (this->token_type == Id::Format_EscapedPercent or this->token_type == Id::Unknown_Backslash))) {
      parts->append(Alloc<printf_part::Literal>(this->cur_token));
    }
    else {
      if (this->token_type == Id::Format_Percent) {
        parts->append(this->_ParseFormatStr());
      }
      else {
        if ((this->token_type == Id::Eof_Real || this->token_type == Id::Eol_Tok)) {
          break;
        }
        else {
          assert(0);  // AssertionError
        }
      }
    }
    this->_Next(lex_mode_e::PrintfOuter);
  }
  return parts;
}

Printf::Printf(state::Mem* mem, parse_lib::ParseContext* parse_ctx, sh_expr_eval::UnsafeArith* unsafe_arith, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Printf::field_mask();
  this->mem = mem;
  this->parse_ctx = parse_ctx;
  this->unsafe_arith = unsafe_arith;
  this->errfmt = errfmt;
  this->parse_cache = Alloc<Dict<Str*, List<syntax_asdl::printf_part_t*>*>>();
  this->shell_start_time = time_::time();
}

int Printf::_Format(List<syntax_asdl::printf_part_t*>* parts, List<Str*>* varargs, List<int>* spids, List<Str*>* out) {
  int arg_index;
  int num_args;
  bool backslash_c;
  syntax_asdl::printf_part_t* UP_part = nullptr;
  syntax_asdl::Token* token = nullptr;
  Str* s = nullptr;
  List<Str*>* flags = nullptr;
  int width;
  Str* width_str = nullptr;
  int width_spid;
  int precision;
  Str* precision_str = nullptr;
  int precision_spid;
  int word_spid;
  bool has_arg;
  Str* typ = nullptr;
  List<Str*>* c_parts = nullptr;
  match::SimpleLexer* lex = nullptr;
  int id_;
  Str* tok_val = nullptr;
  syntax_asdl::Token* tok = nullptr;
  Str* p = nullptr;
  int d;
  int blame_spid;
  runtime_asdl::cell* tzcell = nullptr;
  double ts;
  int zero_pad;
  bool negative;
  Str* digits = nullptr;
  Str* sign = nullptr;
  int n;
  StackRoots _roots({&parts, &varargs, &spids, &out, &UP_part, &token, &s, &flags, &width_str, &precision_str, &typ, &c_parts, &lex, &tok_val, &tok, &p, &tzcell, &digits, &sign});

  arg_index = 0;
  num_args = len(varargs);
  backslash_c = false;
  while (true) {
    for (ListIter<syntax_asdl::printf_part_t*> it(parts); !it.Done(); it.Next()) {
      syntax_asdl::printf_part_t* part = it.Value();
      StackRoots _for({&part    });
      UP_part = part;
      if (part->tag_() == printf_part_e::Literal) {
        printf_part__Literal* part = static_cast<printf_part__Literal*>(UP_part);
        token = part->token;
        if (token->id == Id::Format_EscapedPercent) {
          s = str901;
        }
        else {
          s = word_compile::EvalCStringToken(token);
        }
        out->append(s);
      }
      else {
        if (part->tag_() == printf_part_e::Percent) {
          printf_part__Percent* part = static_cast<printf_part__Percent*>(UP_part);
          flags = Alloc<List<Str*>>();
          if (len(part->flags) > 0) {
            for (ListIter<syntax_asdl::Token*> it(part->flags); !it.Done(); it.Next()) {
              syntax_asdl::Token* flag_token = it.Value();
              StackRoots _for({&flag_token            });
              flags->append(lexer::TokenVal(flag_token));
            }
          }
          width = -1;
          if (part->width) {
            if ((part->width->id == Id::Format_Num || part->width->id == Id::Format_Zero)) {
              width_str = lexer::TokenVal(part->width);
              width_spid = part->width->span_id;
            }
            else {
              if (part->width->id == Id::Format_Star) {
                if (arg_index < num_args) {
                  width_str = varargs->index_(arg_index);
                  width_spid = spids->index_(arg_index);
                  arg_index += 1;
                }
                else {
                  width_str = str902;
                  width_spid = runtime::NO_SPID;
                }
              }
              else {
                assert(0);  // AssertionError
              }
            }
            try {
              width = to_int(width_str);
            }
            catch (ValueError*) {
              if (width_spid == runtime::NO_SPID) {
                width_spid = part->width->span_id;
              }
              this->errfmt->Print_(StrFormat("printf got invalid width %r", width_str), width_spid);
              return 1;
            }
          }
          precision = -1;
          if (part->precision) {
            if (part->precision->id == Id::Format_Dot) {
              precision_str = str904;
              precision_spid = part->precision->span_id;
            }
            else {
              if ((part->precision->id == Id::Format_Num || part->precision->id == Id::Format_Zero)) {
                precision_str = lexer::TokenVal(part->precision);
                precision_spid = part->precision->span_id;
              }
              else {
                if (part->precision->id == Id::Format_Star) {
                  if (arg_index < num_args) {
                    precision_str = varargs->index_(arg_index);
                    precision_spid = spids->index_(arg_index);
                    arg_index += 1;
                  }
                  else {
                    precision_str = str905;
                    precision_spid = runtime::NO_SPID;
                  }
                }
                else {
                  assert(0);  // AssertionError
                }
              }
            }
            try {
              precision = to_int(precision_str);
            }
            catch (ValueError*) {
              if (precision_spid == runtime::NO_SPID) {
                precision_spid = part->precision->span_id;
              }
              this->errfmt->Print_(StrFormat("printf got invalid precision %r", precision_str), precision_spid);
              return 1;
            }
          }
          if (arg_index < num_args) {
            s = varargs->index_(arg_index);
            word_spid = spids->index_(arg_index);
            arg_index += 1;
            has_arg = true;
          }
          else {
            s = str907;
            word_spid = runtime::NO_SPID;
            has_arg = false;
          }
          typ = lexer::TokenVal(part->type);
          if (str_equals(typ, str908)) {
            if (precision >= 0) {
              s = s->slice(0, precision);
            }
          }
          else {
            if (str_equals(typ, str909)) {
              s = qsn::maybe_shell_encode(s);
            }
            else {
              if (str_equals(typ, str910)) {
                c_parts = Alloc<List<Str*>>();
                lex = match::EchoLexer(s);
                while (true) {
                  Tuple2<int, Str*> tup0 = lex->Next();
                  id_ = tup0.at0();
                  tok_val = tup0.at1();
                  if (id_ == Id::Eol_Tok) {
                    break;
                  }
                  tok = lexer::DummyToken(id_, tok_val);
                  p = word_compile::EvalCStringToken(tok);
                  if (p == nullptr) {
                    backslash_c = true;
                    break;
                  }
                  c_parts->append(p);
                }
                s = str911->join(c_parts);
              }
              else {
                if ((part->type->id == Id::Format_Time or str_contains(str912, typ))) {
                  try {
                    d = to_int(s);
                  }
                  catch (ValueError*) {
                    if ((len(s) >= 1 and str_contains(str913, s->index_(0)))) {
                      d = len(s) >= 2 ? ord(s->index_(1)) : 0;
                    }
                    else {
                      if ((!has_arg and part->type->id == Id::Format_Time)) {
                        d = -1;
                      }
                      else {
                        blame_spid = has_arg ? word_spid : part->type->span_id;
                        this->errfmt->Print_(StrFormat("printf expected an integer, got %r", s), blame_spid);
                        return 1;
                      }
                    }
                  }
                  if (part->type->id == Id::Format_Time) {
                    tzcell = this->mem->GetCell(str915);
                    if ((tzcell and (tzcell->exported and tzcell->val->tag_() == value_e::Str))) {
                      value__Str* tzval = static_cast<value__Str*>(tzcell->val);
                      posix::putenv(str916, tzval->s);
                    }
                    time_::tzset();
                    if (d == -1) {
                      ts = time_::time();
                    }
                    else {
                      if (d == -2) {
                        ts = this->shell_start_time;
                      }
                      else {
                        ts = d;
                      }
                    }
                    s = time_::strftime(typ->slice(1, -2), time_::localtime(ts));
                    if (precision >= 0) {
                      s = s->slice(0, precision);
                    }
                  }
                  else {
                    if ((d < 0 and str_contains(str917, typ))) {
                      e_die(StrFormat("Can't format negative number %d with %%%s", d, typ), Alloc<loc::Span>(part->type->span_id));
                    }
                    if (str_equals(typ, str919)) {
                      s = mylib::octal(d);
                    }
                    else {
                      if (str_equals(typ, str920)) {
                        s = mylib::hex_lower(d);
                      }
                      else {
                        if (str_equals(typ, str921)) {
                          s = mylib::hex_upper(d);
                        }
                        else {
                          s = str(d);
                        }
                      }
                    }
                    zero_pad = 0;
                    if ((width >= 0 and list_contains(flags, str922))) {
                      zero_pad = 1;
                    }
                    else {
                      if ((precision > 0 and len(s) < precision)) {
                        zero_pad = 2;
                      }
                    }
                    if (zero_pad) {
                      negative = str_equals(s->index_(0), str923);
                      if (negative) {
                        digits = s->slice(1);
                        sign = str924;
                        if (zero_pad == 1) {
                          n = (width - 1);
                        }
                        else {
                          n = precision;
                        }
                      }
                      else {
                        digits = s;
                        sign = str925;
                        if (zero_pad == 1) {
                          n = width;
                        }
                        else {
                          n = precision;
                        }
                      }
                      s = str_concat(sign, digits->rjust(n, str926));
                    }
                  }
                }
                else {
                  assert(0);  // AssertionError
                }
              }
            }
          }
          if (width >= 0) {
            if (list_contains(flags, str927)) {
              s = s->ljust(width, str928);
            }
            else {
              s = s->rjust(width, str929);
            }
          }
          out->append(s);
        }
        else {
          assert(0);  // AssertionError
        }
      }
      if (backslash_c) {
        break;
      }
    }
    if (arg_index == 0) {
      break;
    }
    if (arg_index >= num_args) {
      break;
    }
  }
  return 0;
}

int Printf::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::printf* arg = nullptr;
  Str* fmt = nullptr;
  int fmt_spid;
  List<Str*>* varargs = nullptr;
  List<int>* spids = nullptr;
  alloc::Arena* arena = nullptr;
  List<syntax_asdl::printf_part_t*>* parts = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  lexer::Lexer* lexer = nullptr;
  builtin_printf::_FormatStringParser* parser = nullptr;
  List<Str*>* out = nullptr;
  int status;
  Str* result = nullptr;
  int v_spid;
  runtime_asdl::lvalue_t* lval = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &fmt, &varargs, &spids, &arena, &parts, &line_reader, &lexer, &parser, &out, &result, &lval});

  Tuple2<args::_Attributes*, args::Reader*> tup1 = flag_spec::ParseCmdVal(str930, cmd_val);
  attrs = tup1.at0();
  arg_r = tup1.at1();
  arg = Alloc<arg_types::printf>(attrs->attrs);
  Tuple2<Str*, int> tup2 = arg_r->ReadRequired2(str931);
  fmt = tup2.at0();
  fmt_spid = tup2.at1();
  Tuple2<List<Str*>*, List<int>*> tup3 = arg_r->Rest2();
  varargs = tup3.at0();
  spids = tup3.at1();
  arena = this->errfmt->arena;
  if (dict_contains(this->parse_cache, fmt)) {
    parts = this->parse_cache->index_(fmt);
  }
  else {
    line_reader = reader::StringLineReader(fmt, arena);
    lexer = this->parse_ctx->MakeLexer(line_reader);
    parser = Alloc<_FormatStringParser>(lexer);
    {  // with
      alloc::ctx_Location ctx{arena, Alloc<source::ArgvWord>(str932, fmt_spid)};

      try {
        parts = parser->Parse();
      }
      catch (error::Parse* e) {
        this->errfmt->PrettyPrintError(e);
        return 2;
      }
    }
    this->parse_cache->set(fmt, parts);
  }
  out = Alloc<List<Str*>>();
  status = this->_Format(parts, varargs, spids, out);
  if (status != 0) {
    return status;
  }
  result = str933->join(out);
  if (arg->v != nullptr) {
    v_spid = runtime::NO_SPID;
    lval = this->unsafe_arith->ParseLValue(arg->v, v_spid);
    state::BuiltinSetValue(this->mem, lval, Alloc<value::Str>(result));
  }
  else {
    mylib::Stdout()->write(result);
  }
  return 0;
}

}  // define namespace builtin_printf

namespace builtin_process {  // define

using runtime_asdl::cmd_value__Argv;
using pyerror::e_usage;

Jobs::Jobs(process::JobState* job_state)  {
  FIELD_MASK(header_) |= Jobs::field_mask();
  this->job_state = job_state;
}

int Jobs::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::jobs* arg = nullptr;
  int style;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg});

  Tuple2<args::_Attributes*, args::Reader*> tup0 = flag_spec::ParseCmdVal(str934, cmd_val);
  attrs = tup0.at0();
  arg_r = tup0.at1();
  arg = Alloc<arg_types::jobs>(attrs->attrs);
  if (arg->l) {
    style = process::STYLE_LONG;
  }
  else {
    if (arg->p) {
      style = process::STYLE_PID_ONLY;
    }
    else {
      style = process::STYLE_DEFAULT;
    }
  }
  this->job_state->DisplayJobs(style);
  if (arg->debug) {
    this->job_state->DebugPrint();
  }
  return 0;
}

Fg::Fg(process::JobState* job_state, process::Waiter* waiter)  {
  FIELD_MASK(header_) |= Fg::field_mask();
  this->job_state = job_state;
  this->waiter = waiter;
}

int Fg::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  int pid;
  StackRoots _roots({&cmd_val});

  pid = this->job_state->GetLastStopped();
  if (pid == -1) {
    mylib::print_stderr(str935);
    return 1;
  }
  mylib::print_stderr(StrFormat("Continue PID %d", pid));
  posix::kill(pid, SIGCONT);
  return this->job_state->WhenContinued(pid, this->waiter);
}

Bg::Bg(process::JobState* job_state)  {
  FIELD_MASK(header_) |= Bg::field_mask();
  this->job_state = job_state;
}

int Bg::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  StackRoots _roots({&cmd_val});

  throw Alloc<error::Usage>(str937);
}

Fork::Fork(vm::_Executor* shell_ex)  {
  FIELD_MASK(header_) |= Fork::field_mask();
  this->shell_ex = shell_ex;
}

int Fork::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Str* arg = nullptr;
  int span_id;
  syntax_asdl::command_t* block = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &arg, &block});

  Tuple2<args::_Attributes*, args::Reader*> tup1 = flag_spec::ParseCmdVal(str938, cmd_val, true);
  arg_r = tup1.at1();
  Tuple2<Str*, int> tup2 = arg_r->Peek2();
  arg = tup2.at0();
  span_id = tup2.at1();
  if (arg != nullptr) {
    e_usage(StrFormat("got unexpected argument %r", arg), span_id);
  }
  block = typed_args::GetOneBlock(cmd_val->typed_args);
  if (block == nullptr) {
    e_usage(str940);
  }
  return this->shell_ex->RunBackgroundJob(block);
}

ForkWait::ForkWait(vm::_Executor* shell_ex)  {
  FIELD_MASK(header_) |= ForkWait::field_mask();
  this->shell_ex = shell_ex;
}

int ForkWait::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Str* arg = nullptr;
  int span_id;
  syntax_asdl::command_t* block = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &arg, &block});

  Tuple2<args::_Attributes*, args::Reader*> tup3 = flag_spec::ParseCmdVal(str941, cmd_val, true);
  arg_r = tup3.at1();
  Tuple2<Str*, int> tup4 = arg_r->Peek2();
  arg = tup4.at0();
  span_id = tup4.at1();
  if (arg != nullptr) {
    e_usage(StrFormat("got unexpected argument %r", arg), span_id);
  }
  block = typed_args::GetOneBlock(cmd_val->typed_args);
  if (block == nullptr) {
    e_usage(str943);
  }
  return this->shell_ex->RunSubshell(block);
}

}  // define namespace builtin_process

namespace builtin_process2 {  // define

using runtime_asdl::cmd_value;
using runtime_asdl::cmd_value__Argv;
using runtime_asdl::wait_status__Cancelled;
using runtime_asdl::wait_status__Pipeline;
using runtime_asdl::wait_status__Proc;
using runtime_asdl::wait_status_e;
using syntax_asdl::loc;
using pyerror::e_usage;
using pyerror::e_die_status;
using mylib::print_stderr;

Exec::Exec(state::Mem* mem, process::ExternalProgram* ext_prog, process::FdState* fd_state, state::SearchPath* search_path, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Exec::field_mask();
  this->mem = mem;
  this->ext_prog = ext_prog;
  this->fd_state = fd_state;
  this->search_path = search_path;
  this->errfmt = errfmt;
}

int Exec::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Dict<Str*, Str*>* environ = nullptr;
  int i;
  Str* cmd = nullptr;
  Str* argv0_path = nullptr;
  runtime_asdl::cmd_value__Argv* c2 = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &environ, &cmd, &argv0_path, &c2});

  Tuple2<args::_Attributes*, args::Reader*> tup0 = flag_spec::ParseCmdVal(str944, cmd_val);
  arg_r = tup0.at1();
  if (arg_r->AtEnd()) {
    this->fd_state->MakePermanent();
    return 0;
  }
  environ = this->mem->GetExported();
  i = arg_r->i;
  cmd = cmd_val->argv->index_(i);
  argv0_path = this->search_path->CachedLookup(cmd);
  if (argv0_path == nullptr) {
    e_die_status(127, StrFormat("exec: %r not found", cmd), Alloc<loc::Span>(cmd_val->arg_spids->index_(1)));
  }
  c2 = Alloc<cmd_value::Argv>(cmd_val->argv->slice(i), cmd_val->arg_spids->slice(i), cmd_val->typed_args);
  this->ext_prog->Exec(argv0_path, c2, environ);
  assert(0);  // AssertionError
}

Wait::Wait(process::Waiter* waiter, process::JobState* job_state, state::Mem* mem, dev::Tracer* tracer, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Wait::field_mask();
  this->waiter = waiter;
  this->job_state = job_state;
  this->mem = mem;
  this->tracer = tracer;
  this->errfmt = errfmt;
}

int Wait::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  StackRoots _roots({&cmd_val});

  {  // with
    dev::ctx_Tracer ctx{this->tracer, str947, cmd_val->argv};

    return this->_Run(cmd_val);
  }
}

int Wait::_Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::wait* arg = nullptr;
  List<Str*>* job_ids = nullptr;
  List<int>* arg_spids = nullptr;
  int n;
  int status;
  int target;
  int result;
  int i;
  int span_id;
  int pid;
  process::Process* job = nullptr;
  runtime_asdl::wait_status_t* wait_status = nullptr;
  runtime_asdl::wait_status_t* UP_wait_status = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &job_ids, &arg_spids, &job, &wait_status, &UP_wait_status});

  Tuple2<args::_Attributes*, args::Reader*> tup1 = flag_spec::ParseCmdVal(str948, cmd_val);
  attrs = tup1.at0();
  arg_r = tup1.at1();
  arg = Alloc<arg_types::wait>(attrs->attrs);
  Tuple2<List<Str*>*, List<int>*> tup2 = arg_r->Rest2();
  job_ids = tup2.at0();
  arg_spids = tup2.at1();
  if (arg->n) {
    n = this->job_state->NumRunning();
    if (n == 0) {
      status = 127;
    }
    else {
      target = (n - 1);
      status = 0;
      while (this->job_state->NumRunning() > target) {
        result = this->waiter->WaitForOne();
        if (result == process::W1_OK) {
          status = this->waiter->last_status;
        }
        else {
          if (result == process::W1_ECHILD) {
            status = 127;
            break;
          }
          else {
            if (result >= 0) {
              status = (128 + result);
              break;
            }
          }
        }
      }
    }
    return status;
  }
  if (len(job_ids) == 0) {
    status = 0;
    while (this->job_state->NumRunning() != 0) {
      result = this->waiter->WaitForOne();
      if (result == process::W1_ECHILD) {
        break;
      }
      else {
        if (result >= 0) {
          status = (128 + result);
          break;
        }
      }
    }
    return status;
  }
  status = 1;
  i = 0;
  for (ListIter<Str*> it(job_ids); !it.Done(); it.Next(), ++i) {
    Str* job_id = it.Value();
    StackRoots _for({&job_id  });
    span_id = arg_spids->index_(i);
    if (job_id->startswith(str949)) {
      throw Alloc<error::Usage>(StrFormat("doesn't support bash-style jobspecs (got %r)", job_id), span_id);
    }
    try {
      pid = to_int(job_id);
    }
    catch (ValueError*) {
      throw Alloc<error::Usage>(StrFormat("expected PID or jobspec, got %r", job_id), span_id);
    }
    job = this->job_state->JobFromPid(pid);
    if (job == nullptr) {
      this->errfmt->Print_(StrFormat("%d isn't a child of this shell", pid), span_id);
      return 127;
    }
    wait_status = job->JobWait(this->waiter);
    UP_wait_status = wait_status;
    switch (wait_status->tag_()) {
      case wait_status_e::Proc: {
        wait_status__Proc* wait_status = static_cast<wait_status__Proc*>(UP_wait_status);
        status = wait_status->code;
      }
        break;
      case wait_status_e::Pipeline: {
        wait_status__Pipeline* wait_status = static_cast<wait_status__Pipeline*>(UP_wait_status);
        status = wait_status->codes->index_(-1);
      }
        break;
      case wait_status_e::Cancelled: {
        wait_status__Cancelled* wait_status = static_cast<wait_status__Cancelled*>(UP_wait_status);
        status = (128 + wait_status->sig_num);
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  return status;
}

Umask::Umask()  {
  ;  // pass
}

int Umask::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  List<Str*>* argv = nullptr;
  int mask;
  Str* a = nullptr;
  int new_mask;
  StackRoots _roots({&cmd_val, &argv, &a});

  argv = cmd_val->argv->slice(1);
  if (len(argv) == 0) {
    mask = posix::umask(0);
    posix::umask(mask);
    print(StrFormat("0%03o", mask));
    return 0;
  }
  if (len(argv) == 1) {
    a = argv->index_(0);
    try {
      new_mask = to_int(a, 8);
    }
    catch (ValueError*) {
      print_stderr(str954);
      return 1;
    }
    posix::umask(new_mask);
    return 0;
  }
  e_usage(str955);
}

}  // define namespace builtin_process2

namespace builtin_pure {  // define

using id_kind_asdl::Id;
using runtime_asdl::scope_e;
using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value__Str;
using runtime_asdl::value__MaybeStrArray;
using runtime_asdl::value__AssocArray;
using runtime_asdl::value__Obj;
using types_asdl::opt_group_i;
namespace fmt = format;
using pyerror::e_usage;
using pyerror::e_die;
using mylib::print_stderr;

Boolean::Boolean(int status)  {
  this->status = status;
}

int Boolean::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  StackRoots _roots({&cmd_val});

  typed_args::DoesNotAccept(cmd_val->typed_args);
  return this->status;
}

Alias::Alias(Dict<Str*, Str*>* aliases, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Alias::field_mask();
  this->aliases = aliases;
  this->errfmt = errfmt;
}

int Alias::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  List<Str*>* argv = nullptr;
  Str* alias_exp = nullptr;
  int status;
  int i;
  Str* name = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &argv, &alias_exp, &name});

  Tuple2<args::_Attributes*, args::Reader*> tup0 = flag_spec::ParseCmdVal(str956, cmd_val);
  arg_r = tup0.at1();
  argv = arg_r->Rest();
  if (len(argv) == 0) {
    for (ListIter<Str*> it(sorted(this->aliases)); !it.Done(); it.Next()) {
      Str* name = it.Value();
      StackRoots _for({&name    });
      alias_exp = this->aliases->index_(name);
      print(StrFormat("alias %s=%r", name, alias_exp));
    }
    return 0;
  }
  status = 0;
  i = 0;
  for (ListIter<Str*> it(argv); !it.Done(); it.Next(), ++i) {
    Str* arg = it.Value();
    StackRoots _for({&arg  });
    Tuple2<Str*, Str*> tup1 = mylib::split_once(arg, str958);
    name = tup1.at0();
    alias_exp = tup1.at1();
    if (alias_exp == nullptr) {
      alias_exp = this->aliases->get(name);
      if (alias_exp == nullptr) {
        this->errfmt->Print_(StrFormat("No alias named %r", name), cmd_val->arg_spids->index_(i));
        status = 1;
      }
      else {
        print(StrFormat("alias %s=%r", name, alias_exp));
      }
    }
    else {
      this->aliases->set(name, alias_exp);
    }
  }
  return status;
}

UnAlias::UnAlias(Dict<Str*, Str*>* aliases, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= UnAlias::field_mask();
  this->aliases = aliases;
  this->errfmt = errfmt;
}

int UnAlias::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  List<Str*>* argv = nullptr;
  int status;
  int i;
  StackRoots _roots({&cmd_val, &arg_r, &argv});

  Tuple2<args::_Attributes*, args::Reader*> tup2 = flag_spec::ParseCmdVal(str961, cmd_val);
  arg_r = tup2.at1();
  argv = arg_r->Rest();
  if (len(argv) == 0) {
    e_usage(str962);
  }
  status = 0;
  i = 0;
  for (ListIter<Str*> it(argv); !it.Done(); it.Next(), ++i) {
    Str* name = it.Value();
    StackRoots _for({&name  });
    if (dict_contains(this->aliases, name)) {
      mylib::dict_erase(this->aliases, name);
    }
    else {
      this->errfmt->Print_(StrFormat("No alias named %r", name), cmd_val->arg_spids->index_(i));
      status = 1;
    }
  }
  return status;
}

void SetOptionsFromFlags(state::MutableOpts* exec_opts, List<Tuple2<Str*, bool>*>* opt_changes, List<Tuple2<Str*, bool>*>* shopt_changes) {
  Str* opt_name = nullptr;
  bool b;
  StackRoots _roots({&exec_opts, &opt_changes, &shopt_changes, &opt_name});

  for (ListIter<Tuple2<Str*, bool>*> it(opt_changes); !it.Done(); it.Next()) {
    Tuple2<Str*, bool>* tup3 = it.Value();
    opt_name = tup3->at0();
    b = tup3->at1();
    exec_opts->SetAnyOption(opt_name, b);
  }
  for (ListIter<Tuple2<Str*, bool>*> it(shopt_changes); !it.Done(); it.Next()) {
    Tuple2<Str*, bool>* tup4 = it.Value();
    opt_name = tup4->at0();
    b = tup4->at1();
    exec_opts->SetAnyOption(opt_name, b);
  }
}

Set::Set(state::MutableOpts* exec_opts, state::Mem* mem)  {
  FIELD_MASK(header_) |= Set::field_mask();
  this->exec_opts = exec_opts;
  this->mem = mem;
}

int Set::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  Dict<Str*, Str*>* mapping = nullptr;
  Str* str_val = nullptr;
  Str* code_str = nullptr;
  args::Reader* arg_r = nullptr;
  args::_Attributes* arg = nullptr;
  Str* opt_name = nullptr;
  bool b;
  StackRoots _roots({&cmd_val, &mapping, &str_val, &code_str, &arg_r, &arg, &opt_name});

  if (len(cmd_val->argv) == 1) {
    mapping = this->mem->GetAllVars();
    for (ListIter<Str*> it(sorted(mapping)); !it.Done(); it.Next()) {
      Str* name = it.Value();
      StackRoots _for({&name    });
      str_val = mapping->index_(name);
      code_str = StrFormat("%s=%s", name, qsn::maybe_shell_encode(str_val));
      print(code_str);
    }
    return 0;
  }
  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  arg = flag_spec::ParseMore(str965, arg_r);
  if (arg->show_options) {
    this->exec_opts->ShowOptions(Alloc<List<Str*>>());
    return 0;
  }
  for (ListIter<Tuple2<Str*, bool>*> it(arg->opt_changes); !it.Done(); it.Next()) {
    Tuple2<Str*, bool>* tup5 = it.Value();
    opt_name = tup5->at0();
    b = tup5->at1();
    this->exec_opts->SetOldOption(opt_name, b);
  }
  for (ListIter<Tuple2<Str*, bool>*> it(arg->shopt_changes); !it.Done(); it.Next()) {
    Tuple2<Str*, bool>* tup6 = it.Value();
    opt_name = tup6->at0();
    b = tup6->at1();
    this->exec_opts->SetAnyOption(opt_name, b);
  }
  if ((arg->saw_double_dash or !arg_r->AtEnd())) {
    this->mem->SetArgv(arg_r->Rest());
  }
  return 0;
}

Shopt::Shopt(state::MutableOpts* mutable_opts, cmd_eval::CommandEvaluator* cmd_ev)  {
  FIELD_MASK(header_) |= Shopt::field_mask();
  this->mutable_opts = mutable_opts;
  this->cmd_ev = cmd_ev;
}

int Shopt::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::shopt* arg = nullptr;
  List<Str*>* opt_names = nullptr;
  int index;
  bool b;
  syntax_asdl::command_t* block = nullptr;
  List<int>* opt_nums = nullptr;
  int opt_group;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &opt_names, &block, &opt_nums});

  Tuple2<args::_Attributes*, args::Reader*> tup7 = flag_spec::ParseCmdVal(str966, cmd_val, true);
  attrs = tup7.at0();
  arg_r = tup7.at1();
  arg = Alloc<arg_types::shopt>(attrs->attrs);
  opt_names = arg_r->Rest();
  if (arg->p) {
    if (arg->o) {
      this->mutable_opts->ShowOptions(opt_names);
    }
    else {
      this->mutable_opts->ShowShoptOptions(opt_names);
    }
    return 0;
  }
  if (arg->q) {
    for (ListIter<Str*> it(opt_names); !it.Done(); it.Next()) {
      Str* name = it.Value();
      StackRoots _for({&name    });
      index = consts::OptionNum(name);
      if (index == 0) {
        return 2;
      }
      if (!this->mutable_opts->opt0_array->index_(index)) {
        return 1;
      }
    }
    return 0;
  }
  if (arg->s) {
    b = true;
  }
  else {
    if (arg->u) {
      b = false;
    }
    else {
      this->mutable_opts->ShowShoptOptions(opt_names);
      return 0;
    }
  }
  block = typed_args::GetOneBlock(cmd_val->typed_args);
  if (block) {
    opt_nums = Alloc<List<int>>();
    for (ListIter<Str*> it(opt_names); !it.Done(); it.Next()) {
      Str* opt_name = it.Value();
      StackRoots _for({&opt_name    });
      opt_group = consts::OptionGroupNum(opt_name);
      if (opt_group == opt_group_i::OilUpgrade) {
        opt_nums->extend(consts::OIL_UPGRADE);
        continue;
      }
      if (opt_group == opt_group_i::OilAll) {
        opt_nums->extend(consts::OIL_ALL);
        continue;
      }
      if (opt_group == opt_group_i::StrictAll) {
        opt_nums->extend(consts::STRICT_ALL);
        continue;
      }
      index = consts::OptionNum(opt_name);
      if (index == 0) {
        e_usage(StrFormat("got invalid option %r", opt_name));
      }
      opt_nums->append(index);
    }
    {  // with
      state::ctx_Option ctx{this->mutable_opts, opt_nums, b};

    }
    return 0;
  }
  for (ListIter<Str*> it(opt_names); !it.Done(); it.Next()) {
    Str* opt_name = it.Value();
    StackRoots _for({&opt_name  });
    this->mutable_opts->SetAnyOption(opt_name, b);
  }
  return 0;
}

Hash::Hash(state::SearchPath* search_path)  {
  FIELD_MASK(header_) |= Hash::field_mask();
  this->search_path = search_path;
}

int Hash::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::hash* arg = nullptr;
  List<Str*>* rest = nullptr;
  int status;
  Str* full_path = nullptr;
  List<Str*>* commands = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &rest, &full_path, &commands});

  Tuple2<args::_Attributes*, args::Reader*> tup8 = flag_spec::ParseCmdVal(str968, cmd_val);
  attrs = tup8.at0();
  arg_r = tup8.at1();
  arg = Alloc<arg_types::hash>(attrs->attrs);
  rest = arg_r->Rest();
  if (arg->r) {
    if (len(rest)) {
      e_usage(str969);
    }
    this->search_path->ClearCache();
    return 0;
  }
  status = 0;
  if (len(rest)) {
    for (ListIter<Str*> it(rest); !it.Done(); it.Next()) {
      Str* cmd = it.Value();
      StackRoots _for({&cmd    });
      full_path = this->search_path->CachedLookup(cmd);
      if (full_path == nullptr) {
        print_stderr(StrFormat("hash: %r not found", cmd));
        status = 1;
      }
    }
  }
  else {
    commands = this->search_path->CachedCommands();
    commands->sort();
    for (ListIter<Str*> it(commands); !it.Done(); it.Next()) {
      Str* cmd = it.Value();
      StackRoots _for({&cmd    });
      print(cmd);
    }
  }
  return status;
}

Dict<Str*, bool>* _ParseOptSpec(Str* spec_str) {
  Dict<Str*, bool>* spec = nullptr;
  int i;
  int n;
  Str* ch = nullptr;
  StackRoots _roots({&spec_str, &spec, &ch});

  spec = Alloc<Dict<Str*, bool>>();
  i = 0;
  n = len(spec_str);
  while (true) {
    if (i >= n) {
      break;
    }
    ch = spec_str->index_(i);
    spec->set(ch, false);
    i += 1;
    if (i >= n) {
      break;
    }
    if (str_equals(spec_str->index_(i), str971)) {
      spec->set(ch, true);
      i += 1;
    }
  }
  return spec;
}

GetOptsState::GetOptsState(state::Mem* mem, ui::ErrorFormatter* errfmt) 
    : header_(obj_header()) {
  this->mem = mem;
  this->errfmt = errfmt;
  this->_optind = -1;
  this->flag_pos = 1;
}

int GetOptsState::_OptInd() {
  int result;
  try {
    result = state::GetInteger(this->mem, str972);
  }
  catch (error::Runtime* e) {
    this->errfmt->Print_(e->UserErrorString());
    result = -1;
  }
  return result;
}

Str* GetOptsState::GetArg(List<Str*>* argv) {
  int optind;
  int i;
  StackRoots _roots({&argv});

  optind = this->_OptInd();
  if (optind == -1) {
    return nullptr;
  }
  this->_optind = optind;
  i = (optind - 1);
  if ((0 <= i and i < len(argv))) {
    return argv->index_(i);
  }
  else {
    return nullptr;
  }
}

void GetOptsState::IncIndex() {
  state::BuiltinSetString(this->mem, str973, str((this->_optind + 1)));
}

void GetOptsState::SetArg(Str* optarg) {
  StackRoots _roots({&optarg});

  state::BuiltinSetString(this->mem, str974, optarg);
}

void GetOptsState::Fail() {
  state::BuiltinSetString(this->mem, str975, str976);
}

Tuple2<int, Str*> _GetOpts(Dict<Str*, bool>* spec, List<Str*>* argv, builtin_pure::GetOptsState* my_state, ui::ErrorFormatter* errfmt) {
  Str* current = nullptr;
  Str* flag_char = nullptr;
  bool more_chars;
  Str* optarg = nullptr;
  List<Str*>* tmp = nullptr;
  StackRoots _roots({&spec, &argv, &my_state, &errfmt, &current, &flag_char, &optarg, &tmp});

  current = my_state->GetArg(argv);
  if (current == nullptr) {
    my_state->Fail();
    return Tuple2<int, Str*>(1, str977);
  }
  if ((!current->startswith(str978) or str_equals(current, str979))) {
    my_state->Fail();
    return Tuple2<int, Str*>(1, str980);
  }
  flag_char = current->index_(my_state->flag_pos);
  if (my_state->flag_pos < (len(current) - 1)) {
    my_state->flag_pos += 1;
    more_chars = true;
  }
  else {
    my_state->IncIndex();
    my_state->flag_pos = 1;
    more_chars = false;
  }
  if (!dict_contains(spec, flag_char)) {
    return Tuple2<int, Str*>(0, str981);
  }
  if (spec->index_(flag_char)) {
    if (more_chars) {
      optarg = current->slice(my_state->flag_pos);
    }
    else {
      optarg = my_state->GetArg(argv);
      if (optarg == nullptr) {
        my_state->Fail();
        errfmt->Print_(StrFormat("getopts: option %r requires an argument.", current));
        tmp = Alloc<List<Str*>>();
        for (ListIter<Str*> it(argv); !it.Done(); it.Next()) {
          Str* a = it.Value();
          tmp->append(qsn::maybe_shell_encode(a));
        }
        print_stderr(StrFormat("(getopts argv: %s)", str984->join(tmp)));
        return Tuple2<int, Str*>(0, str985);
      }
    }
    my_state->IncIndex();
    my_state->SetArg(optarg);
  }
  else {
    my_state->SetArg(str986);
  }
  return Tuple2<int, Str*>(0, flag_char);
}

GetOpts::GetOpts(state::Mem* mem, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= GetOpts::field_mask();
  this->mem = mem;
  this->errfmt = errfmt;
  this->my_state = Alloc<GetOptsState>(mem, errfmt);
  this->spec_cache = Alloc<Dict<Str*, Dict<Str*, bool>*>>();
}

int GetOpts::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Str* spec_str = nullptr;
  Str* var_name = nullptr;
  int var_spid;
  Dict<Str*, bool>* spec = nullptr;
  List<Str*>* user_argv = nullptr;
  int status;
  Str* flag_char = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &spec_str, &var_name, &spec, &user_argv, &flag_char});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  spec_str = arg_r->ReadRequired(str987);
  Tuple2<Str*, int> tup9 = arg_r->ReadRequired2(str988);
  var_name = tup9.at0();
  var_spid = tup9.at1();
  spec = this->spec_cache->get(spec_str);
  if (spec == nullptr) {
    spec = _ParseOptSpec(spec_str);
    this->spec_cache->set(spec_str, spec);
  }
  user_argv = arg_r->AtEnd() ? this->mem->GetArgv() : arg_r->Rest();
  Tuple2<int, Str*> tup10 = _GetOpts(spec, user_argv, this->my_state, this->errfmt);
  status = tup10.at0();
  flag_char = tup10.at1();
  if (match::IsValidVarName(var_name)) {
    state::BuiltinSetString(this->mem, var_name, flag_char);
  }
  else {
    throw Alloc<error::Usage>(StrFormat("got invalid variable name %r", var_name), var_spid);
  }
  return status;
}

Echo::Echo(optview::Exec* exec_opts)  {
  FIELD_MASK(header_) |= Echo::field_mask();
  this->exec_opts = exec_opts;
  this->f = mylib::Stdout();
}

int Echo::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  List<Str*>* argv = nullptr;
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::echo* arg = nullptr;
  bool backslash_c;
  List<Str*>* new_argv = nullptr;
  List<Str*>* parts = nullptr;
  match::SimpleLexer* lex = nullptr;
  int id_;
  Str* value = nullptr;
  syntax_asdl::Token* tok = nullptr;
  Str* p = nullptr;
  int n;
  int i;
  StackRoots _roots({&cmd_val, &argv, &attrs, &arg_r, &arg, &new_argv, &parts, &lex, &value, &tok, &p});

  argv = cmd_val->argv->slice(1);
  Tuple2<args::_Attributes*, args::Reader*> tup11 = flag_spec::ParseLikeEcho(str990, cmd_val);
  attrs = tup11.at0();
  arg_r = tup11.at1();
  arg = Alloc<arg_types::echo>(attrs->attrs);
  argv = arg_r->Rest();
  backslash_c = false;
  if (arg->e) {
    new_argv = Alloc<List<Str*>>();
    for (ListIter<Str*> it(argv); !it.Done(); it.Next()) {
      Str* a = it.Value();
      StackRoots _for({&a    });
      parts = Alloc<List<Str*>>();
      lex = match::EchoLexer(a);
      while (!backslash_c) {
        Tuple2<int, Str*> tup12 = lex->Next();
        id_ = tup12.at0();
        value = tup12.at1();
        if (id_ == Id::Eol_Tok) {
          break;
        }
        tok = lexer::DummyToken(id_, value);
        p = word_compile::EvalCStringToken(tok);
        if (p == nullptr) {
          backslash_c = true;
          break;
        }
        parts->append(p);
      }
      new_argv->append(str991->join(parts));
      if (backslash_c) {
        break;
      }
    }
    argv = new_argv;
  }
  if (this->exec_opts->simple_echo()) {
    n = len(argv);
    if (n == 0) {
      ;  // pass
    }
    else {
      if (n == 1) {
        this->f->write(argv->index_(0));
      }
      else {
        e_usage(str992);
      }
    }
  }
  else {
    i = 0;
    for (ListIter<Str*> it(argv); !it.Done(); it.Next(), ++i) {
      Str* a = it.Value();
      StackRoots _for({&a    });
      if (i != 0) {
        this->f->write(str993);
      }
      this->f->write(a);
    }
  }
  if ((!arg->n and !backslash_c)) {
    this->f->write(str994);
  }
  return 0;
}

Module::Module(Dict<Str*, bool>* modules, optview::Exec* exec_opts, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Module::field_mask();
  this->modules = modules;
  this->exec_opts = exec_opts;
  this->errfmt = errfmt;
}

int Module::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Str* name = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &name});

  Tuple2<args::_Attributes*, args::Reader*> tup13 = flag_spec::ParseCmdVal(str995, cmd_val);
  arg_r = tup13.at1();
  Tuple2<Str*, int> tup14 = arg_r->ReadRequired2(str996);
  name = tup14.at0();
  if (dict_contains(this->modules, name)) {
    if (this->exec_opts->redefine_module()) {
      this->errfmt->PrintMessage(StrFormat("(interactive) Reloading module %r", name));
      return 0;
    }
    else {
      return 1;
    }
  }
  this->modules->set(name, true);
  return 0;
}

Use::Use(state::Mem* mem, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Use::field_mask();
  this->mem = mem;
  this->errfmt = errfmt;
}

int Use::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  Str* arg = nullptr;
  int arg_spid;
  Str* expected = nullptr;
  int e_spid;
  runtime_asdl::value_t* UP_actual = nullptr;
  Str* actual = nullptr;
  List<Str*>* rest = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &arg, &expected, &UP_actual, &actual, &rest});

  arg_r = Alloc<args::Reader>(cmd_val->argv, cmd_val->arg_spids);
  arg_r->Next();
  Tuple2<Str*, int> tup15 = arg_r->Peek2();
  arg = tup15.at0();
  arg_spid = tup15.at1();
  if (arg == nullptr) {
    throw Alloc<error::Usage>(str998, runtime::NO_SPID);
  }
  arg_r->Next();
  if (str_equals(arg, str999)) {
    Tuple2<Str*, int> tup16 = arg_r->Peek2();
    expected = tup16.at0();
    e_spid = tup16.at1();
    if (expected == nullptr) {
      throw Alloc<error::Usage>(str1000, runtime::NO_SPID);
    }
    UP_actual = this->mem->GetValue(str1001, scope_e::Dynamic);
    if (UP_actual->tag_() == value_e::Str) {
      actual = static_cast<value__Str*>(UP_actual)->s;
      if (str_equals(actual, expected)) {
        return 0;
      }
      else {
        this->errfmt->Print_(StrFormat("Expected dialect %r, got %r", expected, actual), e_spid);
        return 1;
      }
    }
    else {
      this->errfmt->Print_(StrFormat("Expected dialect %r", expected), e_spid);
      return 1;
    }
  }
  if (str_equals(arg, str1004)) {
    rest = arg_r->Rest();
    for (ListIter<Str*> it(rest); !it.Done(); it.Next()) {
      Str* name = it.Value();
      StackRoots _for({&name    });
      mylib::print_stderr(StrFormat("bin %s", name));
    }
    return 0;
  }
  throw Alloc<error::Usage>(str1006, arg_spid);
}

Shvar::Shvar(state::Mem* mem, state::SearchPath* search_path, cmd_eval::CommandEvaluator* cmd_ev)  {
  FIELD_MASK(header_) |= Shvar::field_mask();
  this->mem = mem;
  this->search_path = search_path;
  this->cmd_ev = cmd_ev;
}

int Shvar::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  syntax_asdl::command_t* block = nullptr;
  List<Tuple2<Str*, Str*>*>* pairs = nullptr;
  List<Str*>* args = nullptr;
  List<int>* arg_spids = nullptr;
  int i;
  Str* name = nullptr;
  Str* s = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &block, &pairs, &args, &arg_spids, &name, &s});

  Tuple2<args::_Attributes*, args::Reader*> tup17 = flag_spec::ParseCmdVal(str1007, cmd_val, true);
  arg_r = tup17.at1();
  block = typed_args::GetOneBlock(cmd_val->typed_args);
  if (!block) {
    throw Alloc<error::Usage>(str1008, runtime::NO_SPID);
  }
  pairs = Alloc<List<Tuple2<Str*, Str*>*>>();
  Tuple2<List<Str*>*, List<int>*> tup18 = arg_r->Rest2();
  args = tup18.at0();
  arg_spids = tup18.at1();
  if (len(args) == 0) {
    throw Alloc<error::Usage>(str1009, runtime::NO_SPID);
  }
  i = 0;
  for (ListIter<Str*> it(args); !it.Done(); it.Next(), ++i) {
    Str* arg = it.Value();
    StackRoots _for({&arg  });
    Tuple2<Str*, Str*> tup19 = mylib::split_once(arg, str1010);
    name = tup19.at0();
    s = tup19.at1();
    if (s == nullptr) {
      throw Alloc<error::Usage>(str1011, arg_spids->index_(i));
    }
    pairs->append((Alloc<Tuple2<Str*, Str*>>(name, s)));
    if (str_equals(name, str1012)) {
      this->search_path->ClearCache();
    }
  }
  {  // with
    state::ctx_Shvar ctx{this->mem, pairs};

  }
  return 0;
}

PushRegisters::PushRegisters(state::Mem* mem, cmd_eval::CommandEvaluator* cmd_ev)  {
  FIELD_MASK(header_) |= PushRegisters::field_mask();
  this->mem = mem;
  this->cmd_ev = cmd_ev;
}

int PushRegisters::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  syntax_asdl::command_t* block = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &block});

  Tuple2<args::_Attributes*, args::Reader*> tup20 = flag_spec::ParseCmdVal(str1013, cmd_val, true);
  arg_r = tup20.at1();
  block = typed_args::GetOneBlock(cmd_val->typed_args);
  if (!block) {
    throw Alloc<error::Usage>(str1014, runtime::NO_SPID);
  }
  {  // with
    state::ctx_Registers ctx{this->mem};

  }
  return this->mem->last_status->index_(-1);
}

Fopen::Fopen(state::Mem* mem, cmd_eval::CommandEvaluator* cmd_ev)  {
  FIELD_MASK(header_) |= Fopen::field_mask();
  this->mem = mem;
  this->cmd_ev = cmd_ev;
}

int Fopen::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::Reader* arg_r = nullptr;
  syntax_asdl::command_t* block = nullptr;
  StackRoots _roots({&cmd_val, &arg_r, &block});

  Tuple2<args::_Attributes*, args::Reader*> tup21 = flag_spec::ParseCmdVal(str1015, cmd_val, true);
  arg_r = tup21.at1();
  block = typed_args::GetOneBlock(cmd_val->typed_args);
  if (!block) {
    throw Alloc<error::Usage>(str1016, runtime::NO_SPID);
  }
  return 0;
}

}  // define namespace builtin_pure

namespace builtin_trap {  // define

using runtime_asdl::cmd_value__Argv;
using syntax_asdl::source;
using mylib::print_stderr;

TrapState::TrapState(pyos::SignalSafe* signal_safe) 
    : header_(obj_header()) {
  this->signal_safe = signal_safe;
  this->hooks = Alloc<Dict<Str*, syntax_asdl::command_t*>>();
  this->traps = Alloc<Dict<int, syntax_asdl::command_t*>>();
  this->display = nullptr;
}

syntax_asdl::command_t* TrapState::GetHook(Str* hook_name) {
  StackRoots _roots({&hook_name});

  return this->hooks->get(hook_name, nullptr);
}

void TrapState::AddUserHook(Str* hook_name, syntax_asdl::command_t* handler) {
  StackRoots _roots({&hook_name, &handler});

  this->hooks->set(hook_name, handler);
}

void TrapState::RemoveUserHook(Str* hook_name) {
  StackRoots _roots({&hook_name});

  mylib::dict_erase(this->hooks, hook_name);
}

void TrapState::AddUserTrap(int sig_num, syntax_asdl::command_t* handler) {
  StackRoots _roots({&handler});

  this->traps->set(sig_num, handler);
  if (sig_num == SIGWINCH) {
    this->signal_safe->SetSigWinchCode(SIGWINCH);
  }
  else {
    pyos::RegisterSignalInterest(sig_num);
  }
}

void TrapState::RemoveUserTrap(int sig_num) {
  mylib::dict_erase(this->traps, sig_num);
  if (sig_num == SIGWINCH) {
    this->signal_safe->SetSigWinchCode(pyos::UNTRAPPED_SIGWINCH);
  }
  else {
    pyos::Sigaction(sig_num, SIG_DFL);
  }
}

void TrapState::InitInteractiveShell(comp_ui::_IDisplay* display, int my_pid) {
  StackRoots _roots({&display});

  this->display = display;
  pyos::Sigaction(SIGQUIT, SIG_IGN);
  pyos::Sigaction(SIGTSTP, SIG_IGN);
  pyos::Sigaction(SIGTTOU, SIG_IGN);
  pyos::Sigaction(SIGTTIN, SIG_IGN);
  pyos::RegisterSignalInterest(SIGWINCH);
  this->signal_safe->SetSigWinchCode(pyos::UNTRAPPED_SIGWINCH);
}

List<syntax_asdl::command_t*>* TrapState::GetPendingTraps() {
  List<int>* signals = nullptr;
  List<syntax_asdl::command_t*>* run_list = nullptr;
  syntax_asdl::command_t* node = nullptr;
  StackRoots _roots({&signals, &run_list, &node});

  signals = this->signal_safe->TakePendingSignals();
  run_list = Alloc<List<syntax_asdl::command_t*>>();
  for (ListIter<int> it(signals); !it.Done(); it.Next()) {
    int sig_num = it.Value();
    node = this->traps->get(sig_num, nullptr);
    if (node != nullptr) {
      run_list->append(node);
    }
  }
  signals->clear();
  this->signal_safe->ReuseEmptyList(signals);
  return run_list;
}

int _GetSignalNumber(Str* sig_spec) {
  StackRoots _roots({&sig_spec});

  if ((str_equals(sig_spec->strip(), str1017) || str_equals(sig_spec->strip(), str1018) || str_equals(sig_spec->strip(), str1019) || str_equals(sig_spec->strip(), str1020) || str_equals(sig_spec->strip(), str1021) || str_equals(sig_spec->strip(), str1022) || str_equals(sig_spec->strip(), str1023) || str_equals(sig_spec->strip(), str1024))) {
    return to_int(sig_spec);
  }
  if (sig_spec->startswith(str1025)) {
    sig_spec = sig_spec->slice(3);
  }
  return signal_def::GetNumber(sig_spec);
}
GLOBAL_LIST(Str*, 4, _HOOK_NAMES, {str1026 COMMA str1027 COMMA str1028 COMMA str1029});

Trap::Trap(builtin_trap::TrapState* trap_state, parse_lib::ParseContext* parse_ctx, dev::Tracer* tracer, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Trap::field_mask();
  this->trap_state = trap_state;
  this->parse_ctx = parse_ctx;
  this->arena = parse_ctx->arena;
  this->tracer = tracer;
  this->errfmt = errfmt;
}

syntax_asdl::command_t* Trap::_ParseTrapCode(Str* code_str) {
  reader::FileLineReader* line_reader = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  syntax_asdl::source__ArgvWord* src = nullptr;
  syntax_asdl::command_t* node = nullptr;
  StackRoots _roots({&code_str, &line_reader, &c_parser, &src, &node});

  line_reader = reader::StringLineReader(code_str, this->arena);
  c_parser = this->parse_ctx->MakeOshParser(line_reader);
  src = Alloc<source::ArgvWord>(str1030, runtime::NO_SPID);
  {  // with
    alloc::ctx_Location ctx{this->arena, src};

    try {
      node = main_loop::ParseWholeFile(c_parser);
    }
    catch (error::Parse* e) {
      this->errfmt->PrettyPrintError(e);
      return nullptr;
    }
  }
  return node;
}

int Trap::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  args::_Attributes* attrs = nullptr;
  args::Reader* arg_r = nullptr;
  arg_types::trap* arg = nullptr;
  Str* code_str = nullptr;
  Str* sig_spec = nullptr;
  int sig_spid;
  Str* sig_key = nullptr;
  int sig_num;
  syntax_asdl::command_t* node = nullptr;
  StackRoots _roots({&cmd_val, &attrs, &arg_r, &arg, &code_str, &sig_spec, &sig_key, &node});

  Tuple2<args::_Attributes*, args::Reader*> tup0 = flag_spec::ParseCmdVal(str1031, cmd_val);
  attrs = tup0.at0();
  arg_r = tup0.at1();
  arg = Alloc<arg_types::trap>(attrs->attrs);
  if (arg->p) {
    for (DictIter<Str*, syntax_asdl::command_t*> it(this->trap_state->hooks); !it.Done(); it.Next()) {
      Str* name = it.Key();
      syntax_asdl::command_t* _ = it.Value();
      print(StrFormat("%s TrapState", name));
    }
    for (DictIter<int, syntax_asdl::command_t*> it(this->trap_state->traps); !it.Done(); it.Next()) {
      int sig_num = it.Key();
      syntax_asdl::command_t* _ = it.Value();
      print(StrFormat("%d TrapState", sig_num));
    }
    return 0;
  }
  if (arg->l) {
    for (ListIter<Str*> it(_HOOK_NAMES); !it.Done(); it.Next()) {
      Str* name = it.Value();
      StackRoots _for({&name    });
      print(StrFormat("   %s", name));
    }
    signal_def::PrintSignals();
    return 0;
  }
  code_str = arg_r->ReadRequired(str1035);
  Tuple2<Str*, int> tup1 = arg_r->ReadRequired2(str1036);
  sig_spec = tup1.at0();
  sig_spid = tup1.at1();
  sig_key = nullptr;
  sig_num = signal_def::NO_SIGNAL;
  if (list_contains(_HOOK_NAMES, sig_spec)) {
    sig_key = sig_spec;
  }
  else {
    if (str_equals(sig_spec, str1037)) {
      sig_key = str1038;
    }
    else {
      sig_num = _GetSignalNumber(sig_spec);
      if (sig_num != signal_def::NO_SIGNAL) {
        sig_key = str(sig_num);
      }
    }
  }
  if (sig_key == nullptr) {
    this->errfmt->Print_(StrFormat("Invalid signal or hook %r", sig_spec), cmd_val->arg_spids->index_(2));
    return 1;
  }
  if (str_equals(code_str, str1040)) {
    if (list_contains(_HOOK_NAMES, sig_key)) {
      this->trap_state->RemoveUserHook(sig_key);
      return 0;
    }
    if (sig_num != signal_def::NO_SIGNAL) {
      this->trap_state->RemoveUserTrap(sig_num);
      return 0;
    }
    assert(0);  // AssertionError
  }
  node = this->_ParseTrapCode(code_str);
  if (node == nullptr) {
    return 1;
  }
  if (list_contains(_HOOK_NAMES, sig_key)) {
    if ((str_equals(sig_key, str1042) || str_equals(sig_key, str1043) || str_equals(sig_key, str1044))) {
      print_stderr(StrFormat("osh warning: The %r hook isn't implemented", sig_spec));
    }
    this->trap_state->AddUserHook(sig_key, node);
    return 0;
  }
  if (sig_num != signal_def::NO_SIGNAL) {
    if ((sig_num == SIGKILL || sig_num == SIGSTOP)) {
      this->errfmt->Print_(StrFormat("Signal %r can't be handled", sig_spec), sig_spid);
      return 1;
    }
    this->trap_state->AddUserTrap(sig_num, node);
    return 0;
  }
  assert(0);  // AssertionError
}

}  // define namespace builtin_trap

namespace cmd_eval {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_str;
using option_asdl::option_i;
using syntax_asdl::assign_op_e;
using syntax_asdl::compound_word;
using syntax_asdl::command_e;
using syntax_asdl::command_t;
using syntax_asdl::command__AndOr;
using syntax_asdl::command__Case;
using syntax_asdl::command__CommandList;
using syntax_asdl::command__ControlFlow;
using syntax_asdl::command__DBracket;
using syntax_asdl::command__DoGroup;
using syntax_asdl::command__DParen;
using syntax_asdl::command__ExpandedAlias;
using syntax_asdl::command__Expr;
using syntax_asdl::command__ForEach;
using syntax_asdl::command__ForExpr;
using syntax_asdl::command__If;
using syntax_asdl::command__NoOp;
using syntax_asdl::command__Pipeline;
using syntax_asdl::command__PlaceMutation;
using syntax_asdl::command__Proc;
using syntax_asdl::command__Sentence;
using syntax_asdl::command__ShAssignment;
using syntax_asdl::command__ShFunction;
using syntax_asdl::command__Simple;
using syntax_asdl::command__Subshell;
using syntax_asdl::command__TimeBlock;
using syntax_asdl::command__VarDecl;
using syntax_asdl::command__WhileUntil;
using syntax_asdl::condition_e;
using syntax_asdl::condition_t;
using syntax_asdl::condition__Shell;
using syntax_asdl::condition__Oil;
using syntax_asdl::BraceGroup;
using syntax_asdl::ArgList;
using syntax_asdl::expr_t;
using syntax_asdl::place_expr__Var;
using syntax_asdl::proc_sig_e;
using syntax_asdl::proc_sig__Closed;
using syntax_asdl::redir_param_e;
using syntax_asdl::redir_param__HereDoc;
using syntax_asdl::proc_sig;
using syntax_asdl::for_iter_e;
using syntax_asdl::for_iter__Words;
using syntax_asdl::for_iter__Oil;
using syntax_asdl::Token;
using syntax_asdl::loc;
using runtime_asdl::lvalue_e;
using runtime_asdl::lvalue__ObjIndex;
using runtime_asdl::lvalue__ObjAttr;
using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value_t;
using runtime_asdl::value__Str;
using runtime_asdl::value__MaybeStrArray;
using runtime_asdl::redirect;
using runtime_asdl::redirect_arg;
using runtime_asdl::scope_e;
using runtime_asdl::cmd_value_e;
using runtime_asdl::cmd_value__Argv;
using runtime_asdl::cmd_value__Assign;
using runtime_asdl::CommandStatus;
using runtime_asdl::StatusArray;
using runtime_asdl::Proc;
using runtime_asdl::flow_e;
using types_asdl::redir_arg_type_e;
using pyerror::e_die;
using pyerror::e_die_status;
int IsMainProgram = (1 << 0);
int RaiseControlFlow = (1 << 1);
int Optimize = (1 << 2);
Dict<Str*, Str*> gdict0(std::initializer_list<Str*>{}, std::initializer_list<Str*>{});
Dict<Str*, Str*>* OIL_TYPE_NAMES = &gdict0;

Deps::Deps() 
    : header_(obj_header()) {
  this->mutable_opts = nullptr;
  this->dumper = nullptr;
  this->debug_f = nullptr;
}

int _PackFlags(int keyword_id, int flags) {
  return ((keyword_id << 8) | flags);
}

bool _HasManyStatuses(syntax_asdl::command_t* node) {
  syntax_asdl::command_t* UP_node = nullptr;
  StackRoots _roots({&node, &UP_node});

  if (node->tag_() == command_e::Sentence) {
    command__Sentence* node1 = static_cast<command__Sentence*>(node);
    return _HasManyStatuses(node1->child);
  }
  UP_node = node;
  switch (node->tag_()) {
    case command_e::Simple: 
    case command_e::DBracket: 
    case command_e::DParen: {
      return false;
    }
      break;
    case command_e::Pipeline: {
      command__Pipeline* node = static_cast<command__Pipeline*>(UP_node);
      if (len(node->children) == 1) {
        return _HasManyStatuses(node->children->index_(0));
      }
      else {
        return true;
      }
    }
      break;
  }
  return true;
}

runtime_asdl::value_t* PlusEquals(runtime_asdl::value_t* old_val, runtime_asdl::value_t* val) {
  runtime_asdl::value_t* UP_old_val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  int old_tag;
  int tag;
  List<Str*>* strs = nullptr;
  StackRoots _roots({&old_val, &val, &UP_old_val, &UP_val, &strs});

  UP_old_val = old_val;
  UP_val = val;
  old_tag = old_val->tag_();
  tag = val->tag_();
  if ((old_tag == value_e::Undef and tag == value_e::Str)) {
    ;  // pass
  }
  else {
    if ((old_tag == value_e::Undef and tag == value_e::MaybeStrArray)) {
      ;  // pass
    }
    else {
      if ((old_tag == value_e::Str and tag == value_e::Str)) {
        value__Str* old_val = static_cast<value__Str*>(UP_old_val);
        value__Str* str_to_append = static_cast<value__Str*>(UP_val);
        val = Alloc<value::Str>(str_concat(old_val->s, str_to_append->s));
      }
      else {
        if ((old_tag == value_e::Str and tag == value_e::MaybeStrArray)) {
          e_die(str1048);
        }
        else {
          if ((old_tag == value_e::MaybeStrArray and tag == value_e::Str)) {
            e_die(str1049);
          }
          else {
            if ((old_tag == value_e::MaybeStrArray and tag == value_e::MaybeStrArray)) {
              value__MaybeStrArray* old_val = static_cast<value__MaybeStrArray*>(UP_old_val);
              value__MaybeStrArray* to_append = static_cast<value__MaybeStrArray*>(UP_val);
              strs = Alloc<List<Str*>>();
              strs->extend(old_val->strs);
              strs->extend(to_append->strs);
              val = Alloc<value::MaybeStrArray>(strs);
            }
          }
        }
      }
    }
  }
  return val;
}

ctx_LoopLevel::ctx_LoopLevel(cmd_eval::CommandEvaluator* cmd_ev) 
    : header_(obj_header()) {
  cmd_ev->loop_level += 1;
  this->cmd_ev = cmd_ev;
}

ctx_LoopLevel::~ctx_LoopLevel(){
  this->cmd_ev->loop_level -= 1;
}

CommandEvaluator::CommandEvaluator(state::Mem* mem, optview::Exec* exec_opts, ui::ErrorFormatter* errfmt, Dict<Str*, runtime_asdl::Proc*>* procs, Dict<int, vm::_AssignBuiltin*>* assign_builtins, alloc::Arena* arena, cmd_eval::Deps* cmd_deps, builtin_trap::TrapState* trap_state, pyos::SignalSafe* signal_safe) 
    : header_(obj_header()) {
  this->shell_ex = nullptr;
  this->arith_ev = nullptr;
  this->bool_ev = nullptr;
  this->expr_ev = nullptr;
  this->word_ev = nullptr;
  this->tracer = nullptr;
  this->mem = mem;
  this->exec_opts = exec_opts;
  this->errfmt = errfmt;
  this->procs = procs;
  this->assign_builtins = assign_builtins;
  this->arena = arena;
  this->mutable_opts = cmd_deps->mutable_opts;
  this->dumper = cmd_deps->dumper;
  this->debug_f = cmd_deps->debug_f;
  this->trap_state = trap_state;
  this->signal_safe = signal_safe;
  this->loop_level = 0;
  this->check_command_sub_status = false;
}

void CommandEvaluator::CheckCircularDeps() {
}

int CommandEvaluator::_RunAssignBuiltin(runtime_asdl::cmd_value__Assign* cmd_val) {
  vm::_AssignBuiltin* builtin_func = nullptr;
  int status;
  Str* arg0 = nullptr;
  StackRoots _roots({&cmd_val, &builtin_func, &arg0});

  builtin_func = this->assign_builtins->get(cmd_val->builtin_id);
  if (builtin_func == nullptr) {
    e_die(StrFormat("Assignment builtin %r not configured", cmd_val->argv->index_(0)), Alloc<loc::Span>(cmd_val->arg_spids->index_(0)));
  }
  {  // with
    vm::ctx_FlushStdout ctx{};

    {  // with
      ui::ctx_Location ctx{this->errfmt, cmd_val->arg_spids->index_(0)};

      try {
        status = builtin_func->Run(cmd_val);
      }
      catch (error::Usage* e) {
        arg0 = cmd_val->argv->index_(0);
        if (e->span_id == runtime::NO_SPID) {
          e->span_id = this->errfmt->CurrentLocation();
        }
        this->errfmt->PrefixPrint(e->msg, StrFormat("%r ", arg0), Alloc<loc::Span>(e->span_id));
        status = 2;
      }
    }
  }
  return status;
}

int CommandEvaluator::_SpanIdForShAssignment(syntax_asdl::command__ShAssignment* node) {
  StackRoots _roots({&node});

  return node->spids->index_(0);
}

void CommandEvaluator::_CheckStatus(int status, runtime_asdl::CommandStatus* cmd_st, syntax_asdl::command_t* node, int blame_spid) {
  syntax_asdl::command_t* UP_node = nullptr;
  Str* desc = nullptr;
  int span_id;
  Str* msg = nullptr;
  StackRoots _roots({&cmd_st, &node, &UP_node, &desc, &msg});

  if ((this->exec_opts->errexit() and status != 0)) {
    UP_node = node;
    switch (node->tag_()) {
      case command_e::Simple: {
        command__Simple* node = static_cast<command__Simple*>(UP_node);
        desc = str1052;
        span_id = location::SpanForCommand(node);
      }
        break;
      case command_e::ShAssignment: {
        command__ShAssignment* node = static_cast<command__ShAssignment*>(UP_node);
        cmd_st->show_code = true;
        desc = str1053;
        span_id = this->_SpanIdForShAssignment(node);
      }
        break;
      case command_e::Subshell: {
        command__Subshell* node = static_cast<command__Subshell*>(UP_node);
        cmd_st->show_code = true;
        desc = str1054;
        span_id = node->spids->index_(0);
      }
        break;
      case command_e::Pipeline: {
        command__Pipeline* node = static_cast<command__Pipeline*>(UP_node);
        cmd_st->show_code = true;
        desc = str1055;
        span_id = node->spids->index_(0);
      }
        break;
      default: {
        desc = ui::CommandType(node);
        span_id = runtime::NO_SPID;
      }
    }
    if (blame_spid != runtime::NO_SPID) {
      span_id = blame_spid;
    }
    msg = StrFormat("%s failed with status %d", desc, status);
    throw Alloc<error::ErrExit>(status, msg, Alloc<loc::Span>(span_id), cmd_st->show_code);
  }
}

runtime_asdl::redirect* CommandEvaluator::_EvalRedirect(syntax_asdl::redir* r) {
  runtime_asdl::redirect* result = nullptr;
  syntax_asdl::redir_param_t* arg = nullptr;
  syntax_asdl::redir_param_t* UP_arg = nullptr;
  types_asdl::redir_arg_type_t redir_type;
  runtime_asdl::value__Str* val = nullptr;
  Str* filename = nullptr;
  Str* t = nullptr;
  int target_fd;
  syntax_asdl::compound_word* w = nullptr;
  StackRoots _roots({&r, &result, &arg, &UP_arg, &val, &filename, &t, &w});

  result = Alloc<redirect>(r->op->id, r->op->span_id, r->loc, nullptr);
  arg = r->arg;
  UP_arg = arg;
  switch (arg->tag_()) {
    case redir_param_e::Word: {
      compound_word* arg_word = static_cast<compound_word*>(UP_arg);
      this->mem->SetCurrentSpanId(r->op->span_id);
      redir_type = consts::RedirArgType(r->op->id);
      if (redir_type == redir_arg_type_e::Path) {
        val = this->word_ev->EvalWordToString(arg_word);
        filename = val->s;
        if (len(filename) == 0) {
          throw Alloc<error::RedirectEval>(str1057, Alloc<loc::Word>(arg_word));
        }
        result->arg = Alloc<redirect_arg::Path>(filename);
        return result;
      }
      else {
        if (redir_type == redir_arg_type_e::Desc) {
          val = this->word_ev->EvalWordToString(arg_word);
          t = val->s;
          if (len(t) == 0) {
            throw Alloc<error::RedirectEval>(str1058, Alloc<loc::Word>(arg_word));
            return nullptr;
          }
          try {
            if (str_equals(t, str1059)) {
              result->arg = Alloc<redirect_arg::CloseFd>();
            }
            else {
              if (str_equals(t->index_(-1), str1060)) {
                target_fd = to_int(t->slice(0, -1));
                result->arg = Alloc<redirect_arg::MoveFd>(target_fd);
              }
              else {
                result->arg = Alloc<redirect_arg::CopyFd>(to_int(t));
              }
            }
          }
          catch (ValueError*) {
            throw Alloc<error::RedirectEval>(StrFormat("Invalid descriptor %r.  Expected D, -, or D- where D is an integer", t), Alloc<loc::Word>(arg_word));
            return nullptr;
          }
          return result;
        }
        else {
          if (redir_type == redir_arg_type_e::Here) {
            val = this->word_ev->EvalWordToString(arg_word);
            result->arg = Alloc<redirect_arg::HereDoc>(str_concat(val->s, str1062));
            return result;
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
    }
      break;
    case redir_param_e::HereDoc: {
      redir_param__HereDoc* arg = static_cast<redir_param__HereDoc*>(UP_arg);
      w = Alloc<compound_word>(arg->stdin_parts);
      val = this->word_ev->EvalWordToString(w);
      result->arg = Alloc<redirect_arg::HereDoc>(val->s);
      return result;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  assert(0);  // AssertionError
}

List<runtime_asdl::redirect*>* CommandEvaluator::_EvalRedirects(syntax_asdl::command_t* node) {
  syntax_asdl::command_t* UP_node = nullptr;
  List<syntax_asdl::redir*>* redirects = nullptr;
  List<runtime_asdl::redirect*>* result = nullptr;
  StackRoots _roots({&node, &UP_node, &redirects, &result});

  UP_node = node;
  switch (node->tag_()) {
    case command_e::Simple: {
      command__Simple* node = static_cast<command__Simple*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::ExpandedAlias: {
      command__ExpandedAlias* node = static_cast<command__ExpandedAlias*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::ShAssignment: {
      command__ShAssignment* node = static_cast<command__ShAssignment*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::BraceGroup: {
      BraceGroup* node = static_cast<BraceGroup*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::Subshell: {
      command__Subshell* node = static_cast<command__Subshell*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::DParen: {
      command__DParen* node = static_cast<command__DParen*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::DBracket: {
      command__DBracket* node = static_cast<command__DBracket*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::ForEach: {
      command__ForEach* node = static_cast<command__ForEach*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::ForExpr: {
      command__ForExpr* node = static_cast<command__ForExpr*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::WhileUntil: {
      command__WhileUntil* node = static_cast<command__WhileUntil*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::If: {
      command__If* node = static_cast<command__If*>(UP_node);
      redirects = node->redirects;
    }
      break;
    case command_e::Case: {
      command__Case* node = static_cast<command__Case*>(UP_node);
      redirects = node->redirects;
    }
      break;
    default: {
      redirects = Alloc<List<syntax_asdl::redir*>>();
    }
  }
  result = Alloc<List<runtime_asdl::redirect*>>();
  for (ListIter<syntax_asdl::redir*> it(redirects); !it.Done(); it.Next()) {
    syntax_asdl::redir* redir = it.Value();
    StackRoots _for({&redir  });
    result->append(this->_EvalRedirect(redir));
  }
  return result;
}

int CommandEvaluator::_RunSimpleCommand(runtime_asdl::cmd_value_t* cmd_val, runtime_asdl::CommandStatus* cmd_st, bool do_fork) {
  runtime_asdl::cmd_value_t* UP_cmd_val = nullptr;
  StackRoots _roots({&cmd_val, &cmd_st, &UP_cmd_val});

  UP_cmd_val = cmd_val;
  switch (UP_cmd_val->tag_()) {
    case cmd_value_e::Argv: {
      cmd_value__Argv* cmd_val = static_cast<cmd_value__Argv*>(UP_cmd_val);
      this->tracer->OnSimpleCommand(cmd_val->argv);
      return this->shell_ex->RunSimpleCommand(cmd_val, cmd_st, do_fork);
    }
      break;
    case cmd_value_e::Assign: {
      cmd_value__Assign* cmd_val = static_cast<cmd_value__Assign*>(UP_cmd_val);
      this->tracer->OnAssignBuiltin(cmd_val);
      return this->_RunAssignBuiltin(cmd_val);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

void CommandEvaluator::_EvalTempEnv(List<syntax_asdl::env_pair*>* more_env, int flags) {
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&more_env, &val});

  for (ListIter<syntax_asdl::env_pair*> it(more_env); !it.Done(); it.Next()) {
    syntax_asdl::env_pair* e_pair = it.Value();
    StackRoots _for({&e_pair  });
    val = this->word_ev->EvalRhsWord(e_pair->val);
    this->mem->SetValue(location::LName(e_pair->name), val, scope_e::LocalOnly, flags);
  }
}

void CommandEvaluator::_StrictErrExit(syntax_asdl::command_t* node) {
  Str* node_str = nullptr;
  StackRoots _roots({&node, &node_str});

  if (!(this->exec_opts->errexit() and this->exec_opts->strict_errexit())) {
    return ;
  }
  if (_HasManyStatuses(node)) {
    node_str = ui::CommandType(node);
    e_die(StrFormat("strict_errexit only allows simple commands in conditionals (got %s). ", node_str), Alloc<loc::Span>(location::SpanForCommand(node)));
  }
}

void CommandEvaluator::_StrictErrExitList(List<syntax_asdl::command_t*>* node_list) {
  syntax_asdl::command_t* node = nullptr;
  Str* node_str = nullptr;
  StackRoots _roots({&node_list, &node, &node_str});

  if (!(this->exec_opts->errexit() and this->exec_opts->strict_errexit())) {
    return ;
  }
  if (len(node_list) > 1) {
    e_die(str1067, Alloc<loc::Span>(location::SpanForCommand(node_list->index_(0))));
  }
  node = node_list->index_(0);
  if (_HasManyStatuses(node)) {
    node_str = ui::CommandType(node);
    e_die(StrFormat("strict_errexit only allows simple commands in conditionals (got %s). ", node_str), Alloc<loc::Span>(location::SpanForCommand(node)));
  }
}

bool CommandEvaluator::_EvalCondition(syntax_asdl::condition_t* cond, int spid) {
  bool b;
  syntax_asdl::condition_t* UP_cond = nullptr;
  int cond_status;
  StackRoots _roots({&cond, &UP_cond});

  b = false;
  UP_cond = cond;
  switch (cond->tag_()) {
    case condition_e::Shell: {
      condition__Shell* cond = static_cast<condition__Shell*>(UP_cond);
      this->_StrictErrExitList(cond->commands);
      {  // with
        state::ctx_ErrExit ctx{this->mutable_opts, false, spid};

        cond_status = this->_ExecuteList(cond->commands);
      }
      b = cond_status == 0;
    }
      break;
    case condition_e::Oil: {
    }
      break;
  }
  return b;
}

int CommandEvaluator::_Dispatch(syntax_asdl::command_t* node, runtime_asdl::CommandStatus* cmd_st) {
  syntax_asdl::command_t* UP_node = nullptr;
  int span_id;
  List<syntax_asdl::compound_word*>* words = nullptr;
  runtime_asdl::cmd_value_t* cmd_val = nullptr;
  runtime_asdl::cmd_value_t* UP_cmd_val = nullptr;
  syntax_asdl::ArgList* typed_args = nullptr;
  syntax_asdl::ArgList* orig = nullptr;
  bool is_other_special;
  int status;
  int left_spid;
  bool result;
  int i;
  runtime_asdl::scope_t which_scopes;
  int spid;
  runtime_asdl::value_t* rhs = nullptr;
  runtime_asdl::lvalue_t* lval = nullptr;
  runtime_asdl::value_t* old_val = nullptr;
  runtime_asdl::value_t* val = nullptr;
  int flags;
  int last_status;
  syntax_asdl::Token* tok = nullptr;
  runtime_asdl::value__Str* str_val = nullptr;
  int arg;
  bool ok;
  Str* msg = nullptr;
  syntax_asdl::command_t* left = nullptr;
  int n;
  syntax_asdl::command_t* child = nullptr;
  int op_id;
  bool b;
  runtime_asdl::flow_t action;
  List<Str*>* iter_list = nullptr;
  syntax_asdl::expr_t* iter_expr = nullptr;
  syntax_asdl::Token* iter_blame = nullptr;
  syntax_asdl::for_iter_t* iterable = nullptr;
  syntax_asdl::for_iter_t* UP_iterable = nullptr;
  syntax_asdl::Token* iter_expr_blame = nullptr;
  runtime_asdl::lvalue__Named* i_name = nullptr;
  runtime_asdl::lvalue__Named* val_name = nullptr;
  int index;
  syntax_asdl::arith_expr_t* init = nullptr;
  syntax_asdl::arith_expr_t* for_cond = nullptr;
  syntax_asdl::command_t* body = nullptr;
  syntax_asdl::arith_expr_t* update = nullptr;
  int cond_int;
  List<runtime_asdl::value_t*>* defaults = nullptr;
  bool done;
  Str* to_match = nullptr;
  runtime_asdl::value__Str* pat_val = nullptr;
  double s_real;
  double s_user;
  double s_sys;
  double e_real;
  double e_user;
  double e_sys;
  StackRoots _roots({&node, &cmd_st, &UP_node, &words, &cmd_val, &UP_cmd_val, &typed_args, &orig, &rhs, &lval, &old_val, &val, &tok, &str_val, &msg, &left, &child, &iter_list, &iter_expr, &iter_blame, &iterable, &UP_iterable, &iter_expr_blame, &i_name, &val_name, &init, &for_cond, &body, &update, &defaults, &to_match, &pat_val});

  this->check_command_sub_status = false;
  UP_node = node;
  switch (node->tag_()) {
    case command_e::Simple: {
      command__Simple* node = static_cast<command__Simple*>(UP_node);
      cmd_st->check_errexit = true;
      if (len(node->words)) {
        span_id = word_::LeftMostSpanForWord(node->words->index_(0));
        if (span_id != runtime::NO_SPID) {
          this->mem->SetCurrentSpanId(span_id);
        }
      }
      words = braces::BraceExpandWords(node->words);
      cmd_val = this->word_ev->EvalWordSequence2(words, true);
      UP_cmd_val = cmd_val;
      if (UP_cmd_val->tag_() == cmd_value_e::Argv) {
        cmd_value__Argv* cmd_val = static_cast<cmd_value__Argv*>(UP_cmd_val);
        if (len(cmd_val->argv)) {
          this->mem->SetLastArgument(cmd_val->argv->index_(-1));
        }
        else {
          this->mem->SetLastArgument(str1069);
        }
        typed_args = nullptr;
        if (node->typed_args) {
          orig = node->typed_args;
          typed_args = Alloc<ArgList>(orig->left, list(orig->positional), orig->named, orig->right);
          if (node->block) {
            typed_args->positional->append(node->block);
          }
        }
        else {
          if (node->block) {
            typed_args = ArgList::Create();
            typed_args->positional->append(node->block);
            typed_args->left = node->block->brace_group->left;
            typed_args->right = node->block->brace_group->right;
          }
        }
        cmd_val->typed_args = typed_args;
      }
      else {
        if (node->block) {
          e_die(str1070, node->block->brace_group->left);
        }
        cmd_value__Assign* cmd_val = static_cast<cmd_value__Assign*>(UP_cmd_val);
      }
      if (len(node->more_env)) {
        is_other_special = false;
        if ((cmd_val->tag_() == cmd_value_e::Assign or is_other_special)) {
          this->_EvalTempEnv(node->more_env, 0);
          status = this->_RunSimpleCommand(cmd_val, cmd_st, node->do_fork);
        }
        else {
          {  // with
            state::ctx_Temp ctx{this->mem};

            this->_EvalTempEnv(node->more_env, state::SetExport);
            status = this->_RunSimpleCommand(cmd_val, cmd_st, node->do_fork);
          }
        }
      }
      else {
        status = this->_RunSimpleCommand(cmd_val, cmd_st, node->do_fork);
      }
    }
      break;
    case command_e::ExpandedAlias: {
      command__ExpandedAlias* node = static_cast<command__ExpandedAlias*>(UP_node);
      if (len(node->more_env)) {
        {  // with
          state::ctx_Temp ctx{this->mem};

          this->_EvalTempEnv(node->more_env, state::SetExport);
          status = this->_Execute(node->child);
        }
      }
      else {
        status = this->_Execute(node->child);
      }
    }
      break;
    case command_e::Sentence: {
      command__Sentence* node = static_cast<command__Sentence*>(UP_node);
      if (node->terminator->id == Id::Op_Semi) {
        status = this->_Execute(node->child);
      }
      else {
        status = this->shell_ex->RunBackgroundJob(node->child);
      }
    }
      break;
    case command_e::Pipeline: {
      command__Pipeline* node = static_cast<command__Pipeline*>(UP_node);
      cmd_st->check_errexit = true;
      if (len(node->stderr_indices)) {
        e_die(str1071, Alloc<loc::Span>(node->spids->index_(0)));
      }
      this->mem->SetLastArgument(str1072);
      if (node->negated) {
        this->_StrictErrExit(node);
        cmd_st->pipe_negated = true;
        {  // with
          state::ctx_ErrExit ctx{this->mutable_opts, false, node->spids->index_(0)};

          this->shell_ex->RunPipeline(node, cmd_st);
        }
        cmd_st->check_errexit = false;
      }
      else {
        this->shell_ex->RunPipeline(node, cmd_st);
      }
      status = -1;
    }
      break;
    case command_e::Subshell: {
      command__Subshell* node = static_cast<command__Subshell*>(UP_node);
      cmd_st->check_errexit = true;
      status = this->shell_ex->RunSubshell(node->child);
    }
      break;
    case command_e::DBracket: {
      command__DBracket* node = static_cast<command__DBracket*>(UP_node);
      left_spid = node->spids->index_(0);
      this->mem->SetCurrentSpanId(left_spid);
      this->tracer->PrintSourceCode(left_spid, node->spids->index_(1), this->arena);
      cmd_st->check_errexit = true;
      cmd_st->show_code = true;
      result = this->bool_ev->EvalB(node->expr);
      status = result ? 0 : 1;
    }
      break;
    case command_e::DParen: {
      command__DParen* node = static_cast<command__DParen*>(UP_node);
      left_spid = node->spids->index_(0);
      this->mem->SetCurrentSpanId(left_spid);
      this->tracer->PrintSourceCode(left_spid, node->spids->index_(1), this->arena);
      cmd_st->check_errexit = true;
      cmd_st->show_code = true;
      i = this->arith_ev->EvalToInt(node->child);
      status = i == 0 ? 1 : 0;
    }
      break;
    case command_e::VarDecl: {
      command__VarDecl* node = static_cast<command__VarDecl*>(UP_node);
      status = 0;
    }
      break;
    case command_e::PlaceMutation: {
      status = 0;
    }
      break;
    case command_e::ShAssignment: {
      command__ShAssignment* node = static_cast<command__ShAssignment*>(UP_node);
      which_scopes = this->mem->ScopesForWriting();
      for (ListIter<syntax_asdl::assign_pair*> it(node->pairs); !it.Done(); it.Next()) {
        syntax_asdl::assign_pair* pair = it.Value();
        StackRoots _for({&pair      });
        spid = pair->spids->index_(0);
        this->mem->SetCurrentSpanId(spid);
        if (pair->op == assign_op_e::PlusEqual) {
          rhs = this->word_ev->EvalRhsWord(pair->rhs);
          lval = this->arith_ev->EvalShellLhs(pair->lhs, which_scopes);
          old_val = sh_expr_eval::OldValue(lval, this->mem, nullptr);
          val = PlusEquals(old_val, rhs);
        }
        else {
          lval = this->arith_ev->EvalShellLhs(pair->lhs, which_scopes);
          if (pair->rhs) {
            val = this->word_ev->EvalRhsWord(pair->rhs);
          }
          else {
            val = nullptr;
          }
        }
        flags = 0;
        this->mem->SetValue(lval, val, which_scopes, flags);
        this->tracer->OnShAssignment(lval, pair->op, val, flags, which_scopes);
      }
      if (this->check_command_sub_status) {
        last_status = this->mem->LastStatus();
        this->_CheckStatus(last_status, cmd_st, node, runtime::NO_SPID);
        status = last_status;
      }
      else {
        status = 0;
      }
    }
      break;
    case command_e::Expr: {
      command__Expr* node = static_cast<command__Expr*>(UP_node);
      status = 0;
    }
      break;
    case command_e::ControlFlow: {
      command__ControlFlow* node = static_cast<command__ControlFlow*>(UP_node);
      tok = node->token;
      if (node->arg_word) {
        str_val = this->word_ev->EvalWordToString(node->arg_word);
        if ((len(str_val->s) == 0 and !this->exec_opts->strict_control_flow())) {
          arg = 0;
        }
        else {
          try {
            arg = to_int(str_val->s);
          }
          catch (ValueError*) {
            e_die(StrFormat("%r expected a number, got %r", node->token->tval, str_val->s), Alloc<loc::Word>(node->arg_word));
          }
        }
      }
      else {
        if ((tok->id == Id::ControlFlow_Exit || tok->id == Id::ControlFlow_Return)) {
          arg = this->mem->LastStatus();
        }
        else {
          arg = 1;
        }
      }
      this->tracer->OnControlFlow(tok->tval, arg);
      ok = true;
      if (((tok->id == Id::ControlFlow_Break || tok->id == Id::ControlFlow_Continue) and this->loop_level == 0)) {
        ok = false;
      }
      if (ok) {
        if (tok->id == Id::ControlFlow_Exit) {
          throw Alloc<util::UserExit>(arg);
        }
        else {
          throw Alloc<vm::ControlFlow>(tok, arg);
        }
      }
      else {
        msg = str1074;
        if (this->exec_opts->strict_control_flow()) {
          e_die(msg, tok);
        }
        else {
          this->errfmt->PrefixPrint(msg, str1075, tok);
          status = 0;
        }
      }
    }
      break;
    case command_e::CommandList: {
      command__CommandList* node = static_cast<command__CommandList*>(UP_node);
      status = this->_ExecuteList(node->children);
      cmd_st->check_errexit = false;
    }
      break;
    case command_e::DoGroup: {
      command__DoGroup* node = static_cast<command__DoGroup*>(UP_node);
      status = this->_ExecuteList(node->children);
      cmd_st->check_errexit = false;
    }
      break;
    case command_e::BraceGroup: {
      BraceGroup* node = static_cast<BraceGroup*>(UP_node);
      status = this->_ExecuteList(node->children);
      cmd_st->check_errexit = false;
    }
      break;
    case command_e::AndOr: {
      command__AndOr* node = static_cast<command__AndOr*>(UP_node);
      left = node->children->index_(0);
      this->_StrictErrExit(left);
      {  // with
        state::ctx_ErrExit ctx{this->mutable_opts, false, node->spids->index_(0)};

        status = this->_Execute(left);
      }
      i = 1;
      n = len(node->children);
      while (i < n) {
        child = node->children->index_(i);
        op_id = node->ops->index_((i - 1));
        if ((op_id == Id::Op_DPipe and status == 0)) {
          i += 1;
          continue;
        }
        else {
          if ((op_id == Id::Op_DAmp and status != 0)) {
            i += 1;
            continue;
          }
        }
        if (i == (n - 1)) {
          status = this->_Execute(child);
          cmd_st->check_errexit = true;
        }
        else {
          this->_StrictErrExit(child);
          {  // with
            state::ctx_ErrExit ctx{this->mutable_opts, false, node->spids->index_(i)};

            status = this->_Execute(child);
          }
        }
        i += 1;
      }
    }
      break;
    case command_e::WhileUntil: {
      command__WhileUntil* node = static_cast<command__WhileUntil*>(UP_node);
      status = 0;
      {  // with
        ctx_LoopLevel ctx{this};

        while (true) {
          try {
            b = this->_EvalCondition(node->cond, node->spids->index_(0));
            if (node->keyword->id == Id::KW_Until) {
              b = !b;
            }
            if (!b) {
              break;
            }
            status = this->_Execute(node->body);
          }
          catch (vm::ControlFlow* e) {
            status = 0;
            action = e->HandleLoop();
            if (action == flow_e::Break) {
              break;
            }
            else {
              if (action == flow_e::Raise) {
                throw ;
              }
            }
          }
        }
      }
    }
      break;
    case command_e::ForEach: {
      command__ForEach* node = static_cast<command__ForEach*>(UP_node);
      this->mem->SetCurrentSpanId(node->spids->index_(0));
      iter_list = nullptr;
      iter_expr = nullptr;
      iter_blame = nullptr;
      iterable = node->iterable;
      UP_iterable = iterable;
      switch (node->iterable->tag_()) {
        case for_iter_e::Args: {
          iter_list = this->mem->GetArgv();
        }
          break;
        case for_iter_e::Words: {
          for_iter__Words* iterable = static_cast<for_iter__Words*>(UP_iterable);
          words = braces::BraceExpandWords(iterable->words);
          iter_list = this->word_ev->EvalWordSequence(words);
        }
          break;
        case for_iter_e::Oil: {
          for_iter__Oil* iterable = static_cast<for_iter__Oil*>(UP_iterable);
          iter_expr = iterable->e;
          iter_expr_blame = iterable->blame;
        }
          break;
      }
      status = 0;
      if (iter_list == nullptr) {
      }
      else {
        {  // with
          ctx_LoopLevel ctx{this};

          n = len(node->iter_names);
          if (n == 1) {
            i_name = nullptr;
            val_name = location::LName(node->iter_names->index_(0));
          }
          else {
            if (n == 2) {
              i_name = location::LName(node->iter_names->index_(0));
              val_name = location::LName(node->iter_names->index_(1));
            }
            else {
              e_die_status(2, str1076, Alloc<loc::Span>(node->spids->index_(0)));
            }
          }
          index = 0;
          for (ListIter<Str*> it(iter_list); !it.Done(); it.Next()) {
            Str* x = it.Value();
            StackRoots _for({&x          });
            this->mem->SetValue(val_name, Alloc<value::Str>(x), scope_e::LocalOnly);
            try {
              status = this->_Execute(node->body);
            }
            catch (vm::ControlFlow* e) {
              status = 0;
              action = e->HandleLoop();
              if (action == flow_e::Break) {
                break;
              }
              else {
                if (action == flow_e::Raise) {
                  throw ;
                }
              }
            }
            index += 1;
          }
        }
      }
    }
      break;
    case command_e::ForExpr: {
      command__ForExpr* node = static_cast<command__ForExpr*>(UP_node);
      status = 0;
      init = node->init;
      for_cond = node->cond;
      body = node->body;
      update = node->update;
      if (init) {
        this->arith_ev->Eval(init);
      }
      {  // with
        ctx_LoopLevel ctx{this};

        while (true) {
          if (for_cond) {
            cond_int = this->arith_ev->EvalToInt(for_cond);
            if (cond_int == 0) {
              break;
            }
          }
          try {
            status = this->_Execute(body);
          }
          catch (vm::ControlFlow* e) {
            status = 0;
            action = e->HandleLoop();
            if (action == flow_e::Break) {
              break;
            }
            else {
              if (action == flow_e::Raise) {
                throw ;
              }
            }
          }
          if (update) {
            this->arith_ev->Eval(update);
          }
        }
      }
    }
      break;
    case command_e::ShFunction: {
      command__ShFunction* node = static_cast<command__ShFunction*>(UP_node);
      if ((dict_contains(this->procs, node->name) and !this->exec_opts->redefine_proc())) {
        e_die(StrFormat("Function %s was already defined (redefine_proc)", node->name), Alloc<loc::Span>(node->spids->index_(1)));
      }
      this->procs->set(node->name, Alloc<Proc>(node->name, node->spids->index_(1), Alloc<proc_sig::Open>(), node->body, Alloc<List<runtime_asdl::value_t*>>(), true));
      status = 0;
    }
      break;
    case command_e::Proc: {
      command__Proc* node = static_cast<command__Proc*>(UP_node);
      if ((dict_contains(this->procs, node->name->tval) and !this->exec_opts->redefine_proc())) {
        e_die(StrFormat("Proc %s was already defined (redefine_proc)", node->name->tval), node->name);
      }
      defaults = nullptr;
      this->procs->set(node->name->tval, Alloc<Proc>(node->name->tval, node->name->span_id, node->sig, node->body, defaults, false));
      status = 0;
    }
      break;
    case command_e::If: {
      command__If* node = static_cast<command__If*>(UP_node);
      done = false;
      for (ListIter<syntax_asdl::if_arm*> it(node->arms); !it.Done(); it.Next()) {
        syntax_asdl::if_arm* if_arm = it.Value();
        StackRoots _for({&if_arm      });
        b = this->_EvalCondition(if_arm->cond, if_arm->spids->index_(0));
        if (b) {
          status = this->_ExecuteList(if_arm->action);
          done = true;
          break;
        }
      }
      if ((!done and node->else_action != nullptr)) {
        status = this->_ExecuteList(node->else_action);
      }
    }
      break;
    case command_e::NoOp: {
      command__NoOp* node = static_cast<command__NoOp*>(UP_node);
      status = 0;
    }
      break;
    case command_e::Case: {
      command__Case* node = static_cast<command__Case*>(UP_node);
      str_val = this->word_ev->EvalWordToString(node->to_match);
      to_match = str_val->s;
      status = 0;
      done = false;
      for (ListIter<syntax_asdl::case_arm*> it(node->arms); !it.Done(); it.Next()) {
        syntax_asdl::case_arm* case_arm = it.Value();
        StackRoots _for({&case_arm      });
        for (ListIter<syntax_asdl::word_t*> it(case_arm->pat_list); !it.Done(); it.Next()) {
          syntax_asdl::word_t* pat_word = it.Value();
          StackRoots _for({&pat_word        });
          pat_val = this->word_ev->EvalWordToString(pat_word, word_eval::QUOTE_FNMATCH);
          if (libc::fnmatch(pat_val->s, to_match)) {
            status = this->_ExecuteList(case_arm->action);
            done = true;
            break;
          }
        }
        if (done) {
          break;
        }
      }
    }
      break;
    case command_e::TimeBlock: {
      command__TimeBlock* node = static_cast<command__TimeBlock*>(UP_node);
      Tuple3<double, double, double> tup1 = pyos::Time();
      s_real = tup1.at0();
      s_user = tup1.at1();
      s_sys = tup1.at2();
      status = this->_Execute(node->pipeline);
      Tuple3<double, double, double> tup2 = pyos::Time();
      e_real = tup2.at0();
      e_user = tup2.at1();
      e_sys = tup2.at2();
      libc::print_time((e_real - s_real), (e_user - s_user), (e_sys - s_sys));
    }
      break;
    default: {
      FAIL(kNotImplemented);  // Python NotImplementedError
    }
  }
  return status;
}

void CommandEvaluator::RunPendingTraps() {
  List<syntax_asdl::command_t*>* trap_nodes = nullptr;
  StackRoots _roots({&trap_nodes});

  trap_nodes = this->trap_state->GetPendingTraps();
  if (len(trap_nodes)) {
    {  // with
      state::ctx_Option ctx{this->mutable_opts, NewList<int>(std::initializer_list<int>{option_i::_running_trap}), true};

      for (ListIter<syntax_asdl::command_t*> it(trap_nodes); !it.Done(); it.Next()) {
        syntax_asdl::command_t* trap_node = it.Value();
        StackRoots _for({&trap_node      });
        {  // with
          state::ctx_Registers ctx{this->mem};

          {  // with
            dev::ctx_Tracer ctx{this->tracer, str1079, nullptr};

            this->_Execute(trap_node);
          }
        }
      }
    }
  }
}

int CommandEvaluator::_Execute(syntax_asdl::command_t* node) {
  runtime_asdl::CommandStatus* cmd_st = nullptr;
  runtime_asdl::StatusArray* process_sub_st = nullptr;
  int errexit_spid;
  bool check_errexit;
  List<runtime_asdl::redirect*>* redirects = nullptr;
  int status;
  List<int>* codes = nullptr;
  int i;
  StackRoots _roots({&node, &cmd_st, &process_sub_st, &redirects, &codes});

  this->RunPendingTraps();
  // if MYCPP
  {
    if (this->signal_safe->PollSigInt()) {
      throw Alloc<KeyboardInterrupt>();
    }
  }
  // endif MYCPP
  mylib::MaybeCollect();
  cmd_st = CommandStatus::Create();
  process_sub_st = StatusArray::Create();
  errexit_spid = runtime::NO_SPID;
  check_errexit = true;
  {  // with
    vm::ctx_ProcessSub ctx{this->shell_ex, process_sub_st};

    try {
      redirects = this->_EvalRedirects(node);
    }
    catch (error::RedirectEval* e) {
      this->errfmt->PrettyPrintError(e);
      redirects = nullptr;
    }
    if (redirects == nullptr) {
      status = 1;
    }
    else {
      if (this->shell_ex->PushRedirects(redirects)) {
        {  // with
          vm::ctx_Redirect ctx{this->shell_ex};

          try {
            status = this->_Dispatch(node, cmd_st);
            check_errexit = cmd_st->check_errexit;
          }
          catch (error::FailGlob* e) {
            if (!e->HasLocation()) {
              e->location = this->mem->CurrentLocation();
            }
            this->errfmt->PrettyPrintError(e, str1080);
            status = 1;
            check_errexit = true;
          }
        }
        codes = cmd_st->pipe_status;
        if (len(codes)) {
          this->mem->SetPipeStatus(codes);
          if (this->exec_opts->pipefail()) {
            status = 0;
            i = 0;
            for (ListIter<int> it(codes); !it.Done(); it.Next(), ++i) {
              int st = it.Value();
              if (st != 0) {
                status = st;
                errexit_spid = cmd_st->pipe_spids->index_(i);
              }
            }
          }
          else {
            status = codes->index_(-1);
          }
          if (cmd_st->pipe_negated) {
            status = status == 0 ? 1 : 0;
          }
        }
      }
      else {
        status = 1;
      }
    }
  }
  if (len(process_sub_st->codes)) {
    codes = process_sub_st->codes;
    this->mem->SetProcessSubStatus(codes);
    if ((status == 0 and this->exec_opts->process_sub_fail())) {
      i = 0;
      for (ListIter<int> it(codes); !it.Done(); it.Next(), ++i) {
        int st = it.Value();
        if (st != 0) {
          status = st;
          errexit_spid = process_sub_st->spids->index_(i);
        }
      }
    }
  }
  this->mem->SetLastStatus(status);
  if (check_errexit) {
    this->_CheckStatus(status, cmd_st, node, errexit_spid);
  }
  return status;
}

int CommandEvaluator::_ExecuteList(List<syntax_asdl::command_t*>* children) {
  int status;
  StackRoots _roots({&children});

  status = 0;
  for (ListIter<syntax_asdl::command_t*> it(children); !it.Done(); it.Next()) {
    syntax_asdl::command_t* child = it.Value();
    StackRoots _for({&child  });
    status = this->_Execute(child);
  }
  return status;
}

int CommandEvaluator::LastStatus() {
  return this->mem->LastStatus();
}

void CommandEvaluator::_NoForkLast(syntax_asdl::command_t* node) {
  syntax_asdl::command_t* UP_node = nullptr;
  StackRoots _roots({&node, &UP_node});

  UP_node = node;
  switch (node->tag_()) {
    case command_e::Simple: {
      command__Simple* node = static_cast<command__Simple*>(UP_node);
      node->do_fork = false;
    }
      break;
    case command_e::Pipeline: {
      command__Pipeline* node = static_cast<command__Pipeline*>(UP_node);
      if (!node->negated) {
        this->_NoForkLast(node->children->index_(-1));
      }
    }
      break;
    case command_e::Sentence: {
      command__Sentence* node = static_cast<command__Sentence*>(UP_node);
      this->_NoForkLast(node->child);
    }
      break;
    case command_e::CommandList: {
      command__CommandList* node = static_cast<command__CommandList*>(UP_node);
      this->_NoForkLast(node->children->index_(-1));
    }
      break;
    case command_e::BraceGroup: {
      BraceGroup* node = static_cast<BraceGroup*>(UP_node);
      this->_NoForkLast(node->children->index_(-1));
    }
      break;
  }
}

syntax_asdl::command_t* CommandEvaluator::_RemoveSubshells(syntax_asdl::command_t* node) {
  syntax_asdl::command_t* UP_node = nullptr;
  StackRoots _roots({&node, &UP_node});

  UP_node = node;
  switch (node->tag_()) {
    case command_e::Subshell: {
      command__Subshell* node = static_cast<command__Subshell*>(UP_node);
      if (len(node->redirects) == 0) {
        return this->_RemoveSubshells(node->child);
      }
    }
      break;
  }
  return node;
}

Tuple2<bool, bool> CommandEvaluator::ExecuteAndCatch(syntax_asdl::command_t* node, int cmd_flags) {
  bool is_return;
  bool is_fatal;
  bool is_errexit;
  error::FatalRuntime* err = nullptr;
  int status;
  StackRoots _roots({&node, &err});

  if ((cmd_flags & Optimize)) {
    node = this->_RemoveSubshells(node);
    this->_NoForkLast(node);
  }
  is_return = false;
  is_fatal = false;
  is_errexit = false;
  err = nullptr;
  try {
    status = this->_Execute(node);
  }
  catch (vm::ControlFlow* e) {
    if ((cmd_flags & RaiseControlFlow)) {
      throw ;
    }
    else {
      if (e->IsReturn()) {
        is_return = true;
        status = e->StatusCode();
      }
      else {
        this->errfmt->Print_(str1081, e->token->span_id);
        is_fatal = true;
        status = 1;
      }
    }
  }
  catch (error::Parse* e) {
    this->dumper->MaybeRecord(this, e);
    throw ;
  }
  catch (error::ErrExit* e) {
    err = e;
    is_errexit = true;
  }
  catch (error::FatalRuntime* e) {
    err = e;
  }
  if (err) {
    status = err->ExitStatus();
    is_fatal = true;
    this->dumper->MaybeRecord(this, err);
    if (!err->HasLocation()) {
      err->location = this->mem->CurrentLocation();
    }
    if (is_errexit) {
      if (this->exec_opts->verbose_errexit()) {
        this->errfmt->PrintErrExit(static_cast<error::ErrExit*>(err), posix::getpid());
      }
    }
    else {
      this->errfmt->PrettyPrintError(err, str1082);
    }
  }
  this->dumper->MaybeDump(status);
  this->mem->SetLastStatus(status);
  return Tuple2<bool, bool>(is_return, is_fatal);
}

void CommandEvaluator::MaybeRunExitTrap(List<int>* mut_status) {
  syntax_asdl::command_t* node = nullptr;
  bool is_return;
  bool is_fatal;
  StackRoots _roots({&mut_status, &node});

  node = this->trap_state->GetHook(str1083);
  if (node) {
    {  // with
      dev::ctx_Tracer ctx{this->tracer, str1084, nullptr};

      try {
        Tuple2<bool, bool> tup3 = this->ExecuteAndCatch(node);
        is_return = tup3.at0();
        is_fatal = tup3.at1();
      }
      catch (util::UserExit* e) {
        mut_status->set(0, e->status);
        return ;
      }
      if (is_return) {
        mut_status->set(0, this->LastStatus());
      }
    }
  }
}

int CommandEvaluator::RunProc(runtime_asdl::Proc* proc, List<Str*>* argv, int arg0_spid) {
  syntax_asdl::proc_sig_t* sig = nullptr;
  List<Str*>* proc_argv = nullptr;
  int n_args;
  syntax_asdl::proc_sig_t* UP_sig = nullptr;
  int i;
  bool is_out_param;
  Str* param_name = nullptr;
  Str* arg_str = nullptr;
  runtime_asdl::value_t* val = nullptr;
  int flags;
  int n_params;
  runtime_asdl::value__MaybeStrArray* leftover = nullptr;
  int status;
  StackRoots _roots({&proc, &argv, &sig, &proc_argv, &UP_sig, &param_name, &arg_str, &val, &leftover});

  sig = proc->sig;
  if (sig->tag_() == proc_sig_e::Closed) {
    proc_argv = Alloc<List<Str*>>();
  }
  else {
    proc_argv = argv;
  }
  {  // with
    state::ctx_Call ctx{this->mem, this->mutable_opts, proc, proc_argv};

    n_args = len(argv);
    UP_sig = sig;
    if (UP_sig->tag_() == proc_sig_e::Closed) {
      proc_sig__Closed* sig = static_cast<proc_sig__Closed*>(UP_sig);
      i = 0;
      for (ListIter<syntax_asdl::UntypedParam*> it(sig->untyped); !it.Done(); it.Next(), ++i) {
        syntax_asdl::UntypedParam* p = it.Value();
        StackRoots _for({&p      });
        is_out_param = p->ref != nullptr;
        param_name = p->name->tval;
        if (i < n_args) {
          arg_str = argv->index_(i);
          if (is_out_param) {
            param_name = str_concat(str1085, param_name);
            if (!arg_str->startswith(str1086)) {
              e_die(StrFormat("Invalid argument %r.  Expected a name starting with :", arg_str));
            }
            arg_str = arg_str->slice(1);
          }
          val = Alloc<value::Str>(arg_str);
        }
        else {
          val = proc->defaults->index_(i);
          if (val == nullptr) {
            e_die(StrFormat("No value provided for param %r", p->name->tval));
          }
        }
        if (is_out_param) {
          flags = state::SetNameref;
        }
        else {
          flags = 0;
        }
        this->mem->SetValue(location::LName(param_name), val, scope_e::LocalOnly, flags);
      }
      n_params = len(sig->untyped);
      if (sig->rest) {
        leftover = Alloc<value::MaybeStrArray>(argv->slice(n_params));
        this->mem->SetValue(location::LName(sig->rest->tval), leftover, scope_e::LocalOnly);
      }
      else {
        if (n_args > n_params) {
          this->errfmt->Print_(StrFormat("proc %r expected %d arguments, but got %d", proc->name, n_params, n_args), arg0_spid);
          return 2;
        }
      }
    }
    try {
      status = this->_Execute(proc->body);
    }
    catch (vm::ControlFlow* e) {
      if (e->IsReturn()) {
        status = e->StatusCode();
      }
      else {
        e_die(StrFormat("Unexpected %r (in function call)", e->token->tval), e->token);
      }
    }
    catch (error::FatalRuntime* e) {
      this->dumper->MaybeRecord(this, e);
      throw ;
    }
  }
  return status;
}

Dict<Str*, runtime_asdl::cell*>* CommandEvaluator::EvalBlock(syntax_asdl::command_t* block) {
  int status;
  Dict<Str*, runtime_asdl::cell*>* namespace_ = nullptr;
  StackRoots _roots({&block, &namespace_});

  status = 0;
  namespace_ = nullptr;
  try {
    this->_Execute(block);
  }
  catch (vm::ControlFlow* e) {
    if (e->IsReturn()) {
      status = e->StatusCode();
    }
    else {
      e_die(str1091, e->token);
    }
  }
  namespace_ = this->mem->TopNamespace();
  return namespace_;
}

int CommandEvaluator::RunFuncForCompletion(runtime_asdl::Proc* proc, List<Str*>* argv) {
  int status;
  StackRoots _roots({&proc, &argv});

  try {
    status = this->RunProc(proc, argv, runtime::NO_SPID);
  }
  catch (error::FatalRuntime* e) {
    this->errfmt->PrettyPrintError(e);
    status = e->ExitStatus();
  }
  catch (vm::ControlFlow* e) {
    this->errfmt->Print_(str1092, e->token->span_id);
    status = 1;
  }
  return status;
}

}  // define namespace cmd_eval

namespace cmd_parse {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using id_kind_asdl::Kind;
using types_asdl::lex_mode_e;
using syntax_asdl::loc;
using syntax_asdl::condition;
using syntax_asdl::condition_t;
using syntax_asdl::for_iter;
using syntax_asdl::command;
using syntax_asdl::command_t;
using syntax_asdl::command__Simple;
using syntax_asdl::command__DoGroup;
using syntax_asdl::command__ForExpr;
using syntax_asdl::command__ForEach;
using syntax_asdl::command__WhileUntil;
using syntax_asdl::command__Case;
using syntax_asdl::command__If;
using syntax_asdl::command__ShFunction;
using syntax_asdl::command__Subshell;
using syntax_asdl::command__DBracket;
using syntax_asdl::command__DParen;
using syntax_asdl::command__CommandList;
using syntax_asdl::command__Proc;
using syntax_asdl::ArgList;
using syntax_asdl::BraceGroup;
using syntax_asdl::BlockArg;
using syntax_asdl::case_arm;
using syntax_asdl::sh_lhs_expr;
using syntax_asdl::sh_lhs_expr_t;
using syntax_asdl::redir;
using syntax_asdl::redir_param;
using syntax_asdl::redir_param__HereDoc;
using syntax_asdl::redir_loc;
using syntax_asdl::redir_loc_t;
using syntax_asdl::word_e;
using syntax_asdl::word_t;
using syntax_asdl::compound_word;
using syntax_asdl::Token;
using syntax_asdl::word_part_e;
using syntax_asdl::word_part_t;
using syntax_asdl::rhs_word;
using syntax_asdl::rhs_word_t;
using syntax_asdl::assign_pair;
using syntax_asdl::env_pair;
using syntax_asdl::assign_op_e;
using syntax_asdl::name_type;
using syntax_asdl::SourceLine;
using syntax_asdl::source;
using syntax_asdl::parse_result;
using syntax_asdl::parse_result_t;
using syntax_asdl::proc_sig_e;
using syntax_asdl::proc_sig__Closed;
using pyerror::p_die;
int TAB_CH = 9;
int SPACE_CH = 32;

int _KeywordSpid(syntax_asdl::word_t* w) {
  StackRoots _roots({&w});

  return word_::LeftMostSpanForWord(w);
}

syntax_asdl::Token* _KeywordToken(syntax_asdl::word_t* UP_w) {
  syntax_asdl::word_part_t* part = nullptr;
  StackRoots _roots({&UP_w, &part});

  compound_word* w = static_cast<compound_word*>(UP_w);
  part = w->parts->index_(0);
  return static_cast<Token*>(part);
}

Tuple2<List<Tuple2<syntax_asdl::SourceLine*, int>*>*, Tuple2<syntax_asdl::SourceLine*, int>*> _ReadHereLines(reader::_Reader* line_reader, syntax_asdl::redir* h, Str* delimiter) {
  List<Tuple2<syntax_asdl::SourceLine*, int>*>* here_lines = nullptr;
  Tuple2<syntax_asdl::SourceLine*, int>* last_line = nullptr;
  bool strip_leading_tabs;
  syntax_asdl::SourceLine* src_line = nullptr;
  Str* line = nullptr;
  int start_offset;
  int n;
  int i;
  StackRoots _roots({&line_reader, &h, &delimiter, &here_lines, &last_line, &src_line, &line});

  here_lines = Alloc<List<Tuple2<syntax_asdl::SourceLine*, int>*>>();
  last_line = nullptr;
  strip_leading_tabs = h->op->id == Id::Redir_DLessDash;
  while (true) {
    Tuple2<syntax_asdl::SourceLine*, int> tup0 = line_reader->GetLine();
    src_line = tup0.at0();
    if (src_line == nullptr) {
      p_die(str1093, h->op);
    }
    line = src_line->content;
    start_offset = 0;
    if (strip_leading_tabs) {
      n = len(line);
      i = 0;
      while (i < n) {
        if (!(str_equals(line->index_(i), str1094))) {
          break;
        }
        i += 1;
      }
      start_offset = i;
    }
    if (str_equals(line->slice(start_offset)->rstrip(), delimiter)) {
      last_line = (Alloc<Tuple2<syntax_asdl::SourceLine*, int>>(src_line, start_offset));
      break;
    }
    here_lines->append((Alloc<Tuple2<syntax_asdl::SourceLine*, int>>(src_line, start_offset)));
  }
  return Tuple2<List<Tuple2<syntax_asdl::SourceLine*, int>*>*, Tuple2<syntax_asdl::SourceLine*, int>*>(here_lines, last_line);
}

List<syntax_asdl::word_part_t*>* _MakeLiteralHereLines(List<Tuple2<syntax_asdl::SourceLine*, int>*>* here_lines, alloc::Arena* arena) {
  List<syntax_asdl::Token*>* tokens = nullptr;
  syntax_asdl::SourceLine* src_line = nullptr;
  int start_offset;
  syntax_asdl::Token* t = nullptr;
  List<syntax_asdl::word_part_t*>* parts = nullptr;
  StackRoots _roots({&here_lines, &arena, &tokens, &src_line, &t, &parts});

  tokens = Alloc<List<syntax_asdl::Token*>>();
  for (ListIter<Tuple2<syntax_asdl::SourceLine*, int>*> it(here_lines); !it.Done(); it.Next()) {
    Tuple2<syntax_asdl::SourceLine*, int>* tup1 = it.Value();
    src_line = tup1->at0();
    start_offset = tup1->at1();
    t = arena->NewToken(Id::Lit_Chars, start_offset, len(src_line->content), src_line, src_line->content->slice(start_offset));
    tokens->append(t);
  }
  parts = Alloc<List<syntax_asdl::word_part_t*>>();
  for (ListIter<syntax_asdl::Token*> it(tokens); !it.Done(); it.Next()) {
    syntax_asdl::Token* t = it.Value();
    parts->append(static_cast<word_part_t*>(t));
  }
  return parts;
}

void _ParseHereDocBody(parse_lib::ParseContext* parse_ctx, syntax_asdl::redir* r, reader::_Reader* line_reader, alloc::Arena* arena) {
  bool ok;
  Str* delimiter = nullptr;
  bool delim_quoted;
  List<Tuple2<syntax_asdl::SourceLine*, int>*>* here_lines = nullptr;
  Tuple2<syntax_asdl::SourceLine*, int>* last_line = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  syntax_asdl::SourceLine* end_line = nullptr;
  int end_pos;
  StackRoots _roots({&parse_ctx, &r, &line_reader, &arena, &delimiter, &here_lines, &last_line, &w_parser, &end_line});

  redir_param__HereDoc* h = static_cast<redir_param__HereDoc*>(r->arg);
  Tuple3<bool, Str*, bool> tup2 = word_::StaticEval(h->here_begin);
  ok = tup2.at0();
  delimiter = tup2.at1();
  delim_quoted = tup2.at2();
  if (!ok) {
    p_die(str1095, Alloc<loc::Word>(h->here_begin));
  }
  Tuple2<List<Tuple2<syntax_asdl::SourceLine*, int>*>*, Tuple2<syntax_asdl::SourceLine*, int>*> tup3 = _ReadHereLines(line_reader, r, delimiter);
  here_lines = tup3.at0();
  last_line = tup3.at1();
  if (delim_quoted) {
    h->stdin_parts = _MakeLiteralHereLines(here_lines, arena);
  }
  else {
    line_reader = Alloc<reader::VirtualLineReader>(here_lines, arena);
    w_parser = parse_ctx->MakeWordParserForHereDoc(line_reader);
    w_parser->ReadHereDocBody(h->stdin_parts);
  }
  Tuple2<syntax_asdl::SourceLine*, int>* tup4 = last_line;
  end_line = tup4->at0();
  end_pos = tup4->at1();
  h->here_end_span_id = arena->NewTokenId(Id::Undefined_Tok, end_pos, len(end_line->content), end_line, str1096);
}

syntax_asdl::assign_pair* _MakeAssignPair(parse_lib::ParseContext* parse_ctx, Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>* preparsed, alloc::Arena* arena) {
  syntax_asdl::Token* left_token = nullptr;
  syntax_asdl::Token* close_token = nullptr;
  int part_offset;
  syntax_asdl::compound_word* w = nullptr;
  Str* var_name = nullptr;
  syntax_asdl::assign_op_t op;
  syntax_asdl::sh_lhs_expr__Name* tmp = nullptr;
  sh_lhs_expr_t* lhs = nullptr;
  int left_spid;
  syntax_asdl::Token* right_token = nullptr;
  Str* index_str = nullptr;
  syntax_asdl::Token* span1 = nullptr;
  syntax_asdl::Token* span2 = nullptr;
  Str* code_str = nullptr;
  tdop::TdopParser* a_parser = nullptr;
  syntax_asdl::source__Reparsed* src = nullptr;
  syntax_asdl::arith_expr_t* index_node = nullptr;
  syntax_asdl::sh_lhs_expr__IndexedName* tmp3 = nullptr;
  int n;
  syntax_asdl::rhs_word_t* rhs = nullptr;
  syntax_asdl::compound_word* tmp2 = nullptr;
  syntax_asdl::assign_pair* pair = nullptr;
  StackRoots _roots({&parse_ctx, &preparsed, &arena, &left_token, &close_token, &w, &var_name, &tmp, &lhs, &right_token, &index_str, &span1, &span2, &code_str, &a_parser, &src, &index_node, &tmp3, &rhs, &tmp2, &pair});

  Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>* tup5 = preparsed;
  left_token = tup5->at0();
  close_token = tup5->at1();
  part_offset = tup5->at2();
  w = tup5->at3();
  if (left_token->id == Id::Lit_VarLike) {
    if (lexer::IsPlusEquals(left_token)) {
      var_name = lexer::TokenSliceRight(left_token, -2);
      op = assign_op_e::PlusEqual;
    }
    else {
      var_name = lexer::TokenSliceRight(left_token, -1);
      op = assign_op_e::Equal;
    }
    tmp = Alloc<sh_lhs_expr::Name>(left_token, var_name);
    lhs = static_cast<sh_lhs_expr_t*>(tmp);
  }
  else {
    if ((left_token->id == Id::Lit_ArrayLhsOpen and parse_ctx->one_pass_parse)) {
      var_name = lexer::TokenSliceRight(left_token, -1);
      if (lexer::IsPlusEquals(close_token)) {
        op = assign_op_e::PlusEqual;
      }
      else {
        op = assign_op_e::Equal;
      }
      left_spid = (left_token->span_id + 1);
      left_token = parse_ctx->arena->GetToken(left_spid);
      right_token = close_token;
      index_str = left_token->line->content->slice(left_token->col, right_token->col);
      lhs = Alloc<sh_lhs_expr::UnparsedIndex>(left_token, var_name, index_str);
    }
    else {
      if (left_token->id == Id::Lit_ArrayLhsOpen) {
        var_name = lexer::TokenSliceRight(left_token, -1);
        if (lexer::IsPlusEquals(close_token)) {
          op = assign_op_e::PlusEqual;
        }
        else {
          op = assign_op_e::Equal;
        }
        span1 = left_token;
        span2 = close_token;
        if (span1->line == span2->line) {
          code_str = span1->line->content->slice((span1->col + span1->length), span2->col);
        }
        else {
          FAIL(kNotImplemented);  // Python NotImplementedError
        }
        a_parser = parse_ctx->MakeArithParser(code_str);
        src = Alloc<source::Reparsed>(str1098, left_token, close_token);
        {  // with
          alloc::ctx_Location ctx{arena, src};

          index_node = a_parser->Parse();
        }
        tmp3 = Alloc<sh_lhs_expr::IndexedName>(left_token, var_name, index_node);
        lhs = static_cast<sh_lhs_expr_t*>(tmp3);
      }
      else {
        assert(0);  // AssertionError
      }
    }
  }
  n = len(w->parts);
  if (part_offset == n) {
    rhs = Alloc<rhs_word::Empty>();
  }
  else {
    tmp2 = Alloc<compound_word>(w->parts->slice(part_offset));
    word_::TildeDetectAssign(tmp2);
    rhs = tmp2;
  }
  pair = Alloc<syntax_asdl::assign_pair>(lhs, op, rhs, NewList<int>(std::initializer_list<int>{left_token->span_id}));
  return pair;
}

void _AppendMoreEnv(List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>* preparsed_list, List<syntax_asdl::env_pair*>* more_env) {
  syntax_asdl::Token* left_token = nullptr;
  int part_offset;
  syntax_asdl::compound_word* w = nullptr;
  Str* var_name = nullptr;
  int n;
  syntax_asdl::rhs_word_t* val = nullptr;
  syntax_asdl::env_pair* pair = nullptr;
  StackRoots _roots({&preparsed_list, &more_env, &left_token, &w, &var_name, &val, &pair});

  for (ListIter<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*> it(preparsed_list); !it.Done(); it.Next()) {
    Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>* tup6 = it.Value();
    left_token = tup6->at0();
    part_offset = tup6->at2();
    w = tup6->at3();
    if (left_token->id != Id::Lit_VarLike) {
      p_die(str1099, left_token);
    }
    if (lexer::IsPlusEquals(left_token)) {
      p_die(str1100, left_token);
    }
    var_name = lexer::TokenSliceRight(left_token, -1);
    n = len(w->parts);
    if (part_offset == n) {
      val = Alloc<rhs_word::Empty>();
    }
    else {
      val = Alloc<compound_word>(w->parts->slice(part_offset));
    }
    pair = Alloc<syntax_asdl::env_pair>(var_name, val, NewList<int>(std::initializer_list<int>{left_token->span_id}));
    more_env->append(pair);
  }
}

Tuple2<List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>*, List<syntax_asdl::compound_word*>*> _SplitSimpleCommandPrefix(List<syntax_asdl::compound_word*>* words) {
  List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>* preparsed_list = nullptr;
  List<syntax_asdl::compound_word*>* suffix_words = nullptr;
  bool done_prefix;
  syntax_asdl::Token* left_token = nullptr;
  syntax_asdl::Token* close_token = nullptr;
  int part_offset;
  StackRoots _roots({&words, &preparsed_list, &suffix_words, &left_token, &close_token});

  preparsed_list = Alloc<List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>>();
  suffix_words = Alloc<List<syntax_asdl::compound_word*>>();
  done_prefix = false;
  for (ListIter<syntax_asdl::compound_word*> it(words); !it.Done(); it.Next()) {
    syntax_asdl::compound_word* w = it.Value();
    StackRoots _for({&w  });
    if (done_prefix) {
      suffix_words->append(w);
      continue;
    }
    Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int> tup7 = word_::DetectShAssignment(w);
    left_token = tup7.at0();
    close_token = tup7.at1();
    part_offset = tup7.at2();
    if (left_token) {
      preparsed_list->append((Alloc<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>>(left_token, close_token, part_offset, w)));
    }
    else {
      done_prefix = true;
      suffix_words->append(w);
    }
  }
  return Tuple2<List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>*, List<syntax_asdl::compound_word*>*>(preparsed_list, suffix_words);
}

syntax_asdl::command__Simple* _MakeSimpleCommand(List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>* preparsed_list, List<syntax_asdl::compound_word*>* suffix_words, List<syntax_asdl::redir*>* redirects, syntax_asdl::ArgList* typed_args, syntax_asdl::BlockArg* block) {
  syntax_asdl::compound_word* w = nullptr;
  List<syntax_asdl::word_t*>* words2 = nullptr;
  List<syntax_asdl::word_t*>* words3 = nullptr;
  List<syntax_asdl::env_pair*>* more_env = nullptr;
  syntax_asdl::command__Simple* node = nullptr;
  StackRoots _roots({&preparsed_list, &suffix_words, &redirects, &typed_args, &block, &w, &words2, &words3, &more_env, &node});

  for (ListIter<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*> it(preparsed_list); !it.Done(); it.Next()) {
    Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>* tup8 = it.Value();
    w = tup8->at3();
    if (word_::HasArrayPart(w)) {
      p_die(str1101, Alloc<loc::Word>(w));
    }
  }
  words2 = braces::BraceDetectAll(suffix_words);
  words3 = word_::TildeDetectAll(words2);
  more_env = Alloc<List<syntax_asdl::env_pair*>>();
  _AppendMoreEnv(preparsed_list, more_env);
  node = Alloc<command::Simple>(words3, redirects, more_env, typed_args, block, true);
  return node;
}

VarChecker::VarChecker() 
    : header_(obj_header()) {
  this->tokens = Alloc<List<syntax_asdl::Token*>>();
  this->names = Alloc<List<Dict<Str*, int>*>>();
}

void VarChecker::Push(syntax_asdl::Token* blame_tok) {
  Dict<Str*, int>* entry = nullptr;
  StackRoots _roots({&blame_tok, &entry});

  if (len(this->tokens) != 0) {
    if ((this->tokens->index_(0)->id == Id::KW_Proc or blame_tok->id == Id::KW_Proc)) {
      p_die(str1102, blame_tok);
    }
  }
  this->tokens->append(blame_tok);
  entry = Alloc<Dict<Str*, int>>();
  this->names->append(entry);
}

void VarChecker::Pop() {
  this->names->pop();
  this->tokens->pop();
}

void VarChecker::Check(int keyword_id, syntax_asdl::Token* name_tok) {
  Dict<Str*, int>* top = nullptr;
  Str* name = nullptr;
  StackRoots _roots({&name_tok, &top, &name});

  if (len(this->names) == 0) {
    return ;
  }
  top = this->names->index_(-1);
  name = name_tok->tval;
  if ((keyword_id == Id::KW_Const || keyword_id == Id::KW_Var)) {
    if (dict_contains(top, name)) {
      p_die(StrFormat("%r was already declared", name), name_tok);
    }
    else {
      top->set(name, keyword_id);
    }
  }
  if (keyword_id == Id::KW_SetVar) {
    if (!dict_contains(top, name)) {
      p_die(StrFormat("%r hasn't been declared", name), name_tok);
    }
    if ((dict_contains(top, name) and top->index_(name) == Id::KW_Const)) {
      p_die(StrFormat("Can't modify constant %r", name), name_tok);
    }
  }
}

ctx_VarChecker::ctx_VarChecker(cmd_parse::VarChecker* var_checker, syntax_asdl::Token* blame_tok) 
    : header_(obj_header()) {
  var_checker->Push(blame_tok);
  this->var_checker = var_checker;
}

ctx_VarChecker::~ctx_VarChecker(){
  this->var_checker->Pop();
}
GLOBAL_LIST(int, 7, SECONDARY_KEYWORDS, {Id::KW_Do COMMA Id::KW_Done COMMA Id::KW_Then COMMA Id::KW_Fi COMMA Id::KW_Elif COMMA Id::KW_Else COMMA Id::KW_Esac});

CommandParser::CommandParser(parse_lib::ParseContext* parse_ctx, optview::Parse* parse_opts, word_parse::WordParser* w_parser, lexer::Lexer* lexer, reader::_Reader* line_reader, int eof_id) 
    : header_(obj_header()) {
  this->parse_ctx = parse_ctx;
  this->aliases = parse_ctx->aliases;
  this->parse_opts = parse_opts;
  this->w_parser = w_parser;
  this->lexer = lexer;
  this->line_reader = line_reader;
  this->eof_id = eof_id;
  this->arena = line_reader->arena;
  this->aliases_in_flight = Alloc<List<Tuple2<Str*, int>*>>();
  this->allow_block = true;
  this->allow_block_attrs = Alloc<List<bool>>();
  this->var_checker = Alloc<VarChecker>();
  this->Reset();
}

void CommandParser::Init_AliasesInFlight(List<Tuple2<Str*, int>*>* aliases_in_flight) {
  StackRoots _roots({&aliases_in_flight});

  this->aliases_in_flight = aliases_in_flight;
}

void CommandParser::Reset() {
  this->next_lex_mode = lex_mode_e::ShCommand;
  this->cur_word = nullptr;
  this->c_kind = Kind::Undefined;
  this->c_id = Id::Undefined_Tok;
  this->pending_here_docs = Alloc<List<syntax_asdl::redir*>>();
}

void CommandParser::ResetInputObjects() {
  this->w_parser->Reset();
  this->lexer->ResetInputObjects();
  this->line_reader->Reset();
}

void CommandParser::_Next() {
  this->next_lex_mode = lex_mode_e::ShCommand;
}

void CommandParser::_Peek() {
  syntax_asdl::word_t* w = nullptr;
  StackRoots _roots({&w});

  if (this->next_lex_mode != lex_mode_e::Undefined) {
    w = this->w_parser->ReadWord(this->next_lex_mode);
    if (w->tag_() == word_e::Token) {
      Token* tok = static_cast<Token*>(w);
      if (tok->id == Id::Op_Newline) {
        for (ListIter<syntax_asdl::redir*> it(this->pending_here_docs); !it.Done(); it.Next()) {
          syntax_asdl::redir* h = it.Value();
          StackRoots _for({&h        });
          _ParseHereDocBody(this->parse_ctx, h, this->line_reader, this->arena);
        }
        this->pending_here_docs->clear();
      }
    }
    this->cur_word = w;
    this->c_kind = word_::CommandKind(this->cur_word);
    this->c_id = word_::CommandId(this->cur_word);
    this->next_lex_mode = lex_mode_e::Undefined;
  }
}

void CommandParser::_Eat(int c_id) {
  int actual_id;
  Str* msg = nullptr;
  StackRoots _roots({&msg});

  actual_id = word_::CommandId(this->cur_word);
  msg = StrFormat("Expected word type %s, got %s", ui::PrettyId(c_id), ui::PrettyId(actual_id));
  this->_Eat2(c_id, msg);
}

void CommandParser::_Eat2(int c_id, Str* msg) {
  StackRoots _roots({&msg});

  this->_Peek();
  if (this->c_id != c_id) {
    p_die(msg, Alloc<loc::Word>(this->cur_word));
  }
  this->_Next();
}

void CommandParser::_NewlineOk() {
  this->_Peek();
  if (this->c_id == Id::Op_Newline) {
    this->_Next();
    this->_Peek();
  }
}

bool CommandParser::_AtSecondaryKeyword() {
  if (list_contains(SECONDARY_KEYWORDS, this->c_id)) {
    return true;
  }
  return false;
}

syntax_asdl::redir* CommandParser::ParseRedirect() {
  Str* op_val = nullptr;
  int pos;
  syntax_asdl::redir_loc_t* where = nullptr;
  syntax_asdl::redir_param__HereDoc* arg = nullptr;
  syntax_asdl::redir* r = nullptr;
  syntax_asdl::word_t* arg_word = nullptr;
  syntax_asdl::compound_word* tilde = nullptr;
  StackRoots _roots({&op_val, &where, &arg, &r, &arg_word, &tilde});

  this->_Peek();
  Token* op_tok = static_cast<Token*>(this->cur_word);
  op_val = lexer::TokenVal(op_tok);
  if (str_equals(op_val->index_(0), str1107)) {
    pos = op_val->find(str1108);
    where = Alloc<redir_loc::VarName>(op_val->slice(1, pos));
  }
  else {
    if (op_val->index_(0)->isdigit()) {
      pos = 1;
      if (op_val->index_(1)->isdigit()) {
        pos = 2;
      }
      where = Alloc<redir_loc::Fd>(to_int(op_val->slice(0, pos)));
    }
    else {
      where = Alloc<redir_loc::Fd>(consts::RedirDefaultFd(op_tok->id));
    }
  }
  this->_Next();
  this->_Peek();
  if ((op_tok->id == Id::Redir_DLess || op_tok->id == Id::Redir_DLessDash)) {
    arg = redir_param::HereDoc::Create();
    arg->here_begin = this->cur_word;
    r = Alloc<redir>(op_tok, where, arg);
    this->pending_here_docs->append(r);
    this->_Next();
    return r;
  }
  if (this->c_kind != Kind::Word) {
    p_die(str1109, Alloc<loc::Word>(this->cur_word));
  }
  arg_word = this->cur_word;
  tilde = word_::TildeDetect(arg_word);
  if (tilde) {
    arg_word = tilde;
  }
  this->_Next();
  return Alloc<redir>(op_tok, where, static_cast<compound_word*>(arg_word));
}

List<syntax_asdl::redir*>* CommandParser::_ParseRedirectList() {
  List<syntax_asdl::redir*>* redirects = nullptr;
  syntax_asdl::redir* node = nullptr;
  StackRoots _roots({&redirects, &node});

  redirects = Alloc<List<syntax_asdl::redir*>>();
  while (true) {
    this->_Peek();
    if (this->c_kind != Kind::Redir) {
      break;
    }
    node = this->ParseRedirect();
    redirects->append(node);
    this->_Next();
  }
  return redirects;
}

Tuple4<List<syntax_asdl::redir*>*, List<syntax_asdl::compound_word*>*, syntax_asdl::ArgList*, syntax_asdl::BlockArg*> CommandParser::_ScanSimpleCommand() {
  List<syntax_asdl::redir*>* redirects = nullptr;
  List<syntax_asdl::compound_word*>* words = nullptr;
  syntax_asdl::ArgList* typed_args = nullptr;
  syntax_asdl::BlockArg* block = nullptr;
  bool first_word_caps;
  int i;
  syntax_asdl::redir* node = nullptr;
  syntax_asdl::BraceGroup* brace_group = nullptr;
  List<syntax_asdl::SourceLine*>* lines = nullptr;
  bool ok;
  Str* word_str = nullptr;
  bool quoted;
  int prev_byte;
  int next_id;
  StackRoots _roots({&redirects, &words, &typed_args, &block, &node, &brace_group, &lines, &word_str});

  redirects = Alloc<List<syntax_asdl::redir*>>();
  words = Alloc<List<syntax_asdl::compound_word*>>();
  typed_args = nullptr;
  block = nullptr;
  first_word_caps = false;
  i = 0;
  while (true) {
    this->_Peek();
    if (this->c_kind == Kind::Redir) {
      node = this->ParseRedirect();
      redirects->append(node);
    }
    else {
      if (this->c_kind == Kind::Word) {
        if (this->parse_opts->parse_brace()) {
          if (this->c_id == Id::Lit_LBrace) {
            if (this->allow_block) {
              this->allow_block_attrs->append(first_word_caps);
              brace_group = this->ParseBraceGroup();
              lines = this->arena->SaveLinesAndDiscard(brace_group->left, brace_group->right);
              block = Alloc<BlockArg>(brace_group, lines);
              this->allow_block_attrs->pop();
            }
            break;
          }
          else {
            if (this->c_id == Id::Lit_RBrace) {
              break;
            }
          }
        }
        compound_word* w = static_cast<compound_word*>(this->cur_word);
        words->append(w);
        if (i == 0) {
          Tuple3<bool, Str*, bool> tup9 = word_::StaticEval(w);
          ok = tup9.at0();
          word_str = tup9.at1();
          quoted = tup9.at2();
          if ((ok and (len(word_str) and (word_str->index_(0)->isupper() and !word_str->isupper())))) {
            first_word_caps = true;
          }
        }
      }
      else {
        if (this->c_id == Id::Op_LParen) {
          prev_byte = this->lexer->ByteLookBack();
          if ((prev_byte != SPACE_CH && prev_byte != TAB_CH)) {
            if (this->parse_opts->parse_at()) {
              p_die(str1110, Alloc<loc::Word>(this->cur_word));
            }
            else {
              p_die(str1111, Alloc<loc::Word>(this->cur_word));
            }
          }
          next_id = this->lexer->LookPastSpace(lex_mode_e::ShCommand);
          if (next_id == Id::Op_RParen) {
            p_die(str1112, Alloc<loc::Word>(this->cur_word));
          }
          typed_args = this->w_parser->ParseProcCallArgs();
        }
        else {
          break;
        }
      }
    }
    this->_Next();
    i += 1;
  }
  return Tuple4<List<syntax_asdl::redir*>*, List<syntax_asdl::compound_word*>*, syntax_asdl::ArgList*, syntax_asdl::BlockArg*>(redirects, words, typed_args, block);
}

syntax_asdl::command_t* CommandParser::_MaybeExpandAliases(List<syntax_asdl::compound_word*>* words) {
  List<Tuple2<Str*, int>*>* aliases_in_flight = nullptr;
  Str* first_word_str = nullptr;
  int argv0_spid;
  List<Str*>* expanded = nullptr;
  int i;
  int n;
  syntax_asdl::compound_word* w = nullptr;
  bool ok;
  Str* word_str = nullptr;
  bool quoted;
  Str* alias_exp = nullptr;
  int left_spid;
  int right_spid;
  syntax_asdl::Token* left_tok = nullptr;
  syntax_asdl::Token* right_tok = nullptr;
  Str* words_str = nullptr;
  Str* code_str = nullptr;
  alloc::Arena* arena = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  cmd_parse::CommandParser* cp = nullptr;
  syntax_asdl::source__Alias* src = nullptr;
  syntax_asdl::command__CommandList* node = nullptr;
  StackRoots _roots({&words, &aliases_in_flight, &first_word_str, &expanded, &w, &word_str, &alias_exp, &left_tok, &right_tok, &words_str, &code_str, &arena, &line_reader, &cp, &src, &node});

  aliases_in_flight = len(this->aliases_in_flight) ? this->aliases_in_flight : Alloc<List<Tuple2<Str*, int>*>>();
  first_word_str = nullptr;
  argv0_spid = word_::LeftMostSpanForWord(words->index_(0));
  expanded = Alloc<List<Str*>>();
  i = 0;
  n = len(words);
  while (i < n) {
    w = words->index_(i);
    Tuple3<bool, Str*, bool> tup10 = word_::StaticEval(w);
    ok = tup10.at0();
    word_str = tup10.at1();
    quoted = tup10.at2();
    if ((!ok or quoted)) {
      break;
    }
    alias_exp = this->aliases->get(word_str);
    if (alias_exp == nullptr) {
      break;
    }
    if (list_contains(aliases_in_flight, (Alloc<Tuple2<Str*, int>>(word_str, i)))) {
      break;
    }
    if (i == 0) {
      first_word_str = word_str;
    }
    aliases_in_flight->append((Alloc<Tuple2<Str*, int>>(word_str, i)));
    expanded->append(alias_exp);
    i += 1;
    if (!alias_exp->endswith(str1113)) {
      expanded->append(str1114);
      break;
    }
  }
  if (len(expanded) == 0) {
    return nullptr;
  }
  if (i < n) {
    left_spid = word_::LeftMostSpanForWord(words->index_(i));
    right_spid = word_::RightMostSpanForWord(words->index_(-1));
    left_tok = this->arena->GetToken(left_spid);
    right_tok = this->arena->GetToken(right_spid);
    words_str = this->arena->SnipCodeString(left_tok, right_tok);
    expanded->append(words_str);
  }
  code_str = str1115->join(expanded);
  arena = this->arena;
  line_reader = reader::StringLineReader(code_str, arena);
  cp = this->parse_ctx->MakeOshParser(line_reader);
  cp->Init_AliasesInFlight(aliases_in_flight);
  src = Alloc<source::Alias>(first_word_str, argv0_spid);
  {  // with
    alloc::ctx_Location ctx{arena, src};

    {  // with
      parse_lib::ctx_Alias ctx{this->parse_ctx->trail};

      try {
        node = cp->_ParseCommandTerm();
      }
      catch (error::Parse* e) {
        throw ;
      }
    }
  }
  return node;
}

syntax_asdl::command_t* CommandParser::ParseSimpleCommand() {
  List<syntax_asdl::redir*>* redirects = nullptr;
  List<syntax_asdl::compound_word*>* words = nullptr;
  syntax_asdl::ArgList* typed_args = nullptr;
  syntax_asdl::BlockArg* block = nullptr;
  int typed_spid;
  syntax_asdl::command__Simple* simple = nullptr;
  syntax_asdl::word_part_t* part0 = nullptr;
  List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>* preparsed_list = nullptr;
  List<syntax_asdl::compound_word*>* suffix_words = nullptr;
  syntax_asdl::Token* left_token = nullptr;
  List<syntax_asdl::assign_pair*>* pairs = nullptr;
  syntax_asdl::command__ShAssignment* assign = nullptr;
  int left_spid;
  id_kind_asdl::Kind_t kind;
  syntax_asdl::Token* kw_token = nullptr;
  syntax_asdl::word_t* arg_word = nullptr;
  syntax_asdl::command_t* expanded_node = nullptr;
  List<syntax_asdl::env_pair*>* more_env = nullptr;
  syntax_asdl::command__ExpandedAlias* exp = nullptr;
  syntax_asdl::command__Simple* node = nullptr;
  StackRoots _roots({&redirects, &words, &typed_args, &block, &simple, &part0, &preparsed_list, &suffix_words, &left_token, &pairs, &assign, &kw_token, &arg_word, &expanded_node, &more_env, &exp, &node});

  Tuple4<List<syntax_asdl::redir*>*, List<syntax_asdl::compound_word*>*, syntax_asdl::ArgList*, syntax_asdl::BlockArg*> tup11 = this->_ScanSimpleCommand();
  redirects = tup11.at0();
  words = tup11.at1();
  typed_args = tup11.at2();
  block = tup11.at3();
  typed_spid = runtime::NO_SPID;
  if (block) {
    typed_spid = block->brace_group->left->span_id;
  }
  if (typed_args) {
    typed_spid = typed_args->left->span_id;
  }
  if (len(words) == 0) {
    if (typed_spid != runtime::NO_SPID) {
      p_die(str1116, Alloc<loc::Span>(typed_spid));
    }
    simple = command::Simple::Create();
    simple->redirects = redirects;
    return simple;
  }
  part0 = words->index_(0)->parts->index_(0);
  if (part0->tag_() == word_part_e::Literal) {
    Token* tok = static_cast<Token*>(part0);
    if (tok->id == Id::Lit_Equals) {
      p_die(str1117, tok);
    }
  }
  Tuple2<List<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*>*, List<syntax_asdl::compound_word*>*> tup12 = _SplitSimpleCommandPrefix(words);
  preparsed_list = tup12.at0();
  suffix_words = tup12.at1();
  if (len(preparsed_list)) {
    Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>* tup13 = preparsed_list->index_(0);
    left_token = tup13->at0();
    if ((!this->parse_opts->parse_sh_assign() and len(suffix_words) == 0)) {
      p_die(str1118, left_token);
    }
  }
  this->parse_ctx->trail->SetLatestWords(suffix_words, redirects);
  if (len(suffix_words) == 0) {
    if (typed_spid != runtime::NO_SPID) {
      p_die(str1119, Alloc<loc::Span>(typed_spid));
    }
    pairs = Alloc<List<syntax_asdl::assign_pair*>>();
    for (ListIter<Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>*> it(preparsed_list); !it.Done(); it.Next()) {
      Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>* preparsed = it.Value();
      pairs->append(_MakeAssignPair(this->parse_ctx, preparsed, this->arena));
    }
    assign = Alloc<command::ShAssignment>(pairs, redirects);
    left_spid = word_::LeftMostSpanForWord(words->index_(0));
    assign->spids->append(left_spid);
    return assign;
  }
  Tuple2<id_kind_asdl::Kind_t, syntax_asdl::Token*> tup14 = word_::KeywordToken(suffix_words->index_(0));
  kind = tup14.at0();
  kw_token = tup14.at1();
  if (kind == Kind::ControlFlow) {
    if (typed_spid != runtime::NO_SPID) {
      p_die(str1120, Alloc<loc::Span>(typed_spid));
    }
    if ((!this->parse_opts->parse_ignored() and len(redirects))) {
      p_die(str1121, kw_token);
    }
    if (len(preparsed_list)) {
      Tuple4<syntax_asdl::Token*, syntax_asdl::Token*, int, syntax_asdl::compound_word*>* tup15 = preparsed_list->index_(0);
      left_token = tup15->at0();
      p_die(str1122, left_token);
    }
    if (len(suffix_words) == 1) {
      arg_word = nullptr;
    }
    else {
      if (len(suffix_words) == 2) {
        arg_word = suffix_words->index_(1);
      }
      else {
        p_die(StrFormat("Unexpected argument to %r", lexer::TokenVal(kw_token)), Alloc<loc::Word>(suffix_words->index_(2)));
      }
    }
    return Alloc<command::ControlFlow>(kw_token, arg_word);
  }
  if ((!typed_args and (!block and this->parse_opts->expand_aliases()))) {
    expanded_node = this->_MaybeExpandAliases(suffix_words);
    if (expanded_node) {
      more_env = Alloc<List<syntax_asdl::env_pair*>>();
      _AppendMoreEnv(preparsed_list, more_env);
      exp = Alloc<command::ExpandedAlias>(expanded_node, redirects, more_env);
      return exp;
    }
  }
  node = _MakeSimpleCommand(preparsed_list, suffix_words, redirects, typed_args, block);
  return node;
}

syntax_asdl::BraceGroup* CommandParser::ParseBraceGroup() {
  syntax_asdl::Token* left = nullptr;
  syntax_asdl::Token* doc_token = nullptr;
  syntax_asdl::command__CommandList* c_list = nullptr;
  syntax_asdl::Token* right = nullptr;
  StackRoots _roots({&left, &doc_token, &c_list, &right});

  left = this->arena->GetToken(_KeywordSpid(this->cur_word));
  this->_Eat(Id::Lit_LBrace);
  doc_token = nullptr;
  this->_Peek();
  if (this->c_id == Id::Op_Newline) {
    this->_Next();
    {  // with
      word_::ctx_EmitDocToken ctx{this->w_parser};

      this->_Peek();
    }
  }
  if (this->c_id == Id::Ignored_Comment) {
    Token* doc_token = static_cast<Token*>(this->cur_word);
    this->_Next();
  }
  c_list = this->_ParseCommandList();
  this->_Eat(Id::Lit_RBrace);
  right = this->arena->GetToken(word_::LeftMostSpanForWord(this->cur_word));
  return Alloc<BraceGroup>(left, doc_token, c_list->children, Alloc<List<syntax_asdl::redir*>>(), right);
}

syntax_asdl::command__DoGroup* CommandParser::ParseDoGroup() {
  int do_spid;
  syntax_asdl::command__CommandList* c_list = nullptr;
  int done_spid;
  syntax_asdl::command__DoGroup* node = nullptr;
  StackRoots _roots({&c_list, &node});

  this->_Eat(Id::KW_Do);
  do_spid = _KeywordSpid(this->cur_word);
  c_list = this->_ParseCommandList();
  this->_Eat(Id::KW_Done);
  done_spid = _KeywordSpid(this->cur_word);
  node = Alloc<command::DoGroup>(c_list->children);
  node->spids->append(do_spid);
  node->spids->append(done_spid);
  return node;
}

Tuple2<List<syntax_asdl::compound_word*>*, int> CommandParser::ParseForWords() {
  List<syntax_asdl::compound_word*>* words = nullptr;
  int semi_spid;
  StackRoots _roots({&words});

  words = Alloc<List<syntax_asdl::compound_word*>>();
  semi_spid = runtime::NO_SPID;
  while (true) {
    this->_Peek();
    if (this->c_id == Id::Op_Semi) {
      Token* tok = static_cast<Token*>(this->cur_word);
      semi_spid = tok->span_id;
      this->_Next();
      this->_NewlineOk();
      break;
    }
    else {
      if (this->c_id == Id::Op_Newline) {
        this->_Next();
        break;
      }
      else {
        if ((this->parse_opts->parse_brace() and this->c_id == Id::Lit_LBrace)) {
          break;
        }
      }
    }
    if (this->cur_word->tag_() != word_e::Compound) {
      p_die(str1124, Alloc<loc::Word>(this->cur_word));
    }
    compound_word* w2 = static_cast<compound_word*>(this->cur_word);
    words->append(w2);
    this->_Next();
  }
  return Tuple2<List<syntax_asdl::compound_word*>*, int>(words, semi_spid);
}

syntax_asdl::command__ForExpr* CommandParser::_ParseForExprLoop() {
  syntax_asdl::command__ForExpr* node = nullptr;
  StackRoots _roots({&node});

  node = this->w_parser->ReadForExpression();
  this->_Next();
  this->_Peek();
  if (this->c_id == Id::Op_Semi) {
    this->_Next();
    this->_NewlineOk();
  }
  else {
    if (this->c_id == Id::Op_Newline) {
      this->_Next();
    }
    else {
      if (this->c_id == Id::KW_Do) {
        ;  // pass
      }
      else {
        if (this->c_id == Id::Lit_LBrace) {
          ;  // pass
        }
        else {
          p_die(str1125, Alloc<loc::Word>(this->cur_word));
        }
      }
    }
  }
  if (this->c_id == Id::Lit_LBrace) {
    node->body = this->ParseBraceGroup();
  }
  else {
    node->body = this->ParseDoGroup();
  }
  return node;
}

syntax_asdl::command__ForEach* CommandParser::_ParseForEachLoop(int for_spid) {
  syntax_asdl::command__ForEach* node = nullptr;
  int num_iter_names;
  syntax_asdl::word_t* w = nullptr;
  syntax_asdl::word_t* UP_w = nullptr;
  bool ok;
  Str* iter_name = nullptr;
  bool quoted;
  int in_spid;
  int semi_spid;
  syntax_asdl::expr_t* enode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  List<syntax_asdl::compound_word*>* iter_words = nullptr;
  Str* s = nullptr;
  List<syntax_asdl::word_t*>* words2 = nullptr;
  List<syntax_asdl::word_t*>* words3 = nullptr;
  StackRoots _roots({&node, &w, &UP_w, &iter_name, &enode, &last_token, &iter_words, &s, &words2, &words3});

  node = command::ForEach::Create();
  node->spids->append(for_spid);
  num_iter_names = 0;
  while (true) {
    w = this->cur_word;
    UP_w = w;
    if (w->tag_() == word_e::Compound) {
      compound_word* w = static_cast<compound_word*>(UP_w);
      if (word_::LiteralId(w->parts->index_(-1)) == Id::Lit_Comma) {
        w->parts->pop();
      }
    }
    Tuple3<bool, Str*, bool> tup16 = word_::StaticEval(w);
    ok = tup16.at0();
    iter_name = tup16.at1();
    quoted = tup16.at2();
    if ((!ok or quoted)) {
      p_die(str1126, Alloc<loc::Word>(w));
    }
    if (!match::IsValidVarName(iter_name)) {
      if (str_contains(iter_name, str1127)) {
        p_die(str1128, Alloc<loc::Word>(w));
      }
      p_die(StrFormat("Invalid loop variable name %r", iter_name), Alloc<loc::Word>(w));
    }
    node->iter_names->append(iter_name);
    num_iter_names += 1;
    this->_Next();
    this->_Peek();
    if (((this->c_id == Id::KW_In || this->c_id == Id::KW_Do) or this->c_kind == Kind::Op)) {
      break;
    }
    if (num_iter_names == 3) {
      p_die(str1130, Alloc<loc::Word>(this->cur_word));
    }
  }
  this->_NewlineOk();
  in_spid = runtime::NO_SPID;
  semi_spid = runtime::NO_SPID;
  this->_Peek();
  if (this->c_id == Id::KW_In) {
    in_spid = word_::LeftMostSpanForWord(this->cur_word);
    this->_Next();
    if (this->w_parser->LookPastSpace() == Id::Op_LParen) {
      Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> tup17 = this->parse_ctx->ParseOilExpr(this->lexer, grammar_nt::oil_expr);
      enode = tup17.at0();
      last_token = tup17.at1();
      node->iterable = Alloc<for_iter::Oil>(enode, last_token);
      this->_Peek();
      if (this->c_id != Id::Lit_LBrace) {
        p_die(str1131, Alloc<loc::Word>(this->cur_word));
      }
    }
    else {
      Tuple2<List<syntax_asdl::compound_word*>*, int> tup18 = this->ParseForWords();
      iter_words = tup18.at0();
      semi_spid = tup18.at1();
      if ((!this->parse_opts->parse_bare_word() and len(iter_words) == 1)) {
        Tuple3<bool, Str*, bool> tup19 = word_::StaticEval(iter_words->index_(0));
        ok = tup19.at0();
        s = tup19.at1();
        quoted = tup19.at2();
        if ((ok and (match::IsValidVarName(s) and !quoted))) {
          p_die(str1132, Alloc<loc::Word>(iter_words->index_(0)));
        }
      }
      words2 = braces::BraceDetectAll(iter_words);
      words3 = word_::TildeDetectAll(words2);
      node->iterable = Alloc<for_iter::Words>(words3);
      if (num_iter_names > 2) {
        p_die(str1133, Alloc<loc::Span>(for_spid));
      }
    }
  }
  else {
    if (this->c_id == Id::KW_Do) {
      node->iterable = Alloc<for_iter::Args>();
    }
    else {
      if (this->c_id == Id::Op_Semi) {
        node->iterable = Alloc<for_iter::Args>();
        this->_Next();
      }
      else {
        p_die(str1134, Alloc<loc::Word>(this->cur_word));
      }
    }
  }
  this->_Peek();
  if (this->c_id == Id::Lit_LBrace) {
    node->body = this->ParseBraceGroup();
  }
  else {
    node->body = this->ParseDoGroup();
  }
  node->spids->append(in_spid);
  node->spids->append(semi_spid);
  return node;
}

syntax_asdl::command_t* CommandParser::ParseFor() {
  int for_spid;
  syntax_asdl::command__ForExpr* n1 = nullptr;
  syntax_asdl::command__ForEach* n2 = nullptr;
  StackRoots _roots({&n1, &n2});

  for_spid = _KeywordSpid(this->cur_word);
  this->_Eat(Id::KW_For);
  this->_Peek();
  if (this->c_id == Id::Op_DLeftParen) {
    if (!this->parse_opts->parse_dparen()) {
      p_die(str1135, Alloc<loc::Word>(this->cur_word));
    }
    n1 = this->_ParseForExprLoop();
    n1->redirects = this->_ParseRedirectList();
    return n1;
  }
  else {
    n2 = this->_ParseForEachLoop(for_spid);
    n2->redirects = this->_ParseRedirectList();
    return n2;
  }
}

syntax_asdl::command__WhileUntil* CommandParser::ParseWhileUntil(syntax_asdl::Token* keyword) {
  syntax_asdl::expr_t* enode = nullptr;
  syntax_asdl::condition_t* cond = nullptr;
  syntax_asdl::command__CommandList* commands = nullptr;
  syntax_asdl::command_t* body_node = nullptr;
  syntax_asdl::command__WhileUntil* node = nullptr;
  StackRoots _roots({&keyword, &enode, &cond, &commands, &body_node, &node});

  this->_Next();
  if ((this->parse_opts->parse_paren() and this->w_parser->LookPastSpace() == Id::Op_LParen)) {
    Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> tup20 = this->parse_ctx->ParseOilExpr(this->lexer, grammar_nt::oil_expr);
    enode = tup20.at0();
    cond = Alloc<condition::Oil>(enode);
  }
  else {
    this->allow_block = false;
    commands = this->_ParseCommandList();
    this->allow_block = true;
    cond = Alloc<condition::Shell>(commands->children);
  }
  this->_Peek();
  if ((this->parse_opts->parse_brace() and this->c_id == Id::Lit_LBrace)) {
    body_node = this->ParseBraceGroup();
  }
  else {
    body_node = this->ParseDoGroup();
  }
  node = Alloc<command::WhileUntil>(keyword, cond, body_node, nullptr);
  node->spids->append(keyword->span_id);
  return node;
}

syntax_asdl::case_arm* CommandParser::ParseCaseItem() {
  int left_spid;
  List<syntax_asdl::word_t*>* pat_words = nullptr;
  bool ok;
  Str* s = nullptr;
  bool quoted;
  int rparen_spid;
  syntax_asdl::command__CommandList* c_list = nullptr;
  List<syntax_asdl::command_t*>* action_children = nullptr;
  int dsemi_spid;
  int last_spid;
  List<int>* spids = nullptr;
  syntax_asdl::case_arm* arm = nullptr;
  StackRoots _roots({&pat_words, &s, &c_list, &action_children, &spids, &arm});

  this->lexer->PushHint(Id::Op_RParen, Id::Right_CasePat);
  left_spid = word_::LeftMostSpanForWord(this->cur_word);
  if (this->c_id == Id::Op_LParen) {
    this->_Next();
  }
  else {
    if (!this->parse_opts->parse_sloppy_case()) {
      p_die(str1136, Alloc<loc::Word>(this->cur_word));
    }
  }
  pat_words = Alloc<List<syntax_asdl::word_t*>>();
  while (true) {
    this->_Peek();
    pat_words->append(this->cur_word);
    this->_Next();
    this->_Peek();
    if (this->c_id == Id::Op_Pipe) {
      this->_Next();
    }
    else {
      break;
    }
  }
  if ((!this->parse_opts->parse_bare_word() and len(pat_words) == 1)) {
    Tuple3<bool, Str*, bool> tup21 = word_::StaticEval(pat_words->index_(0));
    ok = tup21.at0();
    s = tup21.at1();
    quoted = tup21.at2();
    if ((ok and (match::IsValidVarName(s) and !quoted))) {
      p_die(str1137, Alloc<loc::Word>(pat_words->index_(0)));
    }
  }
  rparen_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Eat(Id::Right_CasePat);
  this->_NewlineOk();
  if ((this->c_id != Id::Op_DSemi && this->c_id != Id::KW_Esac)) {
    c_list = this->_ParseCommandTerm();
    action_children = c_list->children;
  }
  else {
    action_children = Alloc<List<syntax_asdl::command_t*>>();
  }
  dsemi_spid = runtime::NO_SPID;
  last_spid = runtime::NO_SPID;
  this->_Peek();
  if (this->c_id == Id::KW_Esac) {
    last_spid = word_::LeftMostSpanForWord(this->cur_word);
  }
  else {
    if (this->c_id == Id::Op_DSemi) {
      dsemi_spid = word_::LeftMostSpanForWord(this->cur_word);
      this->_Next();
    }
    else {
      p_die(str1138, Alloc<loc::Word>(this->cur_word));
    }
  }
  this->_NewlineOk();
  spids = NewList<int>(std::initializer_list<int>{left_spid, rparen_spid, dsemi_spid, last_spid});
  arm = Alloc<syntax_asdl::case_arm>(pat_words, action_children, spids);
  return arm;
}

void CommandParser::ParseCaseList(List<syntax_asdl::case_arm*>* arms) {
  syntax_asdl::case_arm* arm = nullptr;
  StackRoots _roots({&arms, &arm});

  this->_Peek();
  while (true) {
    if (this->c_id == Id::KW_Esac) {
      break;
    }
    if ((this->parse_opts->parse_brace() and this->c_id == Id::Lit_RBrace)) {
      break;
    }
    if ((this->c_kind != Kind::Word and this->c_id != Id::Op_LParen)) {
      break;
    }
    arm = this->ParseCaseItem();
    arms->append(arm);
    this->_Peek();
  }
}

syntax_asdl::command__Case* CommandParser::ParseCase() {
  syntax_asdl::command__Case* case_node = nullptr;
  int case_spid;
  syntax_asdl::word_t* to_match = nullptr;
  bool ok;
  Str* s = nullptr;
  bool quoted;
  int in_spid;
  int esac_spid;
  StackRoots _roots({&case_node, &to_match, &s});

  case_node = command::Case::Create();
  case_spid = _KeywordSpid(this->cur_word);
  this->_Next();
  this->_Peek();
  to_match = this->cur_word;
  if (!this->parse_opts->parse_bare_word()) {
    Tuple3<bool, Str*, bool> tup22 = word_::StaticEval(to_match);
    ok = tup22.at0();
    s = tup22.at1();
    quoted = tup22.at2();
    if ((ok and !quoted)) {
      p_die(str1139, Alloc<loc::Word>(to_match));
    }
  }
  case_node->to_match = to_match;
  this->_Next();
  this->_NewlineOk();
  in_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Peek();
  if ((this->parse_opts->parse_brace() and this->c_id == Id::Lit_LBrace)) {
    this->_Next();
  }
  else {
    this->_Eat(Id::KW_In);
  }
  this->_NewlineOk();
  if (this->c_id != Id::KW_Esac) {
    this->ParseCaseList(case_node->arms);
    this->_Peek();
  }
  esac_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Peek();
  if ((this->parse_opts->parse_brace() and this->c_id == Id::Lit_RBrace)) {
    this->_Next();
  }
  else {
    this->_Eat(Id::KW_Esac);
  }
  this->_Next();
  case_node->spids->append(case_spid);
  case_node->spids->append(in_spid);
  case_node->spids->append(esac_spid);
  return case_node;
}

void CommandParser::_ParseOilElifElse(syntax_asdl::command__If* if_node) {
  List<syntax_asdl::if_arm*>* arms = nullptr;
  int elif_spid;
  syntax_asdl::expr_t* enode = nullptr;
  syntax_asdl::condition_t* cond = nullptr;
  syntax_asdl::command__CommandList* commands = nullptr;
  syntax_asdl::BraceGroup* body = nullptr;
  syntax_asdl::if_arm* arm = nullptr;
  int else_spid;
  StackRoots _roots({&if_node, &arms, &enode, &cond, &commands, &body, &arm});

  arms = if_node->arms;
  while (this->c_id == Id::KW_Elif) {
    elif_spid = word_::LeftMostSpanForWord(this->cur_word);
    this->_Next();
    if ((this->parse_opts->parse_paren() and this->w_parser->LookPastSpace() == Id::Op_LParen)) {
      Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> tup23 = this->parse_ctx->ParseOilExpr(this->lexer, grammar_nt::oil_expr);
      enode = tup23.at0();
      cond = Alloc<condition::Oil>(enode);
    }
    else {
      this->allow_block = false;
      commands = this->_ParseCommandList();
      this->allow_block = true;
      cond = Alloc<condition::Shell>(commands->children);
    }
    body = this->ParseBraceGroup();
    this->_Peek();
    arm = Alloc<syntax_asdl::if_arm>(cond, body->children, NewList<int>(std::initializer_list<int>{elif_spid}));
    arms->append(arm);
  }
  this->_Peek();
  if (this->c_id == Id::KW_Else) {
    else_spid = word_::LeftMostSpanForWord(this->cur_word);
    this->_Next();
    body = this->ParseBraceGroup();
    if_node->else_action = body->children;
  }
  else {
    else_spid = runtime::NO_SPID;
  }
  if_node->spids->append(else_spid);
}

syntax_asdl::command__If* CommandParser::_ParseOilIf(int if_spid, syntax_asdl::condition_t* cond) {
  syntax_asdl::command__If* if_node = nullptr;
  syntax_asdl::BraceGroup* body1 = nullptr;
  syntax_asdl::if_arm* arm = nullptr;
  StackRoots _roots({&cond, &if_node, &body1, &arm});

  if_node = command::If::Create();
  body1 = this->ParseBraceGroup();
  arm = Alloc<syntax_asdl::if_arm>(cond, body1->children, NewList<int>(std::initializer_list<int>{if_spid}));
  if_node->arms->append(arm);
  this->_Peek();
  if ((this->c_id == Id::KW_Elif || this->c_id == Id::KW_Else)) {
    this->_ParseOilElifElse(if_node);
  }
  else {
    if_node->spids->append(runtime::NO_SPID);
  }
  return if_node;
}

void CommandParser::_ParseElifElse(syntax_asdl::command__If* if_node) {
  List<syntax_asdl::if_arm*>* arms = nullptr;
  int elif_spid;
  syntax_asdl::command__CommandList* commands = nullptr;
  syntax_asdl::condition__Shell* cond = nullptr;
  int then_spid;
  syntax_asdl::command__CommandList* body = nullptr;
  syntax_asdl::if_arm* arm = nullptr;
  int else_spid;
  StackRoots _roots({&if_node, &arms, &commands, &cond, &body, &arm});

  arms = if_node->arms;
  this->_Peek();
  while (this->c_id == Id::KW_Elif) {
    elif_spid = word_::LeftMostSpanForWord(this->cur_word);
    this->_Next();
    commands = this->_ParseCommandList();
    cond = Alloc<condition::Shell>(commands->children);
    then_spid = word_::LeftMostSpanForWord(this->cur_word);
    this->_Eat(Id::KW_Then);
    body = this->_ParseCommandList();
    arm = Alloc<syntax_asdl::if_arm>(cond, body->children, NewList<int>(std::initializer_list<int>{elif_spid, then_spid}));
    arms->append(arm);
  }
  if (this->c_id == Id::KW_Else) {
    else_spid = word_::LeftMostSpanForWord(this->cur_word);
    this->_Next();
    body = this->_ParseCommandList();
    if_node->else_action = body->children;
  }
  else {
    else_spid = runtime::NO_SPID;
  }
  if_node->spids->append(else_spid);
}

syntax_asdl::command__If* CommandParser::ParseIf() {
  int if_spid;
  syntax_asdl::command__If* if_node = nullptr;
  syntax_asdl::expr_t* enode = nullptr;
  syntax_asdl::condition_t* cond = nullptr;
  syntax_asdl::command__CommandList* commands = nullptr;
  int then_spid;
  syntax_asdl::command__CommandList* body = nullptr;
  syntax_asdl::if_arm* arm = nullptr;
  int fi_spid;
  StackRoots _roots({&if_node, &enode, &cond, &commands, &body, &arm});

  if_spid = _KeywordSpid(this->cur_word);
  if_node = command::If::Create();
  this->_Next();
  if ((this->parse_opts->parse_paren() and this->w_parser->LookPastSpace() == Id::Op_LParen)) {
    Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> tup24 = this->parse_ctx->ParseOilExpr(this->lexer, grammar_nt::oil_expr);
    enode = tup24.at0();
    cond = Alloc<condition::Oil>(enode);
  }
  else {
    this->allow_block = false;
    commands = this->_ParseCommandList();
    this->allow_block = true;
    cond = Alloc<condition::Shell>(commands->children);
  }
  this->_Peek();
  if ((this->parse_opts->parse_brace() and this->c_id == Id::Lit_LBrace)) {
    return this->_ParseOilIf(if_spid, cond);
  }
  then_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Eat(Id::KW_Then);
  body = this->_ParseCommandList();
  arm = Alloc<syntax_asdl::if_arm>(cond, body->children, NewList<int>(std::initializer_list<int>{if_spid, then_spid}));
  if_node->arms->append(arm);
  if ((this->c_id == Id::KW_Elif || this->c_id == Id::KW_Else)) {
    this->_ParseElifElse(if_node);
  }
  else {
    if_node->spids->append(runtime::NO_SPID);
  }
  fi_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Eat(Id::KW_Fi);
  if_node->spids->append(fi_spid);
  return if_node;
}

syntax_asdl::command_t* CommandParser::ParseTime() {
  int time_spid;
  syntax_asdl::command_t* pipeline = nullptr;
  syntax_asdl::command__TimeBlock* node = nullptr;
  StackRoots _roots({&pipeline, &node});

  time_spid = _KeywordSpid(this->cur_word);
  this->_Next();
  pipeline = this->ParsePipeline();
  node = Alloc<command::TimeBlock>(pipeline);
  node->spids->append(time_spid);
  return node;
}

syntax_asdl::command_t* CommandParser::ParseCompoundCommand() {
  syntax_asdl::BraceGroup* n1 = nullptr;
  syntax_asdl::command__Subshell* n2 = nullptr;
  syntax_asdl::Token* keyword = nullptr;
  syntax_asdl::command__WhileUntil* n3 = nullptr;
  syntax_asdl::command__If* n4 = nullptr;
  syntax_asdl::command__Case* n5 = nullptr;
  syntax_asdl::command__DBracket* n6 = nullptr;
  syntax_asdl::command__DParen* n7 = nullptr;
  StackRoots _roots({&n1, &n2, &keyword, &n3, &n4, &n5, &n6, &n7});

  if (this->c_id == Id::Lit_LBrace) {
    n1 = this->ParseBraceGroup();
    n1->redirects = this->_ParseRedirectList();
    return n1;
  }
  if (this->c_id == Id::Op_LParen) {
    n2 = this->ParseSubshell();
    n2->redirects = this->_ParseRedirectList();
    return n2;
  }
  if (this->c_id == Id::KW_For) {
    return this->ParseFor();
  }
  if ((this->c_id == Id::KW_While || this->c_id == Id::KW_Until)) {
    keyword = _KeywordToken(this->cur_word);
    n3 = this->ParseWhileUntil(keyword);
    n3->redirects = this->_ParseRedirectList();
    return n3;
  }
  if (this->c_id == Id::KW_If) {
    n4 = this->ParseIf();
    n4->redirects = this->_ParseRedirectList();
    return n4;
  }
  if (this->c_id == Id::KW_Case) {
    n5 = this->ParseCase();
    n5->redirects = this->_ParseRedirectList();
    return n5;
  }
  if (this->c_id == Id::KW_DLeftBracket) {
    n6 = this->ParseDBracket();
    n6->redirects = this->_ParseRedirectList();
    return n6;
  }
  if (this->c_id == Id::Op_DLeftParen) {
    if (!this->parse_opts->parse_dparen()) {
      p_die(str1140, Alloc<loc::Word>(this->cur_word));
    }
    n7 = this->ParseDParen();
    n7->redirects = this->_ParseRedirectList();
    return n7;
  }
  if (this->c_id == Id::KW_Time) {
    return this->ParseTime();
  }
  p_die(str1141, Alloc<loc::Word>(this->cur_word));
}

syntax_asdl::command__ShFunction* CommandParser::ParseFunctionDef() {
  int left_spid;
  Str* name = nullptr;
  syntax_asdl::word_part_t* part0 = nullptr;
  int after_name_spid;
  syntax_asdl::command__ShFunction* func = nullptr;
  StackRoots _roots({&name, &part0, &func});

  left_spid = word_::LeftMostSpanForWord(this->cur_word);
  compound_word* word0 = static_cast<compound_word*>(this->cur_word);
  name = word_::ShFunctionName(word0);
  if (len(name) == 0) {
    p_die(str1142, Alloc<loc::Word>(word0));
  }
  part0 = word0->parts->index_(0);
  Token* blame_tok = static_cast<Token*>(part0);
  this->_Next();
  this->_Peek();
  this->lexer->PushHint(Id::Op_RParen, Id::Right_ShFunction);
  this->_Next();
  this->_Peek();
  if (this->c_id == Id::Right_ShFunction) {
    this->_Next();
    after_name_spid = (word_::LeftMostSpanForWord(this->cur_word) + 1);
    this->_NewlineOk();
    func = command::ShFunction::Create();
    func->name = name;
    {  // with
      ctx_VarChecker ctx{this->var_checker, blame_tok};

      func->body = this->ParseCompoundCommand();
    }
    func->spids->append(left_spid);
    func->spids->append(left_spid);
    func->spids->append(after_name_spid);
    return func;
  }
  else {
    p_die(str1143, Alloc<loc::Word>(this->cur_word));
    return nullptr;
  }
}

syntax_asdl::command__ShFunction* CommandParser::ParseKshFunctionDef() {
  syntax_asdl::Token* keyword_tok = nullptr;
  int left_spid;
  Str* name = nullptr;
  int name_spid;
  int after_name_spid;
  syntax_asdl::command__ShFunction* func = nullptr;
  StackRoots _roots({&keyword_tok, &name, &func});

  keyword_tok = _KeywordToken(this->cur_word);
  left_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Next();
  this->_Peek();
  compound_word* cur_word = static_cast<compound_word*>(this->cur_word);
  name = word_::ShFunctionName(cur_word);
  if (len(name) == 0) {
    p_die(str1144, Alloc<loc::Word>(cur_word));
  }
  name_spid = word_::LeftMostSpanForWord(this->cur_word);
  after_name_spid = (name_spid + 1);
  this->_Next();
  this->_Peek();
  if (this->c_id == Id::Op_LParen) {
    this->lexer->PushHint(Id::Op_RParen, Id::Right_ShFunction);
    this->_Next();
    this->_Eat(Id::Right_ShFunction);
    after_name_spid = (word_::LeftMostSpanForWord(this->cur_word) + 1);
  }
  this->_NewlineOk();
  func = command::ShFunction::Create();
  func->name = name;
  {  // with
    ctx_VarChecker ctx{this->var_checker, keyword_tok};

    func->body = this->ParseCompoundCommand();
  }
  func->spids->append(left_spid);
  func->spids->append(name_spid);
  func->spids->append(after_name_spid);
  return func;
}

syntax_asdl::command__Proc* CommandParser::ParseOilProc() {
  syntax_asdl::command__Proc* node = nullptr;
  syntax_asdl::Token* keyword_tok = nullptr;
  StackRoots _roots({&node, &keyword_tok});

  node = command::Proc::Create();
  keyword_tok = _KeywordToken(this->cur_word);
  {  // with
    ctx_VarChecker ctx{this->var_checker, keyword_tok};

    this->w_parser->ParseProc(node);
    if (node->sig->tag_() == proc_sig_e::Closed) {
      proc_sig__Closed* sig = static_cast<proc_sig__Closed*>(node->sig);
      for (ListIter<syntax_asdl::UntypedParam*> it(sig->untyped); !it.Done(); it.Next()) {
        syntax_asdl::UntypedParam* param = it.Value();
        StackRoots _for({&param      });
        this->var_checker->Check(Id::KW_Var, param->name);
      }
      if (sig->rest) {
        this->var_checker->Check(Id::KW_Var, sig->rest);
      }
      for (ListIter<syntax_asdl::TypedParam*> it(sig->typed); !it.Done(); it.Next()) {
        syntax_asdl::TypedParam* param2 = it.Value();
        StackRoots _for({&param2      });
        this->var_checker->Check(Id::KW_Var, param2->name);
      }
    }
    this->_Next();
    node->body = this->ParseBraceGroup();
  }
  return node;
}

syntax_asdl::command_t* CommandParser::ParseCoproc() {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

syntax_asdl::command__Subshell* CommandParser::ParseSubshell() {
  int left_spid;
  syntax_asdl::command__CommandList* c_list = nullptr;
  syntax_asdl::command_t* child = nullptr;
  syntax_asdl::command__Subshell* node = nullptr;
  int right_spid;
  StackRoots _roots({&c_list, &child, &node});

  left_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Next();
  this->lexer->PushHint(Id::Op_RParen, Id::Right_Subshell);
  c_list = this->_ParseCommandList();
  if (len(c_list->children) == 1) {
    child = c_list->children->index_(0);
  }
  else {
    child = c_list;
  }
  node = Alloc<command::Subshell>(child, nullptr);
  right_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Eat(Id::Right_Subshell);
  node->spids->append(left_spid);
  node->spids->append(right_spid);
  return node;
}

syntax_asdl::command__DBracket* CommandParser::ParseDBracket() {
  int left_spid;
  bool_parse::BoolParser* b_parser = nullptr;
  syntax_asdl::bool_expr_t* bnode = nullptr;
  int right_spid;
  syntax_asdl::command__DBracket* node = nullptr;
  StackRoots _roots({&b_parser, &bnode, &node});

  left_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Next();
  b_parser = Alloc<bool_parse::BoolParser>(this->w_parser);
  bnode = b_parser->Parse();
  this->_Peek();
  right_spid = word_::LeftMostSpanForWord(this->cur_word);
  node = Alloc<command::DBracket>(bnode, nullptr);
  node->spids->append(left_spid);
  node->spids->append(right_spid);
  return node;
}

syntax_asdl::command__DParen* CommandParser::ParseDParen() {
  int left_spid;
  syntax_asdl::arith_expr_t* anode = nullptr;
  int right_spid;
  syntax_asdl::command__DParen* node = nullptr;
  StackRoots _roots({&anode, &node});

  left_spid = word_::LeftMostSpanForWord(this->cur_word);
  this->_Next();
  anode = this->w_parser->ReadDParen();
  this->_Peek();
  right_spid = word_::LeftMostSpanForWord(this->cur_word);
  node = Alloc<command::DParen>(anode, nullptr);
  node->spids->append(left_spid);
  node->spids->append(right_spid);
  return node;
}

syntax_asdl::command_t* CommandParser::ParseCommand() {
  int keyword_id;
  syntax_asdl::Token* kw_token = nullptr;
  syntax_asdl::command__VarDecl* n8 = nullptr;
  syntax_asdl::command__PlaceMutation* n9 = nullptr;
  syntax_asdl::Token* keyword = nullptr;
  syntax_asdl::expr_t* enode = nullptr;
  syntax_asdl::command__Func* out0 = nullptr;
  syntax_asdl::command__Data* out1 = nullptr;
  syntax_asdl::command__Enum* out2 = nullptr;
  syntax_asdl::command__Class* out3 = nullptr;
  syntax_asdl::command__Import* out4 = nullptr;
  List<syntax_asdl::word_part_t*>* parts = nullptr;
  syntax_asdl::word_part_t* part0 = nullptr;
  StackRoots _roots({&kw_token, &n8, &n9, &keyword, &enode, &out0, &out1, &out2, &out3, &out4, &parts, &part0});

  this->_Peek();
  if (this->_AtSecondaryKeyword()) {
    p_die(str1145, Alloc<loc::Word>(this->cur_word));
  }
  if (this->c_id == Id::KW_Proc) {
    if (this->parse_opts->parse_proc()) {
      return this->ParseOilProc();
    }
    else {
      p_die(str1146, Alloc<loc::Word>(this->cur_word));
    }
  }
  if ((this->c_id == Id::KW_Var || this->c_id == Id::KW_Const)) {
    keyword_id = this->c_id;
    kw_token = word_::LiteralToken(this->cur_word);
    this->_Next();
    n8 = this->w_parser->ParseVarDecl(kw_token);
    for (ListIter<syntax_asdl::name_type*> it(n8->lhs); !it.Done(); it.Next()) {
      syntax_asdl::name_type* lhs = it.Value();
      StackRoots _for({&lhs    });
      this->var_checker->Check(keyword_id, lhs->name);
    }
    return n8;
  }
  if ((this->c_id == Id::KW_SetVar || this->c_id == Id::KW_SetRef || this->c_id == Id::KW_SetGlobal)) {
    kw_token = word_::LiteralToken(this->cur_word);
    this->_Next();
    n9 = this->w_parser->ParsePlaceMutation(kw_token, this->var_checker);
    return n9;
  }
  if ((this->c_id == Id::Lit_Underscore || this->c_id == Id::Lit_Equals)) {
    keyword = _KeywordToken(this->cur_word);
    this->_Next();
    enode = this->w_parser->ParseCommandExpr();
    return Alloc<command::Expr>(keyword, enode);
  }
  if (this->c_id == Id::KW_Function) {
    return this->ParseKshFunctionDef();
  }
  if (this->parse_opts->parse_tea()) {
    if (this->c_id == Id::KW_Func) {
      out0 = command::Func::Create();
      this->parse_ctx->ParseFunc(this->lexer, out0);
      this->_Next();
      return out0;
    }
    if (this->c_id == Id::KW_Data) {
      out1 = command::Data::Create();
      this->parse_ctx->ParseDataType(this->lexer, out1);
      this->_Next();
      return out1;
    }
    if (this->c_id == Id::KW_Enum) {
      out2 = command::Enum::Create();
      this->parse_ctx->ParseEnum(this->lexer, out2);
      this->_Next();
      return out2;
    }
    if (this->c_id == Id::KW_Class) {
      out3 = command::Class::Create();
      this->parse_ctx->ParseClass(this->lexer, out3);
      this->_Next();
      return out3;
    }
    if (this->c_id == Id::KW_Import) {
      out4 = command::Import::Create();
      this->w_parser->ParseImport(out4);
      this->_Next();
      return out4;
    }
  }
  if ((this->c_id == Id::KW_DLeftBracket || this->c_id == Id::Op_DLeftParen || this->c_id == Id::Op_LParen || this->c_id == Id::Lit_LBrace || this->c_id == Id::KW_For || this->c_id == Id::KW_While || this->c_id == Id::KW_Until || this->c_id == Id::KW_If || this->c_id == Id::KW_Case || this->c_id == Id::KW_Time)) {
    return this->ParseCompoundCommand();
  }
  if (this->c_id == Id::Lit_RBrace) {
    p_die(str1147, Alloc<loc::Word>(this->cur_word));
  }
  if (this->c_kind == Kind::Redir) {
    return this->ParseSimpleCommand();
  }
  if (this->c_kind == Kind::Word) {
    compound_word* cur_word = static_cast<compound_word*>(this->cur_word);
    if ((this->w_parser->LookAheadFuncParens() and !word_::IsVarLike(cur_word))) {
      return this->ParseFunctionDef();
    }
    parts = cur_word->parts;
    if ((this->parse_opts->parse_equals() and len(parts) == 1)) {
      part0 = parts->index_(0);
      if (part0->tag_() == word_part_e::Literal) {
        Token* tok = static_cast<Token*>(part0);
        if ((match::IsValidVarName(tok->tval) and this->w_parser->LookPastSpace() == Id::Lit_Equals)) {
          if ((len(this->allow_block_attrs) and this->allow_block_attrs->index_(-1))) {
            enode = this->w_parser->ParseBareDecl();
            this->_Next();
            return Alloc<command::VarDecl>(nullptr, NewList<syntax_asdl::name_type*>(std::initializer_list<syntax_asdl::name_type*>{Alloc<name_type>(tok, nullptr)}), enode);
          }
          else {
            this->_Next();
            this->_Peek();
            p_die(str1148, Alloc<loc::Word>(this->cur_word));
          }
        }
      }
    }
    return this->ParseSimpleCommand();
  }
  if (this->c_kind == Kind::Eof) {
    p_die(str1149, Alloc<loc::Word>(this->cur_word));
  }
  p_die(str1150, Alloc<loc::Word>(this->cur_word));
}

syntax_asdl::command_t* CommandParser::ParsePipeline() {
  bool negated;
  int pipeline_spid;
  syntax_asdl::command_t* child = nullptr;
  List<syntax_asdl::command_t*>* children = nullptr;
  List<int>* no_stderrs = nullptr;
  syntax_asdl::command__Pipeline* node = nullptr;
  int pipe_index;
  List<int>* stderr_indices = nullptr;
  StackRoots _roots({&child, &children, &no_stderrs, &node, &stderr_indices});

  negated = false;
  pipeline_spid = runtime::NO_SPID;
  this->_Peek();
  if (this->c_id == Id::KW_Bang) {
    pipeline_spid = word_::LeftMostSpanForWord(this->cur_word);
    negated = true;
    this->_Next();
  }
  child = this->ParseCommand();
  children = NewList<syntax_asdl::command_t*>(std::initializer_list<syntax_asdl::command_t*>{child});
  this->_Peek();
  if ((this->c_id != Id::Op_Pipe && this->c_id != Id::Op_PipeAmp)) {
    if (negated) {
      no_stderrs = Alloc<List<int>>();
      node = Alloc<command::Pipeline>(children, negated, no_stderrs);
      node->spids->append(pipeline_spid);
      return node;
    }
    else {
      return child;
    }
  }
  pipe_index = 0;
  stderr_indices = Alloc<List<int>>();
  if (this->c_id == Id::Op_PipeAmp) {
    stderr_indices->append(pipe_index);
  }
  pipe_index += 1;
  while (true) {
    if (pipeline_spid == runtime::NO_SPID) {
      pipeline_spid = word_::LeftMostSpanForWord(this->cur_word);
    }
    this->_Next();
    this->_NewlineOk();
    child = this->ParseCommand();
    children->append(child);
    this->_Peek();
    if ((this->c_id != Id::Op_Pipe && this->c_id != Id::Op_PipeAmp)) {
      break;
    }
    if (this->c_id == Id::Op_PipeAmp) {
      stderr_indices->append(pipe_index);
    }
    pipe_index += 1;
  }
  node = Alloc<command::Pipeline>(children, negated, stderr_indices);
  node->spids->append(pipeline_spid);
  return node;
}

syntax_asdl::command_t* CommandParser::ParseAndOr() {
  syntax_asdl::Token* first_word_tok = nullptr;
  StackRoots _roots({&first_word_tok});

  this->_Peek();
  if (this->c_id == Id::Word_Compound) {
    first_word_tok = word_::LiteralToken(this->cur_word);
    if ((first_word_tok != nullptr and first_word_tok->id == Id::Lit_TDot)) {
      this->_Next();
      {  // with
        word_::ctx_Multiline ctx{this->w_parser};

        return this->_ParseAndOr();
      }
    }
  }
  return this->_ParseAndOr();
}

syntax_asdl::command_t* CommandParser::_ParseAndOr() {
  syntax_asdl::command_t* child = nullptr;
  List<int>* ops = nullptr;
  List<int>* op_spids = nullptr;
  List<syntax_asdl::command_t*>* children = nullptr;
  syntax_asdl::command__AndOr* node = nullptr;
  StackRoots _roots({&child, &ops, &op_spids, &children, &node});

  child = this->ParsePipeline();
  this->_Peek();
  if ((this->c_id != Id::Op_DPipe && this->c_id != Id::Op_DAmp)) {
    return child;
  }
  ops = Alloc<List<int>>();
  op_spids = Alloc<List<int>>();
  children = NewList<syntax_asdl::command_t*>(std::initializer_list<syntax_asdl::command_t*>{child});
  while (true) {
    ops->append(this->c_id);
    op_spids->append(word_::LeftMostSpanForWord(this->cur_word));
    this->_Next();
    this->_NewlineOk();
    child = this->ParsePipeline();
    children->append(child);
    this->_Peek();
    if ((this->c_id != Id::Op_DPipe && this->c_id != Id::Op_DAmp)) {
      break;
    }
  }
  node = Alloc<command::AndOr>(ops, children);
  node->spids = op_spids;
  return node;
}

syntax_asdl::command_t* CommandParser::_ParseCommandLine() {
  List<int>* END_LIST = nullptr;
  List<syntax_asdl::command_t*>* children = nullptr;
  bool done;
  syntax_asdl::command_t* child = nullptr;
  StackRoots _roots({&END_LIST, &children, &child});

  END_LIST = NewList<int>(std::initializer_list<int>{Id::Op_Newline, Id::Eof_Real});
  children = Alloc<List<syntax_asdl::command_t*>>();
  done = false;
  while (!done) {
    child = this->ParseAndOr();
    this->_Peek();
    if ((this->c_id == Id::Op_Semi || this->c_id == Id::Op_Amp)) {
      Token* tok = static_cast<Token*>(this->cur_word);
      child = Alloc<command::Sentence>(child, tok);
      this->_Next();
      this->_Peek();
      if (list_contains(END_LIST, this->c_id)) {
        done = true;
      }
    }
    else {
      if (list_contains(END_LIST, this->c_id)) {
        done = true;
      }
      else {
        p_die(str1151, Alloc<loc::Word>(this->cur_word));
      }
    }
    children->append(child);
  }
  if (len(children) > 1) {
    return Alloc<command::CommandList>(children);
  }
  else {
    return children->index_(0);
  }
}

syntax_asdl::command__CommandList* CommandParser::_ParseCommandTerm() {
  List<int>* END_LIST = nullptr;
  List<syntax_asdl::command_t*>* children = nullptr;
  bool done;
  syntax_asdl::command_t* child = nullptr;
  StackRoots _roots({&END_LIST, &children, &child});

  END_LIST = NewList<int>(std::initializer_list<int>{this->eof_id, Id::Right_Subshell, Id::Lit_RBrace, Id::Op_DSemi});
  children = Alloc<List<syntax_asdl::command_t*>>();
  done = false;
  while (!done) {
    this->_Peek();
    if (this->_AtSecondaryKeyword()) {
      break;
    }
    child = this->ParseAndOr();
    this->_Peek();
    if (this->c_id == Id::Op_Newline) {
      this->_Next();
      this->_Peek();
      if (list_contains(END_LIST, this->c_id)) {
        done = true;
      }
    }
    else {
      if ((this->c_id == Id::Op_Semi || this->c_id == Id::Op_Amp)) {
        Token* tok = static_cast<Token*>(this->cur_word);
        child = Alloc<command::Sentence>(child, tok);
        this->_Next();
        this->_Peek();
        if (this->c_id == Id::Op_Newline) {
          this->_Next();
          this->_Peek();
          if (list_contains(END_LIST, this->c_id)) {
            done = true;
          }
        }
        else {
          if (list_contains(END_LIST, this->c_id)) {
            done = true;
          }
        }
      }
      else {
        if (list_contains(END_LIST, this->c_id)) {
          done = true;
        }
        else {
          if ((this->parse_opts->parse_brace() and this->c_id == Id::Lit_LBrace)) {
            done = true;
          }
          else {
            if (this->c_kind != Kind::Word) {
              p_die(str1152, Alloc<loc::Word>(this->cur_word));
            }
          }
        }
      }
    }
    children->append(child);
  }
  this->_Peek();
  return Alloc<command::CommandList>(children);
}

syntax_asdl::command__CommandList* CommandParser::_ParseCommandList() {
  syntax_asdl::command__CommandList* node = nullptr;
  StackRoots _roots({&node});

  this->_NewlineOk();
  node = this->_ParseCommandTerm();
  return node;
}

syntax_asdl::command_t* CommandParser::ParseLogicalLine() {
  syntax_asdl::command_t* node = nullptr;
  StackRoots _roots({&node});

  this->_NewlineOk();
  this->_Peek();
  if (this->c_id == Id::Eof_Real) {
    return nullptr;
  }
  node = this->_ParseCommandLine();
  return node;
}

syntax_asdl::parse_result_t* CommandParser::ParseInteractiveLine() {
  syntax_asdl::command_t* node = nullptr;
  StackRoots _roots({&node});

  this->_Peek();
  if (this->c_id == Id::Op_Newline) {
    return Alloc<parse_result::EmptyLine>();
  }
  if (this->c_id == Id::Eof_Real) {
    return Alloc<parse_result::Eof>();
  }
  node = this->_ParseCommandLine();
  return Alloc<parse_result::Node>(node);
}

syntax_asdl::command_t* CommandParser::ParseCommandSub() {
  syntax_asdl::command__CommandList* c_list = nullptr;
  StackRoots _roots({&c_list});

  this->_NewlineOk();
  if (this->c_kind == Kind::Eof) {
    return Alloc<command::NoOp>();
  }
  c_list = this->_ParseCommandTerm();
  if (len(c_list->children) == 1) {
    return c_list->children->index_(0);
  }
  else {
    return c_list;
  }
}

void CommandParser::CheckForPendingHereDocs() {
  syntax_asdl::redir* node = nullptr;
  StackRoots _roots({&node});

  if (len(this->pending_here_docs)) {
    node = this->pending_here_docs->index_(0);
    redir_param__HereDoc* h = static_cast<redir_param__HereDoc*>(node->arg);
    p_die(str1153, Alloc<loc::Word>(h->here_begin));
  }
}

}  // define namespace cmd_parse

namespace glob_ {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using syntax_asdl::compound_word;
using syntax_asdl::Token;
using syntax_asdl::word_part_e;
using syntax_asdl::glob_part_e;
using syntax_asdl::glob_part;
using syntax_asdl::glob_part_t;
using syntax_asdl::glob_part__Literal;
using syntax_asdl::glob_part__Operator;
using syntax_asdl::glob_part__CharClass;
using mylib::print_stderr;

bool LooksLikeGlob(Str* s) {
  bool left_bracket;
  int i;
  int n;
  Str* c = nullptr;
  StackRoots _roots({&s, &c});

  left_bracket = false;
  i = 0;
  n = len(s);
  while (i < n) {
    c = s->index_(i);
    if (str_equals(c, str1154)) {
      i += 1;
    }
    else {
      if ((str_equals(c, str1155) or str_equals(c, str1156))) {
        return true;
      }
      else {
        if (str_equals(c, str1157)) {
          left_bracket = true;
        }
        else {
          if ((str_equals(c, str1158) and left_bracket)) {
            return true;
          }
        }
      }
    }
    i += 1;
  }
  return false;
}

bool LooksLikeStaticGlob(syntax_asdl::compound_word* w) {
  bool left_bracket;
  int id_;
  StackRoots _roots({&w});

  left_bracket = false;
  for (ListIter<syntax_asdl::word_part_t*> it(w->parts); !it.Done(); it.Next()) {
    syntax_asdl::word_part_t* part = it.Value();
    StackRoots _for({&part  });
    if (part->tag_() == word_part_e::Literal) {
      id_ = static_cast<Token*>(part)->id;
      if ((id_ == Id::Lit_Star || id_ == Id::Lit_QMark)) {
        return true;
      }
      else {
        if (id_ == Id::Lit_LBracket) {
          left_bracket = true;
        }
        else {
          if ((id_ == Id::Lit_RBracket and left_bracket)) {
            return true;
          }
        }
      }
    }
  }
  return false;
}
Str* GLOB_META_CHARS = str1159;

Str* GlobEscape(Str* s) {
  StackRoots _roots({&s});

  return pyutil::BackslashEscape(s, GLOB_META_CHARS);
}
Str* ERE_META_CHARS = str1160;

Str* ExtendedRegexEscape(Str* s) {
  StackRoots _roots({&s});

  return pyutil::BackslashEscape(s, ERE_META_CHARS);
}

Str* GlobUnescape(Str* s) {
  List<Str*>* unescaped = nullptr;
  int i;
  int n;
  Str* c = nullptr;
  Str* c2 = nullptr;
  StackRoots _roots({&s, &unescaped, &c, &c2});

  unescaped = Alloc<List<Str*>>();
  i = 0;
  n = len(s);
  while (i < n) {
    c = s->index_(i);
    if ((str_equals(c, str1161) and i != (n - 1))) {
      i += 1;
      c2 = s->index_(i);
      if (str_contains(GLOB_META_CHARS, c2)) {
        unescaped->append(c2);
      }
      else {
        assert(0);  // AssertionError
      }
    }
    else {
      unescaped->append(c);
    }
    i += 1;
  }
  return str1163->join(unescaped);
}

_GlobParser::_GlobParser(match::SimpleLexer* lexer) 
    : header_(obj_header()) {
  this->lexer = lexer;
  this->token_type = Id::Undefined_Tok;
  this->token_val = str1164;
  this->warnings = Alloc<List<Str*>>();
}

void _GlobParser::_Next() {
  Tuple2<int, Str*> tup0 = this->lexer->Next();
  this->token_type = tup0.at0();
  this->token_val = tup0.at1();
}

List<syntax_asdl::glob_part_t*>* _GlobParser::_ParseCharClass() {
  syntax_asdl::glob_part__Literal* first_token = nullptr;
  int balance;
  List<Tuple2<int, Str*>*>* tokens = nullptr;
  List<syntax_asdl::glob_part_t*>* parts = nullptr;
  int id_;
  Str* s = nullptr;
  bool negated;
  int id1;
  List<Str*>* strs = nullptr;
  StackRoots _roots({&first_token, &tokens, &parts, &s, &strs});

  first_token = Alloc<glob_part::Literal>(this->token_type, this->token_val);
  balance = 1;
  tokens = Alloc<List<Tuple2<int, Str*>*>>();
  while (true) {
    this->_Next();
    if (this->token_type == Id::Eol_Tok) {
      this->warnings->append(str1165);
      parts = NewList<syntax_asdl::glob_part_t*>(std::initializer_list<syntax_asdl::glob_part_t*>{first_token});
      for (ListIter<Tuple2<int, Str*>*> it(tokens); !it.Done(); it.Next()) {
        Tuple2<int, Str*>* tup1 = it.Value();
        id_ = tup1->at0();
        s = tup1->at1();
        parts->append(Alloc<glob_part::Literal>(id_, s));
      }
      return parts;
    }
    if (this->token_type == Id::Glob_LBracket) {
      balance += 1;
    }
    else {
      if (this->token_type == Id::Glob_RBracket) {
        balance -= 1;
      }
    }
    if (balance == 0) {
      break;
    }
    tokens->append((Alloc<Tuple2<int, Str*>>(this->token_type, this->token_val)));
  }
  negated = false;
  if (len(tokens)) {
    Tuple2<int, Str*>* tup2 = tokens->index_(0);
    id1 = tup2->at0();
    if ((id1 == Id::Glob_Bang || id1 == Id::Glob_Caret)) {
      negated = true;
      tokens = tokens->slice(1);
    }
  }
  strs = Alloc<List<Str*>>();
  for (ListIter<Tuple2<int, Str*>*> it(tokens); !it.Done(); it.Next()) {
    Tuple2<int, Str*>* tup3 = it.Value();
    s = tup3->at1();
    strs->append(s);
  }
  return NewList<syntax_asdl::glob_part_t*>(std::initializer_list<syntax_asdl::glob_part_t*>{Alloc<glob_part::CharClass>(negated, strs)});
}

Tuple2<List<syntax_asdl::glob_part_t*>*, List<Str*>*> _GlobParser::Parse() {
  List<syntax_asdl::glob_part_t*>* parts = nullptr;
  int id_;
  Str* s = nullptr;
  StackRoots _roots({&parts, &s});

  parts = Alloc<List<syntax_asdl::glob_part_t*>>();
  while (true) {
    this->_Next();
    id_ = this->token_type;
    s = this->token_val;
    if (id_ == Id::Eol_Tok) {
      break;
    }
    if ((id_ == Id::Glob_Star || id_ == Id::Glob_QMark)) {
      parts->append(Alloc<glob_part::Operator>(id_));
    }
    else {
      if (id_ == Id::Glob_LBracket) {
        parts->extend(this->_ParseCharClass());
      }
      else {
        parts->append(Alloc<glob_part::Literal>(id_, s));
      }
    }
    if (id_ == Id::Glob_RBracket) {
      this->warnings->append(str1166);
    }
    if (id_ == Id::Glob_BadBackslash) {
      this->warnings->append(str1167);
    }
  }
  return Tuple2<List<syntax_asdl::glob_part_t*>*, List<Str*>*>(parts, this->warnings);
}
Str* _REGEX_CHARS_TO_ESCAPE = str1168;

Str* _GenerateERE(List<syntax_asdl::glob_part_t*>* parts) {
  List<Str*>* out = nullptr;
  int tag;
  syntax_asdl::glob_part_t* UP_part = nullptr;
  Str* c = nullptr;
  List<Str*>* good = nullptr;
  bool literal_hyphen;
  bool literal_rbracket;
  StackRoots _roots({&parts, &out, &UP_part, &c, &good});

  out = Alloc<List<Str*>>();
  for (ListIter<syntax_asdl::glob_part_t*> it(parts); !it.Done(); it.Next()) {
    syntax_asdl::glob_part_t* part = it.Value();
    StackRoots _for({&part  });
    tag = part->tag_();
    UP_part = part;
    if (tag == glob_part_e::Literal) {
      glob_part__Literal* part = static_cast<glob_part__Literal*>(UP_part);
      if (part->id == Id::Glob_EscapedChar) {
        c = part->s->index_(1);
        if (str_contains(_REGEX_CHARS_TO_ESCAPE, c)) {
          out->append(str1169);
        }
        out->append(c);
      }
      else {
        if ((part->id == Id::Glob_CleanLiterals || part->id == Id::Glob_Bang)) {
          out->append(part->s);
        }
        else {
          if ((part->id == Id::Glob_OtherLiteral || part->id == Id::Glob_Caret)) {
            c = part->s;
            if (str_contains(_REGEX_CHARS_TO_ESCAPE, c)) {
              out->append(str1170);
            }
            out->append(c);
          }
          else {
            if (part->id == Id::Glob_LBracket) {
              out->append(str1171);
            }
            else {
              if (part->id == Id::Glob_RBracket) {
                out->append(str1172);
              }
              else {
                if (part->id == Id::Glob_BadBackslash) {
                  out->append(str1173);
                }
                else {
                  if (part->id == Id::Glob_Caret) {
                    out->append(str1174);
                  }
                  else {
                    assert(0);  // AssertionError
                  }
                }
              }
            }
          }
        }
      }
    }
    else {
      if (tag == glob_part_e::Operator) {
        glob_part__Operator* part = static_cast<glob_part__Operator*>(UP_part);
        if (part->op_id == Id::Glob_QMark) {
          out->append(str1175);
        }
        else {
          if (part->op_id == Id::Glob_Star) {
            out->append(str1176);
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
      else {
        if (tag == glob_part_e::CharClass) {
          glob_part__CharClass* part = static_cast<glob_part__CharClass*>(UP_part);
          out->append(str1177);
          if (part->negated) {
            out->append(str1178);
          }
          good = Alloc<List<Str*>>();
          literal_hyphen = false;
          literal_rbracket = false;
          for (ListIter<Str*> it(part->strs); !it.Done(); it.Next()) {
            Str* s = it.Value();
            StackRoots _for({&s          });
            if (str_equals(s, str1179)) {
              literal_hyphen = true;
              continue;
            }
            if (str_equals(s, str1180)) {
              literal_rbracket = true;
              continue;
            }
            good->append(s);
          }
          if (literal_rbracket) {
            out->append(str1181);
          }
          out->extend(good);
          if (literal_hyphen) {
            out->append(str1182);
          }
          out->append(str1183);
        }
      }
    }
  }
  return str1184->join(out);
}

Tuple2<Str*, List<Str*>*> GlobToERE(Str* pat) {
  match::SimpleLexer* lexer = nullptr;
  glob_::_GlobParser* p = nullptr;
  List<syntax_asdl::glob_part_t*>* parts = nullptr;
  List<Str*>* warnings = nullptr;
  Str* regex = nullptr;
  StackRoots _roots({&pat, &lexer, &p, &parts, &warnings, &regex});

  lexer = match::GlobLexer(pat);
  p = Alloc<_GlobParser>(lexer);
  Tuple2<List<syntax_asdl::glob_part_t*>*, List<Str*>*> tup4 = p->Parse();
  parts = tup4.at0();
  warnings = tup4.at1();
  regex = _GenerateERE(parts);
  return Tuple2<Str*, List<Str*>*>(regex, warnings);
}

Globber::Globber(optview::Exec* exec_opts) 
    : header_(obj_header()) {
  this->exec_opts = exec_opts;
}

int Globber::_Glob(Str* arg, List<Str*>* out) {
  List<Str*>* results = nullptr;
  Str* msg = nullptr;
  int n;
  List<Str*>* tmp = nullptr;
  StackRoots _roots({&arg, &out, &results, &msg, &tmp});

  try {
    results = libc::glob(arg);
  }
  catch (RuntimeError* e) {
    msg = e->message;
    print_stderr(StrFormat("Error expanding glob %r: %s", arg, msg));
    throw ;
  }
  n = len(results);
  if (n) {
    if (!this->exec_opts->dashglob()) {
      tmp = Alloc<List<Str*>>();
      for (ListIter<Str*> it(results); !it.Done(); it.Next()) {
        Str* s = it.Value();
        if (!s->startswith(str1186)) {
          tmp->append(s);
        }
      }
      results = tmp;
      n = len(results);
    }
    out->extend(results);
    return n;
  }
  return 0;
}

int Globber::Expand(Str* arg, List<Str*>* out) {
  int n;
  StackRoots _roots({&arg, &out});

  if (this->exec_opts->noglob()) {
    out->append(arg);
    return 1;
  }
  n = this->_Glob(arg, out);
  if (n) {
    return n;
  }
  if (this->exec_opts->failglob()) {
    return -1;
  }
  if (this->exec_opts->nullglob()) {
    return 0;
  }
  else {
    out->append(GlobUnescape(arg));
    return 1;
  }
}

int Globber::ExpandExtended(Str* glob_pat, Str* fnmatch_pat, List<Str*>* out) {
  List<Str*>* tmp = nullptr;
  List<Str*>* filtered = nullptr;
  int n;
  StackRoots _roots({&glob_pat, &fnmatch_pat, &out, &tmp, &filtered});

  if (this->exec_opts->noglob()) {
    out->append(fnmatch_pat);
    return 1;
  }
  tmp = Alloc<List<Str*>>();
  this->_Glob(glob_pat, tmp);
  filtered = Alloc<List<Str*>>();
  for (ListIter<Str*> it(tmp); !it.Done(); it.Next()) {
    Str* s = it.Value();
    if (libc::fnmatch(fnmatch_pat, s)) {
      filtered->append(s);
    }
  }
  n = len(filtered);
  if (n) {
    out->extend(filtered);
    return n;
  }
  if (this->exec_opts->failglob()) {
    return -1;
  }
  if (this->exec_opts->nullglob()) {
    return 0;
  }
  else {
    out->append(GlobUnescape(fnmatch_pat));
    return 1;
  }
}

List<Str*>* Globber::OilFuncCall(Str* arg) {
  List<Str*>* out = nullptr;
  StackRoots _roots({&arg, &out});

  out = Alloc<List<Str*>>();
  this->_Glob(arg, out);
  return out;
}

}  // define namespace glob_

namespace history {  // define

using id_kind_asdl::Id;

Evaluator::Evaluator(py_readline::Readline* readline, parse_lib::ParseContext* parse_ctx, util::_DebugFile* debug_f) 
    : header_(obj_header()) {
  this->readline = readline;
  this->parse_ctx = parse_ctx;
  this->debug_f = debug_f;
}

Str* Evaluator::Eval(Str* line) {
  List<Tuple2<int, Str*>*>* tokens = nullptr;
  bool ok;
  int id_;
  int history_len;
  List<Str*>* parts = nullptr;
  Str* val = nullptr;
  Str* out = nullptr;
  Str* prev = nullptr;
  Str* ch = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  List<syntax_asdl::compound_word*>* words = nullptr;
  syntax_asdl::compound_word* w = nullptr;
  int spid1;
  int spid2;
  syntax_asdl::compound_word* w1 = nullptr;
  syntax_asdl::compound_word* w2 = nullptr;
  alloc::Arena* arena = nullptr;
  syntax_asdl::Token* span1 = nullptr;
  syntax_asdl::Token* span2 = nullptr;
  int begin;
  int end;
  int index;
  int num;
  Str* last_char = nullptr;
  Str* prefix = nullptr;
  Str* substring = nullptr;
  Str* cmd = nullptr;
  StackRoots _roots({&line, &tokens, &parts, &val, &out, &prev, &ch, &line_reader, &c_parser, &words, &w, &w1, &w2, &arena, &span1, &span2, &last_char, &prefix, &substring, &cmd});

  if (!this->readline) {
    return line;
  }
  tokens = match::HistoryTokens(line);
  ok = true;
  for (ListIter<Tuple2<int, Str*>*> it(tokens); !it.Done(); it.Next()) {
    Tuple2<int, Str*>* tup0 = it.Value();
    id_ = tup0->at0();
    if (id_ != Id::History_Other) {
      ok = false;
      break;
    }
  }
  if (ok) {
    return line;
  }
  history_len = this->readline->get_current_history_length();
  if (history_len <= 0) {
    return line;
  }
  mylib::print_stderr(StrFormat("history length = %d", history_len));
  parts = Alloc<List<Str*>>();
  for (ListIter<Tuple2<int, Str*>*> it(tokens); !it.Done(); it.Next()) {
    Tuple2<int, Str*>* tup1 = it.Value();
    id_ = tup1->at0();
    val = tup1->at1();
    if (id_ == Id::History_Other) {
      out = val;
    }
    else {
      if (id_ == Id::History_Op) {
        prev = this->readline->get_history_item(history_len);
        ch = val->index_(1);
        if (str_equals(ch, str1188)) {
          out = prev;
        }
        else {
          this->parse_ctx->trail->Clear();
          line_reader = reader::StringLineReader(prev, this->parse_ctx->arena);
          c_parser = this->parse_ctx->MakeOshParser(line_reader);
          try {
            c_parser->ParseLogicalLine();
          }
          catch (error::Parse* e) {
            mylib::print_stderr(StrFormat("Couldn't parse historical command %r: %s", prev, e));
          }
          words = this->parse_ctx->trail->words;
          mylib::print_stderr(StrFormat("TRAIL words: %s", words));
          if (str_equals(ch, str1191)) {
            try {
              w = words->index_(1);
            }
            catch (IndexError*) {
              throw Alloc<util::HistoryError>(StrFormat("No first word in %r", prev));
            }
            spid1 = word_::LeftMostSpanForWord(w);
            spid2 = word_::RightMostSpanForWord(w);
          }
          else {
            if (str_equals(ch, str1193)) {
              try {
                w = words->index_(-1);
              }
              catch (IndexError*) {
                throw Alloc<util::HistoryError>(StrFormat("No last word in %r", prev));
              }
              spid1 = word_::LeftMostSpanForWord(w);
              spid2 = word_::RightMostSpanForWord(w);
            }
            else {
              if (str_equals(ch, str1195)) {
                try {
                  w1 = words->index_(1);
                  w2 = words->index_(-1);
                }
                catch (IndexError*) {
                  throw Alloc<util::HistoryError>(StrFormat("Couldn't find words in %r", prev));
                }
                spid1 = word_::LeftMostSpanForWord(w1);
                spid2 = word_::RightMostSpanForWord(w2);
              }
              else {
                assert(0);  // AssertionError
              }
            }
          }
          arena = this->parse_ctx->arena;
          span1 = arena->GetToken(spid1);
          span2 = arena->GetToken(spid2);
          begin = span1->col;
          end = (span2->col + span2->length);
          out = prev->slice(begin, end);
        }
      }
      else {
        if (id_ == Id::History_Num) {
          index = to_int(val->slice(1));
          if (index < 0) {
            num = ((history_len + 1) + index);
          }
          else {
            num = index;
          }
          out = this->readline->get_history_item(num);
          if (out == nullptr) {
            throw Alloc<util::HistoryError>(StrFormat("%s: not found", val));
          }
        }
        else {
          if (id_ == Id::History_Search) {
            last_char = val->index_(-1);
            val = val->slice(0, -1);
            prefix = nullptr;
            substring = str1198;
            if (str_equals(val->index_(1), str1199)) {
              substring = val->slice(2);
            }
            else {
              prefix = val->slice(1);
            }
            out = nullptr;
            for (int i = history_len; i > 1; i += -1) {
              cmd = this->readline->get_history_item(i);
              if ((prefix and cmd->startswith(prefix))) {
                out = cmd;
              }
              if ((len(substring) and str_contains(cmd, substring))) {
                out = cmd;
              }
              if (out != nullptr) {
                out = str_concat(out, last_char);
                break;
              }
            }
            if (out == nullptr) {
              throw Alloc<util::HistoryError>(StrFormat("%r found no results", val));
            }
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
    }
    parts->append(out);
  }
  line = str1201->join(parts);
  print(StrFormat("! %s", line));
  return line;
}

}  // define namespace history

namespace prompt {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using runtime_asdl::value_e;
using runtime_asdl::value_t;
using runtime_asdl::value__Str;
using syntax_asdl::command_t;
using syntax_asdl::source;
using syntax_asdl::compound_word;
Str* PROMPT_ERROR = str1203;

_PromptEvaluatorCache::_PromptEvaluatorCache() 
    : header_(obj_header()) {
  this->cache = Alloc<Dict<Str*, Str*>>();
  this->euid = -1;
}

int _PromptEvaluatorCache::_GetEuid() {
  if (this->euid == -1) {
    this->euid = posix::geteuid();
  }
  return this->euid;
}

Str* _PromptEvaluatorCache::Get(Str* name) {
  Str* value = nullptr;
  StackRoots _roots({&name, &value});

  if (dict_contains(this->cache, name)) {
    return this->cache->index_(name);
  }
  if (str_equals(name, str1204)) {
    value = this->_GetEuid() == 0 ? str1205 : str1206;
  }
  else {
    if (str_equals(name, str1207)) {
      value = libc::gethostname();
    }
    else {
      if (str_equals(name, str1208)) {
        value = pyos::GetUserName(this->_GetEuid());
      }
      else {
        assert(0);  // AssertionError
      }
    }
  }
  this->cache->set(name, value);
  return value;
}

Evaluator::Evaluator(Str* lang, Str* version_str, parse_lib::ParseContext* parse_ctx, state::Mem* mem) 
    : header_(obj_header()) {
  this->word_ev = nullptr;
  this->lang = lang;
  this->version_str = version_str;
  this->parse_ctx = parse_ctx;
  this->mem = mem;
  this->cache = Alloc<_PromptEvaluatorCache>();
  this->tokens_cache = Alloc<Dict<Str*, List<Tuple2<int, Str*>*>*>>();
  this->parse_cache = Alloc<Dict<Str*, syntax_asdl::compound_word*>>();
}

void Evaluator::CheckCircularDeps() {
}

Str* Evaluator::_ReplaceBackslashCodes(List<Tuple2<int, Str*>*>* tokens) {
  List<Str*>* ret = nullptr;
  int non_printing;
  int id_;
  Str* value = nullptr;
  int i;
  Str* ch = nullptr;
  Str* r = nullptr;
  Str* hostname = nullptr;
  double now;
  Str* fmt = nullptr;
  Str* pwd = nullptr;
  Str* home = nullptr;
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&tokens, &ret, &value, &ch, &r, &hostname, &fmt, &pwd, &home, &val});

  ret = Alloc<List<Str*>>();
  non_printing = 0;
  for (ListIter<Tuple2<int, Str*>*> it(tokens); !it.Done(); it.Next()) {
    Tuple2<int, Str*>* tup0 = it.Value();
    id_ = tup0->at0();
    value = tup0->at1();
    if ((id_ == Id::PS_Literals || id_ == Id::PS_BadBackslash)) {
      ret->append(value);
    }
    else {
      if (id_ == Id::PS_Octal3) {
        i = to_int(value->slice(1), 8);
        ret->append(chr((i % 256)));
      }
      else {
        if (id_ == Id::PS_LBrace) {
          non_printing += 1;
          ret->append(str1209);
        }
        else {
          if (id_ == Id::PS_RBrace) {
            non_printing -= 1;
            if (non_printing < 0) {
              return PROMPT_ERROR;
            }
            ret->append(str1210);
          }
          else {
            if (id_ == Id::PS_Subst) {
              ch = value->index_(1);
              if (str_equals(ch, str1211)) {
                r = this->cache->Get(str1212);
              }
              else {
                if (str_equals(ch, str1213)) {
                  r = this->cache->Get(str1214);
                }
                else {
                  if (str_equals(ch, str1215)) {
                    hostname = this->cache->Get(str1216);
                    Tuple2<Str*, Str*> tup1 = mylib::split_once(hostname, str1217);
                    r = tup1.at0();
                  }
                  else {
                    if (str_equals(ch, str1218)) {
                      r = this->cache->Get(str1219);
                    }
                    else {
                      if (str_equals(ch, str1220)) {
                        r = this->lang;
                      }
                      else {
                        if (str_equals(ch, str1221)) {
                          r = this->version_str;
                        }
                        else {
                          if (str_equals(ch, str1222)) {
                            now = time_::time();
                            r = time_::strftime(str1223, time_::localtime(now));
                          }
                          else {
                            if (str_equals(ch, str1224)) {
                              now = time_::time();
                              fmt = value->slice(3, -1);
                              if (len(fmt) == 0) {
                                fmt = str1225;
                              }
                              r = time_::strftime(fmt, time_::localtime(now));
                            }
                            else {
                              if (str_equals(ch, str1226)) {
                                try {
                                  pwd = state::GetString(this->mem, str1227);
                                  home = state::MaybeString(this->mem, str1228);
                                  r = ui::PrettyDir(pwd, home);
                                }
                                catch (error::Runtime* e) {
                                  r = StrFormat("<Error: %s>", e->UserErrorString());
                                }
                              }
                              else {
                                if (str_equals(ch, str1230)) {
                                  val = this->mem->GetValue(str1231);
                                  if (val->tag_() == value_e::Str) {
                                    value__Str* str_val = static_cast<value__Str*>(val);
                                    r = os_path::basename(str_val->s);
                                  }
                                  else {
                                    r = str1232;
                                  }
                                }
                                else {
                                  r = consts::LookupCharPrompt(ch);
                                  if (r == nullptr) {
                                    r = StrFormat("<Error: \\%s not implemented in $PS1> ", ch);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              ret->append(r->replace(str1234, str1235));
            }
            else {
              assert(0);  // AssertionError
            }
          }
        }
      }
    }
  }
  if (non_printing != 0) {
    return PROMPT_ERROR;
  }
  return str1237->join(ret);
}

Str* Evaluator::EvalPrompt(runtime_asdl::value_t* UP_val) {
  List<Tuple2<int, Str*>*>* tokens = nullptr;
  Str* ps1_str = nullptr;
  syntax_asdl::compound_word* ps1_word = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  runtime_asdl::value__Str* val2 = nullptr;
  StackRoots _roots({&UP_val, &tokens, &ps1_str, &ps1_word, &w_parser, &val2});

  if (UP_val->tag_() != value_e::Str) {
    return str1238;
  }
  value__Str* val = static_cast<value__Str*>(UP_val);
  tokens = this->tokens_cache->get(val->s);
  if (tokens == nullptr) {
    tokens = match::Ps1Tokens(val->s);
    this->tokens_cache->set(val->s, tokens);
  }
  ps1_str = this->_ReplaceBackslashCodes(tokens);
  ps1_word = this->parse_cache->get(ps1_str);
  if (ps1_word == nullptr) {
    w_parser = this->parse_ctx->MakeWordParserForPlugin(ps1_str);
    try {
      ps1_word = w_parser->ReadForPlugin();
    }
    catch (error::Parse* e) {
      ps1_word = word_::ErrorWord(StrFormat("<ERROR: Can't parse PS1: %s>", e->UserErrorString()));
    }
    this->parse_cache->set(ps1_str, ps1_word);
  }
  val2 = this->word_ev->EvalForPlugin(ps1_word);
  return val2->s;
}

Str* Evaluator::EvalFirstPrompt() {
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&val});

  if (str_equals(this->lang, str1240)) {
    val = this->mem->GetValue(str1241);
    return this->EvalPrompt(val);
  }
  else {
    return str_concat(this->lang, str1242);
  }
}
Str* PROMPT_COMMAND = str1243;

UserPlugin::UserPlugin(state::Mem* mem, parse_lib::ParseContext* parse_ctx, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt) 
    : header_(obj_header()) {
  this->mem = mem;
  this->parse_ctx = parse_ctx;
  this->cmd_ev = cmd_ev;
  this->errfmt = errfmt;
  this->arena = parse_ctx->arena;
  this->parse_cache = Alloc<Dict<Str*, syntax_asdl::command_t*>>();
}

void UserPlugin::Run() {
  runtime_asdl::value_t* val = nullptr;
  Str* prompt_cmd = nullptr;
  syntax_asdl::command_t* node = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  syntax_asdl::source__Variable* src = nullptr;
  StackRoots _roots({&val, &prompt_cmd, &node, &line_reader, &c_parser, &src});

  val = this->mem->GetValue(PROMPT_COMMAND);
  if (val->tag_() != value_e::Str) {
    return ;
  }
  prompt_cmd = static_cast<value__Str*>(val)->s;
  node = this->parse_cache->get(prompt_cmd);
  if (node == nullptr) {
    line_reader = reader::StringLineReader(prompt_cmd, this->arena);
    c_parser = this->parse_ctx->MakeOshParser(line_reader);
    src = Alloc<source::Variable>(PROMPT_COMMAND, runtime::NO_SPID);
    {  // with
      alloc::ctx_Location ctx{this->arena, src};

      try {
        node = main_loop::ParseWholeFile(c_parser);
      }
      catch (error::Parse* e) {
        this->errfmt->PrettyPrintError(e);
        return ;
      }
    }
    this->parse_cache->set(prompt_cmd, node);
  }
  {  // with
    state::ctx_Registers ctx{this->mem};

    this->cmd_ev->ExecuteAndCatch(node);
  }
}

}  // define namespace prompt

namespace sh_expr_eval {  // define

using id_kind_asdl::Id;
using runtime_asdl::scope_t;
using runtime_asdl::lvalue;
using runtime_asdl::lvalue_e;
using runtime_asdl::lvalue_t;
using runtime_asdl::lvalue__Named;
using runtime_asdl::lvalue__Indexed;
using runtime_asdl::lvalue__Keyed;
using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value_t;
using runtime_asdl::value__Str;
using runtime_asdl::value__Int;
using runtime_asdl::value__MaybeStrArray;
using runtime_asdl::value__AssocArray;
using runtime_asdl::value__Obj;
using syntax_asdl::arith_expr_e;
using syntax_asdl::arith_expr_t;
using syntax_asdl::arith_expr__Unary;
using syntax_asdl::arith_expr__Binary;
using syntax_asdl::arith_expr__UnaryAssign;
using syntax_asdl::arith_expr__BinaryAssign;
using syntax_asdl::arith_expr__TernaryOp;
using syntax_asdl::bool_expr_e;
using syntax_asdl::bool_expr_t;
using syntax_asdl::bool_expr__WordTest;
using syntax_asdl::bool_expr__LogicalNot;
using syntax_asdl::bool_expr__LogicalAnd;
using syntax_asdl::bool_expr__LogicalOr;
using syntax_asdl::bool_expr__Unary;
using syntax_asdl::bool_expr__Binary;
using syntax_asdl::compound_word;
using syntax_asdl::Token;
using syntax_asdl::sh_lhs_expr_e;
using syntax_asdl::sh_lhs_expr_t;
using syntax_asdl::sh_lhs_expr__Name;
using syntax_asdl::sh_lhs_expr__IndexedName;
using syntax_asdl::source;
using syntax_asdl::word_t;
using syntax_asdl::braced_var_sub;
using syntax_asdl::simple_var_sub;
using syntax_asdl::loc;
using option_asdl::option_i;
using types_asdl::bool_arg_type_e;
using pyerror::e_die;
using pyerror::e_die_status;
using pyerror::e_strict;
using pyerror::e_usage;
using mylib::str_cmp;

runtime_asdl::value_t* OldValue(runtime_asdl::lvalue_t* lval, state::Mem* mem, optview::Exec* exec_opts) {
  runtime_asdl::lvalue_t* UP_lval = nullptr;
  Str* var_name = nullptr;
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  runtime_asdl::value__MaybeStrArray* array_val = nullptr;
  Str* s = nullptr;
  runtime_asdl::value__AssocArray* assoc_val = nullptr;
  StackRoots _roots({&lval, &mem, &exec_opts, &UP_lval, &var_name, &val, &UP_val, &array_val, &s, &assoc_val});

  UP_lval = lval;
  switch (lval->tag_()) {
    case lvalue_e::Named: {
      lvalue__Named* lval = static_cast<lvalue__Named*>(UP_lval);
      var_name = lval->name;
    }
      break;
    case lvalue_e::Indexed: {
      lvalue__Indexed* lval = static_cast<lvalue__Indexed*>(UP_lval);
      var_name = lval->name;
    }
      break;
    case lvalue_e::Keyed: {
      lvalue__Keyed* lval = static_cast<lvalue__Keyed*>(UP_lval);
      var_name = lval->name;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  val = mem->GetValue(var_name);
  if ((exec_opts and (exec_opts->nounset() and val->tag_() == value_e::Undef))) {
    e_die(StrFormat("Undefined variable %r", var_name));
  }
  UP_val = val;
  switch (lval->tag_()) {
    case lvalue_e::Named: {
      return val;
    }
      break;
    case lvalue_e::Indexed: {
      lvalue__Indexed* lval = static_cast<lvalue__Indexed*>(UP_lval);
      array_val = nullptr;
      switch (val->tag_()) {
        case value_e::Undef: {
          array_val = Alloc<value::MaybeStrArray>(Alloc<List<Str*>>());
        }
          break;
        case value_e::MaybeStrArray: {
          value__MaybeStrArray* tmp = static_cast<value__MaybeStrArray*>(UP_val);
          array_val = tmp;
        }
          break;
        default: {
          e_die(StrFormat("Can't use [] on value of type %s", ui::ValType(val)));
        }
      }
      s = word_eval::GetArrayItem(array_val->strs, lval->index);
      if (s == nullptr) {
        val = Alloc<value::Str>(str1246);
      }
      else {
        val = Alloc<value::Str>(s);
      }
    }
      break;
    case lvalue_e::Keyed: {
      lvalue__Keyed* lval = static_cast<lvalue__Keyed*>(UP_lval);
      assoc_val = nullptr;
      switch (val->tag_()) {
        case value_e::Undef: {
          assert(0);  // AssertionError
        }
          break;
        case value_e::AssocArray: {
          value__AssocArray* tmp2 = static_cast<value__AssocArray*>(UP_val);
          assoc_val = tmp2;
        }
          break;
        default: {
          e_die(StrFormat("Can't use [] on value of type %s", ui::ValType(val)));
        }
      }
      s = assoc_val->d->get(lval->key);
      if (s == nullptr) {
        val = Alloc<value::Str>(str1248);
      }
      else {
        val = Alloc<value::Str>(s);
      }
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  return val;
}

UnsafeArith::UnsafeArith(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, parse_lib::ParseContext* parse_ctx, sh_expr_eval::ArithEvaluator* arith_ev, ui::ErrorFormatter* errfmt) 
    : header_(obj_header()) {
  this->mem = mem;
  this->exec_opts = exec_opts;
  this->mutable_opts = mutable_opts;
  this->parse_ctx = parse_ctx;
  this->arith_ev = arith_ev;
  this->errfmt = errfmt;
  this->arena = this->parse_ctx->arena;
}

runtime_asdl::lvalue_t* UnsafeArith::ParseLValue(Str* s, int span_id) {
  tdop::TdopParser* a_parser = nullptr;
  syntax_asdl::arith_expr_t* anode = nullptr;
  runtime_asdl::lvalue_t* lval = nullptr;
  StackRoots _roots({&s, &a_parser, &anode, &lval});

  if (!this->parse_ctx->parse_opts->parse_sh_arith()) {
    if (!match::IsValidVarName(s)) {
      e_die(StrFormat("Invalid variable name %r (parse_sh_arith is off)", s), Alloc<loc::Span>(span_id));
    }
    return Alloc<lvalue::Named>(s, span_id);
  }
  a_parser = this->parse_ctx->MakeArithParser(s);
  {  // with
    alloc::ctx_Location ctx{this->arena, Alloc<source::ArgvWord>(str1250, span_id)};

    try {
      anode = a_parser->Parse();
    }
    catch (error::Parse* e) {
      this->errfmt->PrettyPrintError(e);
      e_usage(str1251, span_id);
    }
  }
  if (this->exec_opts->eval_unsafe_arith()) {
    lval = this->arith_ev->EvalArithLhs(anode, span_id);
  }
  else {
    {  // with
      state::ctx_Option ctx{this->mutable_opts, NewList<int>(std::initializer_list<int>{option_i::_allow_command_sub}), false};

      lval = this->arith_ev->EvalArithLhs(anode, span_id);
    }
  }
  return lval;
}

syntax_asdl::braced_var_sub* UnsafeArith::ParseVarRef(Str* ref_str, syntax_asdl::Token* blame_tok) {
  reader::FileLineReader* line_reader = nullptr;
  lexer::Lexer* lexer = nullptr;
  word_parse::WordParser* w_parser = nullptr;
  syntax_asdl::source__VarRef* src = nullptr;
  syntax_asdl::braced_var_sub* bvs_part = nullptr;
  StackRoots _roots({&ref_str, &blame_tok, &line_reader, &lexer, &w_parser, &src, &bvs_part});

  line_reader = reader::StringLineReader(ref_str, this->arena);
  lexer = this->parse_ctx->MakeLexer(line_reader);
  w_parser = this->parse_ctx->MakeWordParser(lexer, line_reader);
  src = Alloc<source::VarRef>(blame_tok);
  {  // with
    alloc::ctx_Location ctx{this->arena, src};

    try {
      bvs_part = w_parser->ParseVarRef();
    }
    catch (error::Parse* e) {
      this->errfmt->PrettyPrintError(e);
      e_die(str1252, blame_tok);
    }
  }
  return bvs_part;
}

ArithEvaluator::ArithEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt) 
    : header_(obj_header()) {
  this->word_ev = nullptr;
  this->mem = mem;
  this->exec_opts = exec_opts;
  this->mutable_opts = mutable_opts;
  this->parse_ctx = parse_ctx;
  this->errfmt = errfmt;
}

void ArithEvaluator::CheckCircularDeps() {
}

int ArithEvaluator::_StringToInteger(Str* s, int span_id) {
  int integer;
  Str* b = nullptr;
  Str* digits = nullptr;
  int base;
  int digit;
  alloc::Arena* arena = nullptr;
  tdop::TdopParser* a_parser = nullptr;
  syntax_asdl::arith_expr_t* node2 = nullptr;
  StackRoots _roots({&s, &b, &digits, &arena, &a_parser, &node2});

  if (s->startswith(str1253)) {
    try {
      integer = to_int(s, 16);
    }
    catch (ValueError*) {
      e_strict(StrFormat("Invalid hex constant %r", s), Alloc<loc::Span>(span_id));
    }
    return integer;
  }
  if (s->startswith(str1255)) {
    try {
      integer = to_int(s, 8);
    }
    catch (ValueError*) {
      e_strict(StrFormat("Invalid octal constant %r", s), Alloc<loc::Span>(span_id));
    }
    return integer;
  }
  if (str_contains(s, str1257)) {
    Tuple2<Str*, Str*> tup0 = mylib::split_once(s, str1258);
    b = tup0.at0();
    digits = tup0.at1();
    try {
      base = to_int(b);
    }
    catch (ValueError*) {
      e_strict(StrFormat("Invalid base for numeric constant %r", b), Alloc<loc::Span>(span_id));
    }
    integer = 0;
    for (StrIter it(digits); !it.Done(); it.Next()) {
      Str* ch = it.Value();
      StackRoots _for({&ch    });
      if (IsLower(ch)) {
        digit = ((ord(ch) - ord(str1260)) + 10);
      }
      else {
        if (IsUpper(ch)) {
          digit = ((ord(ch) - ord(str1261)) + 36);
        }
        else {
          if (str_equals(ch, str1262)) {
            digit = 62;
          }
          else {
            if (str_equals(ch, str1263)) {
              digit = 63;
            }
            else {
              if (ch->isdigit()) {
                digit = to_int(ch);
              }
              else {
                e_strict(StrFormat("Invalid digits for numeric constant %r", digits), Alloc<loc::Span>(span_id));
              }
            }
          }
        }
      }
      if (digit >= base) {
        e_strict(StrFormat("Digits %r out of range for base %d", digits, base), Alloc<loc::Span>(span_id));
      }
      integer = ((integer * base) + digit);
    }
    return integer;
  }
  try {
    integer = to_int(s);
  }
  catch (ValueError*) {
    if (this->parse_ctx) {
      arena = this->parse_ctx->arena;
      if (len(s->strip()) == 0) {
        return 0;
      }
      a_parser = this->parse_ctx->MakeArithParser(s);
      {  // with
        alloc::ctx_Location ctx{arena, Alloc<source::Variable>(nullptr, span_id)};

        try {
          node2 = a_parser->Parse();
        }
        catch (error::Parse* e) {
          this->errfmt->PrettyPrintError(e);
          e_die(str1266, e->location);
        }
      }
      if (node2->tag_() == arith_expr_e::Word) {
        e_die(StrFormat("Invalid integer constant %r", s), Alloc<loc::Span>(span_id));
      }
      if (this->exec_opts->eval_unsafe_arith()) {
        integer = this->EvalToInt(node2);
      }
      else {
        {  // with
          state::ctx_Option ctx{this->mutable_opts, NewList<int>(std::initializer_list<int>{option_i::_allow_command_sub}), false};

          integer = this->EvalToInt(node2);
        }
      }
    }
    else {
      if ((len(s->strip()) == 0 or match::IsValidVarName(s))) {
        e_strict(StrFormat("Invalid integer constant %r", s), Alloc<loc::Span>(span_id));
      }
      else {
        e_die(StrFormat("Invalid integer constant %r", s), Alloc<loc::Span>(span_id));
      }
    }
  }
  return integer;
}

int ArithEvaluator::_ValToIntOrError(runtime_asdl::value_t* val, int span_id) {
  runtime_asdl::value_t* UP_val = nullptr;
  StackRoots _roots({&val, &UP_val});

  try {
    UP_val = val;
    switch (val->tag_()) {
      case value_e::Undef: {
        e_strict(str1270, Alloc<loc::Span>(span_id));
      }
        break;
      case value_e::Int: {
        value__Int* val = static_cast<value__Int*>(UP_val);
        return val->i;
      }
        break;
      case value_e::Str: {
        value__Str* val = static_cast<value__Str*>(UP_val);
        return this->_StringToInteger(val->s, span_id);
      }
        break;
      case value_e::Obj: {
        assert(0);  // AssertionError
      }
        break;
    }
  }
  catch (error::Strict* e) {
    if (this->exec_opts->strict_arith()) {
      throw ;
    }
    else {
      return 0;
    }
  }
  e_die(StrFormat("Expected a value convertible to integer, got %s", ui::ValType(val)), Alloc<loc::Span>(span_id));
}

Tuple2<int, runtime_asdl::lvalue_t*> ArithEvaluator::_EvalLhsAndLookupArith(syntax_asdl::arith_expr_t* node) {
  runtime_asdl::lvalue_t* lval = nullptr;
  runtime_asdl::value_t* val = nullptr;
  int span_id;
  int i;
  StackRoots _roots({&node, &lval, &val});

  lval = this->EvalArithLhs(node, runtime::NO_SPID);
  val = OldValue(lval, this->mem, this->exec_opts);
  if (((val->tag_() == value_e::MaybeStrArray || val->tag_() == value_e::AssocArray) and lval->tag_() == lvalue_e::Named)) {
    lvalue__Named* named_lval = static_cast<lvalue__Named*>(lval);
    if (word_eval::ShouldArrayDecay(named_lval->name, this->exec_opts)) {
      if (val->tag_() == value_e::MaybeStrArray) {
        lval = Alloc<lvalue::Indexed>(named_lval->name, 0, runtime::NO_SPID);
      }
      else {
        if (val->tag_() == value_e::AssocArray) {
          lval = Alloc<lvalue::Keyed>(named_lval->name, str1272, runtime::NO_SPID);
        }
      }
      val = word_eval::DecayArray(val);
    }
  }
  span_id = location::SpanForArithExpr(node);
  i = this->_ValToIntOrError(val, span_id);
  return Tuple2<int, runtime_asdl::lvalue_t*>(i, lval);
}

void ArithEvaluator::_Store(runtime_asdl::lvalue_t* lval, int new_int) {
  runtime_asdl::value__Str* val = nullptr;
  StackRoots _roots({&lval, &val});

  val = Alloc<value::Str>(str(new_int));
  state::OshLanguageSetValue(this->mem, lval, val);
}

int ArithEvaluator::EvalToInt(syntax_asdl::arith_expr_t* node) {
  runtime_asdl::value_t* val = nullptr;
  int span_id;
  int i;
  StackRoots _roots({&node, &val});

  val = this->Eval(node);
  if (((val->tag_() == value_e::MaybeStrArray || val->tag_() == value_e::AssocArray) and node->tag_() == arith_expr_e::VarSub)) {
    simple_var_sub* vsub = static_cast<simple_var_sub*>(node);
    if (word_eval::ShouldArrayDecay(vsub->var_name, this->exec_opts)) {
      val = word_eval::DecayArray(val);
    }
  }
  span_id = location::SpanForArithExpr(node);
  i = this->_ValToIntOrError(val, span_id);
  return i;
}

runtime_asdl::value_t* ArithEvaluator::Eval(syntax_asdl::arith_expr_t* node) {
  syntax_asdl::arith_expr_t* UP_node = nullptr;
  runtime_asdl::value_t* val = nullptr;
  int op_id;
  int old_int;
  runtime_asdl::lvalue_t* lval = nullptr;
  int new_int;
  int ret;
  int rhs_int;
  int rhs;
  int i;
  int lhs;
  runtime_asdl::value_t* left = nullptr;
  runtime_asdl::value_t* UP_left = nullptr;
  int index;
  Str* s = nullptr;
  Str* key = nullptr;
  int cond;
  StackRoots _roots({&node, &UP_node, &val, &lval, &left, &UP_left, &s, &key});

  UP_node = node;
  switch (node->tag_()) {
    case arith_expr_e::VarSub: {
      simple_var_sub* vsub = static_cast<simple_var_sub*>(UP_node);
      val = this->mem->GetValue(vsub->var_name);
      if ((val->tag_() == value_e::Undef and this->exec_opts->nounset())) {
        e_die(StrFormat("Undefined variable %r", vsub->var_name), vsub->left);
      }
      return val;
    }
      break;
    case arith_expr_e::Word: {
      compound_word* w = static_cast<compound_word*>(UP_node);
      return this->word_ev->EvalWordToString(w);
    }
      break;
    case arith_expr_e::UnaryAssign: {
      arith_expr__UnaryAssign* node = static_cast<arith_expr__UnaryAssign*>(UP_node);
      op_id = node->op_id;
      Tuple2<int, runtime_asdl::lvalue_t*> tup1 = this->_EvalLhsAndLookupArith(node->child);
      old_int = tup1.at0();
      lval = tup1.at1();
      if (op_id == Id::Node_PostDPlus) {
        new_int = (old_int + 1);
        ret = old_int;
      }
      else {
        if (op_id == Id::Node_PostDMinus) {
          new_int = (old_int - 1);
          ret = old_int;
        }
        else {
          if (op_id == Id::Arith_DPlus) {
            new_int = (old_int + 1);
            ret = new_int;
          }
          else {
            if (op_id == Id::Arith_DMinus) {
              new_int = (old_int - 1);
              ret = new_int;
            }
            else {
              assert(0);  // AssertionError
            }
          }
        }
      }
      this->_Store(lval, new_int);
      return Alloc<value::Int>(ret);
    }
      break;
    case arith_expr_e::BinaryAssign: {
      arith_expr__BinaryAssign* node = static_cast<arith_expr__BinaryAssign*>(UP_node);
      op_id = node->op_id;
      if (op_id == Id::Arith_Equal) {
        lval = this->EvalArithLhs(node->left, runtime::NO_SPID);
        rhs_int = this->EvalToInt(node->right);
        this->_Store(lval, rhs_int);
        return Alloc<value::Int>(rhs_int);
      }
      Tuple2<int, runtime_asdl::lvalue_t*> tup2 = this->_EvalLhsAndLookupArith(node->left);
      old_int = tup2.at0();
      lval = tup2.at1();
      rhs = this->EvalToInt(node->right);
      if (op_id == Id::Arith_PlusEqual) {
        new_int = (old_int + rhs);
      }
      else {
        if (op_id == Id::Arith_MinusEqual) {
          new_int = (old_int - rhs);
        }
        else {
          if (op_id == Id::Arith_StarEqual) {
            new_int = (old_int * rhs);
          }
          else {
            if (op_id == Id::Arith_SlashEqual) {
              if (rhs == 0) {
                e_die(str1274);
              }
              new_int = (old_int / rhs);
            }
            else {
              if (op_id == Id::Arith_PercentEqual) {
                if (rhs == 0) {
                  e_die(str1275);
                }
                new_int = (old_int % rhs);
              }
              else {
                if (op_id == Id::Arith_DGreatEqual) {
                  new_int = (old_int >> rhs);
                }
                else {
                  if (op_id == Id::Arith_DLessEqual) {
                    new_int = (old_int << rhs);
                  }
                  else {
                    if (op_id == Id::Arith_AmpEqual) {
                      new_int = (old_int & rhs);
                    }
                    else {
                      if (op_id == Id::Arith_PipeEqual) {
                        new_int = (old_int | rhs);
                      }
                      else {
                        if (op_id == Id::Arith_CaretEqual) {
                          new_int = (old_int ^ rhs);
                        }
                        else {
                          assert(0);  // AssertionError
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      this->_Store(lval, new_int);
      return Alloc<value::Int>(new_int);
    }
      break;
    case arith_expr_e::Unary: {
      arith_expr__Unary* node = static_cast<arith_expr__Unary*>(UP_node);
      op_id = node->op_id;
      i = this->EvalToInt(node->child);
      if (op_id == Id::Node_UnaryPlus) {
        ret = i;
      }
      else {
        if (op_id == Id::Node_UnaryMinus) {
          ret = -i;
        }
        else {
          if (op_id == Id::Arith_Bang) {
            ret = i == 0 ? 1 : 0;
          }
          else {
            if (op_id == Id::Arith_Tilde) {
              ret = ~i;
            }
            else {
              assert(0);  // AssertionError
            }
          }
        }
      }
      return Alloc<value::Int>(ret);
    }
      break;
    case arith_expr_e::Binary: {
      arith_expr__Binary* node = static_cast<arith_expr__Binary*>(UP_node);
      op_id = node->op_id;
      if (op_id == Id::Arith_DPipe) {
        lhs = this->EvalToInt(node->left);
        if (lhs == 0) {
          rhs = this->EvalToInt(node->right);
          ret = to_int(rhs != 0);
        }
        else {
          ret = 1;
        }
        return Alloc<value::Int>(ret);
      }
      if (op_id == Id::Arith_DAmp) {
        lhs = this->EvalToInt(node->left);
        if (lhs == 0) {
          ret = 0;
        }
        else {
          rhs = this->EvalToInt(node->right);
          ret = to_int(rhs != 0);
        }
        return Alloc<value::Int>(ret);
      }
      if (op_id == Id::Arith_LBracket) {
        left = this->Eval(node->left);
        UP_left = left;
        switch (left->tag_()) {
          case value_e::MaybeStrArray: {
            value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(UP_left);
            index = this->EvalToInt(node->right);
            s = word_eval::GetArrayItem(array_val->strs, index);
          }
            break;
          case value_e::AssocArray: {
            value__AssocArray* left = static_cast<value__AssocArray*>(UP_left);
            key = this->EvalWordToString(node->right);
            s = left->d->get(key);
          }
            break;
          default: {
            e_die(StrFormat("Expected array or assoc in index expression, got %s", ui::ValType(left)));
          }
        }
        if (s == nullptr) {
          val = Alloc<value::Undef>();
        }
        else {
          val = Alloc<value::Str>(s);
        }
        return val;
      }
      if (op_id == Id::Arith_Comma) {
        this->EvalToInt(node->left);
        ret = this->EvalToInt(node->right);
        return Alloc<value::Int>(ret);
      }
      lhs = this->EvalToInt(node->left);
      rhs = this->EvalToInt(node->right);
      if (op_id == Id::Arith_Plus) {
        ret = (lhs + rhs);
      }
      else {
        if (op_id == Id::Arith_Minus) {
          ret = (lhs - rhs);
        }
        else {
          if (op_id == Id::Arith_Star) {
            ret = (lhs * rhs);
          }
          else {
            if (op_id == Id::Arith_Slash) {
              if (rhs == 0) {
                e_die(str1277, Alloc<loc::Span>(location::SpanForArithExpr(node->right)));
              }
              ret = (lhs / rhs);
            }
            else {
              if (op_id == Id::Arith_Percent) {
                if (rhs == 0) {
                  e_die(str1278, Alloc<loc::Span>(location::SpanForArithExpr(node->right)));
                }
                ret = (lhs % rhs);
              }
              else {
                if (op_id == Id::Arith_DStar) {
                  if (rhs < 0) {
                    e_die(str1279);
                  }
                  ret = 1;
                  for (int i = 0; i < rhs; ++i) {
                    ret *= lhs;
                  }
                }
                else {
                  if (op_id == Id::Arith_DEqual) {
                    ret = to_int(lhs == rhs);
                  }
                  else {
                    if (op_id == Id::Arith_NEqual) {
                      ret = to_int(lhs != rhs);
                    }
                    else {
                      if (op_id == Id::Arith_Great) {
                        ret = to_int(lhs > rhs);
                      }
                      else {
                        if (op_id == Id::Arith_GreatEqual) {
                          ret = to_int(lhs >= rhs);
                        }
                        else {
                          if (op_id == Id::Arith_Less) {
                            ret = to_int(lhs < rhs);
                          }
                          else {
                            if (op_id == Id::Arith_LessEqual) {
                              ret = to_int(lhs <= rhs);
                            }
                            else {
                              if (op_id == Id::Arith_Pipe) {
                                ret = (lhs | rhs);
                              }
                              else {
                                if (op_id == Id::Arith_Amp) {
                                  ret = (lhs & rhs);
                                }
                                else {
                                  if (op_id == Id::Arith_Caret) {
                                    ret = (lhs ^ rhs);
                                  }
                                  else {
                                    if (op_id == Id::Arith_DLess) {
                                      ret = (lhs << rhs);
                                    }
                                    else {
                                      if (op_id == Id::Arith_DGreat) {
                                        ret = (lhs >> rhs);
                                      }
                                      else {
                                        assert(0);  // AssertionError
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return Alloc<value::Int>(ret);
    }
      break;
    case arith_expr_e::TernaryOp: {
      arith_expr__TernaryOp* node = static_cast<arith_expr__TernaryOp*>(UP_node);
      cond = this->EvalToInt(node->cond);
      if (cond) {
        return this->Eval(node->true_expr);
      }
      else {
        return this->Eval(node->false_expr);
      }
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  assert(0);  // AssertionError
}

Str* ArithEvaluator::EvalWordToString(syntax_asdl::arith_expr_t* node) {
  syntax_asdl::arith_expr_t* UP_node = nullptr;
  runtime_asdl::value__Str* val = nullptr;
  StackRoots _roots({&node, &UP_node, &val});

  UP_node = node;
  if (node->tag_() == arith_expr_e::Word) {
    compound_word* w = static_cast<compound_word*>(UP_node);
    val = this->word_ev->EvalWordToString(w);
    return val->s;
  }
  else {
    e_die(str1281);
  }
}

runtime_asdl::lvalue_t* ArithEvaluator::EvalShellLhs(syntax_asdl::sh_lhs_expr_t* node, runtime_asdl::scope_t which_scopes) {
  syntax_asdl::sh_lhs_expr_t* UP_node = nullptr;
  runtime_asdl::lvalue_t* lval = nullptr;
  runtime_asdl::lvalue__Named* lval1 = nullptr;
  Str* key = nullptr;
  runtime_asdl::lvalue__Keyed* lval2 = nullptr;
  int index;
  runtime_asdl::lvalue__Indexed* lval3 = nullptr;
  StackRoots _roots({&node, &UP_node, &lval, &lval1, &key, &lval2, &lval3});

  UP_node = node;
  lval = nullptr;
  switch (node->tag_()) {
    case sh_lhs_expr_e::Name: {
      sh_lhs_expr__Name* node = static_cast<sh_lhs_expr__Name*>(UP_node);
      lval1 = Alloc<lvalue::Named>(node->name, node->left->span_id);
      lval = lval1;
    }
      break;
    case sh_lhs_expr_e::IndexedName: {
      sh_lhs_expr__IndexedName* node = static_cast<sh_lhs_expr__IndexedName*>(UP_node);
      if (this->mem->IsAssocArray(node->name)) {
        key = this->EvalWordToString(node->index);
        lval2 = Alloc<lvalue::Keyed>(node->name, key, node->left->span_id);
        lval = lval2;
      }
      else {
        index = this->EvalToInt(node->index);
        lval3 = Alloc<lvalue::Indexed>(node->name, index, node->left->span_id);
        lval = lval3;
      }
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  return lval;
}

Tuple2<Str*, int> ArithEvaluator::_VarNameOrWord(syntax_asdl::arith_expr_t* anode) {
  syntax_asdl::arith_expr_t* UP_anode = nullptr;
  Str* var_name = nullptr;
  int span_id;
  Str* no_str = nullptr;
  StackRoots _roots({&anode, &UP_anode, &var_name, &no_str});

  UP_anode = anode;
  switch (anode->tag_()) {
    case arith_expr_e::VarSub: {
      simple_var_sub* tok = static_cast<simple_var_sub*>(UP_anode);
      return Tuple2<Str*, int>(tok->var_name, tok->left->span_id);
    }
      break;
    case arith_expr_e::Word: {
      compound_word* w = static_cast<compound_word*>(UP_anode);
      var_name = this->EvalWordToString(w);
      span_id = word_::LeftMostSpanForWord(w);
      return Tuple2<Str*, int>(var_name, span_id);
    }
      break;
  }
  no_str = nullptr;
  return Tuple2<Str*, int>(no_str, runtime::NO_SPID);
}

runtime_asdl::lvalue_t* ArithEvaluator::EvalArithLhs(syntax_asdl::arith_expr_t* anode, int span_id) {
  syntax_asdl::arith_expr_t* UP_anode = nullptr;
  Str* var_name = nullptr;
  Str* key = nullptr;
  int index;
  StackRoots _roots({&anode, &UP_anode, &var_name, &key});

  UP_anode = anode;
  if (anode->tag_() == arith_expr_e::Binary) {
    arith_expr__Binary* anode = static_cast<arith_expr__Binary*>(UP_anode);
    if (anode->op_id == Id::Arith_LBracket) {
      Tuple2<Str*, int> tup3 = this->_VarNameOrWord(anode->left);
      var_name = tup3.at0();
      span_id = tup3.at1();
      if (!match::IsValidVarName(var_name)) {
        e_die(StrFormat("Invalid variable name %r", var_name), Alloc<loc::Span>(span_id));
      }
      if (var_name != nullptr) {
        if (this->mem->IsAssocArray(var_name)) {
          key = this->EvalWordToString(anode->right);
          return Alloc<lvalue::Keyed>(var_name, key, span_id);
        }
        else {
          index = this->EvalToInt(anode->right);
          return Alloc<lvalue::Indexed>(var_name, index, span_id);
        }
      }
    }
  }
  Tuple2<Str*, int> tup4 = this->_VarNameOrWord(anode);
  var_name = tup4.at0();
  span_id = tup4.at1();
  if (var_name != nullptr) {
    return Alloc<lvalue::Named>(var_name, span_id);
  }
  e_die_status(2, str1283, Alloc<loc::Span>(span_id));
}

BoolEvaluator::BoolEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, parse_lib::ParseContext* parse_ctx, ui::ErrorFormatter* errfmt, bool always_strict) : ArithEvaluator(mem, exec_opts, mutable_opts, parse_ctx, errfmt) {
  this->always_strict = always_strict;
}

int BoolEvaluator::_StringToIntegerOrError(Str* s, syntax_asdl::word_t* blame_word) {
  int span_id;
  int i;
  StackRoots _roots({&s, &blame_word});

  if (blame_word) {
    span_id = word_::LeftMostSpanForWord(blame_word);
  }
  else {
    span_id = runtime::NO_SPID;
  }
  try {
    i = this->_StringToInteger(s, span_id);
  }
  catch (error::Strict* e) {
    if ((this->always_strict or this->exec_opts->strict_arith())) {
      throw ;
    }
    else {
      i = 0;
    }
  }
  return i;
}

Str* BoolEvaluator::_EvalCompoundWord(syntax_asdl::word_t* word, int eval_flags) {
  runtime_asdl::value__Str* val = nullptr;
  StackRoots _roots({&word, &val});

  val = this->word_ev->EvalWordToString(word, eval_flags);
  return val->s;
}

bool BoolEvaluator::EvalB(syntax_asdl::bool_expr_t* node) {
  syntax_asdl::bool_expr_t* UP_node = nullptr;
  Str* s = nullptr;
  bool b;
  int op_id;
  types_asdl::bool_arg_type_t arg_type;
  int index;
  runtime_asdl::value_t* val = nullptr;
  int eval_flags;
  Str* s1 = nullptr;
  Str* s2 = nullptr;
  int i1;
  int i2;
  List<Str*>* matches = nullptr;
  Str* msg = nullptr;
  StackRoots _roots({&node, &UP_node, &s, &val, &s1, &s2, &matches, &msg});

  UP_node = node;
  switch (node->tag_()) {
    case bool_expr_e::WordTest: {
      bool_expr__WordTest* node = static_cast<bool_expr__WordTest*>(UP_node);
      s = this->_EvalCompoundWord(node->w);
      return to_bool(s);
    }
      break;
    case bool_expr_e::LogicalNot: {
      bool_expr__LogicalNot* node = static_cast<bool_expr__LogicalNot*>(UP_node);
      b = this->EvalB(node->child);
      return !b;
    }
      break;
    case bool_expr_e::LogicalAnd: {
      bool_expr__LogicalAnd* node = static_cast<bool_expr__LogicalAnd*>(UP_node);
      if (this->EvalB(node->left)) {
        return this->EvalB(node->right);
      }
      else {
        return false;
      }
    }
      break;
    case bool_expr_e::LogicalOr: {
      bool_expr__LogicalOr* node = static_cast<bool_expr__LogicalOr*>(UP_node);
      if (this->EvalB(node->left)) {
        return true;
      }
      else {
        return this->EvalB(node->right);
      }
    }
      break;
    case bool_expr_e::Unary: {
      bool_expr__Unary* node = static_cast<bool_expr__Unary*>(UP_node);
      op_id = node->op_id;
      s = this->_EvalCompoundWord(node->child);
      arg_type = consts::BoolArgType(op_id);
      if (arg_type == bool_arg_type_e::Path) {
        return bool_stat::DoUnaryOp(op_id, s);
      }
      if (arg_type == bool_arg_type_e::Str) {
        if (op_id == Id::BoolUnary_z) {
          return !to_bool(s);
        }
        if (op_id == Id::BoolUnary_n) {
          return to_bool(s);
        }
        assert(0);  // AssertionError
      }
      if (arg_type == bool_arg_type_e::Other) {
        if (op_id == Id::BoolUnary_t) {
          return bool_stat::isatty(s, node->child);
        }
        if (op_id == Id::BoolUnary_o) {
          index = consts::OptionNum(s);
          if (index == 0) {
            return false;
          }
          else {
            return this->exec_opts->opt0_array->index_(index);
          }
        }
        if (op_id == Id::BoolUnary_v) {
          val = this->mem->GetValue(s);
          return val->tag_() != value_e::Undef;
        }
        e_die(StrFormat("%s isn't implemented", ui::PrettyId(op_id)));
      }
      assert(0);  // AssertionError
    }
      break;
    case bool_expr_e::Binary: {
      bool_expr__Binary* node = static_cast<bool_expr__Binary*>(UP_node);
      op_id = node->op_id;
      eval_flags = 0;
      switch (op_id) {
        case Id::BoolBinary_GlobEqual: 
        case Id::BoolBinary_GlobDEqual: 
        case Id::BoolBinary_GlobNEqual: {
          eval_flags |= word_eval::QUOTE_FNMATCH;
        }
          break;
        case Id::BoolBinary_EqualTilde: {
          eval_flags |= word_eval::QUOTE_ERE;
        }
          break;
      }
      s1 = this->_EvalCompoundWord(node->left);
      s2 = this->_EvalCompoundWord(node->right, eval_flags);
      arg_type = consts::BoolArgType(op_id);
      if (arg_type == bool_arg_type_e::Path) {
        return bool_stat::DoBinaryOp(op_id, s1, s2);
      }
      if (arg_type == bool_arg_type_e::Int) {
        i1 = this->_StringToIntegerOrError(s1, node->left);
        i2 = this->_StringToIntegerOrError(s2, node->right);
        if (op_id == Id::BoolBinary_eq) {
          return i1 == i2;
        }
        if (op_id == Id::BoolBinary_ne) {
          return i1 != i2;
        }
        if (op_id == Id::BoolBinary_gt) {
          return i1 > i2;
        }
        if (op_id == Id::BoolBinary_ge) {
          return i1 >= i2;
        }
        if (op_id == Id::BoolBinary_lt) {
          return i1 < i2;
        }
        if (op_id == Id::BoolBinary_le) {
          return i1 <= i2;
        }
        assert(0);  // AssertionError
      }
      if (arg_type == bool_arg_type_e::Str) {
        if ((op_id == Id::BoolBinary_GlobEqual || op_id == Id::BoolBinary_GlobDEqual)) {
          return libc::fnmatch(s2, s1);
        }
        if (op_id == Id::BoolBinary_GlobNEqual) {
          return !libc::fnmatch(s2, s1);
        }
        if ((op_id == Id::BoolBinary_Equal || op_id == Id::BoolBinary_DEqual)) {
          return str_equals(s1, s2);
        }
        if (op_id == Id::BoolBinary_NEqual) {
          return !(str_equals(s1, s2));
        }
        if (op_id == Id::BoolBinary_EqualTilde) {
          try {
            matches = libc::regex_match(s2, s1);
          }
          catch (RuntimeError* e) {
            msg = e->message;
            e_die_status(2, StrFormat("Invalid regex %r: %s", s2, msg), Alloc<loc::Word>(node->right));
          }
          if (matches == nullptr) {
            return false;
          }
          this->mem->SetMatches(matches);
          return true;
        }
        if (op_id == Id::Op_Less) {
          return str_cmp(s1, s2) < 0;
        }
        if (op_id == Id::Op_Great) {
          return str_cmp(s1, s2) > 0;
        }
        assert(0);  // AssertionError
      }
    }
      break;
  }
  assert(0);  // AssertionError
}

}  // define namespace sh_expr_eval

namespace split {  // define

using runtime_asdl::value_e;
using runtime_asdl::scope_e;
using runtime_asdl::span_e;
using runtime_asdl::value__Str;
using runtime_asdl::emit_i;
using runtime_asdl::char_kind_i;
using runtime_asdl::state_i;
Str* DEFAULT_IFS = str1286;

List<Str*>* _SpansToParts(Str* s, List<Tuple2<runtime_asdl::span_t, int>*>* spans) {
  List<mylib::BufWriter*>* parts = nullptr;
  int start_index;
  bool join_next;
  bool last_span_was_black;
  runtime_asdl::span_t span_type;
  int end_index;
  mylib::BufWriter* buf = nullptr;
  List<Str*>* result = nullptr;
  StackRoots _roots({&s, &spans, &parts, &buf, &result});

  parts = Alloc<List<mylib::BufWriter*>>();
  start_index = 0;
  join_next = false;
  last_span_was_black = false;
  for (ListIter<Tuple2<runtime_asdl::span_t, int>*> it(spans); !it.Done(); it.Next()) {
    Tuple2<runtime_asdl::span_t, int>* tup0 = it.Value();
    span_type = tup0->at0();
    end_index = tup0->at1();
    if (span_type == span_e::Black) {
      if ((len(parts) and join_next)) {
        parts->index_(-1)->write(s->slice(start_index, end_index));
        join_next = false;
      }
      else {
        buf = Alloc<mylib::BufWriter>();
        buf->write(s->slice(start_index, end_index));
        parts->append(buf);
      }
      last_span_was_black = true;
    }
    else {
      if (span_type == span_e::Backslash) {
        if (last_span_was_black) {
          join_next = true;
        }
        last_span_was_black = false;
      }
      else {
        last_span_was_black = false;
      }
    }
    start_index = end_index;
  }
  result = Alloc<List<Str*>>();
  for (ListIter<mylib::BufWriter*> it(parts); !it.Done(); it.Next()) {
    mylib::BufWriter* buf = it.Value();
    result->append(buf->getvalue());
  }
  return result;
}

SplitContext::SplitContext(state::Mem* mem) 
    : header_(obj_header()) {
  this->mem = mem;
  this->splitters = Alloc<Dict<Str*, split::IfsSplitter*>>();
}

split::IfsSplitter* SplitContext::_GetSplitter(Str* ifs) {
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  split::IfsSplitter* sp = nullptr;
  mylib::BufWriter* ifs_whitespace = nullptr;
  mylib::BufWriter* ifs_other = nullptr;
  StackRoots _roots({&ifs, &val, &UP_val, &sp, &ifs_whitespace, &ifs_other});

  if (ifs == nullptr) {
    val = this->mem->GetValue(str1287, scope_e::Dynamic);
    UP_val = val;
    switch (val->tag_()) {
      case value_e::Undef: {
        ifs = DEFAULT_IFS;
      }
        break;
      case value_e::Str: {
        value__Str* val = static_cast<value__Str*>(UP_val);
        ifs = val->s;
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  sp = this->splitters->get(ifs);
  if (sp == nullptr) {
    ifs_whitespace = Alloc<mylib::BufWriter>();
    ifs_other = Alloc<mylib::BufWriter>();
    for (StrIter it(ifs); !it.Done(); it.Next()) {
      Str* c = it.Value();
      StackRoots _for({&c    });
      if (str_contains(str1289, c)) {
        ifs_whitespace->write(c);
      }
      else {
        ifs_other->write(c);
      }
    }
    sp = Alloc<IfsSplitter>(ifs_whitespace->getvalue(), ifs_other->getvalue());
    this->splitters->set(ifs, sp);
  }
  return sp;
}

Str* SplitContext::GetJoinChar() {
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  StackRoots _roots({&val, &UP_val});

  val = this->mem->GetValue(str1290, scope_e::Dynamic);
  UP_val = val;
  switch (val->tag_()) {
    case value_e::Undef: {
      return str1291;
    }
      break;
    case value_e::Str: {
      value__Str* val = static_cast<value__Str*>(UP_val);
      if (len(val->s)) {
        return val->s->index_(0);
      }
      else {
        return str1292;
      }
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  assert(0);  // AssertionError
}

Str* SplitContext::Escape(Str* s) {
  split::IfsSplitter* sp = nullptr;
  StackRoots _roots({&s, &sp});

  sp = this->_GetSplitter();
  return sp->Escape(s);
}

List<Str*>* SplitContext::SplitForWordEval(Str* s, Str* ifs) {
  split::IfsSplitter* sp = nullptr;
  List<Tuple2<runtime_asdl::span_t, int>*>* spans = nullptr;
  StackRoots _roots({&s, &ifs, &sp, &spans});

  sp = this->_GetSplitter(ifs);
  spans = sp->Split(s, true);
  return _SpansToParts(s, spans);
}

List<Tuple2<runtime_asdl::span_t, int>*>* SplitContext::SplitForRead(Str* line, bool allow_escape) {
  split::IfsSplitter* sp = nullptr;
  StackRoots _roots({&line, &sp});

  sp = this->_GetSplitter();
  return sp->Split(line, allow_escape);
}

List<Str*>* SplitContext::SplitFuncBuiltin(Str* s, Str* ifs) {
  StackRoots _roots({&s, &ifs});

  return this->SplitForWordEval(s, ifs);
}

_BaseSplitter::_BaseSplitter(Str* escape_chars) 
    : header_(obj_header()) {
  this->escape_chars = str_concat(escape_chars, str1295);
}

Str* _BaseSplitter::Escape(Str* s) {
  StackRoots _roots({&s});

  return pyutil::BackslashEscape(s, this->escape_chars);
}

IfsSplitter::IfsSplitter(Str* ifs_whitespace, Str* ifs_other) : _BaseSplitter(str_concat(ifs_whitespace, ifs_other)) {
  FIELD_MASK(header_) |= IfsSplitter::field_mask();
  this->ifs_whitespace = ifs_whitespace;
  this->ifs_other = ifs_other;
}

List<Tuple2<runtime_asdl::span_t, int>*>* IfsSplitter::Split(Str* s, bool allow_escape) {
  Str* ws_chars = nullptr;
  Str* other_chars = nullptr;
  int n;
  List<Tuple2<runtime_asdl::span_t, int>*>* spans = nullptr;
  int i;
  int state;
  Str* c = nullptr;
  int ch;
  int new_state;
  int action;
  StackRoots _roots({&s, &ws_chars, &other_chars, &spans, &c});

  ws_chars = this->ifs_whitespace;
  other_chars = this->ifs_other;
  n = len(s);
  spans = Alloc<List<Tuple2<runtime_asdl::span_t, int>*>>();
  if (n == 0) {
    return spans;
  }
  i = 0;
  while ((i < n and str_contains(this->ifs_whitespace, s->index_(i)))) {
    i += 1;
  }
  if (i != 0) {
    spans->append((Alloc<Tuple2<runtime_asdl::span_t, int>>(span_e::Delim, i)));
  }
  if (i == n) {
    return spans;
  }
  state = state_i::Start;
  while (state != state_i::Done) {
    if (i < n) {
      c = s->index_(i);
      if (str_contains(ws_chars, c)) {
        ch = char_kind_i::DE_White;
      }
      else {
        if (str_contains(other_chars, c)) {
          ch = char_kind_i::DE_Gray;
        }
        else {
          if ((allow_escape and str_equals(c, str1296))) {
            ch = char_kind_i::Backslash;
          }
          else {
            ch = char_kind_i::Black;
          }
        }
      }
    }
    else {
      if (i == n) {
        ch = char_kind_i::Sentinel;
      }
      else {
        assert(0);  // AssertionError
      }
    }
    Tuple2<int, int> tup1 = consts::IfsEdge(state, ch);
    new_state = tup1.at0();
    action = tup1.at1();
    if (new_state == state_i::Invalid) {
      assert(0);  // AssertionError
    }
    if (action == emit_i::Part) {
      spans->append((Alloc<Tuple2<runtime_asdl::span_t, int>>(span_e::Black, i)));
    }
    else {
      if (action == emit_i::Delim) {
        spans->append((Alloc<Tuple2<runtime_asdl::span_t, int>>(span_e::Delim, i)));
      }
      else {
        if (action == emit_i::Empty) {
          spans->append((Alloc<Tuple2<runtime_asdl::span_t, int>>(span_e::Delim, i)));
          spans->append((Alloc<Tuple2<runtime_asdl::span_t, int>>(span_e::Black, i)));
        }
        else {
          if (action == emit_i::Escape) {
            spans->append((Alloc<Tuple2<runtime_asdl::span_t, int>>(span_e::Backslash, i)));
          }
          else {
            if (action == emit_i::Nothing) {
              ;  // pass
            }
            else {
              assert(0);  // AssertionError
            }
          }
        }
      }
    }
    state = new_state;
    i += 1;
  }
  return spans;
}

}  // define namespace split

namespace string_ops {  // define

using id_kind_asdl::Id;
using syntax_asdl::loc;
using syntax_asdl::Token;
using pyerror::e_die;
using pyerror::e_strict;

Str* Utf8Encode(int code) {
  int num_cont_bytes;
  List<int>* bytes_ = nullptr;
  int b;
  List<Str*>* tmp = nullptr;
  StackRoots _roots({&bytes_, &tmp});

  num_cont_bytes = 0;
  if (code <= 127) {
    return chr((code & 127));
  }
  else {
    if (code <= 2047) {
      num_cont_bytes = 1;
    }
    else {
      if (code <= 65535) {
        num_cont_bytes = 2;
      }
      else {
        if (code <= 1114111) {
          num_cont_bytes = 3;
        }
        else {
          return str1298;
        }
      }
    }
  }
  bytes_ = Alloc<List<int>>();
  for (int _ = 0; _ < num_cont_bytes; ++_) {
    bytes_->append((128 | (code & 63)));
    code >>= 6;
  }
  b = ((30 << (6 - num_cont_bytes)) | (code & (63 >> num_cont_bytes)));
  bytes_->append(b);
  bytes_->reverse();
  tmp = Alloc<List<Str*>>();
  for (ListIter<int> it(bytes_); !it.Done(); it.Next()) {
    int b = it.Value();
    tmp->append(chr((b & 255)));
  }
  return str1299->join(tmp);
}
Str* INCOMPLETE_CHAR = str1300;
Str* INVALID_CONT = str1301;
Str* INVALID_START = str1302;

void _CheckContinuationByte(Str* byte) {
  StackRoots _roots({&byte});

  if ((ord(byte) >> 6) != 2) {
    e_strict(INVALID_CONT, Alloc<loc::Missing>());
  }
}

int _Utf8CharLen(int starting_byte) {
  if ((starting_byte >> 7) == 0) {
    return 1;
  }
  else {
    if ((starting_byte >> 5) == 6) {
      return 2;
    }
    else {
      if ((starting_byte >> 4) == 14) {
        return 3;
      }
      else {
        if ((starting_byte >> 3) == 30) {
          return 4;
        }
        else {
          e_strict(INVALID_START, Alloc<loc::Missing>());
        }
      }
    }
  }
}

int _NextUtf8Char(Str* s, int i) {
  int n;
  int byte_as_int;
  int length;
  StackRoots _roots({&s});

  n = len(s);
  byte_as_int = ord(s->index_(i));
  length = _Utf8CharLen(byte_as_int);
  for (int j = (i + 1); j < (i + length); ++j) {
    if (j >= n) {
      e_strict(INCOMPLETE_CHAR, Alloc<loc::Missing>());
    }
    _CheckContinuationByte(s->index_(j));
  }
  return (i + length);
}

int PreviousUtf8Char(Str* s, int i) {
  int orig_i;
  int byte_as_int;
  int offset;
  StackRoots _roots({&s});

  orig_i = i;
  while (i > 0) {
    i -= 1;
    byte_as_int = ord(s->index_(i));
    if ((byte_as_int >> 6) != 2) {
      offset = (orig_i - i);
      if (offset != _Utf8CharLen(byte_as_int)) {
        e_strict(INVALID_START, Alloc<loc::Missing>());
      }
      return i;
    }
  }
  e_strict(INVALID_START, Alloc<loc::Missing>());
}

int CountUtf8Chars(Str* s) {
  int num_chars;
  int num_bytes;
  int i;
  StackRoots _roots({&s});

  num_chars = 0;
  num_bytes = len(s);
  i = 0;
  while (i < num_bytes) {
    i = _NextUtf8Char(s, i);
    num_chars += 1;
  }
  return num_chars;
}

int AdvanceUtf8Chars(Str* s, int num_chars, int byte_offset) {
  int num_bytes;
  int i;
  StackRoots _roots({&s});

  num_bytes = len(s);
  i = byte_offset;
  for (int _ = 0; _ < num_chars; ++_) {
    if (i >= num_bytes) {
      return i;
    }
    i = _NextUtf8Char(s, i);
  }
  return i;
}

Str* DoUnarySuffixOp(Str* s, syntax_asdl::Token* op_tok, Str* arg, bool is_extglob) {
  int id_;
  int n;
  int i;
  StackRoots _roots({&s, &op_tok, &arg});

  id_ = op_tok->id;
  if ((!is_extglob and !glob_::LooksLikeGlob(arg))) {
    arg = glob_::GlobUnescape(arg);
    if ((id_ == Id::VOp1_Pound || id_ == Id::VOp1_DPound)) {
      if ((len(arg) and s->startswith(arg))) {
        return s->slice(len(arg));
      }
      else {
        return s;
      }
    }
    else {
      if ((id_ == Id::VOp1_Percent || id_ == Id::VOp1_DPercent)) {
        if ((len(arg) and s->endswith(arg))) {
          return s->slice(0, -len(arg));
        }
        else {
          return s;
        }
      }
      else {
        if (id_ == Id::VOp1_Comma) {
          if (!(str_equals(arg, str1303))) {
            e_die(StrFormat("%s can't have an argument", ui::PrettyId(id_)), op_tok);
          }
          if (len(s)) {
            return str_concat(s->index_(0)->lower(), s->slice(1));
          }
          else {
            return s;
          }
        }
        else {
          if (id_ == Id::VOp1_DComma) {
            if (!(str_equals(arg, str1305))) {
              e_die(StrFormat("%s can't have an argument", ui::PrettyId(id_)), op_tok);
            }
            return s->lower();
          }
          else {
            if (id_ == Id::VOp1_Caret) {
              if (!(str_equals(arg, str1307))) {
                e_die(StrFormat("%s can't have an argument", ui::PrettyId(id_)), op_tok);
              }
              if (len(s)) {
                return str_concat(s->index_(0)->upper(), s->slice(1));
              }
              else {
                return s;
              }
            }
            else {
              if (id_ == Id::VOp1_DCaret) {
                if (!(str_equals(arg, str1309))) {
                  e_die(StrFormat("%s can't have an argument", ui::PrettyId(id_)), op_tok);
                }
                return s->upper();
              }
              else {
                assert(0);  // AssertionError
              }
            }
          }
        }
      }
    }
  }
  n = len(s);
  if (id_ == Id::VOp1_Pound) {
    i = 0;
    while (true) {
      if (libc::fnmatch(arg, s->slice(0, i))) {
        return s->slice(i);
      }
      if (i >= n) {
        break;
      }
      i = _NextUtf8Char(s, i);
    }
    return s;
  }
  else {
    if (id_ == Id::VOp1_DPound) {
      i = n;
      while (true) {
        if (libc::fnmatch(arg, s->slice(0, i))) {
          return s->slice(i);
        }
        if (i == 0) {
          break;
        }
        i = PreviousUtf8Char(s, i);
      }
      return s;
    }
    else {
      if (id_ == Id::VOp1_Percent) {
        i = n;
        while (true) {
          if (libc::fnmatch(arg, s->slice(i))) {
            return s->slice(0, i);
          }
          if (i == 0) {
            break;
          }
          i = PreviousUtf8Char(s, i);
        }
        return s;
      }
      else {
        if (id_ == Id::VOp1_DPercent) {
          i = 0;
          while (true) {
            if (libc::fnmatch(arg, s->slice(i))) {
              return s->slice(0, i);
            }
            if (i >= n) {
              break;
            }
            i = _NextUtf8Char(s, i);
          }
          return s;
        }
        else {
          FAIL(kNotImplemented);  // Python NotImplementedError
        }
      }
    }
  }
}

List<Tuple2<int, int>*>* _AllMatchPositions(Str* s, Str* regex) {
  List<Tuple2<int, int>*>* matches = nullptr;
  int pos;
  int n;
  Tuple2<int, int>* m = nullptr;
  int start;
  int end;
  StackRoots _roots({&s, &regex, &matches, &m});

  matches = Alloc<List<Tuple2<int, int>*>>();
  pos = 0;
  n = len(s);
  while (pos < n) {
    m = libc::regex_first_group_match(regex, s, pos);
    if (m == nullptr) {
      break;
    }
    matches->append(m);
    Tuple2<int, int>* tup0 = m;
    start = tup0->at0();
    end = tup0->at1();
    pos = end;
  }
  return matches;
}

Str* _PatSubAll(Str* s, Str* regex, Str* replace_str) {
  List<Str*>* parts = nullptr;
  int prev_end;
  int start;
  int end;
  StackRoots _roots({&s, &regex, &replace_str, &parts});

  parts = Alloc<List<Str*>>();
  prev_end = 0;
  for (ListIter<Tuple2<int, int>*> it(_AllMatchPositions(s, regex)); !it.Done(); it.Next()) {
    Tuple2<int, int>* tup1 = it.Value();
    start = tup1->at0();
    end = tup1->at1();
    parts->append(s->slice(prev_end, start));
    parts->append(replace_str);
    prev_end = end;
  }
  parts->append(s->slice(prev_end));
  return str1311->join(parts);
}

GlobReplacer::GlobReplacer(Str* regex, Str* replace_str, syntax_asdl::Token* slash_tok) 
    : header_(obj_header()) {
  this->regex = regex;
  this->replace_str = replace_str;
  this->slash_tok = slash_tok;
}

Str* GlobReplacer::Replace(Str* s, syntax_asdl::suffix_op__PatSub* op) {
  Str* regex = nullptr;
  Str* msg = nullptr;
  Tuple2<int, int>* m = nullptr;
  int start;
  int end;
  StackRoots _roots({&s, &op, &regex, &msg, &m});

  regex = StrFormat("(%s)", this->regex);
  if (op->replace_mode == Id::Lit_Slash) {
    try {
      return _PatSubAll(s, regex, this->replace_str);
    }
    catch (RuntimeError* e) {
      msg = e->message;
      e_die(StrFormat("Error matching regex %r: %s", regex, msg), this->slash_tok);
    }
  }
  if (op->replace_mode == Id::Lit_Pound) {
    regex = str_concat(str1315, regex);
  }
  else {
    if (op->replace_mode == Id::Lit_Percent) {
      regex = str_concat(regex, str1316);
    }
  }
  m = libc::regex_first_group_match(regex, s, 0);
  if (m == nullptr) {
    return s;
  }
  Tuple2<int, int>* tup2 = m;
  start = tup2->at0();
  end = tup2->at1();
  return str_concat(str_concat(s->slice(0, start), this->replace_str), s->slice(end));
}

Str* ShellQuoteB(Str* s) {
  StackRoots _roots({&s});

  s = s->replace(str1317, str1318)->replace(str1319, str1320);
  return pyutil::BackslashEscape(s, str1321);
}

}  // define namespace string_ops

namespace tdop {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using syntax_asdl::loc;
using syntax_asdl::arith_expr;
using syntax_asdl::arith_expr_e;
using syntax_asdl::arith_expr_t;
using syntax_asdl::arith_expr__Binary;
using syntax_asdl::word_t;
using syntax_asdl::compound_word;
using syntax_asdl::simple_var_sub;
using types_asdl::lex_mode_e;
using pyerror::p_die;

bool IsIndexable(syntax_asdl::arith_expr_t* node) {
  int tag;
  StackRoots _roots({&node});

  tag = node->tag_();
  switch (node->tag_()) {
    case arith_expr_e::VarSub: 
    case arith_expr_e::Word: {
      return true;
    }
      break;
  }
  return false;
}

void CheckLhsExpr(syntax_asdl::arith_expr_t* node, syntax_asdl::word_t* blame_word) {
  syntax_asdl::arith_expr_t* UP_node = nullptr;
  StackRoots _roots({&node, &blame_word, &UP_node});

  UP_node = node;
  if (node->tag_() == arith_expr_e::Binary) {
    arith_expr__Binary* node = static_cast<arith_expr__Binary*>(UP_node);
    if ((node->op_id == Id::Arith_LBracket and IsIndexable(node->left))) {
      return ;
    }
  }
  if (IsIndexable(node)) {
    return ;
  }
  p_die(str1322, Alloc<loc::Word>(blame_word));
}

syntax_asdl::arith_expr_t* NullError(tdop::TdopParser* p, syntax_asdl::word_t* t, int bp) {
  StackRoots _roots({&p, &t});

  p_die(str1323, Alloc<loc::Word>(t));
  return nullptr;
}

syntax_asdl::arith_expr_t* NullConstant(tdop::TdopParser* p, syntax_asdl::word_t* w, int bp) {
  syntax_asdl::Token* name_tok = nullptr;
  StackRoots _roots({&p, &w, &name_tok});

  name_tok = word_::LooksLikeArithVar(w);
  if (name_tok) {
    return Alloc<simple_var_sub>(name_tok, lexer::TokenVal(name_tok));
  }
  return static_cast<compound_word*>(w);
}

syntax_asdl::arith_expr_t* NullParen(tdop::TdopParser* p, syntax_asdl::word_t* t, int bp) {
  syntax_asdl::arith_expr_t* r = nullptr;
  StackRoots _roots({&p, &t, &r});

  r = p->ParseUntil(bp);
  p->Eat(Id::Arith_RParen);
  return r;
}

syntax_asdl::arith_expr_t* NullPrefixOp(tdop::TdopParser* p, syntax_asdl::word_t* w, int bp) {
  syntax_asdl::arith_expr_t* right = nullptr;
  StackRoots _roots({&p, &w, &right});

  right = p->ParseUntil(bp);
  return Alloc<arith_expr::Unary>(word_::ArithId(w), right);
}

syntax_asdl::arith_expr_t* LeftError(tdop::TdopParser* p, syntax_asdl::word_t* t, syntax_asdl::arith_expr_t* left, int rbp) {
  StackRoots _roots({&p, &t, &left});

  p_die(str1324, Alloc<loc::Word>(t));
  return nullptr;
}

syntax_asdl::arith_expr_t* LeftBinaryOp(tdop::TdopParser* p, syntax_asdl::word_t* w, syntax_asdl::arith_expr_t* left, int rbp) {
  StackRoots _roots({&p, &w, &left});

  return Alloc<arith_expr::Binary>(word_::ArithId(w), left, p->ParseUntil(rbp));
}

syntax_asdl::arith_expr_t* LeftAssign(tdop::TdopParser* p, syntax_asdl::word_t* w, syntax_asdl::arith_expr_t* left, int rbp) {
  StackRoots _roots({&p, &w, &left});

  CheckLhsExpr(left, w);
  return Alloc<arith_expr::BinaryAssign>(word_::ArithId(w), left, p->ParseUntil(rbp));
}

TdopParser::TdopParser(tdop::ParserSpec* spec, word_parse::WordParser* w_parser, optview::Parse* parse_opts) 
    : header_(obj_header()) {
  this->spec = spec;
  this->w_parser = w_parser;
  this->parse_opts = parse_opts;
  this->cur_word = nullptr;
  this->op_id = Id::Undefined_Tok;
}

int TdopParser::CurrentId() {
  return word_::CommandId(this->cur_word);
}

bool TdopParser::AtToken(int token_type) {
  return this->op_id == token_type;
}

void TdopParser::Eat(int token_type) {
  if (!this->AtToken(token_type)) {
    p_die(StrFormat("Parser expected %s, got %s", ui::PrettyId(token_type), ui::PrettyId(this->op_id)), Alloc<loc::Word>(this->cur_word));
  }
  this->Next();
}

bool TdopParser::Next() {
  this->cur_word = this->w_parser->ReadWord(lex_mode_e::Arith);
  this->op_id = word_::ArithId(this->cur_word);
  return true;
}

syntax_asdl::arith_expr_t* TdopParser::ParseUntil(int rbp) {
  syntax_asdl::word_t* t = nullptr;
  tdop::NullInfo* null_info = nullptr;
  syntax_asdl::arith_expr_t* node = nullptr;
  tdop::LeftInfo* left_info = nullptr;
  StackRoots _roots({&t, &null_info, &node, &left_info});

  if ((this->op_id == Id::Eof_Real || this->op_id == Id::Eof_RParen || this->op_id == Id::Eof_Backtick)) {
    p_die(str1326, Alloc<loc::Word>(this->cur_word));
  }
  t = this->cur_word;
  null_info = this->spec->LookupNud(this->op_id);
  this->Next();
  node = null_info->nud(this, t, null_info->bp);
  while (true) {
    t = this->cur_word;
    left_info = this->spec->LookupLed(this->op_id);
    if (rbp >= left_info->lbp) {
      break;
    }
    this->Next();
    node = left_info->led(this, t, node, left_info->rbp);
  }
  return node;
}

syntax_asdl::arith_expr_t* TdopParser::Parse() {
  this->Next();
  if (!this->parse_opts->parse_sh_arith()) {
    p_die(str1327, Alloc<loc::Word>(this->cur_word));
  }
  return this->ParseUntil(0);
}

}  // define namespace tdop

namespace word_ {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Kind;
using id_kind_asdl::Id_t;
using id_kind_asdl::Kind_t;
using syntax_asdl::Token;
using syntax_asdl::compound_word;
using syntax_asdl::double_quoted;
using syntax_asdl::single_quoted;
using syntax_asdl::simple_var_sub;
using syntax_asdl::braced_var_sub;
using syntax_asdl::command_sub;
using syntax_asdl::sh_array_literal;
using syntax_asdl::word_part;
using syntax_asdl::word_part_t;
using syntax_asdl::word_part_e;
using syntax_asdl::word_part__AssocArrayLiteral;
using syntax_asdl::word_part__EscapedLiteral;
using syntax_asdl::word_part__TildeSub;
using syntax_asdl::word_part__ArithSub;
using syntax_asdl::word_part__ExtGlob;
using syntax_asdl::word_part__Splice;
using syntax_asdl::word_part__FuncCall;
using syntax_asdl::word_part__ExprSub;
using syntax_asdl::word_e;
using syntax_asdl::word_t;
using syntax_asdl::word_str;
using syntax_asdl::word__BracedTree;
using syntax_asdl::word__String;
using syntax_asdl::sh_lhs_expr_e;
using syntax_asdl::sh_lhs_expr_t;
using syntax_asdl::sh_lhs_expr__Name;
using syntax_asdl::sh_lhs_expr__IndexedName;
using syntax_asdl::assoc_pair;
using mylib::StrFromC;

int LiteralId(syntax_asdl::word_part_t* p) {
  syntax_asdl::word_part_t* UP_part = nullptr;
  StackRoots _roots({&p, &UP_part});

  UP_part = p;
  if (p->tag_() == word_part_e::Literal) {
    return static_cast<Token*>(UP_part)->id;
  }
  else {
    return Id::Undefined_Tok;
  }
}

Tuple3<bool, Str*, bool> _EvalWordPart(syntax_asdl::word_part_t* part) {
  syntax_asdl::word_part_t* UP_part = nullptr;
  Str* val = nullptr;
  Str* s = nullptr;
  List<Str*>* tmp = nullptr;
  List<Str*>* strs = nullptr;
  bool ok;
  StackRoots _roots({&part, &UP_part, &val, &s, &tmp, &strs});

  UP_part = part;
  switch (part->tag_()) {
    case word_part_e::ShArrayLiteral: {
      return Tuple3<bool, Str*, bool>(false, str1328, false);
    }
      break;
    case word_part_e::AssocArrayLiteral: {
      return Tuple3<bool, Str*, bool>(false, str1329, false);
    }
      break;
    case word_part_e::Literal: {
      Token* tok = static_cast<Token*>(UP_part);
      return Tuple3<bool, Str*, bool>(true, tok->tval, false);
    }
      break;
    case word_part_e::EscapedLiteral: {
      word_part__EscapedLiteral* part = static_cast<word_part__EscapedLiteral*>(UP_part);
      val = part->token->tval;
      s = val->index_(1);
      return Tuple3<bool, Str*, bool>(true, s, true);
    }
      break;
    case word_part_e::SingleQuoted: {
      single_quoted* part = static_cast<single_quoted*>(UP_part);
      tmp = Alloc<List<Str*>>();
      for (ListIter<syntax_asdl::Token*> it(part->tokens); !it.Done(); it.Next()) {
        syntax_asdl::Token* t = it.Value();
        tmp->append(t->tval);
      }
      s = str1330->join(tmp);
      return Tuple3<bool, Str*, bool>(true, s, true);
    }
      break;
    case word_part_e::DoubleQuoted: {
      double_quoted* part = static_cast<double_quoted*>(UP_part);
      strs = Alloc<List<Str*>>();
      for (ListIter<syntax_asdl::word_part_t*> it(part->parts); !it.Done(); it.Next()) {
        syntax_asdl::word_part_t* p = it.Value();
        StackRoots _for({&p      });
        Tuple3<bool, Str*, bool> tup0 = _EvalWordPart(p);
        ok = tup0.at0();
        s = tup0.at1();
        if (!ok) {
          return Tuple3<bool, Str*, bool>(false, str1331, true);
        }
        strs->append(s);
      }
      return Tuple3<bool, Str*, bool>(true, str1332->join(strs), true);
    }
      break;
    case word_part_e::CommandSub: 
    case word_part_e::SimpleVarSub: 
    case word_part_e::BracedVarSub: 
    case word_part_e::TildeSub: 
    case word_part_e::ArithSub: 
    case word_part_e::ExtGlob: 
    case word_part_e::Splice: 
    case word_part_e::FuncCall: 
    case word_part_e::ExprSub: {
      return Tuple3<bool, Str*, bool>(false, str1333, false);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

Tuple3<bool, Str*, bool> StaticEval(syntax_asdl::word_t* UP_w) {
  bool quoted;
  List<Str*>* strs = nullptr;
  bool ok;
  Str* s = nullptr;
  bool q;
  StackRoots _roots({&UP_w, &strs, &s});

  quoted = false;
  if (UP_w->tag_() != word_e::Compound) {
    return Tuple3<bool, Str*, bool>(false, str1334, quoted);
  }
  compound_word* w = static_cast<compound_word*>(UP_w);
  strs = Alloc<List<Str*>>();
  for (ListIter<syntax_asdl::word_part_t*> it(w->parts); !it.Done(); it.Next()) {
    syntax_asdl::word_part_t* part = it.Value();
    StackRoots _for({&part  });
    Tuple3<bool, Str*, bool> tup1 = _EvalWordPart(part);
    ok = tup1.at0();
    s = tup1.at1();
    q = tup1.at2();
    if (!ok) {
      return Tuple3<bool, Str*, bool>(false, str1335, quoted);
    }
    if (q) {
      quoted = true;
    }
    strs->append(s);
  }
  return Tuple3<bool, Str*, bool>(true, str1336->join(strs), quoted);
}

int LeftMostSpanForPart(syntax_asdl::word_part_t* part) {
  syntax_asdl::word_part_t* UP_part = nullptr;
  StackRoots _roots({&part, &UP_part});

  UP_part = part;
  switch (part->tag_()) {
    case word_part_e::ShArrayLiteral: {
      sh_array_literal* part = static_cast<sh_array_literal*>(UP_part);
      return part->left->span_id;
    }
      break;
    case word_part_e::AssocArrayLiteral: {
      word_part__AssocArrayLiteral* part = static_cast<word_part__AssocArrayLiteral*>(UP_part);
      return part->left->span_id;
    }
      break;
    case word_part_e::Literal: {
      Token* tok = static_cast<Token*>(UP_part);
      return tok->span_id;
    }
      break;
    case word_part_e::EscapedLiteral: {
      word_part__EscapedLiteral* part = static_cast<word_part__EscapedLiteral*>(UP_part);
      return part->token->span_id;
    }
      break;
    case word_part_e::SingleQuoted: {
      single_quoted* part = static_cast<single_quoted*>(UP_part);
      return part->left->span_id;
    }
      break;
    case word_part_e::DoubleQuoted: {
      double_quoted* part = static_cast<double_quoted*>(UP_part);
      return part->left->span_id;
    }
      break;
    case word_part_e::SimpleVarSub: {
      simple_var_sub* part = static_cast<simple_var_sub*>(UP_part);
      return part->left->span_id;
    }
      break;
    case word_part_e::BracedVarSub: {
      braced_var_sub* part = static_cast<braced_var_sub*>(UP_part);
      return part->left->span_id;
    }
      break;
    case word_part_e::CommandSub: {
      command_sub* part = static_cast<command_sub*>(UP_part);
      return part->left_token->span_id;
    }
      break;
    case word_part_e::TildeSub: {
      word_part__TildeSub* part = static_cast<word_part__TildeSub*>(UP_part);
      return part->token->span_id;
    }
      break;
    case word_part_e::ArithSub: {
      word_part__ArithSub* part = static_cast<word_part__ArithSub*>(UP_part);
      return part->spids->index_(0);
    }
      break;
    case word_part_e::ExtGlob: {
      word_part__ExtGlob* part = static_cast<word_part__ExtGlob*>(UP_part);
      return part->spids->index_(0);
    }
      break;
    case word_part_e::BracedTuple: {
      return runtime::NO_SPID;
    }
      break;
    case word_part_e::Splice: {
      word_part__Splice* part = static_cast<word_part__Splice*>(UP_part);
      return part->name->span_id;
    }
      break;
    case word_part_e::FuncCall: {
      word_part__FuncCall* part = static_cast<word_part__FuncCall*>(UP_part);
      return part->name->span_id;
    }
      break;
    case word_part_e::ExprSub: {
      word_part__ExprSub* part = static_cast<word_part__ExprSub*>(UP_part);
      return part->left->span_id;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

int _RightMostSpanForPart(syntax_asdl::word_part_t* part) {
  syntax_asdl::word_part_t* UP_part = nullptr;
  int spid;
  StackRoots _roots({&part, &UP_part});

  UP_part = part;
  switch (part->tag_()) {
    case word_part_e::ShArrayLiteral: {
      sh_array_literal* part = static_cast<sh_array_literal*>(UP_part);
      return LeftMostSpanForWord(part->words->index_(0));
    }
      break;
    case word_part_e::Literal: {
      Token* tok = static_cast<Token*>(UP_part);
      return tok->span_id;
    }
      break;
    case word_part_e::EscapedLiteral: {
      word_part__EscapedLiteral* part = static_cast<word_part__EscapedLiteral*>(UP_part);
      return part->token->span_id;
    }
      break;
    case word_part_e::SingleQuoted: {
      single_quoted* part = static_cast<single_quoted*>(UP_part);
      return part->right->span_id;
    }
      break;
    case word_part_e::DoubleQuoted: {
      double_quoted* part = static_cast<double_quoted*>(UP_part);
      return part->right->span_id;
    }
      break;
    case word_part_e::SimpleVarSub: {
      simple_var_sub* part = static_cast<simple_var_sub*>(UP_part);
      return part->left->span_id;
    }
      break;
    case word_part_e::BracedVarSub: {
      braced_var_sub* part = static_cast<braced_var_sub*>(UP_part);
      spid = part->right->span_id;
      return spid;
    }
      break;
    case word_part_e::CommandSub: {
      command_sub* part = static_cast<command_sub*>(UP_part);
      return part->right->span_id;
    }
      break;
    case word_part_e::TildeSub: {
      return runtime::NO_SPID;
    }
      break;
    case word_part_e::ArithSub: {
      word_part__ArithSub* part = static_cast<word_part__ArithSub*>(UP_part);
      return part->spids->index_(1);
    }
      break;
    case word_part_e::ExtGlob: {
      word_part__ExtGlob* part = static_cast<word_part__ExtGlob*>(UP_part);
      return part->spids->index_(1);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

int LeftMostSpanForWord(syntax_asdl::word_t* w) {
  syntax_asdl::word_t* UP_w = nullptr;
  StackRoots _roots({&w, &UP_w});

  UP_w = w;
  switch (w->tag_()) {
    case word_e::Compound: {
      compound_word* w = static_cast<compound_word*>(UP_w);
      if (len(w->parts)) {
        return LeftMostSpanForPart(w->parts->index_(0));
      }
      else {
        return runtime::NO_SPID;
      }
    }
      break;
    case word_e::Token: {
      Token* tok = static_cast<Token*>(UP_w);
      return tok->span_id;
    }
      break;
    case word_e::BracedTree: {
      word__BracedTree* w = static_cast<word__BracedTree*>(UP_w);
      return LeftMostSpanForPart(w->parts->index_(0));
    }
      break;
    case word_e::String: {
      word__String* w = static_cast<word__String*>(UP_w);
      return w->span_id;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  assert(0);  // AssertionError
}

int RightMostSpanForWord(syntax_asdl::word_t* w) {
  syntax_asdl::word_t* UP_w = nullptr;
  syntax_asdl::word_part_t* end = nullptr;
  StackRoots _roots({&w, &UP_w, &end});

  UP_w = w;
  switch (w->tag_()) {
    case word_e::Compound: {
      compound_word* w = static_cast<compound_word*>(UP_w);
      if (len(w->parts) == 0) {
        assert(0);  // AssertionError
      }
      else {
        end = w->parts->index_(-1);
        return _RightMostSpanForPart(end);
      }
    }
      break;
    case word_e::Token: {
      Token* tok = static_cast<Token*>(UP_w);
      return tok->span_id;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  assert(0);  // AssertionError
}

syntax_asdl::word_part__TildeSub* _MakeTildeSub(syntax_asdl::Token* tok) {
  Str* user_name = nullptr;
  StackRoots _roots({&tok, &user_name});

  if (tok->length == 1) {
    user_name = nullptr;
  }
  else {
    user_name = lexer::TokenSliceLeft(tok, 1);
  }
  return Alloc<word_part::TildeSub>(tok, user_name);
}

syntax_asdl::compound_word* TildeDetect(syntax_asdl::word_t* UP_w) {
  syntax_asdl::word_part_t* part0 = nullptr;
  syntax_asdl::word_part__TildeSub* tilde_sub = nullptr;
  List<syntax_asdl::word_part_t*>* new_parts = nullptr;
  syntax_asdl::word_part_t* part1 = nullptr;
  int id_;
  StackRoots _roots({&UP_w, &part0, &tilde_sub, &new_parts, &part1});

  if (UP_w->tag_() != word_e::Compound) {
    return nullptr;
  }
  compound_word* w = static_cast<compound_word*>(UP_w);
  if (len(w->parts) == 0) {
    return nullptr;
  }
  part0 = w->parts->index_(0);
  if (LiteralId(part0) != Id::Lit_TildeLike) {
    return nullptr;
  }
  Token* tok0 = static_cast<Token*>(part0);
  tilde_sub = _MakeTildeSub(tok0);
  new_parts = NewList<syntax_asdl::word_part_t*>(std::initializer_list<syntax_asdl::word_part_t*>{tilde_sub});
  if (len(w->parts) == 1) {
    return Alloc<compound_word>(new_parts);
  }
  part1 = w->parts->index_(1);
  id_ = LiteralId(part1);
  if (id_ == Id::Lit_Slash) {
    new_parts->extend(w->parts->slice(1));
    return Alloc<compound_word>(new_parts);
  }
  if ((id_ == Id::Lit_Chars and static_cast<Token*>(part1)->tval->startswith(str1340))) {
    new_parts->extend(w->parts->slice(1));
    return Alloc<compound_word>(new_parts);
  }
  return nullptr;
}

void TildeDetectAssign(syntax_asdl::compound_word* w) {
  List<syntax_asdl::word_part_t*>* parts = nullptr;
  int n;
  bool do_expand;
  syntax_asdl::word_part_t* cur = nullptr;
  syntax_asdl::word_part_t* next_part = nullptr;
  bool is_tilde;
  StackRoots _roots({&w, &parts, &cur, &next_part});

  parts = w->parts;
  n = len(parts);
  parts->append(nullptr);
  do_expand = true;
  for (int i = 0; i < n; ++i) {
    cur = parts->index_(i);
    if ((do_expand and LiteralId(cur) == Id::Lit_TildeLike)) {
      next_part = parts->index_((i + 1));
      if (next_part) {
        is_tilde = (LiteralId(next_part) == Id::Lit_Colon or (LiteralId(next_part) == Id::Lit_Chars and static_cast<Token*>(next_part)->tval->startswith(str1341)));
      }
      else {
        is_tilde = true;
      }
      if (is_tilde) {
        Token* tok = static_cast<Token*>(cur);
        parts->set(i, _MakeTildeSub(tok));
      }
    }
    do_expand = LiteralId(cur) == Id::Lit_Colon;
  }
  parts->pop();
}

List<syntax_asdl::word_t*>* TildeDetectAll(List<syntax_asdl::word_t*>* words) {
  List<syntax_asdl::word_t*>* out = nullptr;
  syntax_asdl::compound_word* t = nullptr;
  StackRoots _roots({&words, &out, &t});

  out = Alloc<List<syntax_asdl::word_t*>>();
  for (ListIter<syntax_asdl::word_t*> it(words); !it.Done(); it.Next()) {
    syntax_asdl::word_t* w = it.Value();
    StackRoots _for({&w  });
    t = TildeDetect(w);
    if (t) {
      out->append(t);
    }
    else {
      out->append(w);
    }
  }
  return out;
}

bool HasArrayPart(syntax_asdl::compound_word* w) {
  StackRoots _roots({&w});

  for (ListIter<syntax_asdl::word_part_t*> it(w->parts); !it.Done(); it.Next()) {
    syntax_asdl::word_part_t* part = it.Value();
    StackRoots _for({&part  });
    if (part->tag_() == word_part_e::ShArrayLiteral) {
      return true;
    }
  }
  return false;
}

Str* ShFunctionName(syntax_asdl::compound_word* w) {
  bool ok;
  Str* s = nullptr;
  bool quoted;
  StackRoots _roots({&w, &s});

  Tuple3<bool, Str*, bool> tup2 = StaticEval(w);
  ok = tup2.at0();
  s = tup2.at1();
  quoted = tup2.at2();
  if ((!ok or quoted)) {
    return str1342;
  }
  return s;
}

syntax_asdl::Token* LooksLikeArithVar(syntax_asdl::word_t* UP_w) {
  syntax_asdl::word_part_t* UP_part0 = nullptr;
  StackRoots _roots({&UP_w, &UP_part0});

  if (UP_w->tag_() != word_e::Compound) {
    return nullptr;
  }
  compound_word* w = static_cast<compound_word*>(UP_w);
  if (len(w->parts) != 1) {
    return nullptr;
  }
  UP_part0 = w->parts->index_(0);
  if (LiteralId(UP_part0) != Id::Lit_ArithVarLike) {
    return nullptr;
  }
  return static_cast<Token*>(UP_part0);
}

bool IsVarLike(syntax_asdl::compound_word* w) {
  StackRoots _roots({&w});

  if (len(w->parts) == 0) {
    return false;
  }
  return LiteralId(w->parts->index_(0)) == Id::Lit_VarLike;
}

Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int> DetectShAssignment(syntax_asdl::compound_word* w) {
  syntax_asdl::Token* no_token = nullptr;
  int n;
  syntax_asdl::word_part_t* UP_part0 = nullptr;
  int id0;
  syntax_asdl::word_part_t* UP_part = nullptr;
  StackRoots _roots({&w, &no_token, &UP_part0, &UP_part});

  no_token = nullptr;
  n = len(w->parts);
  if (n == 0) {
    return Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int>(no_token, no_token, 0);
  }
  UP_part0 = w->parts->index_(0);
  id0 = LiteralId(UP_part0);
  if (id0 == Id::Lit_VarLike) {
    Token* tok = static_cast<Token*>(UP_part0);
    return Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int>(tok, no_token, 1);
  }
  if (id0 == Id::Lit_ArrayLhsOpen) {
    Token* tok0 = static_cast<Token*>(UP_part0);
    if (n < 2) {
      return Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int>(no_token, no_token, 0);
    }
    for (int i = 1; i < n; ++i) {
      UP_part = w->parts->index_(i);
      if (LiteralId(UP_part) == Id::Lit_ArrayLhsClose) {
        Token* tok_close = static_cast<Token*>(UP_part);
        return Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int>(tok0, tok_close, (i + 1));
      }
    }
  }
  return Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int>(no_token, no_token, 0);
}

syntax_asdl::assoc_pair* DetectAssocPair(syntax_asdl::compound_word* w) {
  List<syntax_asdl::word_part_t*>* parts = nullptr;
  int n;
  int id_;
  syntax_asdl::compound_word* key = nullptr;
  syntax_asdl::compound_word* value = nullptr;
  StackRoots _roots({&w, &parts, &key, &value});

  parts = w->parts;
  if (LiteralId(parts->index_(0)) != Id::Lit_LBracket) {
    return nullptr;
  }
  n = len(parts);
  for (int i = 0; i < n; ++i) {
    id_ = LiteralId(parts->index_(i));
    if (id_ == Id::Lit_ArrayLhsClose) {
      key = Alloc<compound_word>(parts->slice(1, i));
      value = Alloc<compound_word>(parts->slice((i + 1)));
      return Alloc<assoc_pair>(key, value);
    }
  }
  return nullptr;
}

Tuple2<id_kind_asdl::Kind_t, syntax_asdl::Token*> KeywordToken(syntax_asdl::compound_word* w) {
  syntax_asdl::Token* no_token = nullptr;
  syntax_asdl::word_part_t* UP_part0 = nullptr;
  int token_type;
  id_kind_asdl::Kind_t token_kind;
  StackRoots _roots({&w, &no_token, &UP_part0});

  no_token = nullptr;
  if (len(w->parts) != 1) {
    return Tuple2<id_kind_asdl::Kind_t, syntax_asdl::Token*>(Kind::Undefined, no_token);
  }
  UP_part0 = w->parts->index_(0);
  token_type = LiteralId(UP_part0);
  if (token_type == Id::Undefined_Tok) {
    return Tuple2<id_kind_asdl::Kind_t, syntax_asdl::Token*>(Kind::Undefined, no_token);
  }
  token_kind = consts::GetKind(token_type);
  if (token_kind == Kind::ControlFlow) {
    return Tuple2<id_kind_asdl::Kind_t, syntax_asdl::Token*>(token_kind, static_cast<Token*>(UP_part0));
  }
  return Tuple2<id_kind_asdl::Kind_t, syntax_asdl::Token*>(Kind::Undefined, no_token);
}

syntax_asdl::Token* LiteralToken(syntax_asdl::word_t* UP_w) {
  syntax_asdl::word_part_t* part0 = nullptr;
  StackRoots _roots({&UP_w, &part0});

  compound_word* w = static_cast<compound_word*>(UP_w);
  if (len(w->parts) != 1) {
    return nullptr;
  }
  part0 = w->parts->index_(0);
  if (part0->tag_() == word_part_e::Literal) {
    return static_cast<Token*>(part0);
  }
  return nullptr;
}

int ArithId(syntax_asdl::word_t* w) {
  StackRoots _roots({&w});

  if (w->tag_() == word_e::Token) {
    Token* tok = static_cast<Token*>(w);
    return tok->id;
  }
  return Id::Word_Compound;
}

int BoolId(syntax_asdl::word_t* w) {
  syntax_asdl::word_t* UP_w = nullptr;
  int token_type;
  id_kind_asdl::Kind_t token_kind;
  StackRoots _roots({&w, &UP_w});

  UP_w = w;
  switch (w->tag_()) {
    case word_e::String: {
      word__String* w = static_cast<word__String*>(UP_w);
      return w->id;
    }
      break;
    case word_e::Token: {
      Token* tok = static_cast<Token*>(UP_w);
      return tok->id;
    }
      break;
    case word_e::Compound: {
      compound_word* w = static_cast<compound_word*>(UP_w);
      if (len(w->parts) != 1) {
        return Id::Word_Compound;
      }
      token_type = LiteralId(w->parts->index_(0));
      if (token_type == Id::Undefined_Tok) {
        return Id::Word_Compound;
      }
      if ((token_type == Id::KW_Bang || token_type == Id::Lit_DRightBracket)) {
        return token_type;
      }
      token_kind = consts::GetKind(token_type);
      if ((token_kind == Kind::BoolUnary || token_kind == Kind::BoolBinary)) {
        return token_type;
      }
      return Id::Word_Compound;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

int CommandId(syntax_asdl::word_t* w) {
  syntax_asdl::word_t* UP_w = nullptr;
  int token_type;
  id_kind_asdl::Kind_t token_kind;
  StackRoots _roots({&w, &UP_w});

  UP_w = w;
  switch (w->tag_()) {
    case word_e::Token: {
      Token* tok = static_cast<Token*>(UP_w);
      return tok->id;
    }
      break;
    case word_e::Compound: {
      compound_word* w = static_cast<compound_word*>(UP_w);
      if (len(w->parts) != 1) {
        return Id::Word_Compound;
      }
      token_type = LiteralId(w->parts->index_(0));
      if (token_type == Id::Undefined_Tok) {
        return Id::Word_Compound;
      }
      else {
        if ((token_type == Id::Lit_LBrace || token_type == Id::Lit_RBrace || token_type == Id::Lit_Equals || token_type == Id::Lit_Underscore || token_type == Id::ControlFlow_Return)) {
          return token_type;
        }
      }
      token_kind = consts::GetKind(token_type);
      if (token_kind == Kind::KW) {
        return token_type;
      }
      return Id::Word_Compound;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

id_kind_asdl::Kind_t CommandKind(syntax_asdl::word_t* w) {
  StackRoots _roots({&w});

  if (w->tag_() == word_e::Token) {
    Token* tok = static_cast<Token*>(w);
    return consts::GetKind(tok->id);
  }
  return Kind::Word;
}

bool IsVarSub(syntax_asdl::word_t* w) {
  StackRoots _roots({&w});

  return false;
}

int SpanForLhsExpr(syntax_asdl::sh_lhs_expr_t* node) {
  syntax_asdl::sh_lhs_expr_t* UP_node = nullptr;
  StackRoots _roots({&node, &UP_node});

  UP_node = node;
  switch (node->tag_()) {
    case sh_lhs_expr_e::Name: {
      sh_lhs_expr__Name* node = static_cast<sh_lhs_expr__Name*>(UP_node);
      return node->left->span_id;
    }
      break;
    case sh_lhs_expr_e::IndexedName: {
      sh_lhs_expr__IndexedName* node = static_cast<sh_lhs_expr__IndexedName*>(UP_node);
      return node->left->span_id;
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  assert(0);  // AssertionError
}

syntax_asdl::compound_word* ErrorWord(Str* error_str) {
  syntax_asdl::Token* t = nullptr;
  StackRoots _roots({&error_str, &t});

  t = lexer::DummyToken(Id::Lit_Chars, error_str);
  return Alloc<compound_word>(NewList<syntax_asdl::word_part_t*>(std::initializer_list<syntax_asdl::word_part_t*>{t}));
}

Str* Pretty(syntax_asdl::word_t* w) {
  syntax_asdl::word_t* UP_w = nullptr;
  StackRoots _roots({&w, &UP_w});

  UP_w = w;
  if (w->tag_() == word_e::String) {
    word__String* w = static_cast<word__String*>(UP_w);
    if (w->id == Id::Eof_Real) {
      return str1343;
    }
    else {
      return repr(w->s);
    }
  }
  else {
    return StrFromC(word_str(w->tag_()));
  }
}

ctx_EmitDocToken::ctx_EmitDocToken(word_parse::WordParser* w_parser) 
    : header_(obj_header()) {
  w_parser->EmitDocToken(true);
  this->w_parser = w_parser;
}

ctx_EmitDocToken::~ctx_EmitDocToken(){
  this->w_parser->EmitDocToken(false);
}

ctx_Multiline::ctx_Multiline(word_parse::WordParser* w_parser) 
    : header_(obj_header()) {
  w_parser->Multiline(true);
  this->w_parser = w_parser;
}

ctx_Multiline::~ctx_Multiline(){
  this->w_parser->Multiline(false);
}

}  // define namespace word_

namespace word_compile {  // define

using id_kind_asdl::Id;
using syntax_asdl::Token;
using syntax_asdl::single_quoted;
using syntax_asdl::CharCode;
using syntax_asdl::word_part_e;
using syntax_asdl::word_part_t;

syntax_asdl::CharCode* EvalCharLiteralForRegex(syntax_asdl::Token* tok) {
  int id_;
  Str* value = nullptr;
  Str* s = nullptr;
  int i;
  Str* one_char_str = nullptr;
  StackRoots _roots({&tok, &value, &s, &one_char_str});

  id_ = tok->id;
  value = tok->tval;
  switch (id_) {
    case Id::Char_UBraced: {
      s = value->slice(3, -1);
      i = to_int(s, 16);
      return Alloc<CharCode>(i, true, tok->span_id);
    }
      break;
    case Id::Char_OneChar: {
      one_char_str = consts::LookupCharC(value->index_(1));
      return Alloc<CharCode>(ord(one_char_str), false, tok->span_id);
    }
      break;
    case Id::Char_Hex: {
      s = value->slice(2);
      i = to_int(s, 16);
      return Alloc<CharCode>(i, false, tok->span_id);
    }
      break;
    case Id::Lit_Chars: 
    case Id::Expr_Name: 
    case Id::Expr_DecInt: {
      return Alloc<CharCode>(ord(tok->tval->index_(0)), false, tok->span_id);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

Str* EvalCStringToken(syntax_asdl::Token* tok) {
  int id_;
  Str* value = nullptr;
  Str* c = nullptr;
  Str* s = nullptr;
  int i;
  StackRoots _roots({&tok, &value, &c, &s});

  id_ = tok->id;
  value = tok->tval;
  if ((id_ == Id::Char_Literals || id_ == Id::Unknown_Backslash)) {
    return value;
  }
  else {
    if (id_ == Id::Right_SingleQuote) {
      return value;
    }
    else {
      if (id_ == Id::Char_OneChar) {
        c = value->index_(1);
        return consts::LookupCharC(c);
      }
      else {
        if (id_ == Id::Char_Stop) {
          return nullptr;
        }
        else {
          if ((id_ == Id::Char_Octal3 || id_ == Id::Char_Octal4)) {
            if (id_ == Id::Char_Octal3) {
              s = value->slice(1);
            }
            else {
              s = value->slice(2);
            }
            i = to_int(s, 8);
            if (i >= 256) {
              i = (i % 256);
            }
            return chr(i);
          }
          else {
            if (id_ == Id::Char_Hex) {
              s = value->slice(2);
              i = to_int(s, 16);
              return chr(i);
            }
            else {
              if ((id_ == Id::Char_Unicode4 || id_ == Id::Char_Unicode8)) {
                s = value->slice(2);
                i = to_int(s, 16);
                return string_ops::Utf8Encode(i);
              }
              else {
                if (id_ == Id::Char_UBraced) {
                  s = value->slice(3, -1);
                  i = to_int(s, 16);
                  return string_ops::Utf8Encode(i);
                }
                else {
                  assert(0);  // AssertionError
                }
              }
            }
          }
        }
      }
    }
  }
}

Str* EvalSingleQuoted(syntax_asdl::single_quoted* part) {
  List<Str*>* tmp = nullptr;
  Str* s = nullptr;
  StackRoots _roots({&part, &tmp, &s});

  if ((part->left->id == Id::Left_SingleQuote || part->left->id == Id::Left_RSingleQuote || part->left->id == Id::Left_TSingleQuote || part->left->id == Id::Left_RTSingleQuote)) {
    tmp = Alloc<List<Str*>>();
    for (ListIter<syntax_asdl::Token*> it(part->tokens); !it.Done(); it.Next()) {
      syntax_asdl::Token* t = it.Value();
      tmp->append(t->tval);
    }
    s = str1344->join(tmp);
  }
  else {
    if ((part->left->id == Id::Left_DollarSingleQuote || part->left->id == Id::Left_DollarTSingleQuote)) {
      tmp = Alloc<List<Str*>>();
      for (ListIter<syntax_asdl::Token*> it(part->tokens); !it.Done(); it.Next()) {
        syntax_asdl::Token* t = it.Value();
        tmp->append(EvalCStringToken(t));
      }
      s = str1345->join(tmp);
    }
    else {
      assert(0);  // AssertionError
    }
  }
  return s;
}

bool IsLeadingSpace(Str* s) {
  StackRoots _roots({&s});

  for (StrIter it(s); !it.Done(); it.Next()) {
    Str* ch = it.Value();
    StackRoots _for({&ch  });
    if (!str_contains(str1346, ch)) {
      return false;
    }
  }
  return true;
}

void RemoveLeadingSpaceDQ(List<syntax_asdl::word_part_t*>* parts) {
  bool line_ended;
  syntax_asdl::word_part_t* UP_first = nullptr;
  syntax_asdl::word_part_t* UP_last = nullptr;
  Str* to_strip = nullptr;
  int n;
  StackRoots _roots({&parts, &UP_first, &UP_last, &to_strip});

  if (len(parts) <= 1) {
    return ;
  }
  line_ended = false;
  UP_first = parts->index_(0);
  if (UP_first->tag_() == word_part_e::Literal) {
    Token* first = static_cast<Token*>(UP_first);
    if (qsn_native::IsWhitespace(first->tval)) {
      parts->pop(0);
    }
    if (first->tval->endswith(str1347)) {
      line_ended = true;
    }
  }
  UP_last = parts->index_(-1);
  to_strip = nullptr;
  if (UP_last->tag_() == word_part_e::Literal) {
    Token* last = static_cast<Token*>(UP_last);
    if (IsLeadingSpace(last->tval)) {
      to_strip = last->tval;
      parts->pop();
    }
  }
  if (to_strip != nullptr) {
    n = len(to_strip);
    for (ListIter<syntax_asdl::word_part_t*> it(parts); !it.Done(); it.Next()) {
      syntax_asdl::word_part_t* UP_p = it.Value();
      StackRoots _for({&UP_p    });
      if (UP_p->tag_() != word_part_e::Literal) {
        line_ended = false;
        continue;
      }
      Token* p = static_cast<Token*>(UP_p);
      if (line_ended) {
        if (p->tval->startswith(to_strip)) {
          p->tval = p->tval->slice(n);
        }
      }
      line_ended = false;
      if (p->tval->endswith(str1348)) {
        line_ended = true;
      }
    }
  }
}

void RemoveLeadingSpaceSQ(List<syntax_asdl::Token*>* tokens) {
  bool line_ended;
  syntax_asdl::Token* first = nullptr;
  syntax_asdl::Token* last = nullptr;
  Str* to_strip = nullptr;
  int n;
  StackRoots _roots({&tokens, &first, &last, &to_strip});

  if (len(tokens) <= 1) {
    return ;
  }
  line_ended = false;
  first = tokens->index_(0);
  if ((first->id == Id::Lit_Chars || first->id == Id::Char_Literals)) {
    if (qsn_native::IsWhitespace(first->tval)) {
      tokens->pop(0);
    }
    if (first->tval->endswith(str1349)) {
      line_ended = true;
    }
  }
  last = tokens->index_(-1);
  to_strip = nullptr;
  if ((last->id == Id::Lit_Chars || last->id == Id::Char_Literals)) {
    if (IsLeadingSpace(last->tval)) {
      to_strip = last->tval;
      tokens->pop();
    }
  }
  if (to_strip != nullptr) {
    n = len(to_strip);
    for (ListIter<syntax_asdl::Token*> it(tokens); !it.Done(); it.Next()) {
      syntax_asdl::Token* tok = it.Value();
      StackRoots _for({&tok    });
      if ((tok->id != Id::Lit_Chars && tok->id != Id::Char_Literals)) {
        line_ended = false;
        continue;
      }
      if (line_ended) {
        if (tok->tval->startswith(to_strip)) {
          tok->tval = tok->tval->slice(n);
        }
      }
      line_ended = false;
      if (tok->tval->endswith(str1350)) {
        line_ended = true;
      }
    }
  }
}

}  // define namespace word_compile

namespace word_eval {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Kind;
using id_kind_asdl::Kind_str;
using syntax_asdl::Token;
using syntax_asdl::loc;
using syntax_asdl::braced_var_sub;
using syntax_asdl::command_sub;
using syntax_asdl::bracket_op_e;
using syntax_asdl::bracket_op__ArrayIndex;
using syntax_asdl::bracket_op__WholeArray;
using syntax_asdl::suffix_op_e;
using syntax_asdl::suffix_op__PatSub;
using syntax_asdl::suffix_op__Slice;
using syntax_asdl::suffix_op__Unary;
using syntax_asdl::suffix_op__Static;
using syntax_asdl::sh_array_literal;
using syntax_asdl::single_quoted;
using syntax_asdl::double_quoted;
using syntax_asdl::simple_var_sub;
using syntax_asdl::word_e;
using syntax_asdl::word_t;
using syntax_asdl::compound_word;
using syntax_asdl::rhs_word;
using syntax_asdl::rhs_word_e;
using syntax_asdl::rhs_word_t;
using syntax_asdl::word_part_e;
using syntax_asdl::word_part__ArithSub;
using syntax_asdl::word_part__EscapedLiteral;
using syntax_asdl::word_part__AssocArrayLiteral;
using syntax_asdl::word_part__ExprSub;
using syntax_asdl::word_part__ExtGlob;
using syntax_asdl::word_part__FuncCall;
using syntax_asdl::word_part__Splice;
using syntax_asdl::word_part__TildeSub;
using runtime_asdl::part_value;
using runtime_asdl::part_value_e;
using runtime_asdl::part_value_t;
using runtime_asdl::part_value__String;
using runtime_asdl::part_value__Array;
using runtime_asdl::part_value__ExtGlob;
using runtime_asdl::value;
using runtime_asdl::value_e;
using runtime_asdl::value_t;
using runtime_asdl::value__Str;
using runtime_asdl::value__AssocArray;
using runtime_asdl::value__MaybeStrArray;
using runtime_asdl::value__Obj;
using runtime_asdl::lvalue;
using runtime_asdl::lvalue_t;
using runtime_asdl::assign_arg;
using runtime_asdl::cmd_value_e;
using runtime_asdl::cmd_value_t;
using runtime_asdl::cmd_value;
using runtime_asdl::cmd_value__Assign;
using runtime_asdl::cmd_value__Argv;
using runtime_asdl::a_index;
using runtime_asdl::a_index_e;
using runtime_asdl::a_index__Int;
using runtime_asdl::a_index__Str;
using runtime_asdl::VTestPlace;
using runtime_asdl::VarSubState;
using option_asdl::option_i;
using pyerror::e_die;
int QUOTED = (1 << 0);
int IS_SUBST = (1 << 1);
int EXTGLOB_FILES = (1 << 2);
int EXTGLOB_MATCH = (1 << 3);
int EXTGLOB_NESTED = (1 << 4);
int QUOTE_FNMATCH = (1 << 5);
int QUOTE_ERE = (1 << 6);
GLOBAL_LIST(Str*, 3, _STRING_AND_ARRAY, {str1351 COMMA str1352 COMMA str1353});

bool ShouldArrayDecay(Str* var_name, optview::Exec* exec_opts, bool is_plain_var_sub) {
  StackRoots _roots({&var_name, &exec_opts});

  return (exec_opts->compat_array() or (is_plain_var_sub and list_contains(_STRING_AND_ARRAY, var_name)));
}

runtime_asdl::value_t* DecayArray(runtime_asdl::value_t* val) {
  Str* s = nullptr;
  StackRoots _roots({&val, &s});

  if (val->tag_() == value_e::MaybeStrArray) {
    value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(val);
    s = len(array_val->strs) ? array_val->strs->index_(0) : nullptr;
  }
  else {
    if (val->tag_() == value_e::AssocArray) {
      value__AssocArray* assoc_val = static_cast<value__AssocArray*>(val);
      s = dict_contains(assoc_val->d, str1354) ? assoc_val->d->index_(str1355) : nullptr;
    }
    else {
      assert(0);  // AssertionError
    }
  }
  if (s == nullptr) {
    return Alloc<value::Undef>();
  }
  else {
    return Alloc<value::Str>(s);
  }
}

Str* GetArrayItem(List<Str*>* strs, int index) {
  int n;
  Str* s = nullptr;
  StackRoots _roots({&strs, &s});

  n = len(strs);
  if (index < 0) {
    index += n;
  }
  if ((0 <= index and index < n)) {
    s = strs->index_(index);
  }
  else {
    s = nullptr;
  }
  return s;
}
Str* ASSIGN_ARG_RE = str1356;

runtime_asdl::assign_arg* _SplitAssignArg(Str* arg, int word_spid) {
  List<Str*>* m = nullptr;
  Str* var_name = nullptr;
  Str* op = nullptr;
  runtime_asdl::value_t* val = nullptr;
  bool append;
  StackRoots _roots({&arg, &m, &var_name, &op, &val});

  m = libc::regex_match(ASSIGN_ARG_RE, arg);
  if (m == nullptr) {
    e_die(StrFormat("Assignment builtin expected NAME=value, got %r", arg), Alloc<loc::Span>(word_spid));
  }
  var_name = m->index_(1);
  op = m->index_(3);
  if (len(op)) {
    val = Alloc<value::Str>(m->index_(4));
    append = str_equals(op->index_(0), str1358);
  }
  else {
    val = nullptr;
    append = false;
  }
  return Alloc<assign_arg>(var_name, val, append, word_spid);
}

Str* _BackslashEscape(Str* s) {
  StackRoots _roots({&s});

  return s->replace(str1359, str1360);
}

runtime_asdl::part_value_t* _ValueToPartValue(runtime_asdl::value_t* val, bool quoted) {
  runtime_asdl::value_t* UP_val = nullptr;
  StackRoots _roots({&val, &UP_val});

  UP_val = val;
  switch (val->tag_()) {
    case value_e::Undef: {
      return Alloc<part_value::String>(str1361, quoted, !quoted);
    }
      break;
    case value_e::Str: {
      value__Str* val = static_cast<value__Str*>(UP_val);
      return Alloc<part_value::String>(val->s, quoted, !quoted);
    }
      break;
    case value_e::MaybeStrArray: {
      value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
      return Alloc<part_value::Array>(val->strs);
    }
      break;
    case value_e::AssocArray: {
      value__AssocArray* val = static_cast<value__AssocArray*>(UP_val);
      return Alloc<part_value::Array>(val->d->values());
    }
      break;
    case value_e::Obj: {
      assert(0);  // AssertionError
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  assert(0);  // AssertionError
}

List<List<Tuple3<Str*, bool, bool>*>*>* _MakeWordFrames(List<runtime_asdl::part_value_t*>* part_vals) {
  List<Tuple3<Str*, bool, bool>*>* current = nullptr;
  List<List<Tuple3<Str*, bool, bool>*>*>* frames = nullptr;
  runtime_asdl::part_value_t* UP_p = nullptr;
  bool is_first;
  Tuple3<Str*, bool, bool>* portion = nullptr;
  StackRoots _roots({&part_vals, &current, &frames, &UP_p, &portion});

  current = Alloc<List<Tuple3<Str*, bool, bool>*>>();
  frames = NewList<List<Tuple3<Str*, bool, bool>*>*>(std::initializer_list<List<Tuple3<Str*, bool, bool>*>*>{current});
  for (ListIter<runtime_asdl::part_value_t*> it(part_vals); !it.Done(); it.Next()) {
    runtime_asdl::part_value_t* p = it.Value();
    StackRoots _for({&p  });
    UP_p = p;
    switch (p->tag_()) {
      case part_value_e::String: {
        part_value__String* p = static_cast<part_value__String*>(UP_p);
        current->append((Alloc<Tuple3<Str*, bool, bool>>(p->s, p->quoted, p->do_split)));
      }
        break;
      case part_value_e::Array: {
        part_value__Array* p = static_cast<part_value__Array*>(UP_p);
        is_first = true;
        for (ListIter<Str*> it(p->strs); !it.Done(); it.Next()) {
          Str* s = it.Value();
          StackRoots _for({&s        });
          if (s == nullptr) {
            continue;
          }
          portion = (Alloc<Tuple3<Str*, bool, bool>>(s, true, false));
          if (is_first) {
            current->append(portion);
            is_first = false;
          }
          else {
            current = NewList<Tuple3<Str*, bool, bool>*>(std::initializer_list<Tuple3<Str*, bool, bool>*>{portion});
            frames->append(current);
          }
        }
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  return frames;
}

Str* _DecayPartValuesToString(List<runtime_asdl::part_value_t*>* part_vals, Str* join_char) {
  List<Str*>* out = nullptr;
  runtime_asdl::part_value_t* UP_p = nullptr;
  List<Str*>* tmp = nullptr;
  StackRoots _roots({&part_vals, &join_char, &out, &UP_p, &tmp});

  out = Alloc<List<Str*>>();
  for (ListIter<runtime_asdl::part_value_t*> it(part_vals); !it.Done(); it.Next()) {
    runtime_asdl::part_value_t* p = it.Value();
    StackRoots _for({&p  });
    UP_p = p;
    switch (p->tag_()) {
      case part_value_e::String: {
        part_value__String* p = static_cast<part_value__String*>(UP_p);
        out->append(p->s);
      }
        break;
      case part_value_e::Array: {
        part_value__Array* p = static_cast<part_value__Array*>(UP_p);
        tmp = Alloc<List<Str*>>();
        for (ListIter<Str*> it(p->strs); !it.Done(); it.Next()) {
          Str* s = it.Value();
          if (s != nullptr) {
            tmp->append(s);
          }
        }
        out->append(join_char->join(tmp));
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  return str1363->join(out);
}

runtime_asdl::value_t* _PerformSlice(runtime_asdl::value_t* val, int begin, int length, bool has_length, syntax_asdl::braced_var_sub* part, runtime_asdl::value__Str* arg0_val) {
  runtime_asdl::value_t* UP_val = nullptr;
  Str* s = nullptr;
  int n;
  int byte_begin;
  int num_iters;
  int byte_end;
  Str* substr = nullptr;
  runtime_asdl::value_t* result = nullptr;
  List<Str*>* orig = nullptr;
  int i;
  List<Str*>* strs = nullptr;
  int count;
  StackRoots _roots({&val, &part, &arg0_val, &UP_val, &s, &substr, &result, &orig, &strs});

  UP_val = val;
  switch (val->tag_()) {
    case value_e::Str: {
      value__Str* val = static_cast<value__Str*>(UP_val);
      s = val->s;
      n = len(s);
      if (begin < 0) {
        byte_begin = n;
        num_iters = -begin;
        for (int _ = 0; _ < num_iters; ++_) {
          byte_begin = string_ops::PreviousUtf8Char(s, byte_begin);
        }
      }
      else {
        byte_begin = string_ops::AdvanceUtf8Chars(s, begin, 0);
      }
      if (has_length) {
        if (length < 0) {
          byte_end = n;
          num_iters = -length;
          for (int _ = 0; _ < num_iters; ++_) {
            byte_end = string_ops::PreviousUtf8Char(s, byte_end);
          }
        }
        else {
          byte_end = string_ops::AdvanceUtf8Chars(s, length, byte_begin);
        }
      }
      else {
        byte_end = len(s);
      }
      substr = s->slice(byte_begin, byte_end);
      result = Alloc<value::Str>(substr);
    }
      break;
    case value_e::MaybeStrArray: {
      value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
      if ((has_length and length < 0)) {
        e_die(StrFormat("The length index of a array slice can't be negative: %d", length), Alloc<loc::WordPart>(part));
      }
      if (arg0_val != nullptr) {
        orig = NewList<Str*>(std::initializer_list<Str*>{arg0_val->s});
        orig->extend(val->strs);
      }
      else {
        orig = val->strs;
      }
      n = len(orig);
      if (begin < 0) {
        i = (n + begin);
      }
      else {
        i = begin;
      }
      strs = Alloc<List<Str*>>();
      count = 0;
      while (i < n) {
        if ((has_length and count == length)) {
          break;
        }
        s = orig->index_(i);
        if (s != nullptr) {
          strs->append(s);
          count += 1;
        }
        i += 1;
      }
      result = Alloc<value::MaybeStrArray>(strs);
    }
      break;
    case value_e::AssocArray: {
      e_die(str1365, Alloc<loc::WordPart>(part));
    }
      break;
    default: {
      FAIL(kNotImplemented);  // Python NotImplementedError
    }
  }
  return result;
}

StringWordEvaluator::StringWordEvaluator() 
    : header_(obj_header()) {
  ;  // pass
}

runtime_asdl::value__Str* StringWordEvaluator::EvalWordToString(syntax_asdl::word_t* w, int eval_flags) {
  StackRoots _roots({&w});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

Str* _GetDollarHyphen(optview::Exec* exec_opts) {
  List<Str*>* chars = nullptr;
  StackRoots _roots({&exec_opts, &chars});

  chars = Alloc<List<Str*>>();
  if (exec_opts->interactive()) {
    chars->append(str1366);
  }
  if (exec_opts->errexit()) {
    chars->append(str1367);
  }
  if (exec_opts->noglob()) {
    chars->append(str1368);
  }
  if (exec_opts->noexec()) {
    chars->append(str1369);
  }
  if (exec_opts->nounset()) {
    chars->append(str1370);
  }
  if (exec_opts->xtrace()) {
    chars->append(str1371);
  }
  if (exec_opts->noclobber()) {
    chars->append(str1372);
  }
  return str1373->join(chars);
}

TildeEvaluator::TildeEvaluator(state::Mem* mem, optview::Exec* exec_opts) 
    : header_(obj_header()) {
  this->mem = mem;
  this->exec_opts = exec_opts;
}

Str* TildeEvaluator::Eval(syntax_asdl::word_part__TildeSub* part) {
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  Str* result = nullptr;
  StackRoots _roots({&part, &val, &UP_val, &result});

  if (part->user_name == nullptr) {
    val = this->mem->GetValue(str1374);
    UP_val = val;
    if (val->tag_() == value_e::Str) {
      value__Str* val = static_cast<value__Str*>(UP_val);
      return val->s;
    }
    result = pyos::GetMyHomeDir();
  }
  else {
    result = pyos::GetHomeDir(part->user_name);
  }
  if (result == nullptr) {
    if (this->exec_opts->strict_tilde()) {
      e_die(str1375, part->token);
    }
    else {
      return lexer::TokenVal(part->token);
    }
  }
  return result;
}

AbstractWordEvaluator::AbstractWordEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, split::SplitContext* splitter, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= AbstractWordEvaluator::field_mask();
  this->arith_ev = nullptr;
  this->expr_ev = nullptr;
  this->prompt_ev = nullptr;
  this->unsafe_arith = nullptr;
  this->tilde_ev = Alloc<TildeEvaluator>(mem, exec_opts);
  this->mem = mem;
  this->exec_opts = exec_opts;
  this->mutable_opts = mutable_opts;
  this->splitter = splitter;
  this->errfmt = errfmt;
  this->globber = Alloc<glob_::Globber>(exec_opts);
}

void AbstractWordEvaluator::CheckCircularDeps() {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

runtime_asdl::part_value_t* AbstractWordEvaluator::_EvalCommandSub(syntax_asdl::command_sub* cs_part, bool quoted) {
  StackRoots _roots({&cs_part});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

runtime_asdl::part_value_t* AbstractWordEvaluator::_EvalProcessSub(syntax_asdl::command_sub* cs_part) {
  StackRoots _roots({&cs_part});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

runtime_asdl::value_t* AbstractWordEvaluator::_EvalVarNum(int var_num) {
  return this->mem->GetArgNum(var_num);
}

runtime_asdl::value_t* AbstractWordEvaluator::_EvalSpecialVar(int op_id, bool quoted, runtime_asdl::VarSubState* vsub_state) {
  List<Str*>* argv = nullptr;
  runtime_asdl::value_t* val = nullptr;
  StackRoots _roots({&vsub_state, &argv, &val});

  if ((op_id == Id::VSub_At || op_id == Id::VSub_Star)) {
    argv = this->mem->GetArgv();
    val = Alloc<value::MaybeStrArray>(argv);
    if (op_id == Id::VSub_At) {
      vsub_state->join_array = !quoted;
    }
    else {
      vsub_state->join_array = true;
    }
  }
  else {
    if (op_id == Id::VSub_Hyphen) {
      val = Alloc<value::Str>(_GetDollarHyphen(this->exec_opts));
    }
    else {
      val = this->mem->GetSpecialVar(op_id);
    }
  }
  return val;
}

bool AbstractWordEvaluator::_ApplyTestOp(runtime_asdl::value_t* val, syntax_asdl::suffix_op__Unary* op, bool quoted, List<runtime_asdl::part_value_t*>* part_vals, runtime_asdl::VTestPlace* vtest_place, syntax_asdl::Token* blame_token) {
  int eval_flags;
  syntax_asdl::Token* tok = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  bool is_falsey;
  List<runtime_asdl::part_value_t*>* assign_part_vals = nullptr;
  Str* rhs_str = nullptr;
  runtime_asdl::lvalue_t* lval = nullptr;
  Str* var_name = nullptr;
  runtime_asdl::a_index_t* var_index = nullptr;
  runtime_asdl::a_index_t* UP_var_index = nullptr;
  List<runtime_asdl::part_value_t*>* error_part_vals = nullptr;
  Str* error_str = nullptr;
  StackRoots _roots({&val, &op, &part_vals, &vtest_place, &blame_token, &tok, &UP_val, &assign_part_vals, &rhs_str, &lval, &var_name, &var_index, &UP_var_index, &error_part_vals, &error_str});

  eval_flags = IS_SUBST;
  if (quoted) {
    eval_flags |= QUOTED;
  }
  tok = op->op;
  UP_val = val;
  switch (val->tag_()) {
    case value_e::Undef: {
      is_falsey = true;
    }
      break;
    case value_e::Str: {
      value__Str* val = static_cast<value__Str*>(UP_val);
      if ((tok->id == Id::VTest_ColonHyphen || tok->id == Id::VTest_ColonEquals || tok->id == Id::VTest_ColonQMark || tok->id == Id::VTest_ColonPlus)) {
        is_falsey = len(val->s) == 0;
      }
      else {
        is_falsey = false;
      }
    }
      break;
    case value_e::MaybeStrArray: {
      value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
      is_falsey = len(val->strs) == 0;
    }
      break;
    case value_e::AssocArray: {
      value__AssocArray* val = static_cast<value__AssocArray*>(UP_val);
      is_falsey = len(val->d) == 0;
    }
      break;
    default: {
      FAIL(kNotImplemented);  // Python NotImplementedError
    }
  }
  if ((tok->id == Id::VTest_ColonHyphen || tok->id == Id::VTest_Hyphen)) {
    if (is_falsey) {
      this->_EvalRhsWordToParts(op->arg_word, part_vals, eval_flags);
      return true;
    }
    else {
      return false;
    }
  }
  else {
    if ((tok->id == Id::VTest_ColonPlus || tok->id == Id::VTest_Plus)) {
      if (is_falsey) {
        return false;
      }
      else {
        this->_EvalRhsWordToParts(op->arg_word, part_vals, eval_flags);
        return true;
      }
    }
    else {
      if ((tok->id == Id::VTest_ColonEquals || tok->id == Id::VTest_Equals)) {
        if (is_falsey) {
          assign_part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
          this->_EvalRhsWordToParts(op->arg_word, assign_part_vals, eval_flags);
          part_vals->extend(assign_part_vals);
          if (vtest_place->name == nullptr) {
            e_die(str1376);
          }
          else {
            rhs_str = _DecayPartValuesToString(assign_part_vals, this->splitter->GetJoinChar());
            if (vtest_place->index == nullptr) {
              lval = location::LName(vtest_place->name);
            }
            else {
              var_name = vtest_place->name;
              var_index = vtest_place->index;
              UP_var_index = var_index;
              switch (var_index->tag_()) {
                case a_index_e::Int: {
                  a_index__Int* var_index = static_cast<a_index__Int*>(UP_var_index);
                  lval = Alloc<lvalue::Indexed>(var_name, var_index->i, runtime::NO_SPID);
                }
                  break;
                case a_index_e::Str: {
                  a_index__Str* var_index = static_cast<a_index__Str*>(UP_var_index);
                  lval = Alloc<lvalue::Keyed>(var_name, var_index->s, runtime::NO_SPID);
                }
                  break;
                default: {
                  assert(0);  // AssertionError
                }
              }
            }
            state::OshLanguageSetValue(this->mem, lval, Alloc<value::Str>(rhs_str));
          }
          return true;
        }
        else {
          return false;
        }
      }
      else {
        if ((tok->id == Id::VTest_ColonQMark || tok->id == Id::VTest_QMark)) {
          if (is_falsey) {
            error_part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
            this->_EvalRhsWordToParts(op->arg_word, error_part_vals, eval_flags);
            error_str = _DecayPartValuesToString(error_part_vals, this->splitter->GetJoinChar());
            e_die(StrFormat("unset variable %r", error_str), blame_token);
          }
          else {
            return false;
          }
        }
        else {
          FAIL(kNotImplemented);  // Python NotImplementedError
        }
      }
    }
  }
}

runtime_asdl::value_t* AbstractWordEvaluator::_Length(runtime_asdl::value_t* val, syntax_asdl::Token* token) {
  runtime_asdl::value_t* UP_val = nullptr;
  int length;
  StackRoots _roots({&val, &token, &UP_val});

  UP_val = val;
  switch (val->tag_()) {
    case value_e::Str: {
      value__Str* val = static_cast<value__Str*>(UP_val);
      try {
        length = string_ops::CountUtf8Chars(val->s);
      }
      catch (error::Strict* e) {
        e->location = token;
        if (this->exec_opts->strict_word_eval()) {
          throw ;
        }
        else {
          this->errfmt->PrettyPrintError(e, str1378);
          return Alloc<value::Str>(str1379);
        }
      }
    }
      break;
    case value_e::MaybeStrArray: {
      value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
      length = 0;
      for (ListIter<Str*> it(val->strs); !it.Done(); it.Next()) {
        Str* s = it.Value();
        StackRoots _for({&s      });
        if (s != nullptr) {
          length += 1;
        }
      }
    }
      break;
    case value_e::AssocArray: {
      value__AssocArray* val = static_cast<value__AssocArray*>(UP_val);
      length = len(val->d);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  return Alloc<value::Str>(str(length));
}

runtime_asdl::value_t* AbstractWordEvaluator::_Keys(runtime_asdl::value_t* val, syntax_asdl::Token* token) {
  runtime_asdl::value_t* UP_val = nullptr;
  List<Str*>* indices = nullptr;
  int i;
  StackRoots _roots({&val, &token, &UP_val, &indices});

  UP_val = val;
  switch (val->tag_()) {
    case value_e::MaybeStrArray: {
      value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
      indices = Alloc<List<Str*>>();
      i = 0;
      for (ListIter<Str*> it(val->strs); !it.Done(); it.Next(), ++i) {
        Str* s = it.Value();
        StackRoots _for({&s      });
        if (s != nullptr) {
          indices->append(str(i));
        }
      }
      return Alloc<value::MaybeStrArray>(indices);
    }
      break;
    case value_e::AssocArray: {
      value__AssocArray* val = static_cast<value__AssocArray*>(UP_val);
      return Alloc<value::MaybeStrArray>(val->d->keys());
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

runtime_asdl::value_t* AbstractWordEvaluator::_EvalVarRef(runtime_asdl::value_t* val, syntax_asdl::Token* blame_tok, bool quoted, runtime_asdl::VarSubState* vsub_state, runtime_asdl::VTestPlace* vtest_place) {
  runtime_asdl::value_t* UP_val = nullptr;
  syntax_asdl::braced_var_sub* bvs_part = nullptr;
  StackRoots _roots({&val, &blame_tok, &vsub_state, &vtest_place, &UP_val, &bvs_part});

  UP_val = val;
  switch (val->tag_()) {
    case value_e::Undef: {
      return Alloc<value::Undef>();
    }
      break;
    case value_e::Str: {
      value__Str* val = static_cast<value__Str*>(UP_val);
      bvs_part = this->unsafe_arith->ParseVarRef(val->s, blame_tok);
      return this->_VarRefValue(bvs_part, quoted, vsub_state, vtest_place);
    }
      break;
    case value_e::MaybeStrArray: {
      e_die(str1380);
    }
      break;
    case value_e::AssocArray: {
      e_die(str1381);
    }
      break;
    default: {
      FAIL(kNotImplemented);  // Python NotImplementedError
    }
  }
}

runtime_asdl::value_t* AbstractWordEvaluator::_ApplyUnarySuffixOp(runtime_asdl::value_t* val, syntax_asdl::suffix_op__Unary* op) {
  id_kind_asdl::Kind_t op_kind;
  runtime_asdl::value__Str* arg_val = nullptr;
  bool has_extglob;
  runtime_asdl::value_t* UP_val = nullptr;
  Str* s = nullptr;
  runtime_asdl::value_t* new_val = nullptr;
  List<Str*>* strs = nullptr;
  StackRoots _roots({&val, &op, &arg_val, &UP_val, &s, &new_val, &strs});

  op_kind = consts::GetKind(op->op->id);
  if (op_kind == Kind::VOp1) {
    Tuple2<runtime_asdl::value__Str*, bool> tup0 = this->EvalWordToPattern(op->arg_word);
    arg_val = tup0.at0();
    has_extglob = tup0.at1();
    UP_val = val;
    switch (val->tag_()) {
      case value_e::Str: {
        value__Str* val = static_cast<value__Str*>(UP_val);
        s = string_ops::DoUnarySuffixOp(val->s, op->op, arg_val->s, has_extglob);
        new_val = Alloc<value::Str>(s);
      }
        break;
      case value_e::MaybeStrArray: {
        value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
        strs = Alloc<List<Str*>>();
        for (ListIter<Str*> it(val->strs); !it.Done(); it.Next()) {
          Str* s = it.Value();
          StackRoots _for({&s        });
          if (s != nullptr) {
            strs->append(string_ops::DoUnarySuffixOp(s, op->op, arg_val->s, has_extglob));
          }
        }
        new_val = Alloc<value::MaybeStrArray>(strs);
      }
        break;
      case value_e::AssocArray: {
        value__AssocArray* val = static_cast<value__AssocArray*>(UP_val);
        strs = Alloc<List<Str*>>();
        for (ListIter<Str*> it(val->d->values()); !it.Done(); it.Next()) {
          Str* s = it.Value();
          StackRoots _for({&s        });
          strs->append(string_ops::DoUnarySuffixOp(s, op->op, arg_val->s, has_extglob));
        }
        new_val = Alloc<value::MaybeStrArray>(strs);
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  else {
    assert(0);  // AssertionError
  }
  return new_val;
}

runtime_asdl::value_t* AbstractWordEvaluator::_PatSub(runtime_asdl::value_t* val, syntax_asdl::suffix_op__PatSub* op) {
  runtime_asdl::value__Str* pat_val = nullptr;
  bool has_extglob;
  runtime_asdl::value_t* replace_val = nullptr;
  Str* replace_str = nullptr;
  Str* regex = nullptr;
  List<Str*>* warnings = nullptr;
  string_ops::GlobReplacer* replacer = nullptr;
  Str* s = nullptr;
  List<Str*>* strs = nullptr;
  StackRoots _roots({&val, &op, &pat_val, &replace_val, &replace_str, &regex, &warnings, &replacer, &s, &strs});

  Tuple2<runtime_asdl::value__Str*, bool> tup1 = this->EvalWordToPattern(op->pat);
  pat_val = tup1.at0();
  has_extglob = tup1.at1();
  if (has_extglob) {
    e_die(str1382, Alloc<loc::Word>(op->pat));
  }
  if (op->replace) {
    replace_val = this->EvalRhsWord(op->replace);
    replace_str = static_cast<value__Str*>(replace_val)->s;
  }
  else {
    replace_str = str1383;
  }
  Tuple2<Str*, List<Str*>*> tup2 = glob_::GlobToERE(pat_val->s);
  regex = tup2.at0();
  warnings = tup2.at1();
  if (len(warnings)) {
    ;  // pass
  }
  replacer = Alloc<string_ops::GlobReplacer>(regex, replace_str, op->slash_tok);
  switch (val->tag_()) {
    case value_e::Str: {
      value__Str* str_val = static_cast<value__Str*>(val);
      s = replacer->Replace(str_val->s, op);
      val = Alloc<value::Str>(s);
    }
      break;
    case value_e::MaybeStrArray: {
      value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(val);
      strs = Alloc<List<Str*>>();
      for (ListIter<Str*> it(array_val->strs); !it.Done(); it.Next()) {
        Str* s = it.Value();
        StackRoots _for({&s      });
        if (s != nullptr) {
          strs->append(replacer->Replace(s, op));
        }
      }
      val = Alloc<value::MaybeStrArray>(strs);
    }
      break;
    case value_e::AssocArray: {
      value__AssocArray* assoc_val = static_cast<value__AssocArray*>(val);
      strs = Alloc<List<Str*>>();
      for (ListIter<Str*> it(assoc_val->d->values()); !it.Done(); it.Next()) {
        Str* s = it.Value();
        StackRoots _for({&s      });
        strs->append(replacer->Replace(s, op));
      }
      val = Alloc<value::MaybeStrArray>(strs);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  return val;
}

runtime_asdl::value_t* AbstractWordEvaluator::_Slice(runtime_asdl::value_t* val, syntax_asdl::suffix_op__Slice* op, Str* var_name, syntax_asdl::braced_var_sub* part) {
  int begin;
  bool has_length;
  int length;
  runtime_asdl::value__Str* arg0_val = nullptr;
  StackRoots _roots({&val, &op, &var_name, &part, &arg0_val});

  if (op->begin) {
    begin = this->arith_ev->EvalToInt(op->begin);
  }
  else {
    begin = 0;
  }
  has_length = false;
  length = -1;
  if (op->length) {
    has_length = true;
    length = this->arith_ev->EvalToInt(op->length);
  }
  try {
    arg0_val = nullptr;
    if (var_name == nullptr) {
      arg0_val = this->mem->GetArg0();
    }
    val = _PerformSlice(val, begin, length, has_length, part, arg0_val);
  }
  catch (error::Strict* e) {
    if (this->exec_opts->strict_word_eval()) {
      throw ;
    }
    else {
      this->errfmt->PrettyPrintError(e, str1384);
      switch (val->tag_()) {
        case value_e::Str: {
          val = Alloc<value::Str>(str1385);
        }
          break;
        case value_e::MaybeStrArray: {
          val = Alloc<value::MaybeStrArray>(Alloc<List<Str*>>());
        }
          break;
        default: {
          FAIL(kNotImplemented);  // Python NotImplementedError
        }
      }
    }
  }
  return val;
}

Tuple2<runtime_asdl::value__Str*, bool> AbstractWordEvaluator::_Nullary(runtime_asdl::value_t* val, syntax_asdl::Token* op, Str* var_name) {
  runtime_asdl::value_t* UP_val = nullptr;
  bool quoted2;
  int op_id;
  Str* prompt = nullptr;
  Str* p = nullptr;
  runtime_asdl::value__Str* result = nullptr;
  List<Str*>* tmp = nullptr;
  List<Str*>* chars = nullptr;
  runtime_asdl::cell* cell = nullptr;
  StackRoots _roots({&val, &op, &var_name, &UP_val, &prompt, &p, &result, &tmp, &chars, &cell});

  UP_val = val;
  quoted2 = false;
  op_id = op->id;
  if (op_id == Id::VOp0_P) {
    switch (val->tag_()) {
      case value_e::Str: {
        value__Str* str_val = static_cast<value__Str*>(UP_val);
        prompt = this->prompt_ev->EvalPrompt(str_val);
        p = prompt->replace(str1386, str1387)->replace(str1388, str1389);
        result = Alloc<value::Str>(p);
      }
        break;
      default: {
        e_die(StrFormat("Can't use @P on %s", ui::ValType(val)));
      }
    }
  }
  else {
    if (op_id == Id::VOp0_Q) {
      switch (val->tag_()) {
        case value_e::Str: {
          value__Str* str_val = static_cast<value__Str*>(UP_val);
          result = Alloc<value::Str>(qsn::maybe_shell_encode(str_val->s));
          quoted2 = true;
        }
          break;
        case value_e::MaybeStrArray: {
          value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(UP_val);
          tmp = Alloc<List<Str*>>();
          for (ListIter<Str*> it(array_val->strs); !it.Done(); it.Next()) {
            Str* s = it.Value();
            tmp->append(qsn::maybe_shell_encode(s));
          }
          result = Alloc<value::Str>(str1391->join(tmp));
        }
          break;
        default: {
          e_die(StrFormat("Can't use @Q on %s", ui::ValType(val)));
        }
      }
    }
    else {
      if (op_id == Id::VOp0_a) {
        chars = Alloc<List<Str*>>();
        switch (val->tag_()) {
          case value_e::MaybeStrArray: {
            chars->append(str1393);
          }
            break;
          case value_e::AssocArray: {
            chars->append(str1394);
          }
            break;
        }
        if (var_name != nullptr) {
          cell = this->mem->GetCell(var_name);
          if (cell) {
            if (cell->readonly) {
              chars->append(str1395);
            }
            if (cell->exported) {
              chars->append(str1396);
            }
            if (cell->nameref) {
              chars->append(str1397);
            }
          }
        }
        result = Alloc<value::Str>(str1398->join(chars));
      }
      else {
        e_die(StrFormat("Var op %r not implemented", lexer::TokenVal(op)), op);
      }
    }
  }
  return Tuple2<runtime_asdl::value__Str*, bool>(result, quoted2);
}

runtime_asdl::value_t* AbstractWordEvaluator::_WholeArray(runtime_asdl::value_t* val, syntax_asdl::braced_var_sub* part, bool quoted, runtime_asdl::VarSubState* vsub_state) {
  int op_id;
  runtime_asdl::value_t* UP_val = nullptr;
  StackRoots _roots({&val, &part, &vsub_state, &UP_val});

  bracket_op__WholeArray* bracket_op = static_cast<bracket_op__WholeArray*>(part->bracket_op);
  op_id = bracket_op->op_id;
  if (op_id == Id::Lit_At) {
    vsub_state->join_array = !quoted;
    UP_val = val;
    switch (val->tag_()) {
      case value_e::Undef: {
        val = this->_EmptyMaybeStrArrayOrError(part->token);
      }
        break;
      case value_e::Str: {
        value__Str* val = static_cast<value__Str*>(UP_val);
        e_die(str1400, Alloc<loc::WordPart>(part));
      }
        break;
      case value_e::MaybeStrArray: {
        value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
        val = Alloc<value::MaybeStrArray>(val->strs);
      }
        break;
    }
  }
  else {
    if (op_id == Id::Arith_Star) {
      vsub_state->join_array = true;
      UP_val = val;
      switch (val->tag_()) {
        case value_e::Undef: {
          val = this->_EmptyMaybeStrArrayOrError(part->token);
        }
          break;
        case value_e::Str: {
          value__Str* val = static_cast<value__Str*>(UP_val);
          e_die(str1401, Alloc<loc::WordPart>(part));
        }
          break;
        case value_e::MaybeStrArray: {
          value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
          val = Alloc<value::MaybeStrArray>(val->strs);
        }
          break;
      }
    }
    else {
      assert(0);  // AssertionError
    }
  }
  return val;
}

runtime_asdl::value_t* AbstractWordEvaluator::_ArrayIndex(runtime_asdl::value_t* val, syntax_asdl::braced_var_sub* part, runtime_asdl::VTestPlace* vtest_place) {
  syntax_asdl::arith_expr_t* anode = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  int index;
  Str* s = nullptr;
  Str* key = nullptr;
  StackRoots _roots({&val, &part, &vtest_place, &anode, &UP_val, &s, &key});

  bracket_op__ArrayIndex* bracket_op = static_cast<bracket_op__ArrayIndex*>(part->bracket_op);
  anode = bracket_op->expr;
  UP_val = val;
  switch (val->tag_()) {
    case value_e::Undef: {
      ;  // pass
    }
      break;
    case value_e::Str: {
      e_die(StrFormat("Can't index string %r with integer", part->var_name), part->token);
    }
      break;
    case value_e::MaybeStrArray: {
      value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(UP_val);
      index = this->arith_ev->EvalToInt(anode);
      vtest_place->index = Alloc<a_index::Int>(index);
      s = GetArrayItem(array_val->strs, index);
      if (s == nullptr) {
        val = Alloc<value::Undef>();
      }
      else {
        val = Alloc<value::Str>(s);
      }
    }
      break;
    case value_e::AssocArray: {
      value__AssocArray* assoc_val = static_cast<value__AssocArray*>(UP_val);
      key = this->arith_ev->EvalWordToString(anode);
      vtest_place->index = Alloc<a_index::Str>(key);
      s = assoc_val->d->get(key);
      if (s == nullptr) {
        val = Alloc<value::Undef>();
      }
      else {
        val = Alloc<value::Str>(s);
      }
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
  return val;
}

void AbstractWordEvaluator::_EvalDoubleQuoted(List<syntax_asdl::word_part_t*>* parts, List<runtime_asdl::part_value_t*>* part_vals) {
  runtime_asdl::part_value__String* v = nullptr;
  StackRoots _roots({&parts, &part_vals, &v});

  if (len(parts) == 0) {
    v = Alloc<part_value::String>(str1403, true, false);
    part_vals->append(v);
    return ;
  }
  for (ListIter<syntax_asdl::word_part_t*> it(parts); !it.Done(); it.Next()) {
    syntax_asdl::word_part_t* p = it.Value();
    StackRoots _for({&p  });
    this->_EvalWordPart(p, part_vals, QUOTED);
  }
}

Str* AbstractWordEvaluator::EvalDoubleQuotedToString(syntax_asdl::double_quoted* dq_part) {
  List<runtime_asdl::part_value_t*>* part_vals = nullptr;
  StackRoots _roots({&dq_part, &part_vals});

  part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
  this->_EvalDoubleQuoted(dq_part->parts, part_vals);
  return this->_ConcatPartVals(part_vals, dq_part->left->span_id);
}

runtime_asdl::value__Str* AbstractWordEvaluator::_DecayArray(runtime_asdl::value__MaybeStrArray* val) {
  Str* sep = nullptr;
  List<Str*>* tmp = nullptr;
  StackRoots _roots({&val, &sep, &tmp});

  sep = this->splitter->GetJoinChar();
  tmp = Alloc<List<Str*>>();
  for (ListIter<Str*> it(val->strs); !it.Done(); it.Next()) {
    Str* s = it.Value();
    if (s != nullptr) {
      tmp->append(s);
    }
  }
  return Alloc<value::Str>(sep->join(tmp));
}

runtime_asdl::value_t* AbstractWordEvaluator::_EmptyStrOrError(runtime_asdl::value_t* val, syntax_asdl::Token* token) {
  Str* tok_str = nullptr;
  Str* name = nullptr;
  StackRoots _roots({&val, &token, &tok_str, &name});

  if (val->tag_() != value_e::Undef) {
    return val;
  }
  if (!this->exec_opts->nounset()) {
    return Alloc<value::Str>(str1404);
  }
  tok_str = lexer::TokenVal(token);
  name = tok_str->startswith(str1405) ? tok_str->slice(1) : tok_str;
  e_die(StrFormat("Undefined variable %r", name), token);
}

runtime_asdl::value_t* AbstractWordEvaluator::_EmptyMaybeStrArrayOrError(syntax_asdl::Token* token) {
  StackRoots _roots({&token});

  if (this->exec_opts->nounset()) {
    e_die(StrFormat("Undefined array %r", lexer::TokenVal(token)), token);
  }
  else {
    return Alloc<value::MaybeStrArray>(Alloc<List<Str*>>());
  }
}

runtime_asdl::value_t* AbstractWordEvaluator::_EvalBracketOp(runtime_asdl::value_t* val, syntax_asdl::braced_var_sub* part, bool quoted, runtime_asdl::VarSubState* vsub_state, runtime_asdl::VTestPlace* vtest_place) {
  syntax_asdl::bracket_op_t* bracket_op = nullptr;
  syntax_asdl::bracket_op_t* UP_bracket_op = nullptr;
  Str* var_name = nullptr;
  StackRoots _roots({&val, &part, &vsub_state, &vtest_place, &bracket_op, &UP_bracket_op, &var_name});

  if (part->bracket_op) {
    bracket_op = part->bracket_op;
    UP_bracket_op = bracket_op;
    switch (bracket_op->tag_()) {
      case bracket_op_e::WholeArray: {
        val = this->_WholeArray(val, part, quoted, vsub_state);
      }
        break;
      case bracket_op_e::ArrayIndex: {
        bracket_op__ArrayIndex* bracket_op = static_cast<bracket_op__ArrayIndex*>(UP_bracket_op);
        val = this->_ArrayIndex(val, part, vtest_place);
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  else {
    var_name = vtest_place->name;
    if ((var_name and ((val->tag_() == value_e::MaybeStrArray || val->tag_() == value_e::AssocArray) and !vsub_state->is_type_query))) {
      if (ShouldArrayDecay(var_name, this->exec_opts, !(part->prefix_op or part->suffix_op))) {
        val = DecayArray(val);
      }
      else {
        e_die(StrFormat("Array %r can't be referred to as a scalar (without @ or *)", var_name), Alloc<loc::WordPart>(part));
      }
    }
  }
  return val;
}

runtime_asdl::value_t* AbstractWordEvaluator::_VarRefValue(syntax_asdl::braced_var_sub* part, bool quoted, runtime_asdl::VarSubState* vsub_state, runtime_asdl::VTestPlace* vtest_place) {
  runtime_asdl::value_t* val = nullptr;
  int var_num;
  StackRoots _roots({&part, &vsub_state, &vtest_place, &val});

  if (part->token->id == Id::VSub_Name) {
    vtest_place->name = part->var_name;
    val = this->mem->GetValue(part->var_name);
  }
  else {
    if (part->token->id == Id::VSub_Number) {
      var_num = to_int(part->var_name);
      val = this->_EvalVarNum(var_num);
    }
    else {
      val = this->_EvalSpecialVar(part->token->id, quoted, vsub_state);
    }
  }
  if (this->exec_opts->eval_unsafe_arith()) {
    val = this->_EvalBracketOp(val, part, quoted, vsub_state, vtest_place);
  }
  else {
    {  // with
      state::ctx_Option ctx{this->mutable_opts, NewList<int>(std::initializer_list<int>{option_i::_allow_command_sub}), false};

      val = this->_EvalBracketOp(val, part, quoted, vsub_state, vtest_place);
    }
  }
  return val;
}

void AbstractWordEvaluator::_EvalBracedVarSub(syntax_asdl::braced_var_sub* part, List<runtime_asdl::part_value_t*>* part_vals, bool quoted) {
  Str* var_name = nullptr;
  runtime_asdl::VTestPlace* vtest_place = nullptr;
  runtime_asdl::VarSubState* vsub_state = nullptr;
  List<Str*>* names = nullptr;
  Str* sep = nullptr;
  runtime_asdl::value_t* val = nullptr;
  int var_num;
  syntax_asdl::suffix_op_t* suffix_op = nullptr;
  bool suffix_is_test;
  syntax_asdl::suffix_op_t* UP_op = nullptr;
  runtime_asdl::part_value_t* part_val = nullptr;
  syntax_asdl::Token* op_tok = nullptr;
  bool quoted2;
  syntax_asdl::suffix_op_t* op = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  StackRoots _roots({&part, &part_vals, &var_name, &vtest_place, &vsub_state, &names, &sep, &val, &suffix_op, &UP_op, &part_val, &op_tok, &op, &UP_val});

  var_name = nullptr;
  vtest_place = Alloc<VTestPlace>(var_name, nullptr);
  vsub_state = VarSubState::Create();
  if (part->token->id == Id::VSub_Name) {
    if ((part->prefix_op != nullptr and (part->bracket_op == nullptr and (part->suffix_op != nullptr and part->suffix_op->tag_() == suffix_op_e::Nullary)))) {
      Token* suffix_op_ = static_cast<Token*>(part->suffix_op);
      if (consts::GetKind(suffix_op_->id) == Kind::VOp3) {
        names = this->mem->VarNamesStartingWith(part->var_name);
        names->sort();
        Token* suffix_op_ = static_cast<Token*>(part->suffix_op);
        if ((quoted and suffix_op_->id == Id::VOp3_At)) {
          part_vals->append(Alloc<part_value::Array>(names));
        }
        else {
          sep = this->splitter->GetJoinChar();
          part_vals->append(Alloc<part_value::String>(sep->join(names), quoted, true));
        }
        return ;
      }
    }
    var_name = part->var_name;
    vtest_place->name = var_name;
    val = this->mem->GetValue(var_name);
  }
  else {
    if (part->token->id == Id::VSub_Number) {
      var_num = to_int(part->var_name);
      val = this->_EvalVarNum(var_num);
    }
    else {
      val = this->_EvalSpecialVar(part->token->id, quoted, vsub_state);
    }
  }
  suffix_op = part->suffix_op;
  if ((suffix_op and (suffix_op->tag_() == suffix_op_e::Nullary and static_cast<Token*>(suffix_op)->id == Id::VOp0_a))) {
    vsub_state->is_type_query = true;
  }
  val = this->_EvalBracketOp(val, part, quoted, vsub_state, vtest_place);
  suffix_is_test = false;
  UP_op = suffix_op;
  if ((suffix_op != nullptr and suffix_op->tag_() == suffix_op_e::Unary)) {
    suffix_op__Unary* suffix_op = static_cast<suffix_op__Unary*>(UP_op);
    if (consts::GetKind(suffix_op->op->id) == Kind::VTest) {
      suffix_is_test = true;
    }
  }
  if (part->prefix_op) {
    if (part->prefix_op->id == Id::VSub_Pound) {
      if (!suffix_is_test) {
        val = this->_EmptyStrOrError(val, part->token);
      }
      val = this->_Length(val, part->token);
      part_val = _ValueToPartValue(val, false);
      part_vals->append(part_val);
      return ;
    }
    else {
      if (part->prefix_op->id == Id::VSub_Bang) {
        if ((part->bracket_op and part->bracket_op->tag_() == bracket_op_e::WholeArray)) {
          if (suffix_is_test) {
            op_tok = static_cast<suffix_op__Unary*>(UP_op)->op;
            e_die(str1409, op_tok);
          }
          val = this->_Keys(val, part->token);
        }
        else {
          vtest_place->name = nullptr;
          vtest_place->index = nullptr;
          val = this->_EvalVarRef(val, part->token, quoted, vsub_state, vtest_place);
          if (!suffix_is_test) {
            val = this->_EmptyStrOrError(val, part->token);
          }
        }
      }
      else {
        assert(0);  // AssertionError
      }
    }
  }
  else {
    if (!suffix_is_test) {
      val = this->_EmptyStrOrError(val, part->token);
    }
  }
  quoted2 = false;
  if (suffix_op) {
    op = suffix_op;
    switch (suffix_op->tag_()) {
      case suffix_op_e::Nullary: {
        Token* op = static_cast<Token*>(UP_op);
        Tuple2<runtime_asdl::value__Str*, bool> tup3 = this->_Nullary(val, op, var_name);
        val = tup3.at0();
        quoted2 = tup3.at1();
      }
        break;
      case suffix_op_e::Unary: {
        suffix_op__Unary* op = static_cast<suffix_op__Unary*>(UP_op);
        if (consts::GetKind(op->op->id) == Kind::VTest) {
          if (this->_ApplyTestOp(val, op, quoted, part_vals, vtest_place, part->token)) {
            return ;
          }
        }
        else {
          val = this->_ApplyUnarySuffixOp(val, op);
        }
      }
        break;
      case suffix_op_e::PatSub: {
        suffix_op__PatSub* op = static_cast<suffix_op__PatSub*>(UP_op);
        val = this->_PatSub(val, op);
      }
        break;
      case suffix_op_e::Slice: {
        suffix_op__Slice* op = static_cast<suffix_op__Slice*>(UP_op);
        val = this->_Slice(val, op, var_name, part);
      }
        break;
      case suffix_op_e::Static: {
        suffix_op__Static* op = static_cast<suffix_op__Static*>(UP_op);
        e_die(str1410, op->tok);
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  UP_val = val;
  if (val->tag_() == value_e::MaybeStrArray) {
    value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(UP_val);
    if (vsub_state->join_array) {
      val = this->_DecayArray(array_val);
    }
    else {
      val = array_val;
    }
  }
  part_val = _ValueToPartValue(val, (quoted or quoted2));
  part_vals->append(part_val);
}

Str* AbstractWordEvaluator::_ConcatPartVals(List<runtime_asdl::part_value_t*>* part_vals, int span_id) {
  List<Str*>* strs = nullptr;
  runtime_asdl::part_value_t* UP_part_val = nullptr;
  Str* s = nullptr;
  List<Str*>* tmp = nullptr;
  StackRoots _roots({&part_vals, &strs, &UP_part_val, &s, &tmp});

  strs = Alloc<List<Str*>>();
  for (ListIter<runtime_asdl::part_value_t*> it(part_vals); !it.Done(); it.Next()) {
    runtime_asdl::part_value_t* part_val = it.Value();
    StackRoots _for({&part_val  });
    UP_part_val = part_val;
    switch (part_val->tag_()) {
      case part_value_e::String: {
        part_value__String* part_val = static_cast<part_value__String*>(UP_part_val);
        s = part_val->s;
      }
        break;
      case part_value_e::Array: {
        part_value__Array* part_val = static_cast<part_value__Array*>(UP_part_val);
        if (this->exec_opts->strict_array()) {
          e_die(str1411, Alloc<loc::Span>(span_id));
        }
        else {
          tmp = Alloc<List<Str*>>();
          for (ListIter<Str*> it(part_val->strs); !it.Done(); it.Next()) {
            Str* s = it.Value();
            if (s != nullptr) {
              tmp->append(s);
            }
          }
          s = str1412->join(tmp);
        }
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
    strs->append(s);
  }
  return str1413->join(strs);
}

Str* AbstractWordEvaluator::EvalBracedVarSubToString(syntax_asdl::braced_var_sub* part) {
  List<runtime_asdl::part_value_t*>* part_vals = nullptr;
  StackRoots _roots({&part, &part_vals});

  part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
  this->_EvalBracedVarSub(part, part_vals, false);
  return this->_ConcatPartVals(part_vals, part->left->span_id);
}

void AbstractWordEvaluator::_EvalSimpleVarSub(syntax_asdl::simple_var_sub* part, List<runtime_asdl::part_value_t*>* part_vals, bool quoted) {
  syntax_asdl::Token* token = nullptr;
  Str* var_name = nullptr;
  runtime_asdl::VarSubState* vsub_state = nullptr;
  runtime_asdl::value_t* val = nullptr;
  int var_num;
  runtime_asdl::value_t* UP_val = nullptr;
  runtime_asdl::part_value_t* v = nullptr;
  StackRoots _roots({&part, &part_vals, &token, &var_name, &vsub_state, &val, &UP_val, &v});

  token = part->left;
  var_name = part->var_name;
  vsub_state = VarSubState::Create();
  if (token->id == Id::VSub_DollarName) {
    val = this->mem->GetValue(var_name);
    if ((val->tag_() == value_e::MaybeStrArray || val->tag_() == value_e::AssocArray)) {
      if (ShouldArrayDecay(var_name, this->exec_opts)) {
        val = DecayArray(val);
      }
      else {
        e_die(StrFormat("Array %r can't be referred to as a scalar (without @ or *)", var_name), token);
      }
    }
  }
  else {
    if (token->id == Id::VSub_Number) {
      var_num = to_int(var_name);
      val = this->_EvalVarNum(var_num);
    }
    else {
      val = this->_EvalSpecialVar(token->id, quoted, vsub_state);
    }
  }
  val = this->_EmptyStrOrError(val, token);
  UP_val = val;
  if (val->tag_() == value_e::MaybeStrArray) {
    value__MaybeStrArray* array_val = static_cast<value__MaybeStrArray*>(UP_val);
    if (vsub_state->join_array) {
      val = this->_DecayArray(array_val);
    }
    else {
      val = array_val;
    }
  }
  v = _ValueToPartValue(val, quoted);
  part_vals->append(v);
}

Str* AbstractWordEvaluator::EvalSimpleVarSubToString(syntax_asdl::simple_var_sub* node) {
  List<runtime_asdl::part_value_t*>* part_vals = nullptr;
  StackRoots _roots({&node, &part_vals});

  part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
  this->_EvalSimpleVarSub(node, part_vals, false);
  return this->_ConcatPartVals(part_vals, node->left->span_id);
}

void AbstractWordEvaluator::_EvalExtGlob(syntax_asdl::word_part__ExtGlob* part, List<runtime_asdl::part_value_t*>* part_vals) {
  syntax_asdl::Token* op = nullptr;
  Str* op_str = nullptr;
  int i;
  StackRoots _roots({&part, &part_vals, &op, &op_str});

  op = part->op;
  if (op->id == Id::ExtGlob_Comma) {
    op_str = str1415;
  }
  else {
    op_str = lexer::TokenVal(op);
  }
  part_vals->append(Alloc<part_value::String>(op_str, false, false));
  i = 0;
  for (ListIter<syntax_asdl::compound_word*> it(part->arms); !it.Done(); it.Next(), ++i) {
    syntax_asdl::compound_word* w = it.Value();
    StackRoots _for({&w  });
    if (i != 0) {
      part_vals->append(Alloc<part_value::String>(str1416, false, false));
    }
    this->_EvalWordToParts(w, part_vals, EXTGLOB_NESTED);
  }
  part_vals->append(Alloc<part_value::String>(str1417, false, false));
}

void AbstractWordEvaluator::_TranslateExtGlob(List<runtime_asdl::part_value_t*>* part_vals, syntax_asdl::compound_word* w, List<Str*>* glob_parts, List<Str*>* fnmatch_parts) {
  int i;
  runtime_asdl::part_value_t* UP_part_val = nullptr;
  Str* s = nullptr;
  StackRoots _roots({&part_vals, &w, &glob_parts, &fnmatch_parts, &UP_part_val, &s});

  i = 0;
  for (ListIter<runtime_asdl::part_value_t*> it(part_vals); !it.Done(); it.Next(), ++i) {
    runtime_asdl::part_value_t* part_val = it.Value();
    StackRoots _for({&part_val  });
    UP_part_val = part_val;
    switch (part_val->tag_()) {
      case part_value_e::String: {
        part_value__String* part_val = static_cast<part_value__String*>(UP_part_val);
        if ((part_val->quoted and !this->exec_opts->noglob())) {
          s = glob_::GlobEscape(part_val->s);
        }
        else {
          s = part_val->s;
        }
        glob_parts->append(s);
        fnmatch_parts->append(s);
      }
        break;
      case part_value_e::Array: {
        e_die(str1418, Alloc<loc::Word>(w));
      }
        break;
      case part_value_e::ExtGlob: {
        part_value__ExtGlob* part_val = static_cast<part_value__ExtGlob*>(UP_part_val);
        this->_TranslateExtGlob(part_val->part_vals, w, Alloc<List<Str*>>(), fnmatch_parts);
        glob_parts->append(str1419);
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
}

void AbstractWordEvaluator::_EvalWordPart(syntax_asdl::word_part_t* part, List<runtime_asdl::part_value_t*>* part_vals, int flags) {
  bool quoted;
  bool is_subst;
  syntax_asdl::word_part_t* UP_part = nullptr;
  runtime_asdl::part_value__String* v = nullptr;
  Str* s = nullptr;
  int id_;
  runtime_asdl::part_value_t* sv = nullptr;
  int num;
  List<runtime_asdl::part_value_t*>* part_vals2 = nullptr;
  runtime_asdl::value_t* val = nullptr;
  runtime_asdl::value_t* UP_val = nullptr;
  List<Str*>* items = nullptr;
  StackRoots _roots({&part, &part_vals, &UP_part, &v, &s, &sv, &part_vals2, &val, &UP_val, &items});

  quoted = to_bool((flags & QUOTED));
  is_subst = to_bool((flags & IS_SUBST));
  UP_part = part;
  switch (part->tag_()) {
    case word_part_e::ShArrayLiteral: {
      sh_array_literal* part = static_cast<sh_array_literal*>(UP_part);
      e_die(str1420, Alloc<loc::WordPart>(part));
    }
      break;
    case word_part_e::AssocArrayLiteral: {
      word_part__AssocArrayLiteral* part = static_cast<word_part__AssocArrayLiteral*>(UP_part);
      e_die(str1421, Alloc<loc::WordPart>(part));
    }
      break;
    case word_part_e::Literal: {
      Token* part = static_cast<Token*>(UP_part);
      v = Alloc<part_value::String>(part->tval, quoted, is_subst);
      part_vals->append(v);
    }
      break;
    case word_part_e::EscapedLiteral: {
      word_part__EscapedLiteral* part = static_cast<word_part__EscapedLiteral*>(UP_part);
      v = Alloc<part_value::String>(part->ch, true, false);
      part_vals->append(v);
    }
      break;
    case word_part_e::SingleQuoted: {
      single_quoted* part = static_cast<single_quoted*>(UP_part);
      s = word_compile::EvalSingleQuoted(part);
      v = Alloc<part_value::String>(s, true, false);
      part_vals->append(v);
    }
      break;
    case word_part_e::DoubleQuoted: {
      double_quoted* part = static_cast<double_quoted*>(UP_part);
      this->_EvalDoubleQuoted(part->parts, part_vals);
    }
      break;
    case word_part_e::CommandSub: {
      command_sub* part = static_cast<command_sub*>(UP_part);
      id_ = part->left_token->id;
      if ((id_ == Id::Left_DollarParen || id_ == Id::Left_AtParen || id_ == Id::Left_Backtick)) {
        sv = this->_EvalCommandSub(part, quoted);
      }
      else {
        if ((id_ == Id::Left_ProcSubIn || id_ == Id::Left_ProcSubOut)) {
          sv = this->_EvalProcessSub(part);
        }
        else {
          assert(0);  // AssertionError
        }
      }
      part_vals->append(sv);
    }
      break;
    case word_part_e::SimpleVarSub: {
      simple_var_sub* part = static_cast<simple_var_sub*>(UP_part);
      this->_EvalSimpleVarSub(part, part_vals, quoted);
    }
      break;
    case word_part_e::BracedVarSub: {
      braced_var_sub* part = static_cast<braced_var_sub*>(UP_part);
      this->_EvalBracedVarSub(part, part_vals, quoted);
    }
      break;
    case word_part_e::TildeSub: {
      word_part__TildeSub* part = static_cast<word_part__TildeSub*>(UP_part);
      s = this->tilde_ev->Eval(part);
      v = Alloc<part_value::String>(s, true, false);
      part_vals->append(v);
    }
      break;
    case word_part_e::ArithSub: {
      word_part__ArithSub* part = static_cast<word_part__ArithSub*>(UP_part);
      num = this->arith_ev->EvalToInt(part->anode);
      v = Alloc<part_value::String>(str(num), quoted, !quoted);
      part_vals->append(v);
    }
      break;
    case word_part_e::ExtGlob: {
      word_part__ExtGlob* part = static_cast<word_part__ExtGlob*>(UP_part);
      part_vals2 = Alloc<List<runtime_asdl::part_value_t*>>();
      this->_EvalExtGlob(part, part_vals2);
      part_vals->append(Alloc<part_value::ExtGlob>(part_vals2));
    }
      break;
    case word_part_e::Splice: {
      word_part__Splice* part = static_cast<word_part__Splice*>(UP_part);
      val = this->mem->GetValue(part->var_name);
      UP_val = val;
      switch (val->tag_()) {
        case value_e::MaybeStrArray: {
          value__MaybeStrArray* val = static_cast<value__MaybeStrArray*>(UP_val);
          items = val->strs;
        }
          break;
        case value_e::AssocArray: {
          value__AssocArray* val = static_cast<value__AssocArray*>(UP_val);
          items = val->d->keys();
        }
          break;
        case value_e::Obj: {
          // if not PYTHON
          {
            assert(0);  // AssertionError
          }
          // endif MYCPP
        }
          break;
        default: {
          e_die(StrFormat("Can't splice %r", part->var_name), Alloc<loc::WordPart>(part));
        }
      }
      part_vals->append(Alloc<part_value::Array>(items));
    }
      break;
    case word_part_e::FuncCall: {
      word_part__FuncCall* part = static_cast<word_part__FuncCall*>(UP_part);
    }
      break;
    case word_part_e::ExprSub: {
      word_part__ExprSub* part = static_cast<word_part__ExprSub*>(UP_part);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

void AbstractWordEvaluator::_EvalRhsWordToParts(syntax_asdl::rhs_word_t* w, List<runtime_asdl::part_value_t*>* part_vals, int eval_flags) {
  bool quoted;
  syntax_asdl::rhs_word_t* UP_w = nullptr;
  StackRoots _roots({&w, &part_vals, &UP_w});

  quoted = to_bool((eval_flags & QUOTED));
  UP_w = w;
  switch (w->tag_()) {
    case rhs_word_e::Empty: {
      part_vals->append(Alloc<part_value::String>(str1423, quoted, !quoted));
    }
      break;
    case rhs_word_e::Compound: {
      compound_word* w = static_cast<compound_word*>(UP_w);
      this->_EvalWordToParts(w, part_vals, eval_flags);
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

void AbstractWordEvaluator::_EvalWordToParts(syntax_asdl::compound_word* w, List<runtime_asdl::part_value_t*>* part_vals, int eval_flags) {
  List<runtime_asdl::part_value_t*>* word_part_vals = nullptr;
  bool has_extglob;
  List<Str*>* glob_parts = nullptr;
  List<Str*>* fnmatch_parts = nullptr;
  Str* glob_pat = nullptr;
  Str* fnmatch_pat = nullptr;
  List<Str*>* results = nullptr;
  int n;
  int span_id;
  StackRoots _roots({&w, &part_vals, &word_part_vals, &glob_parts, &fnmatch_parts, &glob_pat, &fnmatch_pat, &results});

  word_part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
  has_extglob = false;
  for (ListIter<syntax_asdl::word_part_t*> it(w->parts); !it.Done(); it.Next()) {
    syntax_asdl::word_part_t* p = it.Value();
    StackRoots _for({&p  });
    if (p->tag_() == word_part_e::ExtGlob) {
      has_extglob = true;
    }
    this->_EvalWordPart(p, word_part_vals, eval_flags);
  }
  if (has_extglob) {
    if (to_bool((eval_flags & EXTGLOB_FILES))) {
      glob_parts = Alloc<List<Str*>>();
      fnmatch_parts = Alloc<List<Str*>>();
      this->_TranslateExtGlob(word_part_vals, w, glob_parts, fnmatch_parts);
      glob_pat = str1424->join(glob_parts);
      fnmatch_pat = str1425->join(fnmatch_parts);
      results = Alloc<List<Str*>>();
      n = this->globber->ExpandExtended(glob_pat, fnmatch_pat, results);
      if (n < 0) {
        span_id = word_::LeftMostSpanForWord(w);
        throw Alloc<error::FailGlob>(StrFormat("Extended glob %r matched no files", fnmatch_pat), Alloc<loc::Span>(span_id));
      }
      part_vals->append(Alloc<part_value::Array>(results));
    }
    else {
      if (to_bool((eval_flags & EXTGLOB_NESTED))) {
        part_vals->extend(word_part_vals);
      }
      else {
        e_die(str1427, Alloc<loc::Word>(w));
      }
    }
  }
  else {
    part_vals->extend(word_part_vals);
  }
}

void AbstractWordEvaluator::_PartValsToString(List<runtime_asdl::part_value_t*>* part_vals, syntax_asdl::compound_word* w, int eval_flags, List<Str*>* strs) {
  runtime_asdl::part_value_t* UP_part_val = nullptr;
  Str* s = nullptr;
  List<Str*>* tmp = nullptr;
  StackRoots _roots({&part_vals, &w, &strs, &UP_part_val, &s, &tmp});

  for (ListIter<runtime_asdl::part_value_t*> it(part_vals); !it.Done(); it.Next()) {
    runtime_asdl::part_value_t* part_val = it.Value();
    StackRoots _for({&part_val  });
    UP_part_val = part_val;
    switch (part_val->tag_()) {
      case part_value_e::String: {
        part_value__String* part_val = static_cast<part_value__String*>(UP_part_val);
        s = part_val->s;
        if (part_val->quoted) {
          if ((eval_flags & QUOTE_FNMATCH)) {
            s = glob_::GlobEscape(s);
          }
          else {
            if ((eval_flags & QUOTE_ERE)) {
              s = glob_::ExtendedRegexEscape(s);
            }
          }
        }
        strs->append(s);
      }
        break;
      case part_value_e::Array: {
        part_value__Array* part_val = static_cast<part_value__Array*>(UP_part_val);
        if (this->exec_opts->strict_array()) {
          e_die(str1428, Alloc<loc::Word>(w));
        }
        else {
          tmp = Alloc<List<Str*>>();
          for (ListIter<Str*> it(part_val->strs); !it.Done(); it.Next()) {
            Str* s = it.Value();
            if (s != nullptr) {
              tmp->append(s);
            }
          }
          s = str1429->join(tmp);
          strs->append(s);
        }
      }
        break;
      case part_value_e::ExtGlob: {
        part_value__ExtGlob* part_val = static_cast<part_value__ExtGlob*>(UP_part_val);
        if (!to_bool((eval_flags & QUOTE_FNMATCH))) {
          e_die(str1430, Alloc<loc::Word>(w));
        }
        this->_PartValsToString(part_val->part_vals, w, eval_flags, strs);
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
}

runtime_asdl::value__Str* AbstractWordEvaluator::EvalWordToString(syntax_asdl::word_t* UP_w, int eval_flags) {
  List<runtime_asdl::part_value_t*>* part_vals = nullptr;
  List<Str*>* strs = nullptr;
  StackRoots _roots({&UP_w, &part_vals, &strs});

  compound_word* w = static_cast<compound_word*>(UP_w);
  part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
  for (ListIter<syntax_asdl::word_part_t*> it(w->parts); !it.Done(); it.Next()) {
    syntax_asdl::word_part_t* p = it.Value();
    StackRoots _for({&p  });
    this->_EvalWordPart(p, part_vals, 0);
  }
  strs = Alloc<List<Str*>>();
  this->_PartValsToString(part_vals, w, eval_flags, strs);
  return Alloc<value::Str>(str1431->join(strs));
}

Tuple2<runtime_asdl::value__Str*, bool> AbstractWordEvaluator::EvalWordToPattern(syntax_asdl::rhs_word_t* UP_w) {
  bool has_extglob;
  List<runtime_asdl::part_value_t*>* part_vals = nullptr;
  List<Str*>* strs = nullptr;
  StackRoots _roots({&UP_w, &part_vals, &strs});

  if (UP_w->tag_() == rhs_word_e::Empty) {
    return Tuple2<runtime_asdl::value__Str*, bool>(Alloc<value::Str>(str1432), false);
  }
  compound_word* w = static_cast<compound_word*>(UP_w);
  has_extglob = false;
  part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
  for (ListIter<syntax_asdl::word_part_t*> it(w->parts); !it.Done(); it.Next()) {
    syntax_asdl::word_part_t* p = it.Value();
    StackRoots _for({&p  });
    this->_EvalWordPart(p, part_vals, 0);
    if (p->tag_() == word_part_e::ExtGlob) {
      has_extglob = true;
    }
  }
  strs = Alloc<List<Str*>>();
  this->_PartValsToString(part_vals, w, QUOTE_FNMATCH, strs);
  return Tuple2<runtime_asdl::value__Str*, bool>(Alloc<value::Str>(str1433->join(strs)), has_extglob);
}

runtime_asdl::value__Str* AbstractWordEvaluator::EvalForPlugin(syntax_asdl::compound_word* w) {
  runtime_asdl::value__Str* val = nullptr;
  StackRoots _roots({&w, &val});

  {  // with
    state::ctx_Registers ctx{this->mem};

    try {
      val = this->EvalWordToString(w);
    }
    catch (error::FatalRuntime* e) {
      val = Alloc<value::Str>(StrFormat("<Runtime error: %s>", e->UserErrorString()));
    }
    catch (IOError_OSError* e) {
      val = Alloc<value::Str>(StrFormat("<I/O error: %s>", pyutil::strerror(e)));
    }
    catch (KeyboardInterrupt*) {
      val = Alloc<value::Str>(str1436);
    }
  }
  return val;
}

runtime_asdl::value_t* AbstractWordEvaluator::EvalRhsWord(syntax_asdl::rhs_word_t* UP_w) {
  syntax_asdl::word_part_t* part0 = nullptr;
  syntax_asdl::word_part_t* UP_part0 = nullptr;
  int tag;
  List<syntax_asdl::word_t*>* array_words = nullptr;
  List<syntax_asdl::compound_word*>* words = nullptr;
  List<Str*>* strs = nullptr;
  int n;
  runtime_asdl::value__Str* k = nullptr;
  runtime_asdl::value__Str* v = nullptr;
  StackRoots _roots({&UP_w, &part0, &UP_part0, &array_words, &words, &strs, &k, &v});

  if (UP_w->tag_() == rhs_word_e::Empty) {
    return Alloc<value::Str>(str1437);
  }
  compound_word* w = static_cast<compound_word*>(UP_w);
  if (len(w->parts) == 1) {
    part0 = w->parts->index_(0);
    UP_part0 = part0;
    tag = part0->tag_();
    if (tag == word_part_e::ShArrayLiteral) {
      sh_array_literal* part0 = static_cast<sh_array_literal*>(UP_part0);
      array_words = part0->words;
      words = braces::BraceExpandWords(array_words);
      strs = this->EvalWordSequence(words);
      return Alloc<value::MaybeStrArray>(strs);
    }
    if (tag == word_part_e::AssocArrayLiteral) {
      word_part__AssocArrayLiteral* part0 = static_cast<word_part__AssocArrayLiteral*>(UP_part0);
      auto* d = NewDict<Str*, Str*>();
      n = len(part0->pairs);
      for (ListIter<syntax_asdl::assoc_pair*> it(part0->pairs); !it.Done(); it.Next()) {
        syntax_asdl::assoc_pair* pair = it.Value();
        StackRoots _for({&pair      });
        k = this->EvalWordToString(pair->key);
        v = this->EvalWordToString(pair->value);
        d->set(k->s, v->s);
      }
      return Alloc<value::AssocArray>(d);
    }
  }
  return this->EvalWordToString(w);
}

void AbstractWordEvaluator::_EvalWordFrame(List<Tuple3<Str*, bool, bool>*>* frame, List<Str*>* argv) {
  bool all_empty;
  bool all_quoted;
  bool any_quoted;
  Str* s = nullptr;
  bool quoted;
  List<Str*>* tmp = nullptr;
  Str* a = nullptr;
  bool will_glob;
  List<Str*>* frags = nullptr;
  Str* frag = nullptr;
  bool do_split;
  Str* flat = nullptr;
  List<Str*>* args = nullptr;
  int n;
  StackRoots _roots({&frame, &argv, &s, &tmp, &a, &frags, &frag, &flat, &args});

  all_empty = true;
  all_quoted = true;
  any_quoted = false;
  for (ListIter<Tuple3<Str*, bool, bool>*> it(frame); !it.Done(); it.Next()) {
    Tuple3<Str*, bool, bool>* tup4 = it.Value();
    s = tup4->at0();
    quoted = tup4->at1();
    if (len(s)) {
      all_empty = false;
    }
    if (quoted) {
      any_quoted = true;
    }
    else {
      all_quoted = false;
    }
  }
  if ((all_empty and !any_quoted)) {
    return ;
  }
  if (all_quoted) {
    tmp = Alloc<List<Str*>>();
    for (ListIter<Tuple3<Str*, bool, bool>*> it(frame); !it.Done(); it.Next()) {
      Tuple3<Str*, bool, bool>* tup5 = it.Value();
      s = tup5->at0();
      tmp->append(s);
    }
    a = str1438->join(tmp);
    argv->append(a);
    return ;
  }
  will_glob = !this->exec_opts->noglob();
  frags = Alloc<List<Str*>>();
  for (ListIter<Tuple3<Str*, bool, bool>*> it(frame); !it.Done(); it.Next()) {
    Tuple3<Str*, bool, bool>* tup6 = it.Value();
    frag = tup6->at0();
    quoted = tup6->at1();
    do_split = tup6->at2();
    if ((will_glob and quoted)) {
      frag = glob_::GlobEscape(frag);
    }
    else {
      frag = _BackslashEscape(frag);
    }
    if (do_split) {
      frag = _BackslashEscape(frag);
    }
    else {
      frag = this->splitter->Escape(frag);
    }
    frags->append(frag);
  }
  flat = str1439->join(frags);
  args = this->splitter->SplitForWordEval(flat);
  if ((!args and any_quoted)) {
    argv->append(str1440);
    return ;
  }
  for (ListIter<Str*> it(args); !it.Done(); it.Next()) {
    Str* a = it.Value();
    StackRoots _for({&a  });
    if (glob_::LooksLikeGlob(a)) {
      n = this->globber->Expand(a, argv);
      if (n < 0) {
        throw Alloc<error::FailGlob>(StrFormat("Pattern %r matched no files", a), Alloc<loc::Missing>());
      }
    }
    else {
      argv->append(glob_::GlobUnescape(a));
    }
  }
}

List<Str*>* AbstractWordEvaluator::_EvalWordToArgv(syntax_asdl::compound_word* w) {
  List<runtime_asdl::part_value_t*>* part_vals = nullptr;
  List<List<Tuple3<Str*, bool, bool>*>*>* frames = nullptr;
  List<Str*>* argv = nullptr;
  List<Str*>* tmp = nullptr;
  Str* s = nullptr;
  StackRoots _roots({&w, &part_vals, &frames, &argv, &tmp, &s});

  part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
  this->_EvalWordToParts(w, part_vals, 0);
  frames = _MakeWordFrames(part_vals);
  argv = Alloc<List<Str*>>();
  for (ListIter<List<Tuple3<Str*, bool, bool>*>*> it(frames); !it.Done(); it.Next()) {
    List<Tuple3<Str*, bool, bool>*>* frame = it.Value();
    StackRoots _for({&frame  });
    if (len(frame)) {
      tmp = Alloc<List<Str*>>();
      for (ListIter<Tuple3<Str*, bool, bool>*> it(frame); !it.Done(); it.Next()) {
        Tuple3<Str*, bool, bool>* tup7 = it.Value();
        s = tup7->at0();
        tmp->append(s);
      }
      argv->append(str1442->join(tmp));
    }
  }
  return argv;
}

runtime_asdl::cmd_value__Assign* AbstractWordEvaluator::_EvalAssignBuiltin(int builtin_id, Str* arg0, List<syntax_asdl::compound_word*>* words) {
  bool eval_to_pairs;
  bool started_pairs;
  List<Str*>* flags = nullptr;
  List<int>* flag_spids = nullptr;
  List<runtime_asdl::assign_arg*>* assign_args = nullptr;
  int n;
  syntax_asdl::compound_word* w = nullptr;
  int word_spid;
  syntax_asdl::Token* left_token = nullptr;
  syntax_asdl::Token* close_token = nullptr;
  int part_offset;
  Str* var_name = nullptr;
  bool append;
  syntax_asdl::rhs_word_t* rhs = nullptr;
  syntax_asdl::compound_word* tmp = nullptr;
  runtime_asdl::value_t* right = nullptr;
  runtime_asdl::assign_arg* arg2 = nullptr;
  List<Str*>* argv = nullptr;
  StackRoots _roots({&arg0, &words, &flags, &flag_spids, &assign_args, &w, &left_token, &close_token, &var_name, &rhs, &tmp, &right, &arg2, &argv});

  eval_to_pairs = true;
  started_pairs = false;
  flags = NewList<Str*>(std::initializer_list<Str*>{arg0});
  flag_spids = NewList<int>(std::initializer_list<int>{word_::LeftMostSpanForWord(words->index_(0))});
  assign_args = Alloc<List<runtime_asdl::assign_arg*>>();
  n = len(words);
  for (int i = 1; i < n; ++i) {
    w = words->index_(i);
    word_spid = word_::LeftMostSpanForWord(w);
    if (word_::IsVarLike(w)) {
      started_pairs = true;
    }
    if (started_pairs) {
      Tuple3<syntax_asdl::Token*, syntax_asdl::Token*, int> tup8 = word_::DetectShAssignment(w);
      left_token = tup8.at0();
      close_token = tup8.at1();
      part_offset = tup8.at2();
      if (left_token) {
        if (left_token->id != Id::Lit_VarLike) {
          e_die(str1443, Alloc<loc::Word>(w));
        }
        if (lexer::IsPlusEquals(left_token)) {
          var_name = lexer::TokenSliceRight(left_token, -2);
          append = true;
        }
        else {
          var_name = lexer::TokenSliceRight(left_token, -1);
          append = false;
        }
        if (part_offset == len(w->parts)) {
          rhs = Alloc<rhs_word::Empty>();
        }
        else {
          tmp = Alloc<compound_word>(w->parts->slice(part_offset));
          word_::TildeDetectAssign(tmp);
          rhs = tmp;
        }
        {  // with
          state::ctx_AssignBuiltin ctx{this->mutable_opts};

          right = this->EvalRhsWord(rhs);
        }
        arg2 = Alloc<assign_arg>(var_name, right, append, word_spid);
        assign_args->append(arg2);
      }
      else {
        argv = this->_EvalWordToArgv(w);
        for (ListIter<Str*> it(argv); !it.Done(); it.Next()) {
          Str* arg = it.Value();
          StackRoots _for({&arg        });
          arg2 = _SplitAssignArg(arg, word_spid);
          assign_args->append(arg2);
        }
      }
    }
    else {
      argv = this->_EvalWordToArgv(w);
      for (ListIter<Str*> it(argv); !it.Done(); it.Next()) {
        Str* arg = it.Value();
        StackRoots _for({&arg      });
        if ((arg->startswith(str1444) or arg->startswith(str1445))) {
          flags->append(arg);
          flag_spids->append(word_spid);
          if ((str_contains(arg, str1446) or str_contains(arg, str1447))) {
            eval_to_pairs = false;
          }
        }
        else {
          if (eval_to_pairs) {
            arg2 = _SplitAssignArg(arg, word_spid);
            assign_args->append(arg2);
            started_pairs = true;
          }
          else {
            flags->append(arg);
          }
        }
      }
    }
  }
  return Alloc<cmd_value::Assign>(builtin_id, flags, flag_spids, assign_args);
}

runtime_asdl::cmd_value_t* AbstractWordEvaluator::SimpleEvalWordSequence2(List<syntax_asdl::compound_word*>* words, bool allow_assign) {
  List<Str*>* strs = nullptr;
  List<int>* spids = nullptr;
  int n;
  int i;
  int word_spid;
  List<Str*>* strs0 = nullptr;
  Str* arg0 = nullptr;
  int builtin_id;
  runtime_asdl::value__Str* val = nullptr;
  int num_appended;
  List<runtime_asdl::part_value_t*>* part_vals = nullptr;
  List<List<Tuple3<Str*, bool, bool>*>*>* frames = nullptr;
  List<Str*>* tmp = nullptr;
  Str* s = nullptr;
  StackRoots _roots({&words, &strs, &spids, &strs0, &arg0, &val, &part_vals, &frames, &tmp, &s});

  strs = Alloc<List<Str*>>();
  spids = Alloc<List<int>>();
  n = 0;
  i = 0;
  for (ListIter<syntax_asdl::compound_word*> it(words); !it.Done(); it.Next(), ++i) {
    syntax_asdl::compound_word* w = it.Value();
    StackRoots _for({&w  });
    word_spid = word_::LeftMostSpanForWord(w);
    if ((i == 0 and allow_assign)) {
      strs0 = this->_EvalWordToArgv(w);
      if (len(strs0) == 1) {
        arg0 = strs0->index_(0);
        builtin_id = consts::LookupAssignBuiltin(arg0);
        if (builtin_id != consts::NO_INDEX) {
          return this->_EvalAssignBuiltin(builtin_id, arg0, words);
        }
      }
      strs->extend(strs0);
      for (ListIter<Str*> it(strs0); !it.Done(); it.Next()) {
        Str* _ = it.Value();
        StackRoots _for({&_      });
        spids->append(word_spid);
      }
      continue;
    }
    if (glob_::LooksLikeStaticGlob(w)) {
      val = this->EvalWordToString(w);
      num_appended = this->globber->Expand(val->s, strs);
      if (num_appended < 0) {
        throw Alloc<error::FailGlob>(StrFormat("Pattern %r matched no files", val->s), Alloc<loc::Span>(word_spid));
      }
      for (int _ = 0; _ < num_appended; ++_) {
        spids->append(word_spid);
      }
      continue;
    }
    part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
    this->_EvalWordToParts(w, part_vals, 0);
    frames = _MakeWordFrames(part_vals);
    for (ListIter<List<Tuple3<Str*, bool, bool>*>*> it(frames); !it.Done(); it.Next()) {
      List<Tuple3<Str*, bool, bool>*>* frame = it.Value();
      StackRoots _for({&frame    });
      if (len(frame)) {
        tmp = Alloc<List<Str*>>();
        for (ListIter<Tuple3<Str*, bool, bool>*> it(frame); !it.Done(); it.Next()) {
          Tuple3<Str*, bool, bool>* tup9 = it.Value();
          s = tup9->at0();
          tmp->append(s);
        }
        strs->append(str1449->join(tmp));
        spids->append(word_spid);
      }
    }
  }
  return Alloc<cmd_value::Argv>(strs, spids, nullptr);
}

runtime_asdl::cmd_value_t* AbstractWordEvaluator::EvalWordSequence2(List<syntax_asdl::compound_word*>* words, bool allow_assign) {
  List<Str*>* strs = nullptr;
  List<int>* spids = nullptr;
  int n;
  int i;
  List<runtime_asdl::part_value_t*>* part_vals = nullptr;
  runtime_asdl::part_value_t* val0 = nullptr;
  runtime_asdl::part_value_t* UP_val0 = nullptr;
  int builtin_id;
  List<List<Tuple3<Str*, bool, bool>*>*>* frames = nullptr;
  int n_next;
  int spid;
  StackRoots _roots({&words, &strs, &spids, &part_vals, &val0, &UP_val0, &frames});

  if (this->exec_opts->simple_word_eval()) {
    return this->SimpleEvalWordSequence2(words, allow_assign);
  }
  strs = Alloc<List<Str*>>();
  spids = Alloc<List<int>>();
  n = 0;
  i = 0;
  for (ListIter<syntax_asdl::compound_word*> it(words); !it.Done(); it.Next(), ++i) {
    syntax_asdl::compound_word* w = it.Value();
    StackRoots _for({&w  });
    part_vals = Alloc<List<runtime_asdl::part_value_t*>>();
    this->_EvalWordToParts(w, part_vals, EXTGLOB_FILES);
    if ((allow_assign and (i == 0 and len(part_vals) == 1))) {
      val0 = part_vals->index_(0);
      UP_val0 = val0;
      if (val0->tag_() == part_value_e::String) {
        part_value__String* val0 = static_cast<part_value__String*>(UP_val0);
        if (!val0->quoted) {
          builtin_id = consts::LookupAssignBuiltin(val0->s);
          if (builtin_id != consts::NO_INDEX) {
            return this->_EvalAssignBuiltin(builtin_id, val0->s, words);
          }
        }
      }
    }
    frames = _MakeWordFrames(part_vals);
    for (ListIter<List<Tuple3<Str*, bool, bool>*>*> it(frames); !it.Done(); it.Next()) {
      List<Tuple3<Str*, bool, bool>*>* frame = it.Value();
      StackRoots _for({&frame    });
      this->_EvalWordFrame(frame, strs);
    }
    n_next = len(strs);
    spid = word_::LeftMostSpanForWord(w);
    for (int _ = 0; _ < (n_next - n); ++_) {
      spids->append(spid);
    }
    n = n_next;
  }
  return Alloc<cmd_value::Argv>(strs, spids, nullptr);
}

List<Str*>* AbstractWordEvaluator::EvalWordSequence(List<syntax_asdl::compound_word*>* words) {
  runtime_asdl::cmd_value_t* UP_cmd_val = nullptr;
  StackRoots _roots({&words, &UP_cmd_val});

  UP_cmd_val = this->EvalWordSequence2(words);
  cmd_value__Argv* cmd_val = static_cast<cmd_value__Argv*>(UP_cmd_val);
  return cmd_val->argv;
}

NormalWordEvaluator::NormalWordEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, split::SplitContext* splitter, ui::ErrorFormatter* errfmt) : AbstractWordEvaluator(mem, exec_opts, mutable_opts, splitter, errfmt) {
  FIELD_MASK(header_) |= NormalWordEvaluator::field_mask();
  this->shell_ex = nullptr;
}

void NormalWordEvaluator::CheckCircularDeps() {
}

runtime_asdl::part_value_t* NormalWordEvaluator::_EvalCommandSub(syntax_asdl::command_sub* cs_part, bool quoted) {
  Str* stdout = nullptr;
  List<Str*>* strs = nullptr;
  StackRoots _roots({&cs_part, &stdout, &strs});

  stdout = this->shell_ex->RunCommandSub(cs_part);
  if (cs_part->left_token->id == Id::Left_AtParen) {
    strs = this->splitter->SplitForWordEval(stdout);
    return Alloc<part_value::Array>(strs);
  }
  else {
    return Alloc<part_value::String>(stdout, quoted, !quoted);
  }
}

runtime_asdl::part_value__String* NormalWordEvaluator::_EvalProcessSub(syntax_asdl::command_sub* cs_part) {
  Str* dev_path = nullptr;
  StackRoots _roots({&cs_part, &dev_path});

  dev_path = this->shell_ex->RunProcessSub(cs_part);
  return Alloc<part_value::String>(dev_path, true, false);
}
Str* _DUMMY = str1450;

CompletionWordEvaluator::CompletionWordEvaluator(state::Mem* mem, optview::Exec* exec_opts, state::MutableOpts* mutable_opts, split::SplitContext* splitter, ui::ErrorFormatter* errfmt) : AbstractWordEvaluator(mem, exec_opts, mutable_opts, splitter, errfmt) {
}

void CompletionWordEvaluator::CheckCircularDeps() {
}

runtime_asdl::part_value_t* CompletionWordEvaluator::_EvalCommandSub(syntax_asdl::command_sub* cs_part, bool quoted) {
  StackRoots _roots({&cs_part});

  if (cs_part->left_token->id == Id::Left_AtParen) {
    return Alloc<part_value::Array>(NewList<Str*>(std::initializer_list<Str*>{_DUMMY}));
  }
  else {
    return Alloc<part_value::String>(_DUMMY, quoted, !quoted);
  }
}

runtime_asdl::part_value__String* CompletionWordEvaluator::_EvalProcessSub(syntax_asdl::command_sub* cs_part) {
  StackRoots _roots({&cs_part});

  return Alloc<part_value::String>(str1451, true, false);
}

}  // define namespace word_eval

namespace word_parse {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Id_t;
using id_kind_asdl::Kind;
using types_asdl::lex_mode_t;
using types_asdl::lex_mode_e;
using syntax_asdl::BoolOutParam;
using syntax_asdl::Token;
using syntax_asdl::loc;
using syntax_asdl::double_quoted;
using syntax_asdl::single_quoted;
using syntax_asdl::simple_var_sub;
using syntax_asdl::braced_var_sub;
using syntax_asdl::command_sub;
using syntax_asdl::sh_array_literal;
using syntax_asdl::assoc_pair;
using syntax_asdl::arith_expr_t;
using syntax_asdl::bracket_op;
using syntax_asdl::bracket_op_t;
using syntax_asdl::suffix_op;
using syntax_asdl::suffix_op_t;
using syntax_asdl::suffix_op__Slice;
using syntax_asdl::suffix_op__PatSub;
using syntax_asdl::rhs_word;
using syntax_asdl::rhs_word_e;
using syntax_asdl::rhs_word_t;
using syntax_asdl::word_e;
using syntax_asdl::word_t;
using syntax_asdl::compound_word;
using syntax_asdl::word_part;
using syntax_asdl::word_part_e;
using syntax_asdl::word_part_t;
using syntax_asdl::word_part__ArithSub;
using syntax_asdl::word_part__ExtGlob;
using syntax_asdl::word_part__ExprSub;
using syntax_asdl::command;
using syntax_asdl::command__ForExpr;
using syntax_asdl::command__Proc;
using syntax_asdl::command__Import;
using syntax_asdl::command__PlaceMutation;
using syntax_asdl::command__VarDecl;
using syntax_asdl::place_expr_e;
using syntax_asdl::place_expr__Var;
using syntax_asdl::expr_t;
using syntax_asdl::source;
using syntax_asdl::ArgList;
using pyerror::p_die;
GLOBAL_LIST(id_kind_asdl::Kind_t, 4, KINDS_THAT_END_WORDS, {Kind::Eof COMMA Kind::WS COMMA Kind::Op COMMA Kind::Right});

WordEmitter::WordEmitter() 
    : header_(obj_header()) {
  ;  // pass
}

syntax_asdl::word_t* WordEmitter::ReadWord(types_asdl::lex_mode_t lex_mode) {
  FAIL(kNotImplemented);  // Python NotImplementedError
}

WordParser::WordParser(parse_lib::ParseContext* parse_ctx, lexer::Lexer* lexer, reader::_Reader* line_reader)  {
  FIELD_MASK(header_) |= WordParser::field_mask();
  this->parse_ctx = parse_ctx;
  this->lexer = lexer;
  this->line_reader = line_reader;
  this->arena = line_reader->arena;
  this->parse_opts = parse_ctx->parse_opts;
  this->a_parser = Alloc<tdop::TdopParser>(arith_parse::Spec(), this, this->parse_opts);
  this->Reset();
}

void WordParser::Init(types_asdl::lex_mode_t lex_mode) {
  this->next_lex_mode = lex_mode;
}

void WordParser::Reset() {
  this->cur_token = nullptr;
  this->token_kind = Kind::Undefined;
  this->token_type = Id::Undefined_Tok;
  this->next_lex_mode = lex_mode_e::ShCommand;
  this->emit_doc_token = false;
  this->multiline = false;
  this->newline_state = 0;
  this->returned_newline = false;
  this->buffered_word = nullptr;
}

void WordParser::_Peek() {
  if (this->next_lex_mode != lex_mode_e::Undefined) {
    this->cur_token = this->lexer->Read(this->next_lex_mode);
    this->token_type = this->cur_token->id;
    this->token_kind = consts::GetKind(this->token_type);
    if (this->token_type == Id::Op_Newline) {
      this->newline_state += 1;
    }
    else {
      if (this->token_kind != Kind::WS) {
        this->newline_state = 0;
      }
    }
    this->parse_ctx->trail->AppendToken(this->cur_token);
    this->next_lex_mode = lex_mode_e::Undefined;
  }
}

void WordParser::_Next(types_asdl::lex_mode_t lex_mode) {
  this->next_lex_mode = lex_mode;
}

syntax_asdl::rhs_word_t* WordParser::_ReadVarOpArg(types_asdl::lex_mode_t arg_lex_mode) {
  syntax_asdl::compound_word* w = nullptr;
  StackRoots _roots({&w});

  w = this->_ReadVarOpArg2(arg_lex_mode, Id::Undefined_Tok, true);
  if ((len(w->parts) == 0 and arg_lex_mode == lex_mode_e::VSub_ArgDQ)) {
    return Alloc<rhs_word::Empty>();
  }
  return w;
}

syntax_asdl::compound_word* WordParser::_ReadVarOpArg2(types_asdl::lex_mode_t arg_lex_mode, int eof_type, bool empty_ok) {
  syntax_asdl::compound_word* w = nullptr;
  syntax_asdl::compound_word* tilde = nullptr;
  StackRoots _roots({&w, &tilde});

  this->_Next(arg_lex_mode);
  this->_Peek();
  w = this->_ReadCompoundWord3(arg_lex_mode, eof_type, empty_ok);
  tilde = word_::TildeDetect(w);
  if (tilde) {
    w = tilde;
  }
  return w;
}

syntax_asdl::suffix_op__Slice* WordParser::_ReadSliceVarOp() {
  int cur_id;
  syntax_asdl::arith_expr_t* begin = nullptr;
  syntax_asdl::arith_expr_t* no_length = nullptr;
  syntax_asdl::arith_expr_t* length = nullptr;
  StackRoots _roots({&begin, &no_length, &length});

  this->_Next(lex_mode_e::Arith);
  this->_Peek();
  cur_id = this->token_type;
  if (this->token_type == Id::Arith_Colon) {
    begin = nullptr;
  }
  else {
    begin = this->a_parser->Parse();
    cur_id = this->a_parser->CurrentId();
  }
  if (cur_id == Id::Arith_RBrace) {
    no_length = nullptr;
    return Alloc<suffix_op::Slice>(begin, no_length);
  }
  if (cur_id == Id::Arith_Colon) {
    this->_Next(lex_mode_e::Arith);
    length = this->_ReadArithExpr(Id::Arith_RBrace);
    return Alloc<suffix_op::Slice>(begin, length);
  }
  p_die(str1452, this->cur_token);
  assert(0);  // AssertionError
}

syntax_asdl::suffix_op__PatSub* WordParser::_ReadPatSubVarOp() {
  syntax_asdl::Token* slash_tok = nullptr;
  syntax_asdl::compound_word* pat = nullptr;
  int replace_mode;
  syntax_asdl::word_part_t* UP_first_part = nullptr;
  int lit_id;
  syntax_asdl::compound_word* tilde = nullptr;
  syntax_asdl::rhs_word_t* replace = nullptr;
  StackRoots _roots({&slash_tok, &pat, &UP_first_part, &tilde, &replace});

  slash_tok = this->cur_token;
  pat = this->_ReadVarOpArg2(lex_mode_e::VSub_ArgUnquoted, Id::Lit_Slash);
  if ((len(pat->parts) == 1 and word_::LiteralId(pat->parts->index_(0)) == Id::Lit_Slash)) {
    this->_Next(lex_mode_e::VSub_ArgUnquoted);
    this->_Peek();
    pat->parts->append(this->cur_token);
  }
  if (len(pat->parts) == 0) {
    p_die(str1453, this->cur_token);
  }
  replace_mode = Id::Undefined_Tok;
  UP_first_part = pat->parts->index_(0);
  if (UP_first_part->tag_() == word_part_e::Literal) {
    lit_id = static_cast<Token*>(UP_first_part)->id;
    if ((lit_id == Id::Lit_Slash || lit_id == Id::Lit_Pound || lit_id == Id::Lit_Percent)) {
      pat->parts->pop(0);
      replace_mode = lit_id;
    }
  }
  tilde = word_::TildeDetect(pat);
  if (tilde) {
    pat = tilde;
  }
  if (this->token_type == Id::Right_DollarBrace) {
    return Alloc<suffix_op::PatSub>(pat, Alloc<rhs_word::Empty>(), replace_mode, slash_tok);
  }
  if (this->token_type == Id::Lit_Slash) {
    replace = this->_ReadVarOpArg(lex_mode_e::VSub_ArgUnquoted);
    this->_Peek();
    if (this->token_type != Id::Right_DollarBrace) {
      p_die(StrFormat("Expected } after replacement string, got %s", ui::PrettyId(this->token_type)), this->cur_token);
    }
    return Alloc<suffix_op::PatSub>(pat, replace, replace_mode, slash_tok);
  }
  p_die(str1455, this->cur_token);
}

syntax_asdl::bracket_op_t* WordParser::_ReadSubscript() {
  int next_id;
  syntax_asdl::bracket_op_t* op = nullptr;
  syntax_asdl::arith_expr_t* anode = nullptr;
  StackRoots _roots({&op, &anode});

  next_id = this->lexer->LookPastSpace(lex_mode_e::Arith);
  if ((next_id == Id::Lit_At || next_id == Id::Arith_Star)) {
    op = Alloc<bracket_op::WholeArray>(next_id);
    this->_Next(lex_mode_e::Arith);
    this->_Peek();
    this->_Next(lex_mode_e::Arith);
    this->_Peek();
  }
  else {
    this->_Next(lex_mode_e::Arith);
    anode = this->_ReadArithExpr(Id::Arith_RBracket);
    op = Alloc<bracket_op::ArrayIndex>(anode);
  }
  if (this->token_type != Id::Arith_RBracket) {
    p_die(str1456, this->cur_token);
  }
  this->_Next(lex_mode_e::VSub_2);
  this->_Peek();
  return op;
}

syntax_asdl::braced_var_sub* WordParser::_ParseVarOf() {
  syntax_asdl::Token* name_token = nullptr;
  syntax_asdl::bracket_op_t* bracket_op = nullptr;
  syntax_asdl::braced_var_sub* part = nullptr;
  StackRoots _roots({&name_token, &bracket_op, &part});

  this->_Peek();
  name_token = this->cur_token;
  this->_Next(lex_mode_e::VSub_2);
  this->_Peek();
  if (this->token_type == Id::VOp2_LBracket) {
    bracket_op = this->_ReadSubscript();
  }
  else {
    bracket_op = nullptr;
  }
  part = braced_var_sub::Create();
  part->token = name_token;
  part->var_name = lexer::TokenVal(name_token);
  part->bracket_op = bracket_op;
  return part;
}

syntax_asdl::braced_var_sub* WordParser::_ParseVarExpr(types_asdl::lex_mode_t arg_lex_mode, bool allow_query) {
  syntax_asdl::braced_var_sub* part = nullptr;
  id_kind_asdl::Kind_t op_kind;
  syntax_asdl::Token* tok = nullptr;
  syntax_asdl::rhs_word_t* arg_word = nullptr;
  syntax_asdl::rhs_word_t* UP_arg_word = nullptr;
  bool ok;
  Str* arg = nullptr;
  bool quoted;
  syntax_asdl::suffix_op__PatSub* patsub_op = nullptr;
  suffix_op_t* temp = nullptr;
  StackRoots _roots({&part, &tok, &arg_word, &UP_arg_word, &arg, &patsub_op, &temp});

  part = this->_ParseVarOf();
  this->_Peek();
  if (this->token_type == Id::Right_DollarBrace) {
    return part;
  }
  op_kind = this->token_kind;
  if (op_kind == Kind::VTest) {
    tok = this->cur_token;
    arg_word = this->_ReadVarOpArg(arg_lex_mode);
    if (this->token_type != Id::Right_DollarBrace) {
      p_die(str1457, this->cur_token);
    }
    part->suffix_op = Alloc<suffix_op::Unary>(tok, arg_word);
  }
  else {
    if (op_kind == Kind::VOpOil) {
      tok = this->cur_token;
      arg_word = this->_ReadVarOpArg(arg_lex_mode);
      if (this->token_type != Id::Right_DollarBrace) {
        p_die(str1458, this->cur_token);
      }
      UP_arg_word = arg_word;
      switch (arg_word->tag_()) {
        case rhs_word_e::Empty: {
          ;  // pass
        }
          break;
        case rhs_word_e::Compound: {
          compound_word* arg_word = static_cast<compound_word*>(UP_arg_word);
          Tuple3<bool, Str*, bool> tup0 = word_::StaticEval(arg_word);
          ok = tup0.at0();
          arg = tup0.at1();
          quoted = tup0.at2();
          if ((!ok or quoted)) {
            p_die(str1459, Alloc<loc::Word>(arg_word));
          }
        }
          break;
      }
      part->suffix_op = Alloc<suffix_op::Static>(tok, arg);
    }
    else {
      if (op_kind == Kind::VOp0) {
        part->suffix_op = this->cur_token;
        this->_Next(lex_mode_e::VSub_2);
        this->_Peek();
      }
      else {
        if (op_kind == Kind::VOp1) {
          tok = this->cur_token;
          arg_word = this->_ReadVarOpArg(lex_mode_e::VSub_ArgUnquoted);
          if (this->token_type != Id::Right_DollarBrace) {
            p_die(str1460, this->cur_token);
          }
          part->suffix_op = Alloc<suffix_op::Unary>(tok, arg_word);
        }
        else {
          if (op_kind == Kind::VOp2) {
            if (this->token_type == Id::VOp2_Slash) {
              patsub_op = this->_ReadPatSubVarOp();
              temp = static_cast<suffix_op_t*>(patsub_op);
              part->suffix_op = temp;
            }
            else {
              if (this->token_type == Id::VOp2_Colon) {
                part->suffix_op = this->_ReadSliceVarOp();
                if (this->token_type != Id::Arith_RBrace) {
                  p_die(str1461, this->cur_token);
                }
              }
              else {
                p_die(StrFormat("Unexpected token in ${} (%s)", str1463), this->cur_token);
              }
            }
          }
          else {
            if (op_kind == Kind::VOp3) {
              if (allow_query) {
                part->suffix_op = this->cur_token;
                this->_Next(lex_mode_e::VSub_2);
                this->_Peek();
              }
              else {
                p_die(StrFormat("Unexpected token in ${} (%s)", str1465), this->cur_token);
              }
            }
          }
        }
      }
    }
  }
  if ((this->token_type != Id::Right_DollarBrace && this->token_type != Id::Arith_RBrace)) {
    p_die(str1466, this->cur_token);
  }
  return part;
}

Tuple2<syntax_asdl::braced_var_sub*, syntax_asdl::Token*> WordParser::ReadBracedVarSub(syntax_asdl::Token* left_token) {
  syntax_asdl::braced_var_sub* part = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&left_token, &part, &last_token});

  part = this->_ReadBracedVarSub(left_token, false);
  last_token = this->cur_token;
  return Tuple2<syntax_asdl::braced_var_sub*, syntax_asdl::Token*>(part, last_token);
}

syntax_asdl::braced_var_sub* WordParser::_ReadBracedVarSub(syntax_asdl::Token* left_token, bool d_quoted) {
  types_asdl::lex_mode_t arg_lex_mode;
  int ty;
  syntax_asdl::Token* first_tok = nullptr;
  int next_id;
  syntax_asdl::braced_var_sub* part = nullptr;
  StackRoots _roots({&left_token, &first_tok, &part});

  if (d_quoted) {
    arg_lex_mode = lex_mode_e::VSub_ArgDQ;
  }
  else {
    arg_lex_mode = lex_mode_e::VSub_ArgUnquoted;
  }
  this->_Next(lex_mode_e::VSub_1);
  this->_Peek();
  ty = this->token_type;
  first_tok = this->cur_token;
  if (ty == Id::VSub_Pound) {
    next_id = this->lexer->LookPastSpace(lex_mode_e::VSub_1);
    if ((next_id != Id::Unknown_Tok && next_id != Id::Right_DollarBrace)) {
      this->_Next(lex_mode_e::VSub_1);
      part = this->_ParseVarOf();
      this->_Peek();
      if (this->token_type != Id::Right_DollarBrace) {
        p_die(str1467, this->cur_token);
      }
      part->prefix_op = first_tok;
    }
    else {
      part = this->_ParseVarExpr(arg_lex_mode);
    }
  }
  else {
    if (ty == Id::VSub_Bang) {
      next_id = this->lexer->LookPastSpace(lex_mode_e::VSub_1);
      if ((next_id != Id::Unknown_Tok && next_id != Id::Right_DollarBrace)) {
        this->_Next(lex_mode_e::VSub_1);
        part = this->_ParseVarExpr(arg_lex_mode, true);
        part->prefix_op = first_tok;
      }
      else {
        part = this->_ParseVarExpr(arg_lex_mode);
      }
    }
    else {
      if (ty == Id::VSub_Dot) {
        p_die(str1468, this->cur_token);
      }
      else {
        if (this->token_kind == Kind::VSub) {
          part = this->_ParseVarExpr(arg_lex_mode);
        }
        else {
          p_die(str1469, this->cur_token);
        }
      }
    }
  }
  part->left = left_token;
  part->right = this->cur_token;
  return part;
}

syntax_asdl::single_quoted* WordParser::_ReadSingleQuoted(syntax_asdl::Token* left_token, types_asdl::lex_mode_t lex_mode) {
  List<syntax_asdl::Token*>* tokens = nullptr;
  syntax_asdl::Token* right_quote = nullptr;
  syntax_asdl::single_quoted* node = nullptr;
  StackRoots _roots({&left_token, &tokens, &right_quote, &node});

  tokens = Alloc<List<syntax_asdl::Token*>>();
  this->ReadSingleQuoted(lex_mode, left_token, tokens, false);
  right_quote = this->cur_token;
  node = Alloc<single_quoted>(left_token, tokens, right_quote);
  return node;
}

syntax_asdl::Token* WordParser::ReadSingleQuoted(types_asdl::lex_mode_t lex_mode, syntax_asdl::Token* left_token, List<syntax_asdl::Token*>* tokens, bool is_oil_expr) {
  bool no_backslashes;
  int expected_end_tokens;
  int num_end_tokens;
  syntax_asdl::Token* tok = nullptr;
  StackRoots _roots({&left_token, &tokens, &tok});

  no_backslashes = (is_oil_expr and left_token->id == Id::Left_SingleQuote);
  expected_end_tokens = (left_token->id == Id::Left_TSingleQuote || left_token->id == Id::Left_RTSingleQuote || left_token->id == Id::Left_DollarTSingleQuote) ? 3 : 1;
  num_end_tokens = 0;
  while (num_end_tokens < expected_end_tokens) {
    this->_Next(lex_mode);
    this->_Peek();
    if ((this->token_kind == Kind::Lit || this->token_kind == Kind::Char)) {
      tok = this->cur_token;
      if ((no_backslashes and str_contains(tok->tval, str1470))) {
        p_die(str1471, tok);
      }
      if (is_oil_expr) {
        if (this->token_type == Id::Char_Octal3) {
          p_die(str1472, tok);
        }
        if ((this->token_type == Id::Char_Hex and this->cur_token->length != 4)) {
          p_die(str1473, tok);
        }
      }
      tokens->append(tok);
    }
    else {
      if (this->token_kind == Kind::Unknown) {
        tok = this->cur_token;
        if ((is_oil_expr or !this->parse_opts->parse_backslash())) {
          p_die(str1474, tok);
        }
        tokens->append(tok);
      }
      else {
        if (this->token_kind == Kind::Eof) {
          p_die(str1475, left_token);
        }
        else {
          if (this->token_kind == Kind::Right) {
            num_end_tokens += 1;
            tokens->append(this->cur_token);
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
    }
    if (this->token_kind != Kind::Right) {
      num_end_tokens = 0;
    }
  }
  if (expected_end_tokens == 1) {
    tokens->pop();
  }
  else {
    if (expected_end_tokens == 3) {
      tokens->pop();
      tokens->pop();
      tokens->pop();
    }
  }
  if ((left_token->id == Id::Left_TSingleQuote || left_token->id == Id::Left_RTSingleQuote || left_token->id == Id::Left_DollarTSingleQuote)) {
    word_compile::RemoveLeadingSpaceSQ(tokens);
  }
  return this->cur_token;
}

syntax_asdl::word_part_t* WordParser::_ReadDoubleQuotedLeftParts() {
  if ((this->token_type == Id::Left_DollarParen || this->token_type == Id::Left_Backtick)) {
    return this->_ReadCommandSub(this->token_type, true);
  }
  if (this->token_type == Id::Left_DollarBrace) {
    return this->_ReadBracedVarSub(this->cur_token, true);
  }
  if (this->token_type == Id::Left_DollarDParen) {
    return this->_ReadArithSub();
  }
  if (this->token_type == Id::Left_DollarBracket) {
    return this->_ReadExprSub(lex_mode_e::DQ);
  }
  assert(0);  // AssertionError
}

syntax_asdl::word_part_t* WordParser::_ReadUnquotedLeftParts(syntax_asdl::BoolOutParam* triple_out) {
  syntax_asdl::double_quoted* dq_part = nullptr;
  syntax_asdl::Token* left_dq_token = nullptr;
  types_asdl::lex_mode_t lexer_mode;
  int new_id;
  syntax_asdl::single_quoted* sq_part = nullptr;
  syntax_asdl::Token* left_sq_token = nullptr;
  StackRoots _roots({&triple_out, &dq_part, &left_dq_token, &sq_part, &left_sq_token});

  if ((this->token_type == Id::Left_DoubleQuote || this->token_type == Id::Left_DollarDoubleQuote)) {
    dq_part = this->_ReadDoubleQuoted(this->cur_token);
    if ((triple_out and len(dq_part->parts) == 0)) {
      if (str_equals(this->lexer->ByteLookAhead(), str1476)) {
        this->_Next(lex_mode_e::ShCommand);
        this->_Peek();
        left_dq_token = this->cur_token;
        left_dq_token->id = Id::Left_TDoubleQuote;
        triple_out->b = true;
        return this->_ReadDoubleQuoted(left_dq_token);
      }
    }
    return dq_part;
  }
  if ((this->token_type == Id::Left_SingleQuote || this->token_type == Id::Left_RSingleQuote || this->token_type == Id::Left_DollarSingleQuote)) {
    if (this->token_type == Id::Left_DollarSingleQuote) {
      lexer_mode = lex_mode_e::SQ_C;
      new_id = Id::Left_DollarTSingleQuote;
    }
    else {
      lexer_mode = lex_mode_e::SQ_Raw;
      new_id = Id::Left_TSingleQuote;
    }
    sq_part = this->_ReadSingleQuoted(this->cur_token, lexer_mode);
    if ((triple_out and len(sq_part->tokens) == 0)) {
      if (str_equals(this->lexer->ByteLookAhead(), str1477)) {
        this->_Next(lex_mode_e::ShCommand);
        this->_Peek();
        left_sq_token = this->cur_token;
        left_sq_token->id = new_id;
        triple_out->b = true;
        return this->_ReadSingleQuoted(left_sq_token, lexer_mode);
      }
    }
    return sq_part;
  }
  if ((this->token_type == Id::Left_DollarParen || this->token_type == Id::Left_Backtick || this->token_type == Id::Left_ProcSubIn || this->token_type == Id::Left_ProcSubOut)) {
    return this->_ReadCommandSub(this->token_type, false);
  }
  if (this->token_type == Id::Left_DollarBrace) {
    return this->_ReadBracedVarSub(this->cur_token, false);
  }
  if (this->token_type == Id::Left_DollarDParen) {
    return this->_ReadArithSub();
  }
  if (this->token_type == Id::Left_DollarBracket) {
    return this->_ReadExprSub(lex_mode_e::ShCommand);
  }
  assert(0);  // AssertionError
}

syntax_asdl::word_part__ExtGlob* WordParser::_ReadExtGlob() {
  syntax_asdl::Token* left_token = nullptr;
  List<syntax_asdl::compound_word*>* arms = nullptr;
  List<int>* spids = nullptr;
  bool read_word;
  syntax_asdl::compound_word* w = nullptr;
  syntax_asdl::word_part__ExtGlob* part = nullptr;
  StackRoots _roots({&left_token, &arms, &spids, &w, &part});

  left_token = this->cur_token;
  arms = Alloc<List<syntax_asdl::compound_word*>>();
  spids = Alloc<List<int>>();
  spids->append(left_token->span_id);
  this->lexer->PushHint(Id::Op_RParen, Id::Right_ExtGlob);
  this->_Next(lex_mode_e::ExtGlob);
  read_word = false;
  while (true) {
    this->_Peek();
    if (this->token_type == Id::Right_ExtGlob) {
      if (!read_word) {
        arms->append(Alloc<compound_word>(Alloc<List<syntax_asdl::word_part_t*>>()));
      }
      spids->append(this->cur_token->span_id);
      break;
    }
    else {
      if (this->token_type == Id::Op_Pipe) {
        if (!read_word) {
          arms->append(Alloc<compound_word>(Alloc<List<syntax_asdl::word_part_t*>>()));
        }
        read_word = false;
        this->_Next(lex_mode_e::ExtGlob);
      }
      else {
        if ((this->token_kind == Kind::Lit || this->token_kind == Kind::Left || this->token_kind == Kind::VSub || this->token_kind == Kind::ExtGlob)) {
          w = this->_ReadCompoundWord(lex_mode_e::ExtGlob);
          arms->append(w);
          read_word = true;
        }
        else {
          if (this->token_kind == Kind::Eof) {
            p_die(str1478, left_token);
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
    }
  }
  part = Alloc<word_part::ExtGlob>(left_token, arms);
  part->spids->extend(spids);
  return part;
}

void WordParser::_ReadLikeDQ(syntax_asdl::Token* left_token, bool is_oil_expr, List<syntax_asdl::word_part_t*>* out_parts) {
  int expected_end_tokens;
  int num_end_tokens;
  syntax_asdl::Token* tok = nullptr;
  Str* ch = nullptr;
  syntax_asdl::word_part_t* part = nullptr;
  StackRoots _roots({&left_token, &out_parts, &tok, &ch, &part});

  if (left_token) {
    expected_end_tokens = left_token->id == Id::Left_TDoubleQuote ? 3 : 1;
  }
  else {
    expected_end_tokens = 1000;
  }
  num_end_tokens = 0;
  while (num_end_tokens < expected_end_tokens) {
    this->_Next(lex_mode_e::DQ);
    this->_Peek();
    if (this->token_kind == Kind::Lit) {
      if (this->token_type == Id::Lit_EscapedChar) {
        tok = this->cur_token;
        ch = lexer::TokenSliceLeft(tok, 1);
        part = Alloc<word_part::EscapedLiteral>(tok, ch);
      }
      else {
        if (this->token_type == Id::Lit_BadBackslash) {
          if ((is_oil_expr or !this->parse_opts->parse_backslash())) {
            p_die(str1479, this->cur_token);
          }
        }
        else {
          if (this->token_type == Id::Lit_Dollar) {
            if ((is_oil_expr or !this->parse_opts->parse_dollar())) {
              p_die(str1480, this->cur_token);
            }
          }
        }
        part = this->cur_token;
      }
      out_parts->append(part);
    }
    else {
      if (this->token_kind == Kind::Left) {
        if ((this->token_type == Id::Left_Backtick and is_oil_expr)) {
          p_die(str1481, this->cur_token);
        }
        part = this->_ReadDoubleQuotedLeftParts();
        out_parts->append(part);
      }
      else {
        if (this->token_kind == Kind::VSub) {
          tok = this->cur_token;
          part = Alloc<simple_var_sub>(tok, lexer::TokenSliceLeft(tok, 1));
          out_parts->append(part);
        }
        else {
          if (this->token_kind == Kind::Right) {
            if (left_token) {
              num_end_tokens += 1;
            }
            out_parts->append(this->cur_token);
          }
          else {
            if (this->token_kind == Kind::Eof) {
              if (left_token) {
                p_die(str1482, left_token);
              }
              else {
                break;
              }
            }
            else {
              assert(0);  // AssertionError
            }
          }
        }
      }
    }
    if (this->token_kind != Kind::Right) {
      num_end_tokens = 0;
    }
  }
  if (expected_end_tokens == 1) {
    out_parts->pop();
  }
  else {
    if (expected_end_tokens == 3) {
      out_parts->pop();
      out_parts->pop();
      out_parts->pop();
    }
  }
  if ((left_token and left_token->id == Id::Left_TDoubleQuote)) {
    word_compile::RemoveLeadingSpaceDQ(out_parts);
  }
}

syntax_asdl::double_quoted* WordParser::_ReadDoubleQuoted(syntax_asdl::Token* left_token) {
  List<syntax_asdl::word_part_t*>* parts = nullptr;
  syntax_asdl::Token* right_quote = nullptr;
  StackRoots _roots({&left_token, &parts, &right_quote});

  parts = Alloc<List<syntax_asdl::word_part_t*>>();
  this->_ReadLikeDQ(left_token, false, parts);
  right_quote = this->cur_token;
  return Alloc<double_quoted>(left_token, parts, right_quote);
}

syntax_asdl::Token* WordParser::ReadDoubleQuoted(syntax_asdl::Token* left_token, List<syntax_asdl::word_part_t*>* parts) {
  StackRoots _roots({&left_token, &parts});

  this->_ReadLikeDQ(left_token, true, parts);
  return this->cur_token;
}

syntax_asdl::command_sub* WordParser::_ReadCommandSub(int left_id, bool d_quoted) {
  syntax_asdl::Token* left_token = nullptr;
  int right_id;
  cmd_parse::CommandParser* c_parser = nullptr;
  syntax_asdl::command_t* node = nullptr;
  syntax_asdl::Token* right_token = nullptr;
  List<Str*>* parts = nullptr;
  Str* code_str = nullptr;
  alloc::Arena* arena = nullptr;
  reader::FileLineReader* line_reader = nullptr;
  syntax_asdl::source__Reparsed* src = nullptr;
  StackRoots _roots({&left_token, &c_parser, &node, &right_token, &parts, &code_str, &arena, &line_reader, &src});

  left_token = this->cur_token;
  if ((left_id == Id::Left_DollarParen || left_id == Id::Left_AtParen || left_id == Id::Left_ProcSubIn || left_id == Id::Left_ProcSubOut)) {
    this->_Next(lex_mode_e::ShCommand);
    right_id = Id::Eof_RParen;
    this->lexer->PushHint(Id::Op_RParen, right_id);
    c_parser = this->parse_ctx->MakeParserForCommandSub(this->line_reader, this->lexer, right_id);
    node = c_parser->ParseCommandSub();
    right_token = c_parser->w_parser->cur_token;
  }
  else {
    if ((left_id == Id::Left_Backtick and this->parse_ctx->one_pass_parse)) {
      right_id = Id::Eof_Backtick;
      this->lexer->PushHint(Id::Left_Backtick, right_id);
      c_parser = this->parse_ctx->MakeParserForCommandSub(this->line_reader, this->lexer, right_id);
      node = c_parser->ParseCommandSub();
      right_token = c_parser->w_parser->cur_token;
    }
    else {
      if (left_id == Id::Left_Backtick) {
        if (!this->parse_opts->parse_backticks()) {
          p_die(str1483, left_token);
        }
        this->_Next(lex_mode_e::Backtick);
        parts = Alloc<List<Str*>>();
        while (true) {
          this->_Peek();
          if (this->token_type == Id::Backtick_Quoted) {
            parts->append(this->cur_token->tval->slice(1));
          }
          else {
            if (this->token_type == Id::Backtick_DoubleQuote) {
              if (d_quoted) {
                parts->append(this->cur_token->tval->slice(1));
              }
              else {
                parts->append(this->cur_token->tval);
              }
            }
            else {
              if (this->token_type == Id::Backtick_Other) {
                parts->append(this->cur_token->tval);
              }
              else {
                if (this->token_type == Id::Backtick_Right) {
                  break;
                }
                else {
                  if (this->token_type == Id::Eof_Real) {
                    p_die(str1484, left_token);
                  }
                  else {
                    assert(0);  // AssertionError
                  }
                }
              }
            }
          }
          this->_Next(lex_mode_e::Backtick);
        }
        right_token = this->cur_token;
        code_str = str1485->join(parts);
        arena = this->parse_ctx->arena;
        line_reader = reader::StringLineReader(code_str, arena);
        c_parser = this->parse_ctx->MakeOshParser(line_reader);
        src = Alloc<source::Reparsed>(str1486, left_token, right_token);
        {  // with
          alloc::ctx_Location ctx{arena, src};

          node = c_parser->ParseCommandSub();
        }
      }
      else {
        assert(0);  // AssertionError
      }
    }
  }
  return Alloc<command_sub>(left_token, node, right_token);
}

syntax_asdl::word_part__ExprSub* WordParser::_ReadExprSub(types_asdl::lex_mode_t lex_mode) {
  syntax_asdl::Token* left_token = nullptr;
  syntax_asdl::expr_t* enode = nullptr;
  syntax_asdl::word_part__ExprSub* node = nullptr;
  StackRoots _roots({&left_token, &enode, &node});

  left_token = this->cur_token;
  this->_Next(lex_mode_e::Expr);
  Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> tup1 = this->parse_ctx->ParseOilExpr(this->lexer, grammar_nt::oil_expr_sub);
  enode = tup1.at0();
  this->_Next(lex_mode);
  node = Alloc<word_part::ExprSub>(left_token, enode);
  return node;
}

syntax_asdl::command__VarDecl* WordParser::ParseVarDecl(syntax_asdl::Token* kw_token) {
  syntax_asdl::command__VarDecl* enode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&kw_token, &enode, &last_token});

  this->_Next(lex_mode_e::Expr);
  Tuple2<syntax_asdl::command__VarDecl*, syntax_asdl::Token*> tup2 = this->parse_ctx->ParseVarDecl(kw_token, this->lexer);
  enode = tup2.at0();
  last_token = tup2.at1();
  if (last_token->id == Id::Op_RBrace) {
    last_token->id = Id::Lit_RBrace;
  }
  this->buffered_word = last_token;
  this->_Next(lex_mode_e::ShCommand);
  return enode;
}

syntax_asdl::command__PlaceMutation* WordParser::ParsePlaceMutation(syntax_asdl::Token* kw_token, cmd_parse::VarChecker* var_checker) {
  syntax_asdl::command__PlaceMutation* enode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  syntax_asdl::place_expr_t* UP_place = nullptr;
  StackRoots _roots({&kw_token, &var_checker, &enode, &last_token, &UP_place});

  this->_Next(lex_mode_e::Expr);
  Tuple2<syntax_asdl::command__PlaceMutation*, syntax_asdl::Token*> tup3 = this->parse_ctx->ParsePlaceMutation(kw_token, this->lexer);
  enode = tup3.at0();
  last_token = tup3.at1();
  if (last_token->id == Id::Op_RBrace) {
    last_token->id = Id::Lit_RBrace;
  }
  for (ListIter<syntax_asdl::place_expr_t*> it(enode->lhs); !it.Done(); it.Next()) {
    syntax_asdl::place_expr_t* place = it.Value();
    StackRoots _for({&place  });
    UP_place = place;
    switch (place->tag_()) {
      case place_expr_e::Var: {
        place_expr__Var* place = static_cast<place_expr__Var*>(UP_place);
        var_checker->Check(kw_token->id, place->name);
      }
        break;
    }
  }
  this->buffered_word = last_token;
  this->_Next(lex_mode_e::ShCommand);
  return enode;
}

syntax_asdl::expr_t* WordParser::ParseBareDecl() {
  syntax_asdl::expr_t* enode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&enode, &last_token});

  this->_Next(lex_mode_e::Expr);
  this->_Peek();
  Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> tup4 = this->parse_ctx->ParseOilExpr(this->lexer, grammar_nt::command_expr);
  enode = tup4.at0();
  last_token = tup4.at1();
  if (last_token->id == Id::Op_RBrace) {
    last_token->id = Id::Lit_RBrace;
  }
  this->buffered_word = last_token;
  this->_Next(lex_mode_e::ShCommand);
  return enode;
}

syntax_asdl::expr_t* WordParser::ParseCommandExpr() {
  syntax_asdl::expr_t* enode = nullptr;
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&enode, &last_token});

  Tuple2<syntax_asdl::expr_t*, syntax_asdl::Token*> tup5 = this->parse_ctx->ParseOilExpr(this->lexer, grammar_nt::command_expr);
  enode = tup5.at0();
  last_token = tup5.at1();
  if (last_token->id == Id::Op_RBrace) {
    last_token->id = Id::Lit_RBrace;
  }
  this->buffered_word = last_token;
  return enode;
}

void WordParser::ParseProc(syntax_asdl::command__Proc* node) {
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&node, &last_token});

  this->_Next(lex_mode_e::ShCommand);
  this->_Peek();
  if (this->token_type != Id::Lit_Chars) {
    p_die(StrFormat("Invalid proc name %s", ui::PrettyToken(this->cur_token, this->arena)), this->cur_token);
  }
  node->name = this->cur_token;
  last_token = this->parse_ctx->ParseProc(this->lexer, node);
  if (last_token->id == Id::Op_LBrace) {
    last_token->id = Id::Lit_LBrace;
  }
  this->buffered_word = last_token;
  this->_Next(lex_mode_e::ShCommand);
}

void WordParser::ParseImport(syntax_asdl::command__Import* node) {
  syntax_asdl::Token* last_token = nullptr;
  StackRoots _roots({&node, &last_token});

  last_token = this->parse_ctx->ParseImport(this->lexer, node);
  this->buffered_word = last_token;
}

syntax_asdl::arith_expr_t* WordParser::_ReadArithExpr(int end_id) {
  syntax_asdl::arith_expr_t* anode = nullptr;
  int cur_id;
  StackRoots _roots({&anode});

  anode = this->a_parser->Parse();
  cur_id = this->a_parser->CurrentId();
  if ((end_id != Id::Undefined_Tok and cur_id != end_id)) {
    p_die(StrFormat("Unexpected token after arithmetic expression (%s != %s)", ui::PrettyId(cur_id), ui::PrettyId(end_id)), Alloc<loc::Word>(this->a_parser->cur_word));
  }
  return anode;
}

syntax_asdl::word_part__ArithSub* WordParser::_ReadArithSub() {
  int left_span_id;
  syntax_asdl::arith_expr_t* anode = nullptr;
  int right_span_id;
  syntax_asdl::word_part__ArithSub* node = nullptr;
  StackRoots _roots({&anode, &node});

  left_span_id = this->cur_token->span_id;
  this->lexer->PushHint(Id::Op_RParen, Id::Right_DollarDParen);
  this->_Next(lex_mode_e::Arith);
  anode = this->_ReadArithExpr(Id::Arith_RParen);
  this->_Next(lex_mode_e::ShCommand);
  this->_Peek();
  if (this->token_type != Id::Right_DollarDParen) {
    p_die(str1489, this->cur_token);
  }
  right_span_id = this->cur_token->span_id;
  node = Alloc<word_part::ArithSub>(anode);
  node->spids->append(left_span_id);
  node->spids->append(right_span_id);
  return node;
}

syntax_asdl::arith_expr_t* WordParser::ReadDParen() {
  syntax_asdl::arith_expr_t* anode = nullptr;
  StackRoots _roots({&anode});

  this->lexer->PushHint(Id::Op_RParen, Id::Op_DRightParen);
  this->_Next(lex_mode_e::Arith);
  anode = this->_ReadArithExpr(Id::Arith_RParen);
  this->_Next(lex_mode_e::ShCommand);
  this->_Peek();
  if (this->token_type != Id::Op_DRightParen) {
    p_die(str1490, this->cur_token);
  }
  this->_Next(lex_mode_e::ShCommand);
  return anode;
}

void WordParser::_NextNonSpace() {
  while (true) {
    this->_Next(lex_mode_e::Arith);
    this->_Peek();
    if ((this->token_kind != Kind::Ignored && this->token_kind != Kind::WS)) {
      break;
    }
  }
}

syntax_asdl::command__ForExpr* WordParser::ReadForExpression() {
  int cur_id;
  syntax_asdl::arith_expr_t* init_node = nullptr;
  syntax_asdl::arith_expr_t* cond_node = nullptr;
  syntax_asdl::arith_expr_t* update_node = nullptr;
  syntax_asdl::command__ForExpr* node = nullptr;
  StackRoots _roots({&init_node, &cond_node, &update_node, &node});

  this->_NextNonSpace();
  this->_Peek();
  cur_id = this->token_type;
  if (cur_id == Id::Arith_Semi) {
    init_node = nullptr;
  }
  else {
    init_node = this->a_parser->Parse();
    cur_id = this->a_parser->CurrentId();
  }
  this->_NextNonSpace();
  if (cur_id != Id::Arith_Semi) {
    p_die(str1491, Alloc<loc::Word>(this->a_parser->cur_word));
  }
  this->_Peek();
  cur_id = this->token_type;
  if (cur_id == Id::Arith_Semi) {
    cond_node = nullptr;
  }
  else {
    cond_node = this->a_parser->Parse();
    cur_id = this->a_parser->CurrentId();
  }
  this->_NextNonSpace();
  if (cur_id != Id::Arith_Semi) {
    p_die(str1492, Alloc<loc::Word>(this->a_parser->cur_word));
  }
  this->_Peek();
  cur_id = this->token_type;
  if (cur_id == Id::Arith_RParen) {
    update_node = nullptr;
  }
  else {
    update_node = this->_ReadArithExpr(Id::Arith_RParen);
  }
  this->_NextNonSpace();
  this->_Peek();
  if (this->token_type != Id::Arith_RParen) {
    p_die(str1493, this->cur_token);
  }
  this->_Next(lex_mode_e::ShCommand);
  node = command::ForExpr::Create();
  node->init = init_node;
  node->cond = cond_node;
  node->update = update_node;
  return node;
}

syntax_asdl::word_part_t* WordParser::_ReadArrayLiteral() {
  syntax_asdl::Token* left_token = nullptr;
  int paren_spid;
  word_parse::WordParser* w_parser = nullptr;
  List<syntax_asdl::compound_word*>* words = nullptr;
  bool done;
  syntax_asdl::word_t* w = nullptr;
  List<syntax_asdl::word_t*>* no_words = nullptr;
  syntax_asdl::sh_array_literal* node = nullptr;
  List<syntax_asdl::assoc_pair*>* pairs = nullptr;
  syntax_asdl::assoc_pair* pair = nullptr;
  int n;
  syntax_asdl::compound_word* w2 = nullptr;
  syntax_asdl::word_part__AssocArrayLiteral* node2 = nullptr;
  List<syntax_asdl::word_t*>* words2 = nullptr;
  List<syntax_asdl::word_t*>* words3 = nullptr;
  StackRoots _roots({&left_token, &w_parser, &words, &w, &no_words, &node, &pairs, &pair, &w2, &node2, &words2, &words3});

  this->_Next(lex_mode_e::ShCommand);
  this->_Peek();
  if (this->cur_token->id != Id::Op_LParen) {
    p_die(str1494, this->cur_token);
  }
  left_token = this->cur_token;
  paren_spid = this->cur_token->span_id;
  w_parser = this->parse_ctx->MakeWordParser(this->lexer, this->line_reader);
  words = Alloc<List<syntax_asdl::compound_word*>>();
  done = false;
  while (!done) {
    w = w_parser->ReadWord(lex_mode_e::ShCommand);
    switch (w->tag_()) {
      case word_e::Token: {
        Token* tok = static_cast<Token*>(w);
        if (tok->id == Id::Right_ShArrayLiteral) {
          done = true;
        }
        else {
          if (tok->id == Id::Op_Newline) {
            continue;
          }
          else {
            p_die(str1495, Alloc<loc::Word>(w));
          }
        }
      }
        break;
      case word_e::Compound: {
        words->append(static_cast<compound_word*>(w));
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
  }
  if (len(words) == 0) {
    no_words = Alloc<List<syntax_asdl::word_t*>>();
    node = Alloc<sh_array_literal>(left_token, no_words);
    return node;
  }
  pairs = Alloc<List<syntax_asdl::assoc_pair*>>();
  pair = word_::DetectAssocPair(words->index_(0));
  if (pair) {
    pairs->append(pair);
    n = len(words);
    for (int i = 1; i < n; ++i) {
      w2 = words->index_(i);
      pair = word_::DetectAssocPair(w2);
      if (!pair) {
        p_die(str1496, Alloc<loc::Word>(w2));
      }
      pairs->append(pair);
    }
    node2 = Alloc<word_part::AssocArrayLiteral>(left_token, pairs);
    node2->spids->append(paren_spid);
    return node2;
  }
  words2 = braces::BraceDetectAll(words);
  words3 = word_::TildeDetectAll(words2);
  node = Alloc<sh_array_literal>(left_token, words3);
  return node;
}

void WordParser::_ParseInlineCallArgs(syntax_asdl::ArgList* arg_list) {
  StackRoots _roots({&arg_list});

  arg_list->left = this->cur_token;
  this->parse_ctx->ParseOilArgList(this->lexer, arg_list);
}

syntax_asdl::ArgList* WordParser::ParseProcCallArgs() {
  syntax_asdl::ArgList* arg_list = nullptr;
  StackRoots _roots({&arg_list});

  this->lexer->MaybeUnreadOne();
  arg_list = ArgList::Create();
  arg_list->left = this->cur_token;
  this->parse_ctx->ParseOilArgList(this->lexer, arg_list);
  return arg_list;
}

bool WordParser::_MaybeReadWholeWord(bool is_first, types_asdl::lex_mode_t lex_mode, List<syntax_asdl::word_part_t*>* parts) {
  bool done;
  syntax_asdl::Token* tok = nullptr;
  Str* ch = nullptr;
  syntax_asdl::word_part_t* part = nullptr;
  int next_id;
  syntax_asdl::word_part_t* part2 = nullptr;
  syntax_asdl::Token* splice_tok = nullptr;
  syntax_asdl::ArgList* arglist = nullptr;
  StackRoots _roots({&parts, &tok, &ch, &part, &part2, &splice_tok, &arglist});

  done = false;
  if (this->token_type == Id::Lit_EscapedChar) {
    tok = this->cur_token;
    ch = lexer::TokenSliceLeft(tok, 1);
    if (!this->parse_opts->parse_backslash()) {
      if (!pyutil::IsValidCharEscape(ch)) {
        p_die(str1497, this->cur_token);
      }
    }
    part = Alloc<word_part::EscapedLiteral>(this->cur_token, ch);
  }
  else {
    part = this->cur_token;
  }
  if ((is_first and this->token_type == Id::Lit_VarLike)) {
    parts->append(part);
    next_id = this->lexer->LookPastSpace(lex_mode);
    if (next_id == Id::Op_LParen) {
      this->lexer->PushHint(Id::Op_RParen, Id::Right_ShArrayLiteral);
      part2 = this->_ReadArrayLiteral();
      parts->append(part2);
      this->_Next(lex_mode);
      this->_Peek();
      if (!list_contains(KINDS_THAT_END_WORDS, this->token_kind)) {
        p_die(str1498, this->cur_token);
      }
      done = true;
    }
  }
  else {
    if ((is_first and (this->parse_opts->parse_at() and this->token_type == Id::Lit_Splice))) {
      splice_tok = this->cur_token;
      next_id = this->lexer->LookAheadOne(lex_mode);
      if (next_id == Id::Op_LParen) {
        arglist = ArgList::Create();
        this->_ParseInlineCallArgs(arglist);
        part2 = Alloc<word_part::FuncCall>(splice_tok, arglist);
      }
      else {
        part2 = Alloc<word_part::Splice>(splice_tok, lexer::TokenSliceLeft(splice_tok, 1));
      }
      parts->append(part2);
      this->_Next(lex_mode);
      this->_Peek();
      if (!list_contains(KINDS_THAT_END_WORDS, this->token_kind)) {
        p_die(str1499, this->cur_token);
      }
      done = true;
    }
    else {
      if ((is_first and (this->parse_opts->parse_at() and this->token_type == Id::Lit_AtLBraceDot))) {
        p_die(str1500, this->cur_token);
      }
      else {
        if ((is_first and (this->parse_opts->parse_at_all() and this->token_type == Id::Lit_At))) {
          p_die(str1501, this->cur_token);
        }
        else {
          parts->append(part);
        }
      }
    }
  }
  return done;
}

syntax_asdl::compound_word* WordParser::_ReadCompoundWord(types_asdl::lex_mode_t lex_mode) {
  return this->_ReadCompoundWord3(lex_mode, Id::Undefined_Tok, true);
}

syntax_asdl::compound_word* WordParser::_ReadCompoundWord3(types_asdl::lex_mode_t lex_mode, int eof_type, bool empty_ok) {
  syntax_asdl::compound_word* w = nullptr;
  int num_parts;
  int brace_count;
  bool done;
  syntax_asdl::BoolOutParam* is_triple_quoted = nullptr;
  bool allow_done;
  Str* next_byte = nullptr;
  syntax_asdl::Token* vsub_token = nullptr;
  syntax_asdl::word_part_t* part = nullptr;
  int next_id;
  syntax_asdl::ArgList* arglist = nullptr;
  syntax_asdl::command_sub* cs_part = nullptr;
  bool try_triple_quote;
  StackRoots _roots({&w, &is_triple_quoted, &next_byte, &vsub_token, &part, &arglist, &cs_part});

  w = Alloc<compound_word>(Alloc<List<syntax_asdl::word_part_t*>>());
  num_parts = 0;
  brace_count = 0;
  done = false;
  is_triple_quoted = nullptr;
  while (!done) {
    this->_Peek();
    allow_done = (empty_ok or num_parts != 0);
    if ((allow_done and this->token_type == eof_type)) {
      done = true;
    }
    else {
      if ((this->token_kind == Kind::Lit || this->token_kind == Kind::History || this->token_kind == Kind::KW || this->token_kind == Kind::ControlFlow || this->token_kind == Kind::BoolUnary || this->token_kind == Kind::BoolBinary)) {
        if (this->token_type == Id::Lit_LBrace) {
          brace_count += 1;
        }
        else {
          if (this->token_type == Id::Lit_RBrace) {
            brace_count -= 1;
          }
          else {
            if (this->token_type == Id::Lit_Dollar) {
              if (!this->parse_opts->parse_dollar()) {
                if ((num_parts == 0 and lex_mode == lex_mode_e::ShCommand)) {
                  next_byte = this->lexer->ByteLookAhead();
                  if (str_equals(next_byte, str1502)) {
                    mylib::print_stderr(StrFormat("next_byte %r", next_byte));
                  }
                }
                p_die(str1504, this->cur_token);
              }
            }
          }
        }
        done = this->_MaybeReadWholeWord(num_parts == 0, lex_mode, w->parts);
      }
      else {
        if (this->token_kind == Kind::VSub) {
          vsub_token = this->cur_token;
          part = Alloc<simple_var_sub>(vsub_token, lexer::TokenSliceLeft(vsub_token, 1));
          if (this->token_type == Id::VSub_DollarName) {
            next_id = this->lexer->LookAheadOne(lex_mode);
            if (next_id == Id::Op_LParen) {
              arglist = ArgList::Create();
              this->_ParseInlineCallArgs(arglist);
              part = Alloc<word_part::FuncCall>(vsub_token, arglist);
            }
          }
          w->parts->append(part);
        }
        else {
          if (this->token_kind == Kind::ExtGlob) {
            if ((this->parse_opts->parse_at() and (this->token_type == Id::ExtGlob_At and num_parts == 0))) {
              cs_part = this->_ReadCommandSub(Id::Left_AtParen, false);
              cs_part->left_token->id = Id::Left_AtParen;
              part = cs_part;
              this->_Peek();
              if (!list_contains(KINDS_THAT_END_WORDS, this->token_kind)) {
                p_die(str1505, this->cur_token);
              }
              done = true;
            }
            else {
              part = this->_ReadExtGlob();
            }
            w->parts->append(part);
          }
          else {
            if (this->token_kind == Kind::Left) {
              try_triple_quote = (this->parse_opts->parse_triple_quote() and (lex_mode == lex_mode_e::ShCommand and num_parts == 0));
              if (try_triple_quote) {
                is_triple_quoted = Alloc<BoolOutParam>(false);
              }
              part = this->_ReadUnquotedLeftParts(is_triple_quoted);
              w->parts->append(part);
            }
            else {
              if (this->token_kind == Kind::Right) {
                if (this->token_type == Id::Right_DoubleQuote) {
                  ;  // pass
                }
                else {
                  if (this->token_type == Id::Right_Subshell) {
                    if (this->lexer->MaybeUnreadOne()) {
                      this->lexer->PushHint(Id::Op_RParen, Id::Right_Subshell);
                      this->_Next(lex_mode);
                    }
                    done = true;
                  }
                  else {
                    done = true;
                  }
                }
              }
              else {
                if (this->token_kind == Kind::Ignored) {
                  done = true;
                }
                else {
                  if ((this->token_type == Id::Op_RParen || this->token_type == Id::Eof_RParen)) {
                    if (this->lexer->MaybeUnreadOne()) {
                      if (this->token_type == Id::Eof_RParen) {
                        this->lexer->PushHint(Id::Op_RParen, Id::Eof_RParen);
                      }
                      this->_Next(lex_mode);
                    }
                  }
                  done = true;
                }
              }
            }
          }
        }
      }
    }
    if (!done) {
      this->_Next(lex_mode);
      num_parts += 1;
    }
  }
  if ((this->parse_opts->parse_brace() and (num_parts > 1 and brace_count != 0))) {
    p_die(str1506, Alloc<loc::Word>(w));
  }
  if ((is_triple_quoted and (is_triple_quoted->b and num_parts > 1))) {
    p_die(str1507, Alloc<loc::WordPart>(w->parts->index_(-1)));
  }
  return w;
}

Tuple2<syntax_asdl::word_t*, bool> WordParser::_ReadArithWord() {
  syntax_asdl::word_t* no_word = nullptr;
  syntax_asdl::compound_word* w = nullptr;
  StackRoots _roots({&no_word, &w});

  this->_Peek();
  if (this->token_kind == Kind::Unknown) {
    p_die(StrFormat("Unexpected token while parsing arithmetic: %r", lexer::TokenVal(this->cur_token)), this->cur_token);
  }
  else {
    if (this->token_kind == Kind::Eof) {
      return Tuple2<syntax_asdl::word_t*, bool>(static_cast<word_t*>(this->cur_token), false);
    }
    else {
      if (this->token_kind == Kind::Ignored) {
        this->_Next(lex_mode_e::Arith);
        no_word = nullptr;
        return Tuple2<syntax_asdl::word_t*, bool>(no_word, true);
      }
      else {
        if ((this->token_kind == Kind::Arith || this->token_kind == Kind::Right)) {
          this->_Next(lex_mode_e::Arith);
          return Tuple2<syntax_asdl::word_t*, bool>(static_cast<word_t*>(this->cur_token), false);
        }
        else {
          if ((this->token_kind == Kind::Lit || this->token_kind == Kind::Left || this->token_kind == Kind::VSub)) {
            w = this->_ReadCompoundWord(lex_mode_e::Arith);
            return Tuple2<syntax_asdl::word_t*, bool>(static_cast<word_t*>(w), false);
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
    }
  }
}

Tuple2<syntax_asdl::word_t*, bool> WordParser::_ReadWord(types_asdl::lex_mode_t lex_mode) {
  syntax_asdl::word_t* no_word = nullptr;
  syntax_asdl::compound_word* w = nullptr;
  StackRoots _roots({&no_word, &w});

  no_word = nullptr;
  this->_Peek();
  if (this->token_kind == Kind::Eof) {
    return Tuple2<syntax_asdl::word_t*, bool>(static_cast<word_t*>(this->cur_token), false);
  }
  else {
    if ((this->token_kind == Kind::Op || this->token_kind == Kind::Redir || this->token_kind == Kind::Arith)) {
      this->_Next(lex_mode);
      if (this->token_type == Id::Op_Newline) {
        if (this->multiline) {
          if (this->newline_state > 1) {
            p_die(str1509, this->cur_token);
          }
          return Tuple2<syntax_asdl::word_t*, bool>(no_word, true);
        }
        if (this->returned_newline) {
          return Tuple2<syntax_asdl::word_t*, bool>(no_word, true);
        }
      }
      return Tuple2<syntax_asdl::word_t*, bool>(static_cast<word_t*>(this->cur_token), false);
    }
    else {
      if (this->token_kind == Kind::Right) {
        if ((this->token_type != Id::Right_Subshell && this->token_type != Id::Right_ShFunction && this->token_type != Id::Right_CasePat && this->token_type != Id::Right_ShArrayLiteral)) {
          assert(0);  // AssertionError
        }
        this->_Next(lex_mode);
        return Tuple2<syntax_asdl::word_t*, bool>(static_cast<word_t*>(this->cur_token), false);
      }
      else {
        if ((this->token_kind == Kind::Ignored || this->token_kind == Kind::WS)) {
          this->_Next(lex_mode);
          return Tuple2<syntax_asdl::word_t*, bool>(no_word, true);
        }
        else {
          if ((this->token_kind == Kind::VSub || this->token_kind == Kind::Lit || this->token_kind == Kind::History || this->token_kind == Kind::Left || this->token_kind == Kind::KW || this->token_kind == Kind::ControlFlow || this->token_kind == Kind::BoolUnary || this->token_kind == Kind::BoolBinary || this->token_kind == Kind::ExtGlob)) {
            if (this->token_type == Id::Lit_Pound) {
              this->_Next(lex_mode_e::Comment);
              this->_Peek();
              return Tuple2<syntax_asdl::word_t*, bool>(no_word, true);
            }
            else {
              if (this->token_type == Id::Lit_TPound) {
                this->_Next(lex_mode_e::Comment);
                this->_Peek();
                if ((this->token_type == Id::Ignored_Comment and this->emit_doc_token)) {
                  return Tuple2<syntax_asdl::word_t*, bool>(static_cast<word_t*>(this->cur_token), false);
                }
                return Tuple2<syntax_asdl::word_t*, bool>(no_word, true);
              }
              else {
                if ((this->parse_opts->parse_raw_string() and (this->token_type == Id::Lit_Chars and str_equals(this->cur_token->tval, str1510)))) {
                  if (this->lexer->LookAheadOne(lex_mode_e::ShCommand) == Id::Left_SingleQuote) {
                    this->_Next(lex_mode_e::ShCommand);
                  }
                }
                w = this->_ReadCompoundWord(lex_mode);
                return Tuple2<syntax_asdl::word_t*, bool>(static_cast<word_t*>(w), false);
              }
            }
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
    }
  }
}

syntax_asdl::braced_var_sub* WordParser::ParseVarRef() {
  syntax_asdl::braced_var_sub* part = nullptr;
  StackRoots _roots({&part});

  this->_Next(lex_mode_e::VSub_1);
  this->_Peek();
  if (this->token_kind != Kind::VSub) {
    p_die(str1512, this->cur_token);
  }
  part = this->_ParseVarOf();
  part->left = part->token;
  part->right = part->token;
  this->_Peek();
  if (this->token_type != Id::Eof_Real) {
    p_die(str1513, this->cur_token);
  }
  return part;
}

int WordParser::LookPastSpace() {
  int id_;
  if (this->cur_token->id == Id::WS_Space) {
    id_ = this->lexer->LookPastSpace(lex_mode_e::ShCommand);
  }
  else {
    id_ = this->cur_token->id;
  }
  return id_;
}

bool WordParser::LookAheadFuncParens() {
  if (this->cur_token->id == Id::Op_LParen) {
    return this->lexer->LookAheadFuncParens(1);
  }
  else {
    if (this->cur_token->id == Id::WS_Space) {
      return this->lexer->LookAheadFuncParens(0);
    }
    else {
      return false;
    }
  }
}

syntax_asdl::word_t* WordParser::ReadWord(types_asdl::lex_mode_t lex_mode) {
  syntax_asdl::word_t* w = nullptr;
  bool need_more;
  StackRoots _roots({&w});

  if (this->buffered_word) {
    w = this->buffered_word;
    this->buffered_word = nullptr;
  }
  else {
    while (true) {
      if (lex_mode == lex_mode_e::Arith) {
        Tuple2<syntax_asdl::word_t*, bool> tup6 = this->_ReadArithWord();
        w = tup6.at0();
        need_more = tup6.at1();
      }
      else {
        if ((lex_mode == lex_mode_e::ShCommand || lex_mode == lex_mode_e::DBracket || lex_mode == lex_mode_e::BashRegex)) {
          Tuple2<syntax_asdl::word_t*, bool> tup7 = this->_ReadWord(lex_mode);
          w = tup7.at0();
          need_more = tup7.at1();
        }
        else {
          assert(0);  // AssertionError
        }
      }
      if (!need_more) {
        break;
      }
    }
  }
  this->returned_newline = word_::CommandId(w) == Id::Op_Newline;
  return w;
}

void WordParser::ReadHereDocBody(List<syntax_asdl::word_part_t*>* parts) {
  StackRoots _roots({&parts});

  this->_ReadLikeDQ(nullptr, false, parts);
}

syntax_asdl::compound_word* WordParser::ReadForPlugin() {
  syntax_asdl::compound_word* w = nullptr;
  StackRoots _roots({&w});

  w = Alloc<compound_word>(Alloc<List<syntax_asdl::word_part_t*>>());
  this->_ReadLikeDQ(nullptr, false, w->parts);
  return w;
}

void WordParser::EmitDocToken(bool b) {
  this->emit_doc_token = b;
}

void WordParser::Multiline(bool b) {
  this->multiline = b;
}

}  // define namespace word_parse

namespace grammar {  // define


Grammar::Grammar() 
    : header_(obj_header()) {
  this->symbol2number = Alloc<Dict<Str*, int>>();
  this->number2symbol = Alloc<Dict<int, Str*>>();
  this->states = Alloc<List<List<Tuple2<int, int>*>*>>();
  this->dfas = Alloc<Dict<int, Tuple2<List<List<Tuple2<int, int>*>*>*, Dict<int, int>*>*>>();
  this->labels = NewList<int>(std::initializer_list<int>{0});
  this->keywords = Alloc<Dict<Str*, int>>();
  this->tokens = Alloc<Dict<int, int>>();
  this->symbol2label = Alloc<Dict<Str*, int>>();
  this->start = 256;
}

}  // define namespace grammar

namespace pnode {  // define


PNode::PNode(int typ, syntax_asdl::Token* tok, List<pnode::PNode*>* children) 
    : header_(obj_header()) {
  this->typ = typ;
  this->tok = tok;
  this->children = children;
}

}  // define namespace pnode

namespace cgi {  // define


Str* escape(Str* s) {
  StackRoots _roots({&s});

  s = s->replace(str1522, str1523);
  s = s->replace(str1524, str1525);
  s = s->replace(str1526, str1527);
  return s;
}

}  // define namespace cgi

namespace os_path {  // define

Str* extsep = str1528;
Str* sep = str1529;

Str* join(Str* s1, Str* s2) {
  StackRoots _roots({&s1, &s2});

  if ((s2->startswith(str1530) or len(s1) == 0)) {
    return s2;
  }
  if (s1->endswith(str1531)) {
    return str_concat(s1, s2);
  }
  return StrFormat("%s/%s", s1, s2);
}

Tuple2<Str*, Str*> split(Str* p) {
  int i;
  Str* head = nullptr;
  Str* tail = nullptr;
  StackRoots _roots({&p, &head, &tail});

  i = (p->rfind(str1533) + 1);
  head = p->slice(0, i);
  tail = p->slice(i);
  head = rstrip_slashes(head);
  return Tuple2<Str*, Str*>(head, tail);
}

Tuple2<Str*, Str*> _splitext(Str* p, Str* sep, Str* extsep) {
  int sepIndex;
  int dotIndex;
  int filenameIndex;
  StackRoots _roots({&p, &sep, &extsep});

  sepIndex = p->rfind(sep);
  dotIndex = p->rfind(extsep);
  if (dotIndex > sepIndex) {
    filenameIndex = (sepIndex + 1);
    while (filenameIndex < dotIndex) {
      if (!(str_equals(p->index_(filenameIndex), extsep))) {
        return Tuple2<Str*, Str*>(p->slice(0, dotIndex), p->slice(dotIndex));
      }
      filenameIndex += 1;
    }
  }
  return Tuple2<Str*, Str*>(p, str1534);
}

Tuple2<Str*, Str*> splitext(Str* p) {
  StackRoots _roots({&p});

  return _splitext(p, sep, extsep);
}

Str* basename(Str* p) {
  int i;
  StackRoots _roots({&p});

  i = (p->rfind(str1535) + 1);
  return p->slice(i);
}

Str* dirname(Str* p) {
  int i;
  Str* head = nullptr;
  StackRoots _roots({&p, &head});

  i = (p->rfind(str1536) + 1);
  head = p->slice(0, i);
  head = rstrip_slashes(head);
  return head;
}

Str* normpath(Str* path) {
  Str* slash = nullptr;
  Str* dot = nullptr;
  int initial_slashes;
  List<Str*>* comps = nullptr;
  List<Str*>* new_comps = nullptr;
  StackRoots _roots({&path, &slash, &dot, &comps, &new_comps});

  slash = str1537;
  dot = str1538;
  if (str_equals(path, str1539)) {
    return dot;
  }
  initial_slashes = path->startswith(str1540);
  if ((initial_slashes and (path->startswith(str1541) and !path->startswith(str1542)))) {
    initial_slashes = 2;
  }
  comps = path->split(str1543);
  new_comps = Alloc<List<Str*>>();
  for (ListIter<Str*> it(comps); !it.Done(); it.Next()) {
    Str* comp = it.Value();
    StackRoots _for({&comp  });
    if ((len(comp) == 0 or str_equals(comp, str1544))) {
      continue;
    }
    if ((!(str_equals(comp, str1545)) or ((initial_slashes == 0 and len(new_comps) == 0) or (len(new_comps) and str_equals(new_comps->index_(-1), str1546))))) {
      new_comps->append(comp);
    }
    else {
      if (len(new_comps)) {
        new_comps->pop();
      }
    }
  }
  comps = new_comps;
  path = slash->join(comps);
  if (initial_slashes) {
    path = str_concat(str_repeat(slash, initial_slashes), path);
  }
  return len(path) ? path : dot;
}

bool isabs(Str* s) {
  StackRoots _roots({&s});

  return s->startswith(str1547);
}

Str* abspath(Str* path) {
  Str* cwd = nullptr;
  StackRoots _roots({&path, &cwd});

  if (!isabs(path)) {
    cwd = posix::getcwd();
    path = join(cwd, path);
  }
  return normpath(path);
}

}  // define namespace os_path

namespace qsn {  // define

int BIT8_UTF8 = 0;
int BIT8_U_ESCAPE = 1;
int BIT8_X_ESCAPE = 2;
int MUST_QUOTE = 4;

bool _encode(Str* s, int bit8_display, bool shell_compat, List<Str*>* parts) {
  StackRoots _roots({&s, &parts});

  if (bit8_display == BIT8_X_ESCAPE) {
    _encode_bytes_x(s, shell_compat, parts);
    return true;
  }
  else {
    return _encode_runes(s, bit8_display, shell_compat, parts);
  }
}

Str* maybe_shell_encode(Str* s, int flags) {
  int quote;
  int must_quote;
  int bit8_display;
  List<Str*>* parts = nullptr;
  bool valid_utf8;
  Str* prefix = nullptr;
  StackRoots _roots({&s, &parts, &prefix});

  quote = 0;
  must_quote = (flags & 4);
  bit8_display = (flags & 3);
  if (len(s) == 0) {
    quote = 1;
  }
  else {
    for (StrIter it(s); !it.Done(); it.Next()) {
      Str* ch = it.Value();
      StackRoots _for({&ch    });
      if ((!must_quote and IsPlainChar(ch))) {
        continue;
      }
      quote = 1;
      if ((str_contains(str1548, ch) or IsUnprintableLow(ch))) {
        quote = 2;
        break;
      }
    }
  }
  if (quote == 0) {
    return s;
  }
  parts = Alloc<List<Str*>>();
  valid_utf8 = _encode(s, bit8_display, true, parts);
  if ((!valid_utf8 or quote == 2)) {
    prefix = str1549;
  }
  else {
    prefix = str1550;
  }
  parts->append(str1551);
  return str_concat(prefix, str1552->join(parts));
}

Str* maybe_encode(Str* s, int bit8_display) {
  int quote;
  List<Str*>* parts = nullptr;
  StackRoots _roots({&s, &parts});

  quote = 0;
  if (len(s) == 0) {
    quote = 1;
  }
  else {
    for (StrIter it(s); !it.Done(); it.Next()) {
      Str* ch = it.Value();
      StackRoots _for({&ch    });
      if (IsPlainChar(ch)) {
        continue;
      }
      quote = 1;
    }
  }
  if (!quote) {
    return s;
  }
  parts = Alloc<List<Str*>>();
  parts->append(str1553);
  _encode(s, bit8_display, false, parts);
  parts->append(str1554);
  return str1555->join(parts);
}

Str* encode(Str* s, int bit8_display) {
  List<Str*>* parts = nullptr;
  StackRoots _roots({&s, &parts});

  parts = Alloc<List<Str*>>();
  parts->append(str1556);
  _encode(s, bit8_display, false, parts);
  parts->append(str1557);
  return str1558->join(parts);
}

void _encode_bytes_x(Str* s, bool shell_compat, List<Str*>* parts) {
  Str* part = nullptr;
  StackRoots _roots({&s, &parts, &part});

  for (StrIter it(s); !it.Done(); it.Next()) {
    Str* byte = it.Value();
    StackRoots _for({&byte  });
    if (str_equals(byte, str1559)) {
      part = str1560;
    }
    else {
      if (str_equals(byte, str1561)) {
        part = str1562;
      }
      else {
        if (str_equals(byte, str1563)) {
          part = str1564;
        }
        else {
          if (str_equals(byte, str1565)) {
            part = str1566;
          }
          else {
            if (str_equals(byte, str1567)) {
              part = str1568;
            }
            else {
              if (str_equals(byte, str1569)) {
                part = shell_compat ? str1570 : str1571;
              }
              else {
                if (IsUnprintableLow(byte)) {
                  part = XEscape(byte);
                }
                else {
                  if (IsUnprintableHigh(byte)) {
                    part = XEscape(byte);
                  }
                  else {
                    part = byte;
                  }
                }
              }
            }
          }
        }
      }
    }
    parts->append(part);
  }
}
int Ascii = 0;
int Begin2 = 1;
int Begin3 = 2;
int Begin4 = 3;
int Cont = 4;
int Invalid = 5;
int Start = 0;
int B2_1 = 1;
int B3_1 = 2;
int B4_1 = 3;
int B3_2 = 4;
int B4_2 = 5;
int B4_3 = 6;

bool _encode_runes(Str* s, int bit8_display, bool shell_compat, List<Str*>* parts) {
  bool valid_utf8;
  int state;
  Str* r1 = nullptr;
  Str* r2 = nullptr;
  Str* r3 = nullptr;
  int b;
  int typ;
  Str* out = nullptr;
  int rune;
  StackRoots _roots({&s, &parts, &r1, &r2, &r3, &out});

  valid_utf8 = true;
  state = Start;
  r1 = str1572;
  r2 = str1573;
  r3 = str1574;
  for (StrIter it(s); !it.Done(); it.Next()) {
    Str* byte = it.Value();
    StackRoots _for({&byte  });
    b = ord(byte);
    if (b < 127) {
      typ = Ascii;
    }
    else {
      if ((b >> 6) == 2) {
        typ = Cont;
      }
      else {
        if ((b >> 5) == 6) {
          typ = Begin2;
        }
        else {
          if ((b >> 4) == 14) {
            typ = Begin3;
          }
          else {
            if ((b >> 3) == 30) {
              typ = Begin4;
            }
            else {
              typ = Invalid;
            }
          }
        }
      }
    }
    if (typ != Cont) {
      if (state >= B2_1) {
        valid_utf8 = false;
        parts->append(XEscape(r1));
      }
      if (state >= B3_2) {
        parts->append(XEscape(r2));
      }
      if (state >= B4_3) {
        parts->append(XEscape(r3));
      }
    }
    if (typ == Ascii) {
      state = Start;
      if (str_equals(byte, str1575)) {
        out = str1576;
      }
      else {
        if (str_equals(byte, str1577)) {
          out = str1578;
        }
        else {
          if (str_equals(byte, str1579)) {
            out = str1580;
          }
          else {
            if (str_equals(byte, str1581)) {
              out = str1582;
            }
            else {
              if (str_equals(byte, str1583)) {
                out = str1584;
              }
              else {
                if (str_equals(byte, str1585)) {
                  out = shell_compat ? str1586 : str1587;
                }
                else {
                  if (IsUnprintableLow(byte)) {
                    if (bit8_display == BIT8_U_ESCAPE) {
                      out = UEscape(ord(byte));
                    }
                    else {
                      out = XEscape(byte);
                    }
                  }
                  else {
                    out = byte;
                  }
                }
              }
            }
          }
        }
      }
      parts->append(out);
    }
    else {
      if (typ == Begin2) {
        state = B2_1;
        r1 = byte;
      }
      else {
        if (typ == Begin3) {
          state = B3_1;
          r1 = byte;
        }
        else {
          if (typ == Begin4) {
            state = B4_1;
            r1 = byte;
          }
          else {
            if (typ == Invalid) {
              state = Start;
              parts->append(XEscape(byte));
              valid_utf8 = false;
            }
            else {
              if (typ == Cont) {
                if (state == Start) {
                  parts->append(XEscape(byte));
                  valid_utf8 = false;
                }
                else {
                  if (state == B2_1) {
                    if (bit8_display == BIT8_UTF8) {
                      out = str_concat(r1, byte);
                    }
                    else {
                      rune = (ord(byte) & 63);
                      rune |= ((ord(r1) & 31) << 6);
                      out = UEscape(rune);
                    }
                    parts->append(out);
                    state = Start;
                  }
                  else {
                    if (state == B3_1) {
                      r2 = byte;
                      state = B3_2;
                    }
                    else {
                      if (state == B3_2) {
                        if (bit8_display == BIT8_UTF8) {
                          out = str_concat(str_concat(r1, r2), byte);
                        }
                        else {
                          rune = (ord(byte) & 63);
                          rune |= ((ord(r2) & 63) << 6);
                          rune |= ((ord(r1) & 15) << 12);
                          out = UEscape(rune);
                        }
                        parts->append(out);
                        state = Start;
                      }
                      else {
                        if (state == B4_1) {
                          r2 = byte;
                          state = B4_2;
                        }
                        else {
                          if (state == B4_2) {
                            r3 = byte;
                            state = B4_3;
                          }
                          else {
                            if (state == B4_3) {
                              if (bit8_display == BIT8_UTF8) {
                                out = str_concat(str_concat(str_concat(r1, r2), r3), byte);
                              }
                              else {
                                rune = (ord(byte) & 63);
                                rune |= ((ord(r3) & 63) << 6);
                                rune |= ((ord(r2) & 63) << 12);
                                rune |= ((ord(r1) & 7) << 18);
                                out = UEscape(rune);
                              }
                              parts->append(out);
                              state = Start;
                            }
                            else {
                              assert(0);  // AssertionError
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              else {
                assert(0);  // AssertionError
              }
            }
          }
        }
      }
    }
  }
  if (state >= B2_1) {
    valid_utf8 = false;
    parts->append(XEscape(r1));
  }
  if (state >= B3_2) {
    parts->append(XEscape(r2));
  }
  if (state >= B4_3) {
    parts->append(XEscape(r3));
  }
  return valid_utf8;
}

Str* maybe_qtt_encode(Str* s, int bit8_display) {
  StackRoots _roots({&s});

  FAIL(kNotImplemented);  // Python NotImplementedError
}

}  // define namespace qsn

namespace qsn_native {  // define

using id_kind_asdl::Id;
using id_kind_asdl::Kind;
using syntax_asdl::Token;
using types_asdl::lex_mode_e;
using types_asdl::lex_mode_t;
using pyerror::p_die;

bool IsWhitespace(Str* s) {
  StackRoots _roots({&s});

  for (StrIter it(s); !it.Done(); it.Next()) {
    Str* ch = it.Value();
    StackRoots _for({&ch  });
    if (!str_contains(str1588, ch)) {
      return false;
    }
  }
  return true;
}

List<syntax_asdl::Token*>* Parse(lexer::Lexer* lexer) {
  syntax_asdl::Token* tok = nullptr;
  List<syntax_asdl::Token*>* result = nullptr;
  id_kind_asdl::Kind_t kind;
  StackRoots _roots({&lexer, &tok, &result});

  tok = lexer->Read(lex_mode_e::QSN);
  result = Alloc<List<syntax_asdl::Token*>>();
  while (true) {
    tok = lexer->Read(lex_mode_e::QSN);
    if (tok->id == Id::Unknown_Tok) {
      p_die(str1589, tok);
    }
    kind = consts::GetKind(tok->id);
    if (kind != Kind::Char) {
      break;
    }
    result->append(tok);
  }
  if (tok->id != Id::Right_SingleQuote) {
    p_die(str1590, tok);
  }
  tok = lexer->Read(lex_mode_e::SQ_C);
  if (tok->id == Id::Char_Literals) {
    if (!IsWhitespace(tok->tval)) {
      p_die(str1591, tok);
    }
    tok = lexer->Read(lex_mode_e::QSN);
  }
  if (tok->id != Id::Eof_Real) {
    p_die(str1592, tok);
  }
  return result;
}

}  // define namespace qsn_native

namespace osh2oil {  // define

using id_kind_asdl::Id;
using runtime_asdl::word_style_e;
using runtime_asdl::word_style_t;
using syntax_asdl::Token;
using syntax_asdl::loc;
using syntax_asdl::command_e;
using syntax_asdl::command__ShAssignment;
using syntax_asdl::command__Simple;
using syntax_asdl::command__Sentence;
using syntax_asdl::command__Pipeline;
using syntax_asdl::command__AndOr;
using syntax_asdl::command__DoGroup;
using syntax_asdl::command__Subshell;
using syntax_asdl::command__DBracket;
using syntax_asdl::command__DParen;
using syntax_asdl::command__ForEach;
using syntax_asdl::command__WhileUntil;
using syntax_asdl::command__If;
using syntax_asdl::command__Case;
using syntax_asdl::command__ShFunction;
using syntax_asdl::command__TimeBlock;
using syntax_asdl::command__CommandList;
using syntax_asdl::BraceGroup;
using syntax_asdl::for_iter_e;
using syntax_asdl::for_iter__Words;
using syntax_asdl::rhs_word_e;
using syntax_asdl::rhs_word_t;
using syntax_asdl::word_e;
using syntax_asdl::word_t;
using syntax_asdl::word_part_e;
using syntax_asdl::word_part_t;
using syntax_asdl::word_part__EscapedLiteral;
using syntax_asdl::compound_word;
using syntax_asdl::simple_var_sub;
using syntax_asdl::braced_var_sub;
using syntax_asdl::command_sub;
using syntax_asdl::double_quoted;
using syntax_asdl::single_quoted;
using syntax_asdl::sh_lhs_expr_e;
using syntax_asdl::sh_lhs_expr__Name;
using syntax_asdl::condition_e;
using syntax_asdl::condition__Shell;
using syntax_asdl::redir;
using syntax_asdl::redir_param_e;
using syntax_asdl::redir_param__HereDoc;
using pyerror::p_die;
using mylib::print_stderr;

Cursor::Cursor(alloc::Arena* arena, mylib::Writer* f) 
    : header_(obj_header()) {
  this->arena = arena;
  this->f = f;
  this->next_span_id = 0;
}

void Cursor::PrintUntil(int until_span_id) {
  syntax_asdl::Token* span = nullptr;
  Str* piece = nullptr;
  StackRoots _roots({&span, &piece});

  if (until_span_id == runtime::NO_SPID) {
  }
  for (int span_id = this->next_span_id; span_id < until_span_id; ++span_id) {
    span = this->arena->GetToken(span_id);
    if (span->line == nullptr) {
      continue;
    }
    piece = span->line->content->slice(span->col, (span->col + span->length));
    this->f->write(piece);
  }
  this->next_span_id = until_span_id;
}

void Cursor::SkipUntil(int next_span_id) {
  if ((next_span_id == runtime::NO_SPID or next_span_id == (runtime::NO_SPID + 1))) {
  }
  this->next_span_id = next_span_id;
}

void PrintArena(alloc::Arena* arena) {
  osh2oil::Cursor* cursor = nullptr;
  StackRoots _roots({&arena, &cursor});

  cursor = Alloc<Cursor>(arena, mylib::Stdout());
  cursor->PrintUntil(arena->LastSpanId());
}

void PrintSpans(alloc::Arena* arena) {
  int i;
  Str* piece = nullptr;
  StackRoots _roots({&arena, &piece});

  if (len(arena->tokens) == 1) {
    print(str1593);
    print(StrFormat("%s", arena->tokens->index_(0)));
    return ;
  }
  i = 0;
  for (ListIter<syntax_asdl::Token*> it(arena->tokens); !it.Done(); it.Next(), ++i) {
    syntax_asdl::Token* span = it.Value();
    StackRoots _for({&span  });
    piece = span->line->content->slice(span->col, (span->col + span->length));
    print(StrFormat("%5d %r", i, piece));
  }
  print_stderr(StrFormat("(%d tokens)", len(arena->tokens)));
}

void PrintAsOil(alloc::Arena* arena, syntax_asdl::command_t* node) {
  osh2oil::Cursor* cursor = nullptr;
  osh2oil::OilPrinter* fixer = nullptr;
  StackRoots _roots({&arena, &node, &cursor, &fixer});

  cursor = Alloc<Cursor>(arena, mylib::Stdout());
  fixer = Alloc<OilPrinter>(cursor, arena, mylib::Stdout());
  fixer->DoCommand(node, nullptr, true);
  fixer->End();
}

runtime_asdl::word_style_t _GetRhsStyle(syntax_asdl::rhs_word_t* w) {
  syntax_asdl::rhs_word_t* UP_w = nullptr;
  syntax_asdl::word_part_t* part0 = nullptr;
  syntax_asdl::word_part_t* UP_part0 = nullptr;
  StackRoots _roots({&w, &UP_w, &part0, &UP_part0});

  UP_w = w;
  switch (w->tag_()) {
    case rhs_word_e::Empty: {
      return word_style_e::SQ;
    }
      break;
    case rhs_word_e::Compound: {
      compound_word* w = static_cast<compound_word*>(UP_w);
      if (len(w->parts) == 0) {
        assert(0);  // AssertionError
      }
      else {
        if (len(w->parts) == 1) {
          part0 = w->parts->index_(0);
          UP_part0 = part0;
          switch (part0->tag_()) {
            case word_part_e::TildeSub: {
              return word_style_e::Expr;
            }
              break;
            case word_part_e::Literal: {
              return word_style_e::SQ;
            }
              break;
            case word_part_e::SimpleVarSub: {
              return word_style_e::DQ;
            }
              break;
            case word_part_e::BracedVarSub: 
            case word_part_e::CommandSub: 
            case word_part_e::ArithSub: {
              return word_style_e::Unquoted;
            }
              break;
            case word_part_e::DoubleQuoted: {
              double_quoted* part0 = static_cast<double_quoted*>(UP_part0);
              return word_style_e::DQ;
            }
              break;
          }
        }
        else {
          return word_style_e::DQ;
        }
      }
    }
      break;
  }
  return word_style_e::SQ;
}

OilPrinter::OilPrinter(osh2oil::Cursor* cursor, alloc::Arena* arena, mylib::Writer* f) 
    : header_(obj_header()) {
  this->cursor = cursor;
  this->arena = arena;
  this->f = f;
}

void OilPrinter::_DebugSpid(int spid) {
  syntax_asdl::Token* span = nullptr;
  Str* s = nullptr;
  StackRoots _roots({&span, &s});

  span = this->arena->GetToken(spid);
  s = span->line->content->slice(span->col, (span->col + span->length));
  print_stderr(StrFormat("SPID %d = %r", spid, s));
}

void OilPrinter::End() {
  this->cursor->PrintUntil(this->arena->LastSpanId());
}

void OilPrinter::DoRedirect(syntax_asdl::redir* node, Dict<Str*, bool>* local_symbols) {
  int op_spid;
  int op_id;
  syntax_asdl::word_t* here_begin = nullptr;
  bool ok;
  Str* delimiter = nullptr;
  bool delim_quoted;
  int delim_end_spid;
  StackRoots _roots({&node, &local_symbols, &here_begin, &delimiter});

  op_spid = node->op->span_id;
  op_id = node->op->id;
  this->cursor->PrintUntil(op_spid);
  if (node->arg->tag_() == redir_param_e::HereDoc) {
    redir_param__HereDoc* here_doc = static_cast<redir_param__HereDoc*>(node->arg);
    here_begin = here_doc->here_begin;
    Tuple3<bool, Str*, bool> tup0 = word_::StaticEval(here_begin);
    ok = tup0.at0();
    delimiter = tup0.at1();
    delim_quoted = tup0.at2();
    if (!ok) {
      p_die(str1598, Alloc<loc::Word>(here_begin));
    }
    this->f->write(str1599);
    if (delim_quoted) {
      this->f->write(str1600);
    }
    else {
      this->f->write(str1601);
    }
    delim_end_spid = word_::RightMostSpanForWord(here_begin);
    this->cursor->SkipUntil((delim_end_spid + 1));
    for (ListIter<syntax_asdl::word_part_t*> it(here_doc->stdin_parts); !it.Done(); it.Next()) {
      syntax_asdl::word_part_t* part = it.Value();
      StackRoots _for({&part    });
      this->DoWordPart(part, local_symbols);
    }
    this->cursor->SkipUntil((here_doc->here_end_span_id + 1));
    if (delim_quoted) {
      this->f->write(str1602);
    }
    else {
      this->f->write(str1603);
    }
  }
  else {
    ;  // pass
  }
}

void OilPrinter::DoShAssignment(syntax_asdl::command__ShAssignment* node, bool at_top_level, Dict<Str*, bool>* local_symbols) {
  bool has_rhs;
  bool defined_locally;
  syntax_asdl::sh_lhs_expr_t* lhs0 = nullptr;
  List<bool>* has_array_index = nullptr;
  int n;
  int i;
  syntax_asdl::sh_lhs_expr_t* lhs = nullptr;
  syntax_asdl::sh_lhs_expr_t* UP_lhs = nullptr;
  int left_spid;
  StackRoots _roots({&node, &local_symbols, &lhs0, &has_array_index, &lhs, &UP_lhs});

  has_rhs = false;
  defined_locally = false;
  if (true) {
    this->cursor->PrintUntil(node->spids->index_(0));
    if (local_symbols != nullptr) {
      lhs0 = node->pairs->index_(0)->lhs;
    }
    has_array_index = Alloc<List<bool>>();
    for (ListIter<syntax_asdl::assign_pair*> it(node->pairs); !it.Done(); it.Next()) {
      syntax_asdl::assign_pair* pair = it.Value();
      has_array_index->append(pair->lhs->tag_() == sh_lhs_expr_e::UnparsedIndex);
    }
    if (at_top_level) {
      this->f->write(str1604);
    }
    else {
      if (defined_locally) {
        this->f->write(str1605);
      }
      else {
        this->f->write(str1606);
      }
    }
  }
  n = len(node->pairs);
  i = 0;
  for (ListIter<syntax_asdl::assign_pair*> it(node->pairs); !it.Done(); it.Next(), ++i) {
    syntax_asdl::assign_pair* pair = it.Value();
    StackRoots _for({&pair  });
    lhs = pair->lhs;
    UP_lhs = lhs;
    switch (lhs->tag_()) {
      case sh_lhs_expr_e::Name: {
        sh_lhs_expr__Name* lhs = static_cast<sh_lhs_expr__Name*>(UP_lhs);
        left_spid = pair->spids->index_(0);
        this->cursor->PrintUntil(left_spid);
        this->cursor->SkipUntil((left_spid + 1));
        this->f->write(lhs->name);
        this->f->write(str1607);
        if (pair->rhs->tag_() == rhs_word_e::Empty) {
          this->f->write(str1608);
        }
        else {
          this->DoRhsWord(pair->rhs, local_symbols);
        }
      }
        break;
      case sh_lhs_expr_e::UnparsedIndex: {
        ;  // pass
      }
        break;
      default: {
        assert(0);  // AssertionError
      }
    }
    if (i != (n - 1)) {
      this->f->write(str1609);
    }
  }
}

void OilPrinter::DoCommand(syntax_asdl::command_t* node, Dict<Str*, bool>* local_symbols, bool at_top_level) {
  syntax_asdl::command_t* UP_node = nullptr;
  syntax_asdl::word_t* first_word = nullptr;
  bool ok;
  Str* val = nullptr;
  bool quoted;
  int word0_spid;
  syntax_asdl::word_t* last_word = nullptr;
  int last_spid;
  int left_spid;
  int right_spid;
  Dict<Str*, bool>* new_local_symbols = nullptr;
  int do_spid;
  int done_spid;
  int in_spid;
  int semi_spid;
  syntax_asdl::for_iter_t* UP_iterable = nullptr;
  int kw_spid;
  List<syntax_asdl::command_t*>* commands = nullptr;
  int else_spid;
  int fi_spid;
  int i;
  int elif_spid;
  int then_spid;
  syntax_asdl::condition_t* cond = nullptr;
  int case_spid;
  int esac_spid;
  int rparen_spid;
  int dsemi_spid;
  StackRoots _roots({&node, &local_symbols, &UP_node, &first_word, &val, &last_word, &new_local_symbols, &UP_iterable, &commands, &cond});

  UP_node = node;
  switch (node->tag_()) {
    case command_e::CommandList: {
      command__CommandList* node = static_cast<command__CommandList*>(UP_node);
      for (ListIter<syntax_asdl::command_t*> it(node->children); !it.Done(); it.Next()) {
        syntax_asdl::command_t* child = it.Value();
        StackRoots _for({&child      });
        this->DoCommand(child, local_symbols, at_top_level);
      }
    }
      break;
    case command_e::Simple: {
      command__Simple* node = static_cast<command__Simple*>(UP_node);
      if (len(node->more_env)) {
        for (ListIter<syntax_asdl::env_pair*> it(node->more_env); !it.Done(); it.Next()) {
          syntax_asdl::env_pair* pair = it.Value();
          StackRoots _for({&pair        });
          this->DoRhsWord(pair->val, local_symbols);
        }
      }
      if (len(node->words)) {
        first_word = node->words->index_(0);
        Tuple3<bool, Str*, bool> tup1 = word_::StaticEval(first_word);
        ok = tup1.at0();
        val = tup1.at1();
        quoted = tup1.at2();
        word0_spid = word_::LeftMostSpanForWord(first_word);
        if ((ok and !quoted)) {
          if (str_equals(val, str1610)) {
            last_word = node->words->index_(-1);
            Tuple3<bool, Str*, bool> tup2 = word_::StaticEval(last_word);
            ok = tup2.at0();
            val = tup2.at1();
            quoted = tup2.at2();
            if ((ok and (!quoted and str_equals(val, str1611)))) {
              this->cursor->PrintUntil(word0_spid);
              this->cursor->SkipUntil((word0_spid + 1));
              this->f->write(str1612);
              for (ListIter<syntax_asdl::word_t*> it(node->words->slice(1, -1)); !it.Done(); it.Next()) {
                syntax_asdl::word_t* w = it.Value();
                StackRoots _for({&w              });
                this->DoWordInCommand(w, local_symbols);
              }
              last_spid = word_::LeftMostSpanForWord(last_word);
              this->cursor->PrintUntil((last_spid - 1));
              this->cursor->SkipUntil((last_spid + 1));
              return ;
            }
            else {
              throw Alloc<RuntimeError>(str1613);
            }
          }
          else {
            if (str_equals(val, str1614)) {
              this->cursor->PrintUntil(word0_spid);
              this->cursor->SkipUntil((word0_spid + 1));
              this->f->write(str1615);
              return ;
            }
          }
        }
      }
      for (ListIter<syntax_asdl::word_t*> it(node->words); !it.Done(); it.Next()) {
        syntax_asdl::word_t* w = it.Value();
        StackRoots _for({&w      });
        this->DoWordInCommand(w, local_symbols);
      }
      for (ListIter<syntax_asdl::redir*> it(node->redirects); !it.Done(); it.Next()) {
        syntax_asdl::redir* r = it.Value();
        StackRoots _for({&r      });
        this->DoRedirect(r, local_symbols);
      }
    }
      break;
    case command_e::ShAssignment: {
      command__ShAssignment* node = static_cast<command__ShAssignment*>(UP_node);
      this->DoShAssignment(node, at_top_level, local_symbols);
    }
      break;
    case command_e::Pipeline: {
      command__Pipeline* node = static_cast<command__Pipeline*>(UP_node);
      for (ListIter<syntax_asdl::command_t*> it(node->children); !it.Done(); it.Next()) {
        syntax_asdl::command_t* child = it.Value();
        StackRoots _for({&child      });
        this->DoCommand(child, local_symbols);
      }
    }
      break;
    case command_e::AndOr: {
      command__AndOr* node = static_cast<command__AndOr*>(UP_node);
      for (ListIter<syntax_asdl::command_t*> it(node->children); !it.Done(); it.Next()) {
        syntax_asdl::command_t* child = it.Value();
        StackRoots _for({&child      });
        this->DoCommand(child, local_symbols);
      }
    }
      break;
    case command_e::Sentence: {
      command__Sentence* node = static_cast<command__Sentence*>(UP_node);
      this->DoCommand(node->child, local_symbols);
    }
      break;
    case command_e::BraceGroup: {
      BraceGroup* node = static_cast<BraceGroup*>(UP_node);
      left_spid = node->left->span_id;
      this->cursor->PrintUntil(left_spid);
      this->cursor->SkipUntil((left_spid + 1));
      this->f->write(str1616);
      for (ListIter<syntax_asdl::command_t*> it(node->children); !it.Done(); it.Next()) {
        syntax_asdl::command_t* child = it.Value();
        StackRoots _for({&child      });
        this->DoCommand(child, local_symbols);
      }
    }
      break;
    case command_e::Subshell: {
      command__Subshell* node = static_cast<command__Subshell*>(UP_node);
      left_spid = node->spids->index_(0);
      right_spid = node->spids->index_(1);
      this->cursor->PrintUntil(left_spid);
      this->cursor->SkipUntil((left_spid + 1));
      this->f->write(str1617);
      this->DoCommand(node->child, local_symbols);
      this->cursor->PrintUntil(right_spid);
      this->cursor->SkipUntil((right_spid + 1));
      this->f->write(str1618);
    }
      break;
    case command_e::ShFunction: {
      command__ShFunction* node = static_cast<command__ShFunction*>(UP_node);
      new_local_symbols = Alloc<Dict<Str*, bool>>();
      this->cursor->PrintUntil(node->spids->index_(0));
      this->f->write(str1619);
      this->f->write(node->name);
      this->cursor->SkipUntil(node->spids->index_(2));
      if (node->body->tag_() == command_e::BraceGroup) {
        for (ListIter<syntax_asdl::command_t*> it(static_cast<BraceGroup*>(node->body)->children); !it.Done(); it.Next()) {
          syntax_asdl::command_t* child = it.Value();
          StackRoots _for({&child        });
          this->DoCommand(child, new_local_symbols);
        }
      }
      else {
        ;  // pass
      }
    }
      break;
    case command_e::DoGroup: {
      command__DoGroup* node = static_cast<command__DoGroup*>(UP_node);
      do_spid = node->spids->index_(0);
      done_spid = node->spids->index_(1);
      this->cursor->PrintUntil(do_spid);
      this->cursor->SkipUntil((do_spid + 1));
      this->f->write(str1620);
      for (ListIter<syntax_asdl::command_t*> it(node->children); !it.Done(); it.Next()) {
        syntax_asdl::command_t* child = it.Value();
        StackRoots _for({&child      });
        this->DoCommand(child, local_symbols);
      }
      this->cursor->PrintUntil(done_spid);
      this->cursor->SkipUntil((done_spid + 1));
      this->f->write(str1621);
    }
      break;
    case command_e::ForEach: {
      command__ForEach* node = static_cast<command__ForEach*>(UP_node);
      in_spid = node->spids->index_(1);
      semi_spid = node->spids->index_(2);
      UP_iterable = node->iterable;
      switch (node->iterable->tag_()) {
        case for_iter_e::Args: {
          this->f->write(StrFormat("for %s in @ARGV ", node->iter_names->index_(0)));
          this->cursor->SkipUntil(location::SpanForCommand(node->body));
        }
          break;
        case for_iter_e::Words: {
          for_iter__Words* iterable = static_cast<for_iter__Words*>(UP_iterable);
          this->cursor->PrintUntil((in_spid + 2));
          this->f->write(str1623);
          for (ListIter<syntax_asdl::word_t*> it(iterable->words); !it.Done(); it.Next()) {
            syntax_asdl::word_t* w = it.Value();
            StackRoots _for({&w          });
            this->DoWordInCommand(w, local_symbols);
          }
          this->f->write(str1624);
        }
          break;
        case for_iter_e::Oil: {
          ;  // pass
        }
          break;
      }
      if (semi_spid != runtime::NO_SPID) {
        this->cursor->PrintUntil(semi_spid);
        this->cursor->SkipUntil((semi_spid + 1));
      }
      this->DoCommand(node->body, local_symbols);
    }
      break;
    case command_e::WhileUntil: {
      command__WhileUntil* node = static_cast<command__WhileUntil*>(UP_node);
      if (node->keyword->id == Id::KW_Until) {
        kw_spid = node->keyword->span_id;
        this->cursor->PrintUntil(kw_spid);
        this->f->write(str1625);
        this->cursor->SkipUntil((kw_spid + 1));
      }
      if (node->cond->tag_() == condition_e::Shell) {
        commands = static_cast<condition__Shell*>(node->cond)->commands;
        if ((len(commands) == 1 and commands->index_(0)->tag_() == command_e::Sentence)) {
          command__Sentence* sentence = static_cast<command__Sentence*>(commands->index_(0));
          this->DoCommand(sentence->child, local_symbols);
          semi_spid = sentence->terminator->span_id;
          this->cursor->SkipUntil((semi_spid + 1));
        }
      }
      this->DoCommand(node->body, local_symbols);
    }
      break;
    case command_e::If: {
      command__If* node = static_cast<command__If*>(UP_node);
      else_spid = node->spids->index_(0);
      fi_spid = node->spids->index_(1);
      i = 0;
      for (ListIter<syntax_asdl::if_arm*> it(node->arms); !it.Done(); it.Next(), ++i) {
        syntax_asdl::if_arm* arm = it.Value();
        StackRoots _for({&arm      });
        elif_spid = arm->spids->index_(0);
        then_spid = arm->spids->index_(1);
        if (i != 0) {
          this->cursor->PrintUntil(elif_spid);
          this->f->write(str1626);
        }
        cond = arm->cond;
        if (cond->tag_() == condition_e::Shell) {
          commands = static_cast<condition__Shell*>(cond)->commands;
          if ((len(commands) == 1 and commands->index_(0)->tag_() == command_e::Sentence)) {
            command__Sentence* sentence = static_cast<command__Sentence*>(commands->index_(0));
            this->DoCommand(sentence, local_symbols);
            semi_spid = sentence->terminator->span_id;
            this->cursor->PrintUntil(semi_spid);
            this->cursor->SkipUntil((semi_spid + 1));
          }
          else {
            for (ListIter<syntax_asdl::command_t*> it(commands); !it.Done(); it.Next()) {
              syntax_asdl::command_t* child = it.Value();
              StackRoots _for({&child            });
              this->DoCommand(child, local_symbols);
            }
          }
        }
        this->cursor->PrintUntil(then_spid);
        this->cursor->SkipUntil((then_spid + 1));
        this->f->write(str1627);
        for (ListIter<syntax_asdl::command_t*> it(arm->action); !it.Done(); it.Next()) {
          syntax_asdl::command_t* child = it.Value();
          StackRoots _for({&child        });
          this->DoCommand(child, local_symbols);
        }
      }
      if (len(node->else_action)) {
        this->cursor->PrintUntil(else_spid);
        this->f->write(str1628);
        this->cursor->PrintUntil((else_spid + 1));
        this->f->write(str1629);
        for (ListIter<syntax_asdl::command_t*> it(node->else_action); !it.Done(); it.Next()) {
          syntax_asdl::command_t* child = it.Value();
          StackRoots _for({&child        });
          this->DoCommand(child, local_symbols);
        }
      }
      this->cursor->PrintUntil(fi_spid);
      this->cursor->SkipUntil((fi_spid + 1));
      this->f->write(str1630);
    }
      break;
    case command_e::Case: {
      command__Case* node = static_cast<command__Case*>(UP_node);
      case_spid = node->spids->index_(0);
      in_spid = node->spids->index_(1);
      esac_spid = node->spids->index_(2);
      this->cursor->PrintUntil(case_spid);
      this->cursor->SkipUntil((case_spid + 1));
      this->f->write(str1631);
      this->DoWordInCommand(node->to_match, local_symbols);
      this->cursor->PrintUntil(in_spid);
      this->cursor->SkipUntil((in_spid + 1));
      this->f->write(str1632);
      for (ListIter<syntax_asdl::case_arm*> it(node->arms); !it.Done(); it.Next()) {
        syntax_asdl::case_arm* case_arm = it.Value();
        StackRoots _for({&case_arm      });
        left_spid = case_arm->spids->index_(0);
        rparen_spid = case_arm->spids->index_(1);
        dsemi_spid = case_arm->spids->index_(2);
        last_spid = case_arm->spids->index_(3);
        this->cursor->PrintUntil(left_spid);
        for (ListIter<syntax_asdl::word_t*> it(case_arm->pat_list); !it.Done(); it.Next()) {
          syntax_asdl::word_t* pat = it.Value();
          StackRoots _for({&pat        });
          ;  // pass
        }
        this->f->write(str1633);
        this->cursor->PrintUntil(rparen_spid);
        this->cursor->SkipUntil((rparen_spid + 1));
        for (ListIter<syntax_asdl::command_t*> it(case_arm->action); !it.Done(); it.Next()) {
          syntax_asdl::command_t* child = it.Value();
          StackRoots _for({&child        });
          this->DoCommand(child, local_symbols);
        }
        if (dsemi_spid != runtime::NO_SPID) {
          this->cursor->PrintUntil(dsemi_spid);
          this->cursor->SkipUntil((dsemi_spid + 1));
        }
        else {
          if (last_spid != runtime::NO_SPID) {
            this->cursor->PrintUntil(last_spid);
          }
          else {
            assert(0);  // AssertionError
          }
        }
      }
      this->cursor->PrintUntil(esac_spid);
      this->cursor->SkipUntil((esac_spid + 1));
      this->f->write(str1635);
    }
      break;
    case command_e::TimeBlock: {
      command__TimeBlock* node = static_cast<command__TimeBlock*>(UP_node);
      this->DoCommand(node->pipeline, local_symbols);
    }
      break;
    case command_e::DParen: {
      command__DParen* node = static_cast<command__DParen*>(UP_node);
      ;  // pass
    }
      break;
    case command_e::DBracket: {
      command__DBracket* node = static_cast<command__DBracket*>(UP_node);
      ;  // pass
    }
      break;
    default: {
      ;  // pass
    }
  }
}

void OilPrinter::DoRhsWord(syntax_asdl::rhs_word_t* node, Dict<Str*, bool>* local_symbols) {
  syntax_asdl::rhs_word_t* UP_node = nullptr;
  runtime_asdl::word_style_t style;
  StackRoots _roots({&node, &local_symbols, &UP_node});

  UP_node = node;
  switch (node->tag_()) {
    case rhs_word_e::Empty: {
      this->f->write(str1636);
    }
      break;
    case rhs_word_e::Compound: {
      compound_word* node = static_cast<compound_word*>(UP_node);
      style = _GetRhsStyle(node);
      if (style == word_style_e::SQ) {
        this->f->write(str1637);
        this->DoWordInCommand(node, local_symbols);
        this->f->write(str1638);
      }
      else {
        if (style == word_style_e::DQ) {
          this->f->write(str1639);
          this->DoWordInCommand(node, local_symbols);
          this->f->write(str1640);
        }
        else {
          if (word_::IsVarSub(node)) {
            ;  // pass
          }
          this->DoWordInCommand(node, local_symbols);
        }
      }
    }
      break;
  }
}

void OilPrinter::DoWordInCommand(syntax_asdl::word_t* node, Dict<Str*, bool>* local_symbols) {
  syntax_asdl::word_t* UP_node = nullptr;
  int left_spid;
  int right_spid;
  syntax_asdl::word_part_t* part0 = nullptr;
  StackRoots _roots({&node, &local_symbols, &UP_node, &part0});

  UP_node = node;
  switch (node->tag_()) {
    case word_e::Compound: {
      compound_word* node = static_cast<compound_word*>(UP_node);
      if ((len(node->parts) == 1 and node->parts->index_(0)->tag_() == word_part_e::DoubleQuoted)) {
        double_quoted* dq_part = static_cast<double_quoted*>(node->parts->index_(0));
        left_spid = dq_part->left->span_id;
        right_spid = dq_part->right->span_id;
        if (len(dq_part->parts) == 1) {
          part0 = dq_part->parts->index_(0);
          if (part0->tag_() == word_part_e::SimpleVarSub) {
            simple_var_sub* vsub_part = static_cast<simple_var_sub*>(dq_part->parts->index_(0));
            if (vsub_part->left->id == Id::VSub_At) {
              this->cursor->PrintUntil(left_spid);
              this->cursor->SkipUntil((right_spid + 1));
              this->f->write(str1641);
              return ;
            }
            if ((vsub_part->left->id == Id::VSub_Number || vsub_part->left->id == Id::VSub_DollarName)) {
              this->cursor->PrintUntil(left_spid);
              this->cursor->SkipUntil((right_spid + 1));
              this->f->write(lexer::TokenVal(vsub_part->left));
              return ;
            }
          }
          else {
            if (part0->tag_() == word_part_e::BracedVarSub) {
              this->cursor->PrintUntil(left_spid);
              this->cursor->SkipUntil((left_spid + 1));
              this->DoWordPart(part0, local_symbols);
              this->cursor->SkipUntil((right_spid + 1));
              return ;
            }
            else {
              if (part0->tag_() == word_part_e::CommandSub) {
                this->cursor->PrintUntil(left_spid);
                this->cursor->SkipUntil((left_spid + 1));
                this->DoWordPart(part0, local_symbols);
                this->cursor->SkipUntil((right_spid + 1));
                return ;
              }
            }
          }
        }
      }
      for (ListIter<syntax_asdl::word_part_t*> it(node->parts); !it.Done(); it.Next()) {
        syntax_asdl::word_part_t* part = it.Value();
        StackRoots _for({&part      });
        this->DoWordPart(part, local_symbols);
      }
    }
      break;
    case word_e::BracedTree: {
      ;  // pass
    }
      break;
    default: {
      assert(0);  // AssertionError
    }
  }
}

void OilPrinter::DoWordPart(syntax_asdl::word_part_t* node, Dict<Str*, bool>* local_symbols, bool quoted) {
  int span_id;
  syntax_asdl::Token* span = nullptr;
  syntax_asdl::word_part_t* UP_node = nullptr;
  syntax_asdl::Token* t = nullptr;
  Str* val = nullptr;
  int spid;
  int last_spid;
  int op_id;
  int left_spid;
  int right_spid;
  int name_spid;
  StackRoots _roots({&node, &local_symbols, &span, &UP_node, &t, &val});

  span_id = word_::LeftMostSpanForPart(node);
  if (span_id != runtime::NO_SPID) {
    span = this->arena->GetToken(span_id);
    this->cursor->PrintUntil(span_id);
  }
  UP_node = node;
  switch (node->tag_()) {
    case word_part_e::ShArrayLiteral: 
    case word_part_e::AssocArrayLiteral: 
    case word_part_e::TildeSub: 
    case word_part_e::ExtGlob: {
      ;  // pass
    }
      break;
    case word_part_e::EscapedLiteral: {
      word_part__EscapedLiteral* node = static_cast<word_part__EscapedLiteral*>(UP_node);
      if (quoted) {
        ;  // pass
      }
      else {
        t = node->token;
        val = t->tval->slice(1);
        if (!(str_equals(val, str1642))) {
          this->cursor->PrintUntil(t->span_id);
          this->cursor->SkipUntil((t->span_id + 1));
          this->f->write(StrFormat("'%s'", val));
        }
      }
    }
      break;
    case word_part_e::Literal: {
      Token* node = static_cast<Token*>(UP_node);
      spid = node->span_id;
      if (spid == runtime::NO_SPID) {
        mylib::print_stderr(StrFormat("WARNING: %s has no span_id", node));
      }
      else {
        this->cursor->PrintUntil((spid + 1));
      }
    }
      break;
    case word_part_e::SingleQuoted: {
      single_quoted* node = static_cast<single_quoted*>(UP_node);
      if (len(node->tokens)) {
        last_spid = node->tokens->index_(-1)->span_id;
        this->cursor->PrintUntil((last_spid + 1));
      }
    }
      break;
    case word_part_e::DoubleQuoted: {
      double_quoted* node = static_cast<double_quoted*>(UP_node);
      for (ListIter<syntax_asdl::word_part_t*> it(node->parts); !it.Done(); it.Next()) {
        syntax_asdl::word_part_t* part = it.Value();
        StackRoots _for({&part      });
        this->DoWordPart(part, local_symbols, true);
      }
    }
      break;
    case word_part_e::SimpleVarSub: {
      simple_var_sub* node = static_cast<simple_var_sub*>(UP_node);
      spid = node->left->span_id;
      op_id = node->left->id;
      if (op_id == Id::VSub_DollarName) {
        this->cursor->PrintUntil((spid + 1));
      }
      else {
        if (op_id == Id::VSub_Number) {
          this->cursor->PrintUntil((spid + 1));
        }
        else {
          if (op_id == Id::VSub_Bang) {
            this->f->write(str1645);
            this->cursor->SkipUntil((spid + 1));
          }
          else {
            if (op_id == Id::VSub_At) {
              this->f->write(str1646);
              this->cursor->SkipUntil((spid + 1));
            }
            else {
              if (op_id == Id::VSub_Pound) {
                this->f->write(str1647);
                this->cursor->SkipUntil((spid + 1));
              }
              else {
                if (op_id == Id::VSub_Dollar) {
                  this->f->write(str1648);
                  this->cursor->SkipUntil((spid + 1));
                }
                else {
                  if (op_id == Id::VSub_Star) {
                    this->f->write(str1649);
                    this->cursor->SkipUntil((spid + 1));
                  }
                  else {
                    if (op_id == Id::VSub_Hyphen) {
                      this->f->write(str1650);
                      this->cursor->SkipUntil((spid + 1));
                    }
                    else {
                      if (op_id == Id::VSub_QMark) {
                        this->f->write(str1651);
                        this->cursor->SkipUntil((spid + 1));
                      }
                      else {
                        ;  // pass
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
      break;
    case word_part_e::BracedVarSub: {
      braced_var_sub* node = static_cast<braced_var_sub*>(UP_node);
      left_spid = node->left->span_id;
      right_spid = node->right->span_id;
      this->cursor->PrintUntil(left_spid);
      name_spid = node->token->span_id;
      op_id = node->token->id;
      if (node->bracket_op) {
        ;  // pass
      }
      if (node->prefix_op) {
        ;  // pass
      }
      if (node->suffix_op) {
        ;  // pass
      }
      if (op_id == Id::VSub_QMark) {
        this->cursor->PrintUntil((name_spid + 1));
      }
      this->cursor->PrintUntil((right_spid + 1));
    }
      break;
    case word_part_e::CommandSub: {
      command_sub* node = static_cast<command_sub*>(UP_node);
      left_spid = node->left_token->span_id;
      right_spid = node->right->span_id;
      if (node->left_token->id == Id::Left_Backtick) {
        this->cursor->PrintUntil(left_spid);
        this->f->write(str1652);
        this->cursor->SkipUntil((left_spid + 1));
        this->DoCommand(node->child, local_symbols);
        this->cursor->SkipUntil((right_spid + 1));
        this->f->write(str1653);
      }
      else {
        this->cursor->PrintUntil((right_spid + 1));
      }
    }
      break;
    default: {
      ;  // pass
    }
  }
}

}  // define namespace osh2oil

namespace shell {  // define

using option_asdl::option_i;
using option_asdl::builtin_i;
using syntax_asdl::source;
using syntax_asdl::source_t;
using mylib::print_stderr;

void _InitDefaultCompletions(cmd_eval::CommandEvaluator* cmd_ev, builtin_comp::Complete* complete_builtin, completion::Lookup* comp_lookup) {
  completion::TestAction* A1 = nullptr;
  List<Str*>* l = nullptr;
  completion::TestAction* A2 = nullptr;
  completion::UserSpec* C1 = nullptr;
  StackRoots _roots({&cmd_ev, &complete_builtin, &comp_lookup, &A1, &l, &A2, &C1});

  complete_builtin->Run(shell_native::MakeBuiltinArgv(NewList<Str*>(std::initializer_list<Str*>{str1654, str1655, str1656})));
  complete_builtin->Run(shell_native::MakeBuiltinArgv(NewList<Str*>(std::initializer_list<Str*>{str1657, str1658, str1659})));
  if (1) {
    A1 = Alloc<completion::TestAction>(NewList<Str*>(std::initializer_list<Str*>{str1660, str1661, str1662}), 0.0);
    l = Alloc<List<Str*>>();
    for (int i = 0; i < 5; ++i) {
      l->append(StrFormat("m%d", i));
    }
    A2 = Alloc<completion::TestAction>(l, 0.1);
    C1 = Alloc<completion::UserSpec>(NewList<completion::CompletionAction*>(std::initializer_list<completion::CompletionAction*>{A1, A2}), Alloc<List<completion::CompletionAction*>>(), Alloc<List<completion::CompletionAction*>>(), Alloc<completion::DefaultPredicate>(), str1664, str1665);
    comp_lookup->RegisterName(str1666, Alloc<Dict<Str*, bool>>(), C1);
  }
}

void SourceStartupFile(process::FdState* fd_state, Str* rc_path, Str* lang, parse_lib::ParseContext* parse_ctx, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt) {
  mylib::LineReader* f = nullptr;
  alloc::Arena* arena = nullptr;
  reader::FileLineReader* rc_line_reader = nullptr;
  cmd_parse::CommandParser* rc_c_parser = nullptr;
  int status;
  StackRoots _roots({&fd_state, &rc_path, &lang, &parse_ctx, &cmd_ev, &errfmt, &f, &arena, &rc_line_reader, &rc_c_parser});

  try {
    f = fd_state->Open(rc_path);
  }
  catch (IOError_OSError* e) {
    if (e->errno_ != ENOENT) {
      throw ;
    }
    return ;
  }
  arena = parse_ctx->arena;
  rc_line_reader = Alloc<reader::FileLineReader>(f, arena);
  rc_c_parser = parse_ctx->MakeOshParser(rc_line_reader);
  {  // with
    alloc::ctx_Location ctx{arena, Alloc<source::SourcedFile>(rc_path, runtime::NO_SPID)};

    status = main_loop::Batch(cmd_ev, rc_c_parser, errfmt);
  }
  f->close();
}

ShellOptHook::ShellOptHook(py_readline::Readline* readline)  {
  FIELD_MASK(header_) |= ShellOptHook::field_mask();
  this->readline = readline;
}

bool ShellOptHook::OnChange(List<bool>* opt0_array, Str* opt_name, bool b) {
  StackRoots _roots({&opt0_array, &opt_name});

  if ((str_equals(opt_name, str1667) or str_equals(opt_name, str1668))) {
    if (this->readline) {
      this->readline->parse_and_bind(str_concat(str1669, opt_name));
    }
    else {
      print_stderr(StrFormat("Warning: Can't set option %r because shell wasn't compiled with GNU readline", opt_name));
      return false;
    }
    if (str_equals(opt_name, str1671)) {
      opt0_array->set(option_i::emacs, !b);
    }
    else {
      if (str_equals(opt_name, str1672)) {
        opt0_array->set(option_i::vi, !b);
      }
    }
  }
  return true;
}

void AddOil(Dict<int, vm::_Builtin*>* b, state::Mem* mem, state::SearchPath* search_path, cmd_eval::CommandEvaluator* cmd_ev, ui::ErrorFormatter* errfmt, Dict<Str*, runtime_asdl::Proc*>* procs, alloc::Arena* arena) {
  StackRoots _roots({&b, &mem, &search_path, &cmd_ev, &errfmt, &procs, &arena});

  b->set(builtin_i::shvar, Alloc<builtin_pure::Shvar>(mem, search_path, cmd_ev));
  b->set(builtin_i::push_registers, Alloc<builtin_pure::PushRegisters>(mem, cmd_ev));
  b->set(builtin_i::fopen, Alloc<builtin_pure::Fopen>(mem, cmd_ev));
  b->set(builtin_i::use, Alloc<builtin_pure::Use>(mem, errfmt));
}

int Main(Str* lang, args::Reader* arg_r, Dict<Str*, Str*>* environ, bool login_shell, pyutil::_ResourceLoader* loader, py_readline::Readline* readline) {
  Str* argv0 = nullptr;
  args::_Attributes* attrs = nullptr;
  arg_types::main* flag = nullptr;
  alloc::Arena* arena = nullptr;
  ui::ErrorFormatter* errfmt = nullptr;
  builtin_misc::Help* help_builtin = nullptr;
  Str* no_str = nullptr;
  List<state::DebugFrame*>* debug_stack = nullptr;
  Str* dollar0 = nullptr;
  state::DebugFrame* frame0 = nullptr;
  state::DebugFrame* frame1 = nullptr;
  Str* script_name = nullptr;
  state::Mem* mem = nullptr;
  shell::ShellOptHook* opt_hook = nullptr;
  optview::Parse* parse_opts = nullptr;
  optview::Exec* exec_opts = nullptr;
  state::MutableOpts* mutable_opts = nullptr;
  Str* version_str = nullptr;
  Dict<Str*, runtime_asdl::Proc*>* procs = nullptr;
  state::Hay* hay_state = nullptr;
  Dict<Str*, Str*>* aliases = nullptr;
  grammar::Grammar* oil_grammar = nullptr;
  parse_lib::ParseContext* parse_ctx = nullptr;
  alloc::Arena* comp_arena = nullptr;
  parse_lib::Trail* trail1 = nullptr;
  parse_lib::ParseContext* comp_ctx = nullptr;
  alloc::Arena* hist_arena = nullptr;
  parse_lib::Trail* trail2 = nullptr;
  parse_lib::ParseContext* hist_ctx = nullptr;
  cmd_eval::Deps* cmd_deps = nullptr;
  process::JobState* job_state = nullptr;
  process::FdState* fd_state = nullptr;
  int my_pid;
  Str* debug_path = nullptr;
  Str* debug_dir = nullptr;
  util::_DebugFile* debug_f = nullptr;
  util::_DebugFile* trace_f = nullptr;
  dev::Tracer* tracer = nullptr;
  pyos::SignalSafe* signal_safe = nullptr;
  builtin_trap::TrapState* trap_state = nullptr;
  process::Waiter* waiter = nullptr;
  Str* interp = nullptr;
  state::SearchPath* search_path = nullptr;
  process::ExternalProgram* ext_prog = nullptr;
  split::SplitContext* splitter = nullptr;
  glob_::Globber* globber = nullptr;
  Str* crash_dump_dir = nullptr;
  completion::Lookup* comp_lookup = nullptr;
  completion::OptionState* compopt_state = nullptr;
  comp_ui::State* comp_ui_state = nullptr;
  comp_ui::PromptState* prompt_state = nullptr;
  state::DirStack* dir_stack = nullptr;
  Dict<int, vm::_Builtin*>* builtins = nullptr;
  Dict<Str*, bool>* modules = nullptr;
  executor::ShellExecutor* shell_ex = nullptr;
  sh_expr_eval::ArithEvaluator* arith_ev = nullptr;
  sh_expr_eval::BoolEvaluator* bool_ev = nullptr;
  expr_eval::OilEvaluator* expr_ev = nullptr;
  word_eval::NormalWordEvaluator* word_ev = nullptr;
  Dict<int, vm::_AssignBuiltin*>* assign_b = nullptr;
  cmd_eval::CommandEvaluator* cmd_ev = nullptr;
  prompt::Evaluator* prompt_ev = nullptr;
  sh_expr_eval::UnsafeArith* unsafe_arith = nullptr;
  builtin_misc::MapFile* mapfile = nullptr;
  builtin_meta::Source* source_builtin = nullptr;
  builtin_comp::SpecBuilder* spec_builder = nullptr;
  builtin_comp::Complete* complete_builtin = nullptr;
  history::Evaluator* hist_ev = nullptr;
  syntax_asdl::source_t* src = nullptr;
  reader::_Reader* line_reader = nullptr;
  mylib::LineReader* stdin = nullptr;
  mylib::LineReader* f = nullptr;
  cmd_parse::CommandParser* c_parser = nullptr;
  Str* home_dir = nullptr;
  Str* rc_path = nullptr;
  main_loop::Headless* loop = nullptr;
  int status;
  List<int>* box = nullptr;
  Str* history_filename = nullptr;
  word_eval::CompletionWordEvaluator* ev = nullptr;
  completion::RootCompleter* root_comp = nullptr;
  int term_width;
  comp_ui::_IDisplay* display = nullptr;
  prompt::UserPlugin* prompt_plugin = nullptr;
  syntax_asdl::command_t* node = nullptr;
  StackRoots _roots({&lang, &arg_r, &environ, &loader, &readline, &argv0, &attrs, &flag, &arena, &errfmt, &help_builtin, &no_str, &debug_stack, &dollar0, &frame0, &frame1, &script_name, &mem, &opt_hook, &parse_opts, &exec_opts, &mutable_opts, &version_str, &procs, &hay_state, &aliases, &oil_grammar, &parse_ctx, &comp_arena, &trail1, &comp_ctx, &hist_arena, &trail2, &hist_ctx, &cmd_deps, &job_state, &fd_state, &debug_path, &debug_dir, &debug_f, &trace_f, &tracer, &signal_safe, &trap_state, &waiter, &interp, &search_path, &ext_prog, &splitter, &globber, &crash_dump_dir, &comp_lookup, &compopt_state, &comp_ui_state, &prompt_state, &dir_stack, &builtins, &modules, &shell_ex, &arith_ev, &bool_ev, &expr_ev, &word_ev, &assign_b, &cmd_ev, &prompt_ev, &unsafe_arith, &mapfile, &source_builtin, &spec_builder, &complete_builtin, &hist_ev, &src, &line_reader, &stdin, &f, &c_parser, &home_dir, &rc_path, &loop, &box, &history_filename, &ev, &root_comp, &display, &prompt_plugin, &node});

  argv0 = arg_r->Peek();
  arg_r->Next();
  try {
    attrs = flag_spec::ParseMore(str1673, arg_r);
  }
  catch (error::Usage* e) {
    print_stderr(StrFormat("osh usage error: %s", e->msg));
    return 2;
  }
  flag = Alloc<arg_types::main>(attrs->attrs);
  arena = Alloc<alloc::Arena>();
  errfmt = Alloc<ui::ErrorFormatter>(arena);
  help_builtin = Alloc<builtin_misc::Help>(loader, errfmt);
  if (flag->help) {
    help_builtin->Run(shell_native::MakeBuiltinArgv(NewList<Str*>(std::initializer_list<Str*>{StrFormat("%s-usage", lang)})));
    return 0;
  }
  if (flag->version) {
    pyutil::ShowAppVersion(loader);
    return 0;
  }
  no_str = nullptr;
  debug_stack = Alloc<List<state::DebugFrame*>>();
  if (arg_r->AtEnd()) {
    dollar0 = argv0;
  }
  else {
    dollar0 = arg_r->Peek();
    frame0 = Alloc<state::DebugFrame>(dollar0, str1676, no_str, state::LINE_ZERO, 0, 0);
    debug_stack->append(frame0);
  }
  frame1 = Alloc<state::DebugFrame>(no_str, no_str, no_str, runtime::NO_SPID, 0, 0);
  debug_stack->append(frame1);
  script_name = arg_r->Peek();
  arg_r->Next();
  mem = Alloc<state::Mem>(dollar0, arg_r->Rest(), arena, debug_stack);
  opt_hook = Alloc<ShellOptHook>(readline);
  Tuple3<optview::Parse*, optview::Exec*, state::MutableOpts*> tup0 = state::MakeOpts(mem, opt_hook);
  parse_opts = tup0.at0();
  exec_opts = tup0.at1();
  mutable_opts = tup0.at2();
  mem->exec_opts = exec_opts;
  mutable_opts->Init();
  version_str = pyutil::GetVersion(loader);
  state::InitMem(mem, environ, version_str);
  procs = Alloc<Dict<Str*, runtime_asdl::Proc*>>();
  hay_state = Alloc<state::Hay>();
  if (attrs->show_options) {
    mutable_opts->ShowOptions(Alloc<List<Str*>>());
    return 0;
  }
  if (str_equals(lang, str1677)) {
    mutable_opts->SetAnyOption(str1678, true);
  }
  builtin_pure::SetOptionsFromFlags(mutable_opts, attrs->opt_changes, attrs->shopt_changes);
  aliases = Alloc<Dict<Str*, Str*>>();
  oil_grammar = pyutil::LoadOilGrammar(loader);
  if ((flag->one_pass_parse and !exec_opts->noexec())) {
    throw Alloc<error::Usage>(str1679);
  }
  parse_ctx = Alloc<parse_lib::ParseContext>(arena, parse_opts, aliases, oil_grammar, flag->one_pass_parse);
  comp_arena = Alloc<alloc::Arena>();
  comp_arena->PushSource(Alloc<source::Unused>(str1680));
  trail1 = Alloc<parse_lib::Trail>();
  comp_ctx = Alloc<parse_lib::ParseContext>(comp_arena, parse_opts, aliases, oil_grammar, true);
  comp_ctx->Init_Trail(trail1);
  hist_arena = Alloc<alloc::Arena>();
  hist_arena->PushSource(Alloc<source::Unused>(str1681));
  trail2 = Alloc<parse_lib::Trail>();
  hist_ctx = Alloc<parse_lib::ParseContext>(hist_arena, parse_opts, aliases, oil_grammar);
  hist_ctx->Init_Trail(trail2);
  cmd_deps = Alloc<cmd_eval::Deps>();
  cmd_deps->mutable_opts = mutable_opts;
  job_state = Alloc<process::JobState>();
  fd_state = Alloc<process::FdState>(errfmt, job_state, mem, nullptr, nullptr);
  my_pid = posix::getpid();
  debug_path = str1682;
  debug_dir = environ->get(str1683);
  if (flag->debug_file != nullptr) {
    debug_path = flag->debug_file;
  }
  else {
    if (debug_dir != nullptr) {
      debug_path = os_path::join(debug_dir, StrFormat("%d-osh.log", my_pid));
    }
  }
  if (len(debug_path)) {
    try {
      debug_f = Alloc<util::DebugFile>(fd_state->OpenForWrite(debug_path));
    }
    catch (OSError* e) {
      print_stderr(StrFormat("osh: Couldn't open %r: %s", debug_path, posix::strerror(e->errno_)));
      return 2;
    }
  }
  else {
    debug_f = Alloc<util::NullDebugFile>();
  }
  if (flag->xtrace_to_debug_file) {
    trace_f = debug_f;
  }
  else {
    trace_f = Alloc<util::DebugFile>(mylib::Stderr());
  }
  tracer = Alloc<dev::Tracer>(parse_ctx, exec_opts, mutable_opts, mem, trace_f);
  fd_state->tracer = tracer;
  signal_safe = pyos::InitSignalSafe();
  trap_state = Alloc<builtin_trap::TrapState>(signal_safe);
  waiter = Alloc<process::Waiter>(job_state, exec_opts, signal_safe, tracer);
  fd_state->waiter = waiter;
  cmd_deps->debug_f = debug_f;
  if (len(debug_path)) {
    mylib::print_stderr(StrFormat("Writing logs to %r", debug_path));
  }
  interp = environ->get(str1687, str1688);
  search_path = Alloc<state::SearchPath>(mem);
  ext_prog = Alloc<process::ExternalProgram>(interp, fd_state, errfmt, debug_f);
  splitter = Alloc<split::SplitContext>(mem);
  globber = Alloc<glob_::Globber>(exec_opts);
  crash_dump_dir = environ->get(str1689, str1690);
  cmd_deps->dumper = Alloc<dev::CrashDumper>(crash_dump_dir);
  comp_lookup = Alloc<completion::Lookup>();
  compopt_state = Alloc<completion::OptionState>();
  comp_ui_state = Alloc<comp_ui::State>();
  prompt_state = Alloc<comp_ui::PromptState>();
  dir_stack = Alloc<state::DirStack>();
  builtins = Alloc<Dict<int, vm::_Builtin*>>();
  modules = Alloc<Dict<Str*, bool>>();
  shell_ex = Alloc<executor::ShellExecutor>(mem, exec_opts, mutable_opts, procs, hay_state, builtins, search_path, ext_prog, waiter, tracer, job_state, fd_state, errfmt);
  shell_native::AddPure(builtins, mem, procs, modules, mutable_opts, aliases, search_path, errfmt);
  shell_native::AddIO(builtins, mem, dir_stack, exec_opts, splitter, parse_ctx, errfmt);
  shell_native::AddProcess(builtins, mem, shell_ex, ext_prog, fd_state, job_state, waiter, tracer, search_path, errfmt);
  builtins->set(builtin_i::help, help_builtin);
  builtins->set(builtin_i::bind, Alloc<builtin_lib::Bind>(readline, errfmt));
  builtins->set(builtin_i::history, Alloc<builtin_lib::History>(readline, mylib::Stdout()));
  arith_ev = Alloc<sh_expr_eval::ArithEvaluator>(mem, exec_opts, mutable_opts, parse_ctx, errfmt);
  bool_ev = Alloc<sh_expr_eval::BoolEvaluator>(mem, exec_opts, mutable_opts, parse_ctx, errfmt);
  // if not PYTHON
  {
    expr_ev = nullptr;
  }
  // endif MYCPP
  word_ev = Alloc<word_eval::NormalWordEvaluator>(mem, exec_opts, mutable_opts, splitter, errfmt);
  assign_b = shell_native::InitAssignmentBuiltins(mem, procs, errfmt);
  cmd_ev = Alloc<cmd_eval::CommandEvaluator>(mem, exec_opts, errfmt, procs, assign_b, arena, cmd_deps, trap_state, signal_safe);
  AddOil(builtins, mem, search_path, cmd_ev, errfmt, procs, arena);
  prompt_ev = Alloc<prompt::Evaluator>(lang, version_str, parse_ctx, mem);
  vm::InitCircularDeps(arith_ev, bool_ev, expr_ev, word_ev, cmd_ev, shell_ex, prompt_ev, tracer);
  unsafe_arith = Alloc<sh_expr_eval::UnsafeArith>(mem, exec_opts, mutable_opts, parse_ctx, arith_ev, errfmt);
  vm::InitUnsafeArith(mem, word_ev, unsafe_arith);
  builtins->set(builtin_i::printf, Alloc<builtin_printf::Printf>(mem, parse_ctx, unsafe_arith, errfmt));
  builtins->set(builtin_i::unset, Alloc<builtin_assign::Unset>(mem, procs, unsafe_arith, errfmt));
  builtins->set(builtin_i::eval, Alloc<builtin_meta::Eval>(parse_ctx, exec_opts, cmd_ev, tracer, errfmt));
  builtins->set(builtin_i::read, Alloc<builtin_misc::Read>(splitter, mem, parse_ctx, cmd_ev, errfmt));
  mapfile = Alloc<builtin_misc::MapFile>(mem, errfmt, cmd_ev);
  builtins->set(builtin_i::mapfile, mapfile);
  builtins->set(builtin_i::readarray, mapfile);
  source_builtin = Alloc<builtin_meta::Source>(parse_ctx, search_path, cmd_ev, fd_state, tracer, errfmt);
  builtins->set(builtin_i::source, source_builtin);
  builtins->set(builtin_i::dot, source_builtin);
  shell_native::AddMeta(builtins, shell_ex, mutable_opts, mem, procs, aliases, search_path, errfmt);
  shell_native::AddBlock(builtins, mem, mutable_opts, dir_stack, cmd_ev, shell_ex, hay_state, errfmt);
  spec_builder = Alloc<builtin_comp::SpecBuilder>(cmd_ev, parse_ctx, word_ev, splitter, comp_lookup, errfmt);
  complete_builtin = Alloc<builtin_comp::Complete>(spec_builder, comp_lookup);
  builtins->set(builtin_i::complete, complete_builtin);
  builtins->set(builtin_i::compgen, Alloc<builtin_comp::CompGen>(spec_builder));
  builtins->set(builtin_i::compopt, Alloc<builtin_comp::CompOpt>(compopt_state, errfmt));
  builtins->set(builtin_i::compadjust, Alloc<builtin_comp::CompAdjust>(mem));
  builtins->set(builtin_i::trap, Alloc<builtin_trap::Trap>(trap_state, parse_ctx, tracer, errfmt));
  hist_ev = Alloc<history::Evaluator>(readline, hist_ctx, debug_f);
  if (flag->c != nullptr) {
    src = Alloc<source::CFlag>();
    line_reader = reader::StringLineReader(flag->c, arena);
    if (flag->i) {
      mutable_opts->set_interactive();
    }
  }
  else {
    if (flag->i) {
      src = Alloc<source::Stdin>(str1691);
      line_reader = Alloc<reader::InteractiveLineReader>(arena, prompt_ev, hist_ev, readline, prompt_state);
      mutable_opts->set_interactive();
    }
    else {
      if (script_name == nullptr) {
        if (flag->headless) {
          src = Alloc<source::Headless>();
          line_reader = nullptr;
        }
        else {
          stdin = mylib::Stdin();
          if (stdin->isatty()) {
            src = Alloc<source::Interactive>();
            line_reader = Alloc<reader::InteractiveLineReader>(arena, prompt_ev, hist_ev, readline, prompt_state);
            mutable_opts->set_interactive();
          }
          else {
            src = Alloc<source::Stdin>(str1692);
            line_reader = Alloc<reader::FileLineReader>(stdin, arena);
          }
        }
      }
      else {
        src = Alloc<source::MainFile>(script_name);
        try {
          f = fd_state->Open(script_name);
        }
        catch (IOError_OSError* e) {
          print_stderr(StrFormat("osh: Couldn't open %r: %s", script_name, posix::strerror(e->errno_)));
          return 1;
        }
        line_reader = Alloc<reader::FileLineReader>(f, arena);
      }
    }
  }
  if (flag->location_str != nullptr) {
    src = Alloc<source::Synthetic>(flag->location_str);
    if (flag->location_start_line != -1) {
      line_reader->SetLineOffset(flag->location_start_line);
    }
  }
  arena->PushSource(src);
  c_parser = parse_ctx->MakeOshParser(line_reader);
  home_dir = pyos::GetMyHomeDir();
  rc_path = flag->rcfile;
  if (rc_path == nullptr) {
    rc_path = os_path::join(home_dir, StrFormat(".config/oil/%src", lang));
  }
  if (flag->headless) {
    state::InitInteractive(mem);
    mutable_opts->set_redefine_proc();
    mutable_opts->set_redefine_module();
    _InitDefaultCompletions(cmd_ev, complete_builtin, comp_lookup);
    {  // with
      state::ctx_ThisDir ctx{mem, rc_path};

      try {
        SourceStartupFile(fd_state, rc_path, lang, parse_ctx, cmd_ev, errfmt);
      }
      catch (util::UserExit* e) {
        return e->status;
      }
    }
    loop = Alloc<main_loop::Headless>(cmd_ev, parse_ctx, errfmt);
    try {
      status = loop->Loop();
    }
    catch (util::UserExit* e) {
      status = e->status;
    }
    box = NewList<int>(std::initializer_list<int>{status});
    cmd_ev->MaybeRunExitTrap(box);
    status = box->index_(0);
    return status;
  }
  history_filename = os_path::join(home_dir, StrFormat(".config/oil/history_%s", lang));
  if (exec_opts->interactive()) {
    state::InitInteractive(mem);
    mutable_opts->set_emacs();
    mutable_opts->set_redefine_proc();
    mutable_opts->set_redefine_module();
    if (readline) {
      ev = Alloc<word_eval::CompletionWordEvaluator>(mem, exec_opts, mutable_opts, splitter, errfmt);
      ev->arith_ev = arith_ev;
      ev->expr_ev = expr_ev;
      ev->prompt_ev = prompt_ev;
      ev->CheckCircularDeps();
      root_comp = Alloc<completion::RootCompleter>(ev, mem, comp_lookup, compopt_state, comp_ui_state, comp_ctx, debug_f);
      term_width = 0;
      if (maybe_str_equals(flag->completion_display, str1696)) {
        try {
          term_width = libc::get_terminal_width();
        }
        catch (IOError*) {
          ;  // pass
        }
      }
      if (term_width != 0) {
        display = Alloc<comp_ui::NiceDisplay>(term_width, comp_ui_state, prompt_state, debug_f, readline, signal_safe);
      }
      else {
        display = Alloc<comp_ui::MinimalDisplay>(comp_ui_state, prompt_state, debug_f);
      }
      comp_ui::InitReadline(readline, history_filename, root_comp, display, debug_f);
      _InitDefaultCompletions(cmd_ev, complete_builtin, comp_lookup);
    }
    else {
      display = Alloc<comp_ui::MinimalDisplay>(comp_ui_state, prompt_state, debug_f);
    }
    trap_state->InitInteractiveShell(display, my_pid);
    {  // with
      state::ctx_ThisDir ctx{mem, rc_path};

      try {
        SourceStartupFile(fd_state, rc_path, lang, parse_ctx, cmd_ev, errfmt);
      }
      catch (util::UserExit* e) {
        return e->status;
      }
    }
    line_reader->Reset();
    prompt_plugin = Alloc<prompt::UserPlugin>(mem, parse_ctx, cmd_ev, errfmt);
    try {
      status = main_loop::Interactive(flag, cmd_ev, c_parser, display, prompt_plugin, errfmt);
    }
    catch (util::UserExit* e) {
      status = e->status;
    }
    box = NewList<int>(std::initializer_list<int>{status});
    cmd_ev->MaybeRunExitTrap(box);
    status = box->index_(0);
    if (readline) {
      try {
        readline->write_history_file(history_filename);
      }
      catch (IOError*) {
        ;  // pass
      }
    }
    return status;
  }
  if (flag->rcfile != nullptr) {
    print_stderr(str1697);
  }
  if (exec_opts->noexec()) {
    status = 0;
    try {
      node = main_loop::ParseWholeFile(c_parser);
    }
    catch (error::Parse* e) {
      errfmt->PrettyPrintError(e);
      status = 2;
    }
    if (status == 0) {
      ui::PrintAst(node, flag);
    }
  }
  else {
    {  // with
      state::ctx_ThisDir ctx{mem, script_name};

      try {
        status = main_loop::Batch(cmd_ev, c_parser, errfmt, cmd_eval::IsMainProgram);
      }
      catch (util::UserExit* e) {
        status = e->status;
      }
    }
    box = NewList<int>(std::initializer_list<int>{status});
    cmd_ev->MaybeRunExitTrap(box);
    status = box->index_(0);
  }
  return status;
}

}  // define namespace shell

namespace builtin_bracket {  // define

using id_kind_asdl::Id;
using runtime_asdl::value;
using syntax_asdl::loc;
using syntax_asdl::word;
using syntax_asdl::word_e;
using syntax_asdl::word_t;
using syntax_asdl::word__String;
using syntax_asdl::bool_expr;
using types_asdl::lex_mode_e;
using pyerror::e_usage;
using pyerror::p_die;

_StringWordEmitter::_StringWordEmitter(runtime_asdl::cmd_value__Argv* cmd_val)  {
  FIELD_MASK(header_) |= _StringWordEmitter::field_mask();
  this->cmd_val = cmd_val;
  this->i = 0;
  this->n = len(cmd_val->argv);
}

syntax_asdl::word__String* _StringWordEmitter::ReadWord(types_asdl::lex_mode_t unused_lex_mode) {
  syntax_asdl::word__String* w = nullptr;
  Str* s = nullptr;
  int left_spid;
  int id_;
  StackRoots _roots({&w, &s});

  if (this->i == this->n) {
    w = Alloc<word::String>(Id::Eof_Real, str1698, runtime::NO_SPID);
    return w;
  }
  s = this->cmd_val->argv->index_(this->i);
  left_spid = this->cmd_val->arg_spids->index_(this->i);
  this->i += 1;
  id_ = match::BracketUnary(s);
  if (id_ == Id::Undefined_Tok) {
    id_ = match::BracketBinary(s);
  }
  if (id_ == Id::Undefined_Tok) {
    id_ = match::BracketOther(s);
  }
  if (id_ == Id::Undefined_Tok) {
    id_ = Id::Word_Compound;
  }
  w = Alloc<word::String>(id_, s, left_spid);
  return w;
}

syntax_asdl::word__String* _StringWordEmitter::Read() {
  return this->ReadWord(lex_mode_e::ShCommand);
}

Str* _StringWordEmitter::Peek(int offset) {
  return this->cmd_val->argv->index_((this->i + offset));
}

void _StringWordEmitter::Rewind(int offset) {
  this->i -= offset;
}

_WordEvaluator::_WordEvaluator() : word_eval::StringWordEvaluator() {
}

runtime_asdl::value__Str* _WordEvaluator::EvalWordToString(syntax_asdl::word_t* w, int eval_flags) {
  StackRoots _roots({&w});

  word__String* string_word = static_cast<word__String*>(w);
  return Alloc<value::Str>(string_word->s);
}

syntax_asdl::bool_expr_t* _TwoArgs(builtin_bracket::_StringWordEmitter* w_parser) {
  syntax_asdl::word__String* w0 = nullptr;
  syntax_asdl::word__String* w1 = nullptr;
  Str* s0 = nullptr;
  int unary_id;
  StackRoots _roots({&w_parser, &w0, &w1, &s0});

  w0 = w_parser->Read();
  w1 = w_parser->Read();
  s0 = w0->s;
  if (str_equals(s0, str1699)) {
    return Alloc<bool_expr::LogicalNot>(Alloc<bool_expr::WordTest>(w1));
  }
  unary_id = Id::Undefined_Tok;
  if (w0->s->startswith(str1700)) {
    if (str_equals(s0, str1701)) {
      unary_id = Id::BoolUnary_d;
    }
    else {
      if (str_equals(s0, str1702)) {
        unary_id = Id::BoolUnary_e;
      }
      else {
        if (str_equals(s0, str1703)) {
          unary_id = Id::BoolUnary_f;
        }
        else {
          if (str_equals(s0, str1704)) {
            unary_id = Id::BoolUnary_L;
          }
        }
      }
    }
  }
  if (unary_id == Id::Undefined_Tok) {
    unary_id = match::BracketUnary(w0->s);
  }
  if (unary_id == Id::Undefined_Tok) {
    p_die(StrFormat("Expected unary operator, got %r (2 args)", w0->s), Alloc<loc::Word>(w0));
  }
  return Alloc<bool_expr::Unary>(unary_id, w1);
}

syntax_asdl::bool_expr_t* _ThreeArgs(builtin_bracket::_StringWordEmitter* w_parser) {
  syntax_asdl::word__String* w0 = nullptr;
  syntax_asdl::word__String* w1 = nullptr;
  syntax_asdl::word__String* w2 = nullptr;
  int binary_id;
  syntax_asdl::bool_expr_t* child = nullptr;
  StackRoots _roots({&w_parser, &w0, &w1, &w2, &child});

  w0 = w_parser->Read();
  w1 = w_parser->Read();
  w2 = w_parser->Read();
  binary_id = match::BracketBinary(w1->s);
  if (binary_id != Id::Undefined_Tok) {
    return Alloc<bool_expr::Binary>(binary_id, w0, w2);
  }
  if (str_equals(w1->s, str1706)) {
    return Alloc<bool_expr::LogicalAnd>(Alloc<bool_expr::WordTest>(w0), Alloc<bool_expr::WordTest>(w2));
  }
  if (str_equals(w1->s, str1707)) {
    return Alloc<bool_expr::LogicalOr>(Alloc<bool_expr::WordTest>(w0), Alloc<bool_expr::WordTest>(w2));
  }
  if (str_equals(w0->s, str1708)) {
    w_parser->Rewind(2);
    child = _TwoArgs(w_parser);
    return Alloc<bool_expr::LogicalNot>(child);
  }
  if ((str_equals(w0->s, str1709) and str_equals(w2->s, str1710))) {
    return Alloc<bool_expr::WordTest>(w1);
  }
  p_die(StrFormat("Expected binary operator, got %r (3 args)", w1->s), Alloc<loc::Word>(w1));
}

Test::Test(bool need_right_bracket, optview::Exec* exec_opts, state::Mem* mem, ui::ErrorFormatter* errfmt)  {
  FIELD_MASK(header_) |= Test::field_mask();
  this->need_right_bracket = need_right_bracket;
  this->exec_opts = exec_opts;
  this->mem = mem;
  this->errfmt = errfmt;
}

int Test::Run(runtime_asdl::cmd_value__Argv* cmd_val) {
  List<Str*>* strs = nullptr;
  builtin_bracket::_StringWordEmitter* w_parser = nullptr;
  bool_parse::BoolParser* b_parser = nullptr;
  syntax_asdl::bool_expr_t* bool_node = nullptr;
  int n;
  syntax_asdl::word__String* w = nullptr;
  Str* a0 = nullptr;
  syntax_asdl::bool_expr_t* child = nullptr;
  builtin_bracket::_WordEvaluator* word_ev = nullptr;
  sh_expr_eval::BoolEvaluator* bool_ev = nullptr;
  bool b;
  int status;
  StackRoots _roots({&cmd_val, &strs, &w_parser, &b_parser, &bool_node, &w, &a0, &child, &word_ev, &bool_ev});

  if (this->need_right_bracket) {
    if (this->exec_opts->simple_test_builtin()) {
      e_usage(str1712);
    }
    strs = cmd_val->argv;
    if ((!strs or !(str_equals(strs->index_(-1), str1713)))) {
      this->errfmt->Print_(str1714, cmd_val->arg_spids->index_(0));
      return 2;
    }
    cmd_val->argv->pop();
    cmd_val->arg_spids->pop();
  }
  w_parser = Alloc<_StringWordEmitter>(cmd_val);
  w_parser->Read();
  b_parser = Alloc<bool_parse::BoolParser>(w_parser);
  bool_node = nullptr;
  n = (len(cmd_val->argv) - 1);
  if ((this->exec_opts->simple_test_builtin() and n > 3)) {
    e_usage(str1715);
  }
  try {
    if (n == 0) {
      return 1;
    }
    else {
      if (n == 1) {
        w = w_parser->Read();
        bool_node = Alloc<bool_expr::WordTest>(w);
      }
      else {
        if (n == 2) {
          bool_node = _TwoArgs(w_parser);
        }
        else {
          if (n == 3) {
            bool_node = _ThreeArgs(w_parser);
          }
        }
      }
    }
    if (n == 4) {
      a0 = w_parser->Peek(0);
      if (str_equals(a0, str1716)) {
        w_parser->Read();
        child = _ThreeArgs(w_parser);
        bool_node = Alloc<bool_expr::LogicalNot>(child);
      }
      else {
        if ((str_equals(a0, str1717) and str_equals(w_parser->Peek(3), str1718))) {
          w_parser->Read();
          bool_node = _TwoArgs(w_parser);
        }
        else {
          ;  // pass
        }
      }
    }
    if (bool_node == nullptr) {
      bool_node = b_parser->ParseForBuiltin();
    }
  }
  catch (error::Parse* e) {
    this->errfmt->PrettyPrintError(e, str1719);
    return 2;
  }
  word_ev = Alloc<_WordEvaluator>();
  bool_ev = Alloc<sh_expr_eval::BoolEvaluator>(this->mem, this->exec_opts, nullptr, nullptr, this->errfmt, true);
  bool_ev->word_ev = word_ev;
  bool_ev->CheckCircularDeps();
  try {
    b = bool_ev->EvalB(bool_node);
  }
  catch (error::_ErrorWithLocation* e) {
    this->errfmt->PrettyPrintError(e, str1720);
    return 2;
  }
  status = b ? 0 : 1;
  return status;
}

}  // define namespace builtin_bracket

int main(int argc, char **argv) {
  mylib::InitCppOnly();  // Initializes gHeap

  auto* args = Alloc<List<Str*>>();
  for (int i = 0; i < argc; ++i) {
    args->append(StrFromC(argv[i]));
  }

  int status = oils_for_unix::main(args);

  gHeap.FastProcessExit();

  return status;
}
