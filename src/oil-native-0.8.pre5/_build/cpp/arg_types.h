// arg_types.h is generated by frontend/arg_gen.py

#ifndef ARG_TYPES_H
#define ARG_TYPES_H

#include "frontend_arg_def.h"  // for FlagSpec_c
#include "mylib.h"

namespace value_e = runtime_asdl::value_e;
using runtime_asdl::value__Bool;
using runtime_asdl::value__Str;

namespace arg_types {

class export_ {
 public:
  export_(Dict<Str*, runtime_asdl::value_t*>* attrs) :
    f(static_cast<value__Bool*>(attrs->index(new Str("f")))->b),
    n(static_cast<value__Bool*>(attrs->index(new Str("n")))->b),
    p(static_cast<value__Bool*>(attrs->index(new Str("p")))->b) {
  }
  bool f;
  bool n;
  bool p;
};

class new_var {
 public:
  new_var(Dict<Str*, runtime_asdl::value_t*>* attrs) :
    A(static_cast<value__Bool*>(attrs->index(new Str("A")))->b),
    F(static_cast<value__Bool*>(attrs->index(new Str("F")))->b),
    a(static_cast<value__Bool*>(attrs->index(new Str("a")))->b),
    f(static_cast<value__Bool*>(attrs->index(new Str("f")))->b),
    g(static_cast<value__Bool*>(attrs->index(new Str("g")))->b),
    n(attrs->index(new Str("n"))->tag_() == value_e::Undef
      ? nullptr
      : static_cast<value__Str*>(attrs->index(new Str("n")))->s),
    p(static_cast<value__Bool*>(attrs->index(new Str("p")))->b),
    r(attrs->index(new Str("r"))->tag_() == value_e::Undef
      ? nullptr
      : static_cast<value__Str*>(attrs->index(new Str("r")))->s),
    x(attrs->index(new Str("x"))->tag_() == value_e::Undef
      ? nullptr
      : static_cast<value__Str*>(attrs->index(new Str("x")))->s) {
  }
  bool A;
  bool F;
  bool a;
  bool f;
  bool g;
  Str* n;
  bool p;
  Str* r;
  Str* x;
};

class readonly {
 public:
  readonly(Dict<Str*, runtime_asdl::value_t*>* attrs) :
    A(static_cast<value__Bool*>(attrs->index(new Str("A")))->b),
    a(static_cast<value__Bool*>(attrs->index(new Str("a")))->b),
    p(static_cast<value__Bool*>(attrs->index(new Str("p")))->b) {
  }
  bool A;
  bool a;
  bool p;
};

class unset {
 public:
  unset(Dict<Str*, runtime_asdl::value_t*>* attrs) :
    f(static_cast<value__Bool*>(attrs->index(new Str("f")))->b),
    v(static_cast<value__Bool*>(attrs->index(new Str("v")))->b) {
  }
  bool f;
  bool v;
};

extern FlagSpec_c kFlagSpecs[];

}  // namespace arg_types

#endif  // ARG_TYPES_H

