// This code is generated by pgen2/grammar.py

namespace grammar_nt {
  const int augassign = 256;
  const int and_expr = 257;
  const int and_test = 258;
  const int arg_group = 259;
  const int arglist = 260;
  const int arglist3 = 261;
  const int argument = 262;
  const int arith_expr = 263;
  const int array_item = 264;
  const int atom = 265;
  const int braced_var_sub = 266;
  const int char_literal = 267;
  const int class_literal = 268;
  const int class_literal_term = 269;
  const int comma_newline = 270;
  const int command_expr = 271;
  const int comp_for = 272;
  const int comp_op = 273;
  const int comparison = 274;
  const int dict = 275;
  const int dict_pair = 276;
  const int dq_string = 277;
  const int eggex = 278;
  const int end_stmt = 279;
  const int expr = 280;
  const int factor = 281;
  const int lambdef = 282;
  const int lhs_list = 283;
  const int literal_expr = 284;
  const int name_type = 285;
  const int name_type_list = 286;
  const int not_test = 287;
  const int old_sh_array_literal = 288;
  const int or_test = 289;
  const int param = 290;
  const int param_group = 291;
  const int pat_else = 292;
  const int pat_exprs = 293;
  const int place_trailer = 294;
  const int power = 295;
  const int range_char = 296;
  const int range_expr = 297;
  const int re_alt = 298;
  const int re_atom = 299;
  const int re_flag = 300;
  const int regex = 301;
  const int repeat_op = 302;
  const int repeat_range = 303;
  const int sh_array_literal = 304;
  const int sh_command_sub = 305;
  const int shift_expr = 306;
  const int simple_var_sub = 307;
  const int splat_expr = 308;
  const int sq_string = 309;
  const int subscript = 310;
  const int subscriptlist = 311;
  const int term = 312;
  const int test = 313;
  const int testlist = 314;
  const int testlist_comp = 315;
  const int trailer = 316;
  const int type_expr = 317;
  const int xor_expr = 318;
  const int ysh_case_pat = 319;
  const int ysh_eager_arglist = 320;
  const int ysh_expr = 321;
  const int ysh_expr_sub = 322;
  const int ysh_func = 323;
  const int ysh_lazy_arglist = 324;
  const int ysh_mutation = 325;
  const int ysh_proc = 326;
  const int ysh_var_decl = 327;

}  // namespace grammar_nt
